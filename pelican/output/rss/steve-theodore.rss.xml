<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>static_site_test</title><link>/</link><description></description><atom:link href="/rss/steve-theodore.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 26 Mar 2016 15:34:00 -0700</lastBuildDate><item><title>mGui updates in the offing...</title><link>/mGui-updates-in-the-offing....html</link><description>&lt;p&gt;For those of you who've been using &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt; to speed up and simplify your Maya gui coding, there are some interesting changes on the horizon. Although I'm not entirely ready to release the changes I have in mind they are mostly sitting in &lt;a href="https://github.com/theodox/mGui/tree/remove_keys"&gt;their own branch in the Github repo&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The upcoming version introduces some new idioms - in particular, it gets rid of the need for explicitly setting keys on new controls to get access to nested properties. In the first version of mGui you'd write something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    with gui.Window(&amp;#39;window&amp;#39;, title = &amp;#39;fred&amp;#39;) as example_window:  
        with VerticalForm(&amp;#39;main&amp;#39;) as main:  
            Text(None, label = &amp;quot;Items without vertex colors&amp;quot;)  
            lists.VerticalList(&amp;#39;lister&amp;#39; ).Collection &amp;lt; bind() &amp;lt; bound    
            with HorizontalStretchForm(&amp;#39;buttons&amp;#39;):  
                Button(&amp;#39;refresh&amp;#39;, l=&amp;#39;Refresh&amp;#39;)  
                Button(&amp;#39;close&amp;#39;, l=&amp;#39;Close&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the new refactor that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    with gui.Window(&amp;#39;window&amp;#39;, title = &amp;#39;fred&amp;#39;) as example_window:  
        with VerticalForm() as main:  
            Text(label = &amp;quot;Items without vertex colors&amp;quot;)  
            lister = lists.VerticalList()  
            lister.collection &amp;lt; bind() &amp;lt; bound    
            with HorizontalStretchForm() as button_row:  
                refresh = Button( label=&amp;#39;Refresh&amp;#39;)  
                close = Button(label=&amp;#39;Close&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The big advantage here is that those local variables are not scoped exclusively to the layout context managers where they live, which makes it easy to control when and where you hook up your event handlers: In the above example you could defer all the bindings and event handlers to the end of the script like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    with gui.Window(&amp;#39;window&amp;#39;, title = &amp;#39;fred&amp;#39;) as example_window:  
        with VerticalForm() as main:  
            Text(label = &amp;quot;Items without vertex colors&amp;quot;)  
            lister = lists.VerticalList()  
            with HorizontalStretchForm() as button_row:  
                refresh = Button( label=&amp;#39;Refresh&amp;#39;)  
                close = Button(label=&amp;#39;Close&amp;#39;)

    lister.collection &amp;lt; bind() &amp;lt; bound  
    refresh.command += refresh_def  
    close.command += close_def
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far I'm really liking the new idiom, particularly eliminating the extra quotes and redundant &lt;code&gt;None&lt;/code&gt; keys. However this is a minorly breaking change: in some cases, old code which relied on the key value to name and also label a control at the same time will when the keys become redundant. Moreover I bit the bullet and started to refactor the entire mGui module to use correct pep-8 naming conventions - in particular, member variables are &lt;em&gt;no longer capitalized&lt;/em&gt;. So if you have code outside of mGui this will introduce some issues. When I converted my own code, most of the changes could be done with a regular expression but there were a few danglers.&lt;/p&gt;
&lt;p&gt;I think the changes are worth the effort, but I'd be really interested in hearing from users before trying to bring the new mGui branch back into the main line. It should actually be possible to write a script that fixes most existing code automatically, that's something we could refine collaboratively.Please let me know in the comments or by opening an issue on the GitHub site if you have comments or plans. As always, bug fixes and pull requests always entertained!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 26 Mar 2016 15:34:00 -0700</pubDate><guid>tag:,2016-03-26:mGui-updates-in-the-offing....html</guid></item><item><title>Another Year, Another GDC...</title><link>/Another-Year,-Another-GDC....html</link><description>&lt;p&gt;It doesn’t take much super-secret industry-insider special knowledge to know that the big story this year was VR, VR and more VR – if the you had somehow managed to miss out on the pre-show hype the giant black Oculus booth looming like the Death Star right over the entrance to the expo floor told pretty much the whole story in one glance.   &lt;/p&gt;
&lt;p&gt;&lt;a href="https://gdc.tech.ubm.com/eventAssets/gameev_2016_151009160527/image/gdc16_logo-color.png"&gt;&lt;img alt="" src="https://gdc.tech.ubm.com/eventAssets/gameev_2016_151009160527/image/gdc16_logo-color.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is, however, interesting to note how cynical we’ve become as an industry about tech bubbles: from MMOs to Facebook games to In-app purchases and 3-D TVs, we’ve all lived through so many Next Big Things that we habitually reserve judgement – even on things like the latest crop of VR gear which sets our little nerdly hearts a-fluttering. I had a lot of conversations with people on the general theme of &lt;em&gt;“wow, that’s cool. In three years most of them will be out of business, though.”&lt;/em&gt; – even with people in the VR business itself. &lt;br /&gt;
Personally, I think VR is going to survive but I don’t think it’ll be the kind of world-changing, ubiquitous tech that the broadband internet and handhelds have turned out to be. It’s an awesome geek toy and the gateway to many interesting and novel experiences. I see it sort of like that kayak in the garage: a cool thing that gets dusted off a few times a year but not a regular part of daily life, and never going to buffed up to the high consumerist gloss of an iPhone. Maybe in another decade, but for now it’s a really cool niche product. I hope all that crazy money sloshing around in VR land fuels some general purpose innovation : in particular, I hope that VR’s need for screaming framerates in two renders at once may make hardware that is more performant overall and also for split-screen friendly deferred rendering.&lt;br /&gt;
In the actual, as opposed to the virtual, world the highlight of the show for me is always the TA roundtables. It’s such a great resource for the community, and a chance for folks who often live a bit outside the main stream of their development teams to get together with people who share their unique and esoteric pain. Those three roundtables are the only room full of people who will chuckle at jokes about MaxScript and who truly appreciate the hopeless pathos of sending emails about proper check-in procedures to a team of artists. As always, hats off to &lt;a href="https://plus.google.com/116461271591099938175"&gt;+Jeff Hanna&lt;/a&gt;  for running the roundtables and also the TA Bootcamp, which I had to miss this year but sounded really good. I’m anxiously awaiting the release of the talks I missed on the &lt;a href="http://www.gdcvault.com/play/1021806/Art-Direction-Bootcamp-Technical-Art"&gt;GDC Vault&lt;/a&gt;.&lt;br /&gt;
In these annual roundups I usually try to note the size and intensity of the job market. This year was kind of difficult to gauge. The big mega-booths from mega-teams were largely absent this year: I didn’t see many of the long lines of students queuing up to show their portfolios to Blizzard, Bungie, or 343. On the other hand the general commercial tempo seemed pretty up beat. I think this reflects the general trend away from big, highly institutionalized teams and toward smaller, more agile (but also more fragile) groupings: the job market is more fragmented but not necessarily smaller than in years gone by. I could be wrong about that one, though – this might just be a mid-console-cycle lull.&lt;br /&gt;
To all the folks I saw down at the show – it was awesome! To those who didn’t make it this year – don’t miss it next time!  &lt;/p&gt;
&lt;p&gt;PS - one important thing that came out of the round table is that more and more people are signing up to the &lt;a href="http://tech-artists.org/forum/showthread.php?5748-Tech-Artists-Org-is-now-on-Slack!"&gt;Tech artists slack channel&lt;/a&gt;.  If you're not already a member, follow that link to sign up.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 20 Mar 2016 14:43:00 -0700</pubDate><guid>tag:,2016-03-20:Another-Year,-Another-GDC....html</guid></item><item><title>Interesting graphics and animation research</title><link>/Interesting-graphics-and-animation-research.html</link><description>&lt;p&gt;This page is a list of interesting,  maybe not-quite-ready-real time graphics and animation tech that I'm keeping an eye on. Should be growing over time.  &lt;/p&gt;
&lt;h4&gt;Rendering&lt;/h4&gt;
&lt;p&gt;Anybody in games should be interested in the fate of &lt;a href="http://ptex.us/"&gt;Ptex&lt;/a&gt;, the no-uvs, variable resolution texturing system from Disney and used in, for example, &lt;a href="http://www.thefoundry.co.uk/products/mari/"&gt;Mari&lt;/a&gt;.  So far, it's not ready for runtime graphics. but &lt;a href="https://developer.nvidia.com/sites/default/files/akamai/gamedev/docs/Borderless%20Ptex.pdf"&gt;this Nvidia slideset&lt;/a&gt; discusses a realtime implementation.  It claims to be only 15% slower than a UV mapped alternative - while saving about 18% of texture memory.  I'll believe it when I see it, but i &lt;em&gt;want&lt;/em&gt; to believe. ( &lt;strong&gt;Update: &lt;/strong&gt;&lt;em&gt;I went over this with our residence graphics genius and he doesn't think it'll fly, even on XBone / PS4 class hardware)&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;A &lt;a href="http://diglib.eg.org/EG/DL/PE/VMV/VMV12/063-070.pdf.abstract.pdf;internal&amp;amp;action=action.digitallibrary.ShowPaperAbstract"&gt;GPU Gem&lt;/a&gt; on doing hardware aging of materials using GPU particles. Can't wait to see this get out from behind the paywall!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.disneyresearch.com/project/joint-importance-sampling/"&gt;Joint Importance Sampling&lt;/a&gt;: a paper from Disney on a better way to render path-traced media like fog or water.  Claims to increase render times 1000x for little change in quality! And it's &lt;em&gt;still&lt;/em&gt; too slow for games :)  &lt;/p&gt;
&lt;p&gt;A &lt;a href="http://ppsloan.org/publications/mrtSA.pdf"&gt;new(ish) paper&lt;/a&gt; from &lt;a href="http://ppsloan.org/"&gt;Peter-Pike Sloan&lt;/a&gt; proposing a method for low-res, realtime friendly pseudo gi lighting.  The new hardware generation is not going to make realtime GI happen with &lt;a href="http://cg.ibds.kit.edu/publications/p2011/DGIWTCLPV_Kaplanyan_2011/DGIWTCLPV_Kaplanyan_2011.html"&gt;the current techniques,&lt;/a&gt; so new ways of looking at GI are important.  &lt;/p&gt;
&lt;p&gt;Also from PPS and Bungie, a review of the &lt;a href="http://ppsloan.org/publications/BungieBake.pdf"&gt;hardware-based AO bake system used on Destiny&lt;/a&gt;.  Note that in this example "AO" is "ambient obscurance" rather than "ambient occlusion" - obscurance accounts for distance to light sources, where as tradtional occlusion is dimensionless.  &lt;/p&gt;
&lt;p&gt;A neat paper from Sebastian Lagarde on &lt;a href="http://seblagarde.wordpress.com/2012/12/10/observe-rainy-world/"&gt;rendering wet surfaces in a physically based environment&lt;/a&gt;.  &lt;a href="http://seblagarde.wordpress.com/"&gt;Seb's blog&lt;/a&gt; is a top-notch reference for anybody doing Physically based rendering (which means most of us by about 2015)  &lt;/p&gt;
&lt;h4&gt;Animation&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://grail.cs.washington.edu/projects/motion-fields/motion-fields.pdf"&gt;Motion fields&lt;/a&gt;  "Motion graphs" - basically efficiently seaming together  a desired set of Mocap data  - has been a big deal in academia for a long time, but it's never caught on in games due to the Prince of Persia problem: it's too realistic and thus not responsive enough. This work from the graphics group at UW is an interesting slant on making this more reactive.  Unfortunately @ZoranPopovic has largely moved on to education from animation, but his &lt;a href="http://homes.cs.washington.edu/~zoran/"&gt;group's page at UW &lt;/a&gt;has a lot of interesting work from the last 5-6 years.  &lt;/p&gt;
&lt;p&gt;I'm a huge fan of Kevin Wampler's work on procededural animation. &lt;a href="http://grail.cs.washington.edu/projects/animal-morphology/s2009/"&gt;This paper&lt;/a&gt; from 2009 describes a (slow, offline, but _cool) _process for generating decent gaits for arbitrarily shaped creatures. Check out the &lt;a href="http://grail.cs.washington.edu/projects/animal-morphology/s2009/movs/morphology.avi"&gt;videos&lt;/a&gt; (note: big download, requires divx).  &lt;a href="http://www.staff.science.uu.nl/~geijt101/papers/SA2013/"&gt;This one&lt;/a&gt; from the Netherlands is a similar optimization based approach to bipeds only - the big wrinkle being that everything in this one runs on simulated muscle networks rather than pure joint motors. Fun stuff!  &lt;/p&gt;
&lt;p&gt;This is an &lt;a href="http://www.cc.gatech.edu/~jtan34/project/softBodyLocomotion.html"&gt;interesting paper from Karen Liu's group at Georgia Tech&lt;/a&gt;, featuring soft body simulation done with a combination of finite element modeling and a muscle fiber system. Soft body animation remains a pretty black art, it would be great if it catches on in realtime-friendly ways. Not holding my breath, alas.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://aigamedev.com/open/access/overgrowth/"&gt;This talk from the developer of Overgrowh &lt;/a&gt;is an interesting look at hybrid physical-kinematic animations, a sort of  'Euphoria Lite'.  Some related references from &lt;a href="http://aigamedev.com/open/editorial/animation-revolution/"&gt;AIGameDev&lt;/a&gt;.  Also related is &lt;a href="http://www.gdcvault.com/search.php#&amp;amp;category=free&amp;amp;firstfocus=&amp;amp;keyword=lico&amp;amp;conference_id="&gt;Rick Lico's talk from GDC 2014&lt;/a&gt; about the Destiny animation system (GDC vault paywall).  &lt;/p&gt;
&lt;h4&gt;Procedural worlds&lt;/h4&gt;
&lt;p&gt;I'm very interested in procedural worlds for &lt;a href="http://www.ign.com/articles/2013/04/16/4-hours-in-state-of-decays-open-world-zombie-nightmare"&gt;obvious reasons&lt;/a&gt;.  It's an area that's got enornous potential but has been moving very slowly in the game side of things.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://hss.ulb.uni-bonn.de/2013/3124/3124.pdf"&gt;The early chapters of this dissertation&lt;/a&gt; provides a decent overview of lots of the terminology and existing work in the field  &lt;/p&gt;
&lt;p&gt;There's &lt;a href="http://www.esri.com/software/cityengine"&gt;CityEngine, &lt;/a&gt; which looks good if you're looking at city size data sets (and it &lt;a href="http://www.esri.com/software/cityengine/features"&gt;supports python&lt;/a&gt;!)  There are a lot of nice procedural terrain packages but they all look very fractal-y to me  nowadays; it was impressive in &lt;em&gt;Wrath of Khan&lt;/em&gt; but hasn't moved on much since. The most interesting terrain paper I've seen in a while is &lt;a href="http://hpcg.purdue.edu/?page=publication&amp;amp;id=170"&gt;this one&lt;/a&gt;, which uses rivers as the structural basis for terrain generation..  &lt;/p&gt;
&lt;p&gt;A &lt;a href="https://www.cs.purdue.edu/cgvlab/urban/urban-procedural-modeling.html"&gt;collection of papers from Purdue&lt;/a&gt; on procedural land use - thing like zoning and road layout. Some of this looks pretty handy.   If it gets scary, just remember 'markov chain'  is math-speak for 'state machine', more or less.  The other fun aspect is their efforts to  'inverse model' the stuff they study - to turn real data into the data their model uses.  &lt;/p&gt;
&lt;h3&gt;Meshes, models, and surfaces&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.cs.columbia.edu/~keenan/Projects/GloballyOptimalDirectionFields/paper.pdf"&gt;This paper from Columbia&lt;/a&gt; promises an optimal way of establishing surface flow across arbitrary surfaces. This is interesting for a couple of reasons - it might be an interesting improvement to mesh-based navigation, and it might also lead to alternate methods of automatic UV generation. &lt;/p&gt;
&lt;p&gt;A &lt;a href="http://www.cs.berkeley.edu/~jrs/meshpapers/ShefferPraunRose.pdf"&gt;decent roundup of mesh parameterization techniques&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 06 Mar 2016 11:40:00 -0800</pubDate><guid>tag:,2016-03-06:Interesting-graphics-and-animation-research.html</guid></item><item><title>A touch of minq</title><link>/A-touch-of-minq.html</link><description>&lt;p&gt;If you’re a long-time reader, you may recall that i’m very ambivalent about &lt;a href="http://techartsurvival.blogspot.com/2015/07/blockquote-background-f9f9f9-border.html"&gt;wrapper code&lt;/a&gt;. I’m just as prone to adding my own little spoonful of syntax sugar on top of my daily tasks, but I’ve also been around long enough to be a bit cynical about my own various faddisms and dubious style choices over the years. Sure, extra typing is annoying – but nowadays I tend to set a pretty high bar for actually writing wrapper code instead of just, ya know, doing my actual &lt;em&gt;job&lt;/em&gt;.&lt;br /&gt;
So, it’s with a little bit of trepidation that I’m sharing my latest library. &lt;strong&gt;&lt;a href="https://github.com/theodox/minq"&gt;Minq&lt;/a&gt;&lt;/strong&gt; bills itself as ‘a query language for Maya scenes.’ The goal is to simplify a very common task for Maya coders: finding things in a scene.&lt;br /&gt;
Now, that isn’t a particularly interesting job most of the time, but it’s one we do a &lt;em&gt;lot&lt;/em&gt;: a quick grep of my own codebase shows over 600 calls to &lt;code&gt;cmds.ls()&lt;/code&gt;, &lt;code&gt;cmds.listRelatives()&lt;/code&gt;, &lt;code&gt;cmds.listHistory&lt;/code&gt; and &lt;code&gt;cmds.nodeType()&lt;/code&gt; in various combinations: as far as I can tell, &lt;code&gt;ls()&lt;/code&gt; is actually the single most common call I make. &lt;br /&gt;
Moreover, I’m reasonably certain (though I didn’t do the grepping to bear this out) that those hundreds of &lt;code&gt;ls()&lt;/code&gt; calls are accompanied by hundreds of little snippets of code to deal with Maya’s quirks. How often have you run into little gems like this?  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    stuff = [&amp;#39;top&amp;#39;, &amp;#39;something_thats_not_transform&amp;#39;]  
    print cmds.ls(*stuff, type=&amp;#39;transform&amp;#39;)  
    # [u&amp;#39;top&amp;#39;]

    stuff = []  
    print cmds.ls(*stuff, type=&amp;#39;transform&amp;#39;)  
    # [u&amp;#39;front&amp;#39;, u&amp;#39;persp&amp;#39;, u&amp;#39;side&amp;#39;, u&amp;#39;top&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or this?  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    for item in cmds.ls(my_meshes, type=&amp;#39;mesh&amp;#39;):  
        print item  
    # Error: &amp;#39;NoneType&amp;#39; object is not iterable  
    # Traceback (most recent call last):  
    #   File &amp;quot;&amp;lt;maya console&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;  
    # TypeError: &amp;#39;NoneType&amp;#39; object is not iterable #
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are of course ways around these little gotchas - but given the number of times you have to interact with them it’s hard to be sure you’ve really nailed them all. In my case a 99% correct handlong of my &lt;code&gt;ls()&lt;/code&gt; calls alone will produce at least 5 bugs.&lt;br /&gt;
More importantly – and, frankly, the whole reason for this project – dealing with these little gotchas is not an &lt;em&gt;interesting&lt;/em&gt; job. Finding, filter and sorting stuff in your Maya scene is not am opportunity for you to display your brilliant algorithms or clever strategies for bending Maya to your will: it’s just a bunch of stuff you have to on your way to fixing the problems your users really want fixed.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#minq-in-action"&gt;&lt;/a&gt;Minq in action&lt;/h2&gt;
&lt;p&gt;Hence, &lt;a href="https://github.com/theodox/minq"&gt;minq&lt;/a&gt;. &lt;br /&gt;
The goal of minq is to provide a more concise and more readable way to find things in your maya scenes. Here’s an example to give you the idea of how the project is supposed to work.&lt;br /&gt;
Suppose you need to find all of your character skeletons and distinguish them from other things lying around in the scene. The easy way to do that is usually to look for assemblies (top level nodes) which have children who drive skinClusters. Here’s an example of how you could find all the root nodes in the scene which drive skins using conventional means:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def find_assemblies_that_drive_skins():  
    skinned = []  
    for asm in cmds.ls(assemblies=True) or []:  
        children = cmds.listRelatives(asm, ad=True) or []  
        history = cmds.listHistory(children, future=True)  
        if history and cmds.ls(history, type=&amp;#39;skinCluster&amp;#39;):  
            skinned.append(asm)  
    return skinned
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You’ll notice the littering of &lt;code&gt;or []&lt;/code&gt; to make sure we don’t get errors for failed queries. We have to create two temporary variables (&lt;code&gt;childen&lt;/code&gt; and &lt;code&gt;history&lt;/code&gt;) in order to store the intermediate results. And, obviously, we’re 3 layers deep when we get to the actual work item. &lt;br /&gt;
Above all, though, you need to remember two little bits of Maya trivia to make sense of this code: that &lt;code&gt;cmds.ls(asm=True)&lt;/code&gt; means ‘give me the assemblies’ and that &lt;code&gt;listRelatives(ad=True)&lt;/code&gt; gives you the children of an object. These are, of course, very clear to Maya vets – but there are over 50 flags in &lt;code&gt;ls()&lt;/code&gt; and more than a dozen in &lt;code&gt;listRelatives()&lt;/code&gt; . I’ve been working in Maya for 20 years and I still need to look up most of them. You pass those flags to Maya as strings which won’t get evaluated until runtime – and it’s possible to mistype them and not even know because &lt;code&gt;ls()&lt;/code&gt;, in particular, makes wierd tweaky decisions about how to interpret conflicting flags.&lt;br /&gt;
Here’s the minq equivalent to the previous function:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def drives_skin(some_object):  
    children = using(some_object).get(AllChildren)  
    skin_clusters = children.get(Future).only(SkinClusters)  
    return any(skin_clusters)

unskinned_assemblies = Assemblies().where(drives_skin)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It’s shorter, but the real goal is to make it more readable. Here’s what happens, which should be pretty clear from the names:&lt;br /&gt;
1. &lt;code&gt;drives_skin()&lt;/code&gt; takes a maya object&lt;br /&gt;
2. It gets all of that object’s children&lt;br /&gt;
3. It gets all of the future history of those children&lt;br /&gt;
4. It it filters down to only the skin clusters in that future history&lt;br /&gt;
5. it returns true if any skin clusters are present&lt;br /&gt;
The rest of it pretty self evident: &lt;code&gt;unskinned_assemblies&lt;/code&gt; just collects all of the assemblies which pass &lt;code&gt;drives_skin()&lt;/code&gt;. The &lt;em&gt;algorithm&lt;/em&gt; is exactly the same as the first version – but, at least to me, that algorithm is actually expressed much more clearly in the minq version. As for concision, I deliberately broke the query into two lines to make it easier to read -- otherwise it could all be done in a single expression.&lt;br /&gt;
A purist will probably point out that there are important under-the-hood details in the first one that are hidden in the second, and s/he’d be right. However after doing a lot of this kind of code down the years I’m fairly certain that those important details have almost always been important because screwing them up causes problems – not because they provide an opportunity for a wizardly optimization or better approach to the problem. I’m interested in finding unskinned meshes, not in remembering to pass the correct flags to &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;listRelatives&lt;/code&gt;.&lt;br /&gt;
Here’s a couple of other examples to give you the flavor of what a minq query looks like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# get all mesh transforms in a scene  
mesh_transforms =  Meshes().get(Parents)

# find stub joints  
def is_stub(obj):  
    return not any (using(obj).get(Children).only(Transforms))  
stubs = Joints().where(is_stub)

# filtering by type, by name, and with functions  
cube_creator_nodes = PolyCreators().only(&amp;#39;polyCube&amp;#39;)  
used_to_be_cubes = cube_creator_nodes.get(Future).only(Meshes)  
has_8_verts = lambda p: cmds.polyEvaluate(p, v=True) == 8  
still_are_cubes = used_to_be_cubes.where(has_8_verts)

# adding, subtracting or intersecting queries

too_high = Transforms().where(item.ty &amp;gt; 100)  
too_low = Transforms().where(item.ty &amp;lt; -100)

middle_xforms = Transforms() - (too_high + too_low)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, that’s the basic idea: to replace a lot of tedious boilerplate with something a little cleaner, more predictable and easier to maintain. The code for the whole thing is up on &lt;a href="https://github.com/theodox/minq"&gt;up on Github&lt;/a&gt; under the usual MIT, ‘use it as you like but keep the copyright header’ license. It’s still very much a work-in-progress and I’d love feedback, particularly on issues of syntax and style. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 06 Mar 2016 09:02:00 -0800</pubDate><guid>tag:,2016-03-06:A-touch-of-minq.html</guid></item><item><title>Technical Art for Art Directors</title><link>/Technical-Art-for-Art-Directors.html</link><description>&lt;p&gt;I noticed that my 2015 GDC talk, &lt;a href="http://www.gdcvault.com/play/1021806/Art-Direction-Bootcamp-Technical-Art"&gt;Technical Art For Art Directors&lt;/a&gt;,  is currently up on the GDC Vault and is not behind the paywall.  If you've been struggling to explain what you do, you might find this one useful:  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://3.bp.blogspot.com/-NznutU-ZoJA/Vtt0XRPAm0I/AAAAAAABNYc/YkgrX_U8iCc/s1600/ta-ad.jpg"&gt;&lt;img alt="" src="https://3.bp.blogspot.com/-NznutU-ZoJA/Vtt0XRPAm0I/AAAAAAABNYc/YkgrX_U8iCc/s640/ta-ad.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 05 Mar 2016 16:06:00 -0800</pubDate><guid>tag:,2016-03-05:Technical-Art-for-Art-Directors.html</guid></item><item><title>The little things</title><link>/The-little-things.html</link><description>&lt;p&gt;It’s the little things that really matter in life.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tshirtbordello.com/images/rule-32-enjoy-little-things-s3.jpg"&gt;&lt;img alt="" src="http://www.tshirtbordello.com/images/rule-32-enjoy-little-things-s3.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you’ve ever spent any time wrestling with Maya distribution, you’ve probably noticed that &lt;code&gt;userSetup.py&lt;/code&gt; executes in an odd fashion: it’s not a module that gets imported, it’s basically a series of statements that get executed when Maya fires up. Unfortunately that also means that most of the usual strategies you’d use in python to find out &lt;em&gt;where&lt;/em&gt;, exactly, you are running from is problematic. The usual python tricks like &lt;code&gt;__file__&lt;/code&gt; don’t work; and most of the time asking for &lt;code&gt;os.getcwd()&lt;/code&gt; will point at your Maya program directory. Usually you end up running around looking at all the directories where Maya might be stashing a &lt;code&gt;userSetup&lt;/code&gt; and trying to figure out which one is the one you are in`. It’s ugly.&lt;br /&gt;
However today, I &lt;em&gt;&lt;strong&gt;actually found one which works&lt;/strong&gt;&lt;/em&gt;. At least, I haven’t figured out how to break it yet.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;  
&lt;span class="n"&gt;USER_SETUP_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentframe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since I’ve tried to figure this one out on at least a hundred previous occasions, I am feeling unduly smug about this one. &lt;br /&gt;
PS, if you’re wondering why I care: this makes it really easy to do a simple install/uninstall of a &lt;a href="http://techartsurvival.blogspot.com/2014/07/save-environment-2-i-am-egg-man.html"&gt;&lt;code&gt;userSetup.py&lt;/code&gt; / &lt;code&gt;userSetup.zip&lt;/code&gt; combo&lt;/a&gt; with no environment variables or special rules. &lt;br /&gt;
PPS: Take that, Maya!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 18 Feb 2016 19:27:00 -0800</pubDate><guid>tag:,2016-02-18:The-little-things.html</guid></item><item><title>The Memory Hole</title><link>/The-Memory-Hole.html</link><description>&lt;p&gt;We tend to be the kind of people who throw themselves into things – we live for the joy of problem solving. So when we’re really grappling with the intricacies of todays disaster, we immerse ourselves in it. We tear it apart and inspect all the little moving pieces till we understand it well enough to duct-tape it back together again.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ocinside.de/media/uploads/less_memory_4.jpg"&gt;&lt;img alt="" src="http://www.ocinside.de/media/uploads/less_memory_4.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Along the way, that attention to detail and mastery of nuance tends to make us think we know it all. But – a shock, I know – we don’t. More to the point, we might now it all &lt;em&gt;for the moment&lt;/em&gt;. But we’ll dump that knowledge to make sure we have room for our encyclopedic knowledge of tomorrow’s problem. And next week’s. And next months.&lt;br /&gt;
In short, we’re constantly flushing our caches. Unless you’re stuck in a rut, doing the same thing every day, you’re constantly learning new little things for your current problem and silently shelving the knowledge you aquired for your last.&lt;br /&gt;
This is one reason why good code comments are so important. Sure, comments rot just like code. But a couple of well-placed notes about how and why the code looks the way it does can save future you a lot of time when many layers of memory recycling have left you completeley oblivious about what the hell past you was up to. I can easily think of a couple of embarrassing occasions where I’ve literally chased my own tail – done something non-obvious because of a wierd maya bug, then come back six month later to ‘clean up’ my ‘ugly code’ and of course hit the exact same bug again. &lt;br /&gt;
Of course, good comments don’t have to have high literary quality, they don’t need to cover every variable and for loop, and they certainly don’t need to be overwhelming: what they should be is notes to future-self that will help him or her revive all the fading memories which seem so obvious today but which will be utterly erased before the next season of &lt;em&gt;Silicon Valley&lt;/em&gt; is released.&lt;br /&gt;
Which brings me, by a &lt;em&gt;very&lt;/em&gt; roundabout route, to what I actually set out to talk about: a perfect case in point. I was noodling around with a system that needed to fire events for maya attribute changes: basically, a way to make &lt;code&gt;attributeChanged&lt;/code&gt; scriptJobs that were easy to start, stop and restart. So I did a little googling and… &lt;br /&gt;
Yep. I’d already written it. I’d even &lt;a href="https://github.com/theodox/attributeEvents"&gt;put it up on Github&lt;/a&gt;.&lt;br /&gt;
In my defense, I realized in retrospect that I had cancelled the project at work that made it necessary the first time: I did the work on the system, got it ready to go, and then decided that there was a simpler way to solve the problem without all those attribute-change scripts anyway. Nonetheless it’s a perfect illustration of how thoroughly one’s short-term memory cache gets flushed – and of the importance of leaving good comments. At least when I found the damn thing the readme that Github makes you put up reminded me how it was supposed to work (as an aside, it’s a great reason for putting your stuff up on GitHub or similar forums: knowing that other people will be looking at it forces you to clean up and document more than you would if you just decided to shelve a project).&lt;br /&gt;
So there you have it: an object lesson in the importance of clarity in tools development &lt;em&gt;and&lt;/em&gt; a free module for messing around with AttributeChange scriptJobs!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 06 Feb 2016 19:50:00 -0800</pubDate><guid>tag:,2016-02-06:The-Memory-Hole.html</guid></item><item><title>For my homies</title><link>/For-my-homies.html</link><description>&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-RZtbJhpL0Ds/Vq-LmkPaLjI/AAAAAAABNSk/i2R7KWtnOi4/s1600/Slack%2Bfor%2BiOS%2BUpload.png.jpeg"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-RZtbJhpL0Ds/Vq-LmkPaLjI/AAAAAAABNSk/i2R7KWtnOi4/s640/Slack%2Bfor%2BiOS%2BUpload.png.jpeg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hat tip: Matt Heiniger&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 01 Feb 2016 08:46:00 -0800</pubDate><guid>tag:,2016-02-01:For-my-homies.html</guid></item><item><title>Some fixups for sfx</title><link>/Some-fixups-for-sfx.html</link><description>&lt;p&gt;I've posted &lt;a href="https://github.com/theodox/sfx/commits/master"&gt;a couple of fixes&lt;/a&gt; to the code for the &lt;a href="http://techartsurvival.blogspot.com/2016/01/first-module-of-year.htmlDone"&gt;shaderfx module&lt;/a&gt; I posted a little while ago.  &lt;a href="https://plus.google.com/116374315761191190711"&gt;+Sophie Brennan&lt;/a&gt; spotted a problem with the way that module handled some kinds of nodes -- which I had assumed were just plain old objects but which were in fact buttoned-up group nodes.  Since they didn't use the same method to report their outputs as the rest of shaderfx they could not easily be created or connected using the module.  &lt;/p&gt;
&lt;p&gt;Luckily  &lt;a href="https://plus.google.com/115746724358684308496"&gt;+Kees Rijnen&lt;/a&gt;, the main author of shaderfx, noticed the blog post and helpfully  pointed me at the source of the problem which I've included in a fix.   &lt;/p&gt;
&lt;p&gt;If you are using the original version of the code this may be a breaking change.  To unify the way that individual nodes and groups are connected,  I changed the connect() and disconnect() methods to take only two arguments where they previously took 4.  In the first pass you would write  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;network.connect( node1, node1.outputs.xyz, node2, node2.inputs.rgb)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which was needlessly wordy.  So connect() and disconnect() now sport the cleaner, simpler syntax  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;network.connect(node1.outputs.xyz,   node2.inputs.rgb)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As always, comments and pulls are encouraged!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 29 Jan 2016 00:52:00 -0800</pubDate><guid>tag:,2016-01-29:Some-fixups-for-sfx.html</guid></item><item><title>First module of the year!</title><link>/First-module-of-the-year!.html</link><description>&lt;p&gt;It's been a busy few months at work, and the blogging has been pretty light. But I promised some folks on the Tech-Artists.org slack that I'd share some code for dealing with Mays's ShaderFX system: a very useful toolkit but not the best documented or automatable part of Maya. Since it's New Years' Resolution time, I thought I'd kill two birds with one stone and put up some notes to go with the code&lt;br /&gt;
All of shaderfx in maya is organized by a single, undocumented command. Which is pretty lame. &lt;br /&gt;
However, it’s not as bad as it seems once you figure out the standard command form, which is always some variant of this form:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    shaderfx -sfxnode &amp;lt;shader node&amp;gt; -command &amp;lt;command&amp;gt; &amp;lt;node id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;sfxnode&lt;/code&gt; argument tells maya which sfx shader to work on. The &lt;code&gt;command&lt;/code&gt; flag indiciates an action and the &lt;code&gt;node id&lt;/code&gt; specifies an node in the network. Nodes are assigned an id in order of creation, with the firstnode after the root ordinarily being number 2 and so on – however the ids are not recycled so a network which has been edited extensively can have what look like random ids and there is no guarantee that the nodes will form a neat, continuous order. &lt;br /&gt;
Many commands take additional arguments as well. Those extra always follow the main command; thus   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    shaderfx -n &amp;quot;StingrayPBS1&amp;quot; -edit_int 19 &amp;quot;uiorder&amp;quot; 1;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sets the value of the &lt;code&gt;uiorder&lt;/code&gt; field on node 19 to a value of 1. &lt;br /&gt;
The &lt;code&gt;shaderfx&lt;/code&gt; command can also return a value: to query the &lt;code&gt;uiorder&lt;/code&gt; field in the example above you’d issue   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    shaderfx -n &amp;quot;StingrayPBS1&amp;quot; -getPropertyValue 19 &amp;quot;uiorder&amp;quot;;  
    // Result: 1 //
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the good news is that the &lt;code&gt;shaderfx&lt;/code&gt; command is actually pretty capable: so far, at least, I have not found anything I really needed to do that the command did not support. For some reason the help documentation on the mel command is pretty sparse but the python version of the help text is actually quite verbose and useful.&lt;br /&gt;
Still, it’s kind of a wonky API: a single command for everything, and no way to really reason over a network as a whole. Worse, the different types of nodes are identified only by cryptic (and undocumented) numeric codes: for example a &lt;code&gt;Cosine&lt;/code&gt; node is 20205 – but the only way to find that out is to use the &lt;code&gt;getNodeTypeByClassName&lt;/code&gt; command (and, by the way, the node type names are case and space sensitive).  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#cleanup-crew"&gt;&lt;/a&gt;Cleanup crew&lt;/h1&gt;
&lt;p&gt;With all that baggage I was pretty discouraged about actually getting any work done using shaderfx programmatically. However a little poking around produced what I hope is a somewhat more logical API, which I’m &lt;a href="https://github.com/theodox/sfx"&gt;sharing on github&lt;/a&gt;.&lt;br /&gt;
The &lt;code&gt;sfx&lt;/code&gt; module is a plain python module - you can drop it into whatever location you use to story your Maya python scripts. It exposes two main classes:&lt;br /&gt;
&lt;em&gt;SFXNetwork&lt;/em&gt; represents a single shader network – it is a wrapper around the Maya shader ball. The &lt;code&gt;SFXNetwork&lt;/code&gt; contains an indexed list of all the nodes in the network and also exposes methods for adding, deleting, finding and connecting the nodes in the network.&lt;br /&gt;
&lt;em&gt;SFXNode&lt;/em&gt; represets a single node inside the network. It exposes the properties of the node so they can be accessed and edited using python dot-style syntax. &lt;br /&gt;
The module also includes to submodules, &lt;code&gt;sfxnodes&lt;/code&gt; and &lt;code&gt;pbsnodes&lt;/code&gt;. These make it easier to work with the zillions of custom node ids: Instead of remembering that a &lt;code&gt;Cosine&lt;/code&gt; node is type 20205, you reference &lt;code&gt;sfxnodes.Cosine&lt;/code&gt;. I’ll be using the &lt;code&gt;StingrayPBSNetwork&lt;/code&gt; class and the &lt;code&gt;pbsnodes&lt;/code&gt; submodule in my examples, since most of my actual use-case involves the Stingray PBS shader. The syntax and usage, however, are the same for the vanilla &lt;code&gt;SFXNetwork&lt;/code&gt; and &lt;code&gt;sfxnodes&lt;/code&gt; – only the array of node types and their properties.&lt;br /&gt;
Here’s a bit of the basic network functionality.   &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#create-a-network"&gt;&lt;/a&gt;Create a network&lt;/h1&gt;
&lt;p&gt;To create a new shaderfx network, use the &lt;code&gt;create&lt;/code&gt; classmethod:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sfx&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StingrayPBSNetwork&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sfx.pbsnodes&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pbsnodes&lt;/span&gt;

&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StingrayPBSNetwork&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new_shader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That creates a new shaderball (note that it won’t be connected to a shadingEngine by default – that’s up to you).  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#listing-nodes"&gt;&lt;/a&gt;Listing nodes&lt;/h1&gt;
&lt;p&gt;An SFXNetwork contains a dictionary of id and nodes in the field &lt;code&gt;nodes&lt;/code&gt;. This represents all of the graph nodes in the network. &lt;em&gt;Note I’ve used a different shader than the default one in this example to make things easier to read.&lt;/em&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print network.nodes  
# { 1 : &amp;lt;sfxNode UnlitBase (1)&amp;gt;, 2: &amp;lt;sfxNode &amp;#39;MaterialVariable&amp;#39; (2)&amp;gt; }

print network.nodes[2]:  
# &amp;lt;sfxNode &amp;#39;MaterialVariable&amp;#39; (2)&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The keys of the dictionary are the node ids. As already noted, these are not guaranteed to be in a continuous order depending on what you do to the network - however they are stable and they will always match the id numbers shown in the shaderfx ui when you activate the &lt;code&gt;show node IDs&lt;/code&gt; toggle in the ShaderFX window.&lt;br /&gt;
The values of the node dictionary are &lt;code&gt;SFXNode&lt;/code&gt; objects.  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#adding-new-nodes"&gt;&lt;/a&gt;Adding new nodes&lt;/h1&gt;
&lt;p&gt;To add a node to the network use its &lt;code&gt;add()&lt;/code&gt; method and pass a class from either the &lt;code&gt;sfxnodes&lt;/code&gt; or &lt;code&gt;pbsnodes&lt;/code&gt; submodule to indicate the type.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if_node = network.add(pbsnodes.If)  
# creates an If node and adds it to the network

var_node = network.add(pbsnodes.MaterialVariable)  
# creates a MaterialVariable node and adds it to the network
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#connecting-nodes"&gt;&lt;/a&gt;Connecting nodes&lt;/h1&gt;
&lt;p&gt;Connecting nodes in shaderfx requires specifying the source node the source plug, the target node and the target plug. Unforunately the plugs are indentifited by zero-based index numbers: the only way to know them by default is to count the slots in the actual shaderfx UI. Output plugs are usually (not always) going to be index zero but the target plugs can be all over the map.&lt;br /&gt;
To make this cleaner, each &lt;code&gt;SFXNode&lt;/code&gt; object exposes two fields called &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt;, which have named members for the available plugs. So to connect the ‘result’ output of the &lt;code&gt;var_node&lt;/code&gt; object to the input named ‘B’ on the &lt;code&gt;if_node&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;network.connect(var_node.outputs.result, if_node.inputs.b)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the connection can’t be made for some reason, a &lt;code&gt;MayaCommandError&lt;/code&gt; will be raised.&lt;br /&gt;
It’s common to have to ‘swizzle’ the connections: to connect the x and z channels of a 3-pronged output to channels of an input, for example. Mismatched swizzles are a common cause of those &lt;code&gt;MayaCommandErrores&lt;/code&gt;. You can set the swizzle along with the connection by passing the swizzle you need as a string  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;network.connect(var_node.outputs.result, if_node.inputs.b, &amp;#39;z&amp;#39;)  
# connects the &amp;#39;x&amp;#39; output of var_node  to the b channel of the input
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#setting-node-properties"&gt;&lt;/a&gt;Setting node properties&lt;/h1&gt;
&lt;p&gt;Nodes often have editable properties. There are a lot of different ones so it is often necessary to inspect a node and find out what properties it has and what type of values those properties accept. Every &lt;code&gt;SFXNode&lt;/code&gt; object has a read-only member &lt;code&gt;properties&lt;/code&gt;, which is a dictionary of names and property types. Using the same example objects as above:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print if_node.properties  
### BLah blah example here
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you know that a property exists on an object you can query it or set it using typical python dot syntax:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;node = network.properties[5]   
# get the node at index 5 in this network

print node.properties:  
# { &amp;#39;min&amp;#39;: &amp;#39;float&amp;#39;, &amp;#39;max&amp;#39;: &amp;#39;float&amp;#39;, &amp;#39;method&amp;#39;: &amp;#39;stringlist&amp;#39; }

print node.min  
# 1.0  
# getting a named property returns its value.

node.min = 2.0  
# sets the node value

print node.min  
# 2.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you try to access a property that doesnt exist, an error will be raised:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print node.i_dont_exist  
# AttributeError: no attribute named i_dont_exist

node.i_dont_exist = 99  
# MayaCommandError
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#help-wanted"&gt;&lt;/a&gt;Help wanted!&lt;/h1&gt;
&lt;p&gt;So, there’s the basics. This module is pretty simople but I’ve found it extremely helpful in workign with SFX nodes. It will be much easier to work with, of course, if you already know your way around ShaderFX. Please let me know how it works for you – and as always bug reports and pull requests are very welcome! &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 13 Jan 2016 23:35:00 -0800</pubDate><guid>tag:,2016-01-13:First-module-of-the-year!.html</guid></item><item><title>Grrrr..... Maya!!!</title><link>/Grrrr.....-Maya!!!.html</link><description>&lt;p&gt;Some kinds of pain are just occasional: you stub your toe or bump your head, ouch, and then its over. Other kinds of pain aren't as sharp or as sudden... but they're chronic.  That persistent twinge in your lower back may not hurt as much as a twisted ankle - but it's going to be there forever (at least unless you get in to power Yoga, or so my wife claims).&lt;br /&gt;
 Maya is old enough to have a few of those chronic pains, and I just ran in to one which -- once we debugged it and figured it out -- I realized has been a constant irritant for at least the last decade and if my creaky old memory does not lie was a distinct pain in the butt as long ago as 2002. In another context I might even have been able to diagnose it but instead we spent a ton of time and energy working around an unexpected behavior which is, in fact, purely standard Maya. It's &lt;em&gt;stupid&lt;/em&gt; Maya, but it's standard too.  Maya, alas, is &lt;strong&gt;double plus ungood&lt;/strong&gt; about mixing per-face and per-object material assignments. So, I figured I'd document this here for future sufferers: it might not ease the pain much, but at least you'll know you're not crazy.&lt;br /&gt;
 The basic problem is that assigning materials to faces and to objects use slightly different mechanisms. If you check your hypergraph you'll see that per-face assignments connect to their shadingGroup nodes through the &lt;code&gt;compInstObjectGroups[]&lt;/code&gt; attribute while object-level assigmemts go through the similar-but-not-identical &lt;code&gt;instObjectGroups&lt;/code&gt; attribute (if you're looking for these in the docs, the component cone is inherited from the &lt;a href="http://help.autodesk.com/cloudhelp/2016/ENU/Maya-Tech-Docs/Nodes/geometryShape.html"&gt;&lt;code&gt;geometryShape&lt;/code&gt;&lt;/a&gt; class and the object version comes from &lt;a href="http://help.autodesk.com/cloudhelp/2016/ENU/Maya-Tech-Docs/Nodes/dagNode.html"&gt;&lt;code&gt;dagNode&lt;/code&gt;&lt;/a&gt;).&lt;br /&gt;
 As long as you're working with one object at a time this isn't a problem. However, if you're duplicating or copy-pasting nodes, there's a gotcha:  If you ever try to merge meshes which have a mix of per-face and per-object assignments, Maya will magically "remember" old per-face assigments in the combined mesh.  If you're a masochist, here's the repro:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a object, give it a couple of different materials on different faces&lt;/li&gt;
&lt;li&gt;duplicate it a couple of times&lt;/li&gt;
&lt;li&gt;assign a per-object material to the duplicates, overriding the original per-face assignments&lt;/li&gt;
&lt;li&gt;combine all the meshes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Et voîla!&lt;/em&gt; The cloned meshes revert to their original assignments&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-WHA-mYamWSw/VjBfoXDF_4I/AAAAAAABMuY/BtrR34QPRhM/s1600/pasted_image_at_2015_10_23_05_32_pm_720.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-WHA-mYamWSw/VjBfoXDF_4I/AAAAAAABMuY/BtrR34QPRhM/s640/pasted_image_at_2015_10_23_05_32_pm_720.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What appears to happen is that those &lt;code&gt;compInstObjectGroups&lt;/code&gt; connections are driven by hidden &lt;code&gt;groupID&lt;/code&gt; nodes which don't get deleted when the per-face assignments are overridden by the per-object ones in step (3) .  They stick around even though they aren't being used, and when the mesh is combined they step right back into their original roles.  &lt;/p&gt;
&lt;p&gt;If you're doing this interactively it's an annoyance. If you're got tools that do things like auto-combine meshes to cut down on transform load in your game.... well, it's a source of some surprising bugs and equally surprising bursts of profanity.  But at least it'ss predictable.&lt;/p&gt;
&lt;p&gt;The workaround:  Before doing any mesh combination, delete the history and something harmless to this history of the meshes you're about to combine. (I use a triangulate step, since this happens only at export time) . That kills the rogue &amp;lt;code&amp;gt;groupID&amp;lt;/code&amp;gt; nodes and keeps the combined mesh looking the way you intended.&lt;/p&gt;
&lt;p&gt;Sheesh. What a way to make a living.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 27 Oct 2015 22:43:00 -0700</pubDate><guid>tag:,2015-10-27:Grrrr.....-Maya!!!.html</guid></item><item><title>Charcoal - it's smokin'!</title><link>/Charcoal---it's-smokin'!.html</link><description>&lt;p&gt;When you’re shopping around for something new – whether it’s a cool new piece of software or just a kitchen gadget – it’s not uncommon to tell yourself, “man, I wish I had thought of that.” But what’s really impressive is when you see a polished product and you say to yourself &lt;em&gt;Dammnit, I absolutely thought of that!&lt;/em&gt;, or &lt;em&gt;I’ve been wanting this exact thing for years!&lt;/em&gt;. It’s a rare thrill when you stumble across something that seems as if it were a gift from some future self, come back to give you exactly what you wanted in a way that only you, yourself could.&lt;br /&gt;
One of my coworkers found one of those little somethings the other day - a product that will make pretty much any TA go feel like Christmas came a little early. &lt;br /&gt;
The &lt;a href="http://zurbrigg.com/charcoal-editor"&gt;Charcoal Editor&lt;/a&gt; from &lt;a href="http://zurbrigg.com/about"&gt;Chris Zurbrigg&lt;/a&gt; is a slick, polished replacement for Maya’s script editor. It’s a plugin (available for Maya on Mac, Windows and Linux) that offers many of the features of a slick Python IDE right inside of Maya. Some of the key highlights include  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Syntax highlighing&lt;/li&gt;
&lt;li&gt;Autcomplete (including your own code and also the entire Maya cmds api)&lt;/li&gt;
&lt;li&gt;Smart indent and dedent&lt;/li&gt;
&lt;li&gt;Bracket matching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but the feature that will sell most Maya veterans instantly is the fact you can execute lines or scripts without the familiar &lt;strong&gt;Select &amp;gt; Enter&lt;/strong&gt; that has deleted countless lines of your test code down the ages.   &lt;/p&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/89196374"&gt;Charcoal Editor Overview&lt;/a&gt; from &lt;a href="https://vimeo.com/zurbrigg"&gt;Chris Zurbrigg&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That one feature alone would probably be worth the price for most people who do a lot of scripting. But the whole package is thoughtfully put together in a way that clearly says the author wrote a tool for himself – and that he shares a lot of the frustrations that have driven you and I bonkers for the last 18 years of Maya history. A great example is the addition of quick help for Maya commands: if you (like me) can never remember the difference between the flags for &lt;code&gt;listConnections&lt;/code&gt; and those for &lt;code&gt;listRelatives&lt;/code&gt;, Charcaol allows you to pop up a quick in-window help view or to open the relevant documentation in a browser: a welcome alternative to the maddening ritual of entering “cmds.whatever” into Chrome and being directed to the Maya 2011 Japanese docs by the mysterious imps of the internet. &lt;br /&gt;
In general, Charcoal shows a lot of attention to the nuances of scripting work. For example, it allows you to quickly toggle layouts: Charcoal allows you to quickly flip back and forth between the usual split view and a full panel of either script or history, so you don’t have to give up coding space to see your printouts or vice-versa. Likewise, you can set font sizes and color schemes for the scripting panel and the history panel separately – a big help if you want to save space on your printouts or if (like me) your eyes are going and you need to bump up the font size for coding. The history panel even supports highlighting – separating errors and warnings clearly from regular printouts, for example. All in all it’s a collection of small touches that offers a much-appreciated sense that the program has your back and that the author has wrestled with many of the same irritations you’ve had.&lt;br /&gt;
The product also ventures into territory that’s useally associated with full-fledged IDEs. It particular it offers an “outline view” which displays the classes and functions in the current scope - a big help for navigating around in a longish file, as well as a handy way to remember what you’re working with. There’s also a “project view” which displays all of the scripts in a project folder tree – more or less the same as the project views in &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; or &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; (two other scripter-friendly editors you should check out if you’ve never seen them.)&lt;br /&gt;
These IDE features will be very helpful for folks who’ve been soldiering on with nothing but the Maya script editor and Notepad. If you’re already using an IDE like &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;, &lt;a href="https://wingware.com/"&gt;Wing&lt;/a&gt;, or &lt;a href="http://microsoft.github.io/PTVS/"&gt;PTVS&lt;/a&gt; they may not be quite enough to wean you out of your fancy environment – particularly if you’r gotten used to using a real debugger instead of littering your code with print statements. Charcoal’s project features are functional but – given the nature of the task and the audience – are not as fancy as the equivalent features in big budget development environments. If you really prize the ablity to inifitely noodle on color themes, or a built-in style guide, you may find yourself wandering back to one of the bigger packages. That’s not a knock on Charcoal, though – it’s just a reminder that it’s a specialist tool for Maya users and not a general-purpose project management powerhouse.&lt;br /&gt;
For myself, I plan on sticking with PyCharm for long coding sessions (btw, PyCharm fans, you’ll be &lt;em&gt;incredibly&lt;/em&gt; pleased to hear that Charcoal allows cut and paste directly from PyCharm, unlike Maya’s wonky script editor. Whoop-de-doo!) However Charcoal more than justifies itself as a replacement for the vanilla script editor with a lot of juicy productivity features. I’ve already gotten a lot of productivity bounce by using &lt;a href="https://github.com/cmcpasserby/MayaCharm"&gt;MayaCharm&lt;/a&gt; to bypass the Maya script editor whenever possible – but I still spend quite a lot of time in the clunky old Maya pane nonetheless. I’ve got high hopes that Charcoal will save precious brain power for real problems and allow me to focus more on doing my job and less on frantically hitting Undo after my last attempt to execute a line accidentally erased an hour’s work. &lt;br /&gt;
Charcoal offers a free, non-saving demo; an individual license is $49 US (site licenses are available but you’ll have to negotiate them with the author).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 06 Oct 2015 22:40:00 -0700</pubDate><guid>tag:,2015-10-06:Charcoal---it's-smokin'!.html</guid></item><item><title>I don't endorse this...</title><link>/I-don't-endorse-this....html</link><description>&lt;p&gt;.. But I could not resist. The original title was &lt;em&gt;Automation comes from the Latin word meaning 'self', and 'mating', which means 'screwing&lt;/em&gt;'&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lh3.googleusercontent.com/-3a1UXfwg0rk/VfnomRM_Q_I/AAAAAAABMmc/VYrorxZyTMI/s640/blogger-image--1005462469.jpg"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/-3a1UXfwg0rk/VfnomRM_Q_I/AAAAAAABMmc/VYrorxZyTMI/s640/blogger-image--1005462469.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 16 Sep 2015 15:09:00 -0700</pubDate><guid>tag:,2015-09-16:I-don't-endorse-this....html</guid></item><item><title>It's that time again! GDC Call for submissions is open!</title><link>/It's-that-time-again!-GDC-Call-for-submissions-is-open!.html</link><description>&lt;p&gt;It's time again for GDC speakers to submit their proposals.  TA's have a long history of providing excellent talks at the main conference and at the Tech Art Bootcamp - so take some time to put together a proposal for this year's conference.   &lt;/p&gt;
&lt;p&gt;For more on why this is a Good Ideatm, check out &lt;a href="http://techartsurvival.blogspot.com/2014/08/submit.html"&gt;last year's post on the same topic&lt;/a&gt;.  One important note! This year the call for subs closes on August 27, &lt;strong&gt;NOT&lt;/strong&gt; August 28 as it is in the linked post !&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 15 Aug 2015 14:33:00 -0700</pubDate><guid>tag:,2015-08-15:It's-that-time-again!-GDC-Call-for-submissions-is-open!.html</guid></item><item><title>code wars</title><link>/code-wars.html</link><description>&lt;p&gt;By a certain stroke of cosmic irony, it was just after I finished shoe-horning lame &lt;em&gt;Star Wars&lt;/em&gt; jokes into my last post that I started to get obsessed with &lt;a href="http://www.codewars.com/"&gt;CodeWars&lt;/a&gt;, one of the plethora of competitive coding sites that have sprung up in the last few years.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-vc-eVNbzo1Q/VcZdEcRBhXI/AAAAAAABMag/NYI22iT0zro/s1600/cw.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-vc-eVNbzo1Q/VcZdEcRBhXI/AAAAAAABMag/NYI22iT0zro/s400/cw.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mostly I find that sort of thing pretty annoying – it’s a genre that all too easily degenerates into macho brogrammer chest-thumping. 90 percent of the code I see on those sites is so tightly knotted – in hopes of scoring fewest-number-of-lines bragging rights – that it’s useless for learning. I’m impressed as hell by this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f=lambda s:next((t,k)for t,k in map(lambda i:(s[:i],len(s)/i),range(1,len(s)+1))if t*k==s)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but I never want to have to &lt;em&gt;interact&lt;/em&gt; with it (Bonus points if you can tell what it does! Post your answer in the comments....)&lt;br /&gt;
The nice thing about Codewars is that the experience tends to push you into thinking about how to solve the problems, rather than how to maximize your score. I particularly like two things: first, the site includes a built-in test framework so you can do The Right Thingtm and write the tests before you write the code – not only is it a helpful touch for would-be problem solvers its very effective ‘propaganda of the deed’ for encouranging people to take tests seriours. Second, the site doesn’t just show you the ‘best’ solutions, it shows you all of them – and it allows you to vote both for solutions you think are clever and ones you think embody “best practices.” That snippet I posted above is extremely &lt;em&gt;clever&lt;/em&gt; but not a best practice – I wouldn’t let something like that into my codebase if I could avoid it! I’m not smart enough to unriddle such things, though I’m glad they exist.&lt;br /&gt;
The other nice thing is that most of the problems are bite-sized, the sort of thing you can chew on while waiting for a longish perforce sync to complete. It’s a great way to practice you coding chops outside all the gnarly things that come with working in a particular problems set for work. I’ve had a work task which involved me in a lot of 5-minute wait times this week and I found CodeWars to be a nice chance to do keep my brains warm while waiting for Perforce.&lt;br /&gt;
So, if you’re looking to sharpen up your coding skills you should definitely check out &lt;a href="http://www.codewars.com/"&gt;CodeWars&lt;/a&gt;. My username is &lt;em&gt;Theodox&lt;/em&gt; and in the goofy ninja-academy language of Codewars we can form an ‘alliance’ by following one another. We can make technical art a power in the land!&lt;br /&gt;
On the practical side: codewars supports Python, Javascript, and several other languages – they just added C#. It’s great way to get familiar with new syntaxes and to see how folks who know what they are doing tackle problems natively, it’s a great tool to pick up a new language on your own. Give it a shot!  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 08 Aug 2015 12:49:00 -0700</pubDate><guid>tag:,2015-08-08:code-wars.html</guid></item><item><title>Return of the namedtuples</title><link>/Return-of-the-namedtuples.html</link><description>&lt;p&gt;I’m sure you’ve read or written code that looks like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;results = some_function()  
for item in results:  
    cmds.setAttr(item[0] + &amp;quot;.&amp;quot; + item[1], item[2])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here &lt;code&gt;some_function&lt;/code&gt; must be using one of Python’s handiest features, the ability to return lists or tuples of different types in a single function. Python’s ability to return ‘whatever’ - a list, a tuple, or a single object – makes it easy to assemble a stream of data in one place and consume it in others wihout worrying about type declarations or creating a custom class to hold the results. Trying to create a similarly flexible system in, say, C# involves a lot of type-mongering. So it’s nice.&lt;br /&gt;
At least, it’s nice &lt;em&gt;at first&lt;/em&gt;. Unfortunately it’s got some serious drawbacks that will become apparent after a while – outside the context of a single script or function, relying entirely on indices to keep things straight is dangerous. As so often in Pythonia, freedom and flexibility can come at the cost of chaos downstream if you’re not careful.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcRd4-Lzu45urv3dmdng5DMjdlO-ILlLVxoa-HeHMZ8uczP4fLWC"&gt;&lt;img alt="" src="https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcRd4-Lzu45urv3dmdng5DMjdlO-ILlLVxoa-HeHMZ8uczP4fLWC" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#i-have-a-bad-feeling-about-this"&gt;&lt;/a&gt;I have a bad feeling about this…&lt;/h1&gt;
&lt;p&gt;Everything will be hunky-dory as long as &lt;code&gt;some_function&lt;/code&gt; continues to pack its output the same way. In this example &lt;code&gt;some_function&lt;/code&gt; is probably doing something like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# imagine some actual code here ...  
results = []  
for node in object_list  
    for attrib in attrib_list:  
        settable = is_attrib_settable(node, attrib)  
        if settable:  
           new_value = dict_of_defaults[attrib]  
           results.append ([node, attrib, new_value])  
return results
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inevitably, though, something will come along that causes the order of the results to change. In a Maya example like this, for example, the likely cause would be some other user of this function finding out that the code needs to set defaults on an unusual value type. &lt;code&gt;setAttr&lt;/code&gt; needs to be told what type of data to expect if things are unusual. &lt;br /&gt;
That being the case, your teammate extends &lt;code&gt;some_function&lt;/code&gt; to output the data type needed. If you’re lucky, the results look like &lt;code&gt;[node, attribute, value, type]&lt;/code&gt; and your existing code works fine. But if it changes to &lt;code&gt;[node, attribute, type, value]&lt;/code&gt; your existing code will break in wierd ways. Moreover if you haven’t written a lot of comments, the person fixing the bugs will have to sit down and deduce what &lt;code&gt;item[0]&lt;/code&gt;, &lt;code&gt;item[1]&lt;/code&gt; and &lt;code&gt;item[2]&lt;/code&gt; were supposed to be. &lt;br /&gt;
This example is a perfect illustration unit tests are such a nice thing to have in Python-land: a unit test would probably catch the change in signature right away, alerting your helpful co-worker to the can of worms they have opened up by changing the output of the function. But the real moral of the story is how dangerous it is to rely on implicit knowledge of structures – like the ordering of a list – instead of on explicit instructions. When somebody fails to understand the implications of that ordering, bad things will happen. When the knowledge you need to debug the problem is hidden, things will be&lt;br /&gt;
even worse.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://images6.fanpop.com/image/photos/36000000/Harrison-in-Star-Wars-Empire-strikes-back-harrison-ford-36029606-3257-2231.jpg"&gt;&lt;img alt="" src="http://images6.fanpop.com/image/photos/36000000/Harrison-in-Star-Wars-Empire-strikes-back-harrison-ford-36029606-3257-2231.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Sometimes things get complicated&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#return-classes-strike-back"&gt;&lt;/a&gt;Return classes strike back&lt;/h1&gt;
&lt;p&gt;In most languages the way around this is to create a class that holds the results of something like &lt;code&gt;some_function&lt;/code&gt;. A result class provides clear, named access to what’s going on:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;SomeFuncResult&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
     &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;node&lt;/span&gt;, &lt;span class="nb"&gt;attr&lt;/span&gt;, &lt;span class="n"&gt;val&lt;/span&gt;):  
         &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;node&lt;/span&gt; = &lt;span class="n"&gt;node&lt;/span&gt;  
         &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;attribute&lt;/span&gt; = &lt;span class="nb"&gt;attr&lt;/span&gt;  
         &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;value&lt;/span&gt; = &lt;span class="n"&gt;val&lt;/span&gt;

 &lt;span class="c c-Singleline"&gt;# and inside of some_function()  &lt;/span&gt;
...  
    &lt;span class="n"&gt;results&lt;/span&gt;.&lt;span class="n"&gt;append&lt;/span&gt;(&lt;span class="n"&gt;SomeFuncResult&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;, &lt;span class="n"&gt;attrib&lt;/span&gt;, &lt;span class="n"&gt;val&lt;/span&gt;))  
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This means the receiving code is much neater and easier to understand:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;results = some_function()  
for item in results:  
    cmds.setAttr(item.node+ &amp;quot;.&amp;quot; + item.attribute, item.value)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a better record of what you were trying to achieve in the first place, and it’s also much more survivable: as long as HelpfulCoworker01 does not actually rename the fields in the result object it can be tweaked and updated without causing problems.&lt;br /&gt;
For many cases this is the right way to go. However it comes with some drawbacks of its own. &lt;br /&gt;
First off – let’s be honest – there’s a lot of typing for something so dull. I always try to leave that out of the equation when I can - the time spent typing the code is such a tiny fraction of the time you’ll spend reading it that trying to save a few keystrokes is usually a Bad Idea (tm). However, typing 5 lines when you could just type a pair of bracket does feel like an imposition – particularly when the 5 lines are 100% boring boilerplate.&lt;br /&gt;
The second issue is that, being a class, &lt;code&gt;SomeFuncResult&lt;/code&gt; is comparatively expensive: it costs a smidge more in both memory and processor time than just a list or a tuple of values. I’m ranking this behind the typing costs because most of the time that increment of cost doesn’t matter at all: if you’re dealing with a few hundred or even a few thousand of them, at a time the costs for spinning up new instances of &lt;code&gt;SomeFuncResult&lt;/code&gt; just to hold data are going to be invisible to users. However if you are doing something more performance-intensive the costs of creating a full mutable object can be significant in large numbers. As always, &lt;a href="http://techartsurvival.blogspot.com/2015/04/the-right-profile.html"&gt;it’s wiser not to try to optimize until things are working&lt;/a&gt; but this is still a consideration worth recalling.&lt;br /&gt;
The last issue is that &lt;code&gt;SomeFuncResult&lt;/code&gt; can be changed in flight. Since it is a class, the data in a &lt;code&gt;SomeFuncResult&lt;/code&gt; can be updated (for you CS types, it is &lt;em&gt;mutable&lt;/em&gt;). This means some other piece of code that looks at the result object in between &lt;code&gt;some_function&lt;/code&gt; and you might can decide to mess with the results. That can be a feature or a bug depending on how you want to code it – but since Python does not have a built-in mechanism for locking fields in an object, you’d have to put in extra work to make sure the results didn’t get changed by accident if keeping the data pristine was mission-critical. You can use the a property decorator to make a fake read only field:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;SomeFuncResult&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
     &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;node&lt;/span&gt;, &lt;span class="nb"&gt;attr&lt;/span&gt;, &lt;span class="n"&gt;val&lt;/span&gt;):  
         &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_node&lt;/span&gt; = &lt;span class="n"&gt;node&lt;/span&gt;  
         &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_attribute&lt;/span&gt; = &lt;span class="nb"&gt;attr&lt;/span&gt;  
         &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_value&lt;/span&gt; = &lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="nv"&gt;@property&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_node&lt;/span&gt;

    &lt;span class="nv"&gt;@property&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_attribute&lt;/span&gt;

    &lt;span class="nv"&gt;@property&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nb"&gt;value&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alas, our 5 lines of boilerplate have now blossomed into 16. Our quest for clarity is getting expensive.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://s-media-cache-ak0.pinimg.com/originals/ec/cf/c1/eccfc13e87cc987cbe29fadb248e3b6b.jpg"&gt;&lt;img alt="" src="https://s-media-cache-ak0.pinimg.com/originals/ec/cf/c1/eccfc13e87cc987cbe29fadb248e3b6b.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One common way to get around the hassles – or at least, they typing costs –of custom return objects is simply to use dictionaries instead. If you use the &lt;a href="http://www.perforce.com/perforce/doc.current/user/p4pythonnotes.txt"&gt;perforce Python API&lt;/a&gt; you’ll be quite familiar with this strategy; instead of creating a class, you just return dictionaries with nice descriptive names   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for node in object_list  
    for attrib in attrib_list:  
        settable = is_attrib_settable(node, attrib)  
        if settable:  
           new_value = dict_of_defaults[attrib]  
           results.append ({&amp;#39;node&amp;#39;:node, &amp;#39;attribute&amp;#39;:attrib, &amp;#39;value&amp;#39;:new_value})  
return results
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Like a custom class this increases readability and clarity; it’s also future proof since you can add more fields to the dictionary without messing with existing data. &lt;br /&gt;
Even better, dictionaries – unlike classes – are self-describing: in order to understand the contents of a custom result class like &lt;code&gt;SomeFuncResult&lt;/code&gt; you’ll have to look at the source code, whereas you can see the contents of a result dictionary with a simple print statement. Dictionaries are slightly cheaper than classes (there is a &lt;a href="http://stackoverflow.com/questions/1336791/dictionary-vs-object-which-is-more-efficient-and-why"&gt;good workaround&lt;/a&gt; to speed up classes, but it’s something you have to write and maintain). And, of course, dictionaries have minimal setup costs: they are boiler-plate free.&lt;br /&gt;
This doesn’t mean they are ideal for all circumstances, howerver. &lt;br /&gt;
The Achilles’ heel of using dictionaries is keys, which are likely to be strings. Unless you are very disciplined about using named constants for all your result dictionaries you’ll inevitably find that somebody somewhere has type &lt;code&gt;attribite&lt;/code&gt; with an extra &lt;em&gt;i&lt;/em&gt; instead of a &lt;em&gt;u&lt;/em&gt; and suddenly perfectly valid, impeccably logical code is failing because nobody thought to look at the key names. Instead of typing lots of setup code once, you’ll be dribbling out square brackets and quotes till the end of time, with lots of little missteps and typos along the way. While that’s not an insurmoutable problem it’s another annoyance.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://assets7.thrillist.com/v1/image/1335116/size/tl-horizontal_main_2x/amazing-1983-return-of-the-jedi-photos-you-ve-never-seen"&gt;&lt;img alt="" src="http://assets7.thrillist.com/v1/image/1335116/size/tl-horizontal_main_2x/amazing-1983-return-of-the-jedi-photos-you-ve-never-seen" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Not so scary when you know the secret!&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#return-of-the-namedtuples"&gt;&lt;/a&gt;Return of the namedtuples&lt;/h1&gt;
&lt;p&gt;Luckily there is yet another – and for most purposes better – way to return complex results — one that is both flexible and self-describing. &lt;a href="http://pymotw.com/2/collections/namedtuple.html"&gt;namedtuples&lt;/a&gt; are part of the python standard library and they offer a clean, simple way to create lightweight objects that have named properties – like classes – but require almost no setup: you can create a new type of named tuple with a single line of code, and then use it like a lightweight (and immutable) class.&lt;br /&gt;
A namedtuple is just a python tuple that can also use names to access it’s own fields. For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;

&lt;span class="c1"&gt;# create a namedtuple called &amp;#39;SomeFuncRes&amp;#39; to hold nodes, attributes and values  &lt;/span&gt;
&lt;span class="n"&gt;SomeFuncRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SomeFuncRes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node attribute value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# make an instance  &lt;/span&gt;
&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SomeFuncRes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pCube1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;33.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# Result: SomeFuncRes(node=&amp;#39;pCube1&amp;#39;, attribute=&amp;#39;tx&amp;#39;, value=33.0)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, namedtuples are as even easier to ‘read’ than dictionaries when printed out. However, namedtuples give you dot-access to their contents.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print example.node  
# pCube1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This saves a few characters: &lt;code&gt;result.node&lt;/code&gt; beats &lt;code&gt;result['node']&lt;/code&gt; – but mopre important offers with far fewer opportunities for mistyped keys or open quotes. &lt;br /&gt;
However, namedtuples can also use old-fashioned indexed access too:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print example[0]  
# pCube1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you can even iterate over them if you need to, since a namedtuple is in the end just a slightly fancier tuple:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for item in example:  
    print item

# pCube1  
# tx  
# 30
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Namedtuples are easy to instantiate: You can create them using index ordering, names, or **keyword arguments. Names tend to be better for clarity, but if you’re expanding the results of other functions like &lt;code&gt;zip()&lt;/code&gt; indices and double-starred dictionaries can be very handy. Having all three options allows you to create them in the most appropriate way.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print SomeFuncRes(&amp;#39;pSphere1&amp;#39;, &amp;#39;ry&amp;#39;, 180)  
# SomeFuncRes(node=&amp;#39;pSphere1&amp;#39;, attribute=&amp;#39;ry&amp;#39;, value=180)  
print SomeFuncRes(value = 1, node = &amp;#39;pCube1&amp;#39;, attribute = &amp;#39;tz&amp;#39;)  
# SomeFuncRes(node=&amp;#39;pCube1&amp;#39;, attribute=&amp;#39;tz&amp;#39;, value=1)  
from_dict  = {&amp;#39;node&amp;#39;:&amp;#39;pPlane1&amp;#39;, &amp;#39;attribute&amp;#39;:&amp;#39;rz&amp;#39;, &amp;#39;value&amp;#39;:40.5}  
SomeFuncRes(**from_dict)  
# SomeFuncRes(node=&amp;#39;pPlane1&amp;#39;, attribute=&amp;#39;rz&amp;#39;, value=40.5)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unlike classes or dictionaries, namedtuples are &lt;em&gt;immutable&lt;/em&gt;; that is, they are read-only by default. This is usually a Good Thing(tm) for a result object, since data changing in mid-flight can lead to subtle bugs that may be very hard to reproduce. Immutability also makes them cheaper: they don’t require Python to do as much setup behind then scenes when a they are created, which can be significant in large quantities. They usually &lt;a href="http://blog.explainmydata.com/2012/07/expensive-lessons-in-python-performance.html"&gt;take up less memory as well&lt;/a&gt;. &lt;br /&gt;
This combination of features is tough to beat in a cheapo data-only class. If for some reason you need to upgrade to a real class instead, you probably won’t even need to change the code which reads your namedtuples: Python doesn’t care if &lt;code&gt;result.node&lt;/code&gt; is a namedtuple field or a regular object field. For all these reasons, namedtuples are a great little tool for a lot of common data-bundling jobs. No strategy fits every battle, but namedtuples are an excellent - and often overlooked! – way to manage this very common (albeit not very interesting) problem and to keep your overall toolkit cleaner, more robust and easier to maintain.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://iruntheinternet.com/lulzdump/images/its-a-trap-pun-its-a-wrap-admiral-ackbar-star-wars-1363199217Z.jpg?id=784"&gt;&lt;img alt="" src="http://iruntheinternet.com/lulzdump/images/its-a-trap-pun-its-a-wrap-admiral-ackbar-star-wars-1363199217Z.jpg?id=784" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 02 Aug 2015 17:59:00 -0700</pubDate><guid>tag:,2015-08-02:Return-of-the-namedtuples.html</guid></item><item><title>Wraptastic!</title><link>/Wraptastic!.html</link><description>&lt;h2&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#the-wrap-up"&gt;&lt;/a&gt;The wrap up&lt;/h2&gt;
&lt;p&gt;The beauty of working with code, even really simple code, is that you can build your own little universe out of bits and pieces contributed by thousands of other people – all without paying a dime or even asking them for help. From sharing a script off of CreativeCrash to downloading a huge open-source behemoth like Apache, any reasonably plucky individual can today make stuff that actually involves the work of thousands of anonymous others. It’s really quite a remarkable evolution in human history that so many people voluntarily give away their work for nothing, and (whatever else you can say about the internet era) it’s something to be proud of participatng in.&lt;br /&gt;
On the other hand… &lt;br /&gt;
Well, Say you are an Amish farmer and all your neighbors showed up to help you raise your barn, you’d certainly be grateful. But you might still be pretty annoyed if Hans from next door hung your barn doors so they stuck in the summer heat. Maybe old Hans worries more about keeping the barn warm than you do, so he prefers a tight seal: but that’s small comfort when you’re heaving on that handle in a muggy Pennsylvania morning.&lt;br /&gt;
&lt;img alt="barn raising" src="http://notonbluray.com/blog/wp-content/uploads/2014/04/Witness-barn-raising-scene-Bluray-screenshot-3.png" /&gt;  &lt;/p&gt;
&lt;p&gt;The internet abounds in excellent – and, amazingly, free – tools to help make your life easier. But they all started life as tools to make somebody else’s life easier. If your needs don’t line up perfectly with the needs of the original author, you’re likely to get a little &lt;em&gt;&lt;a href="http://www.dict.cc/deutsch-englisch/gereizt.html"&gt;gereizt&lt;/a&gt;&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;The fact is that nobody writes all their own stuff: we all use other people’s code all the time (and, as sharing becomes more and more ingrained in coding, that’s only going to increase). All that sharing means that we constantly have to work with libraries and APIs that are useful and free and for which we know we should be grateful… but – like that sticky barn door – they drive us absolutely bonkers.  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#wrap-up"&gt;&lt;/a&gt;Wrap up&lt;/h1&gt;
&lt;p&gt;Not surprisingly, almost everybody ends up writing &lt;em&gt;wrappers&lt;/em&gt;: code to help ease those nice-but-imperferct tools and API into a something that feels a little more natural. If you spend a lot of time on &lt;a href="http://tech-artists.org/"&gt;TAO&lt;/a&gt; or coding forums where people swap tips and advertise their wares you’ll see a huge variety of wrappers for all sorts of tasks: indeed, the wrappers often seem to outnumber the actual functional bits. Whether you call the job making things ‘more pythonic’ or ‘more functional’ or ‘cleaner’, its something we all feel compelled to do (and to &lt;a href="https://github.com/theodox/mGui"&gt;share&lt;/a&gt;) from time to time.&lt;br /&gt;
It’s also easy to get cynical about wrappers. You see so many – and so many of them just taste-driven syntactic variations on each other – that veteran coders often reflexively shrug and ignore them. This is particularly true in Python land, where the malleability of the language encourages a certain degree of experimentation and re-casting. Because you &lt;em&gt;can&lt;/em&gt; adapt Python to suit your tastes, the temptation to do so even when it’s not actually getting you much beyond style points is hard to resist. &lt;br /&gt;
The net result of all this customization and adaptation is messier than Christmas morning: wrappers everywhere. Whatever simplifications each individual wrapper gives you, the aggregate effect of so many different extra layers is overwhelming. At several times in the last decade I’ve sworn off wrappers and vowed to stick with vanilla python, straight-up maya.cmds and simple, linear code. A good code archaeologist could troll through my history and find several repeated periods of growth and die-offs in the wrapper ecosystem, like fossils trapped in shale.&lt;br /&gt;
&lt;img alt="where's pymel?" src="http://www.lparchaeology.com/prescot/images/156.jpg" /&gt;&lt;br /&gt;
&lt;em&gt;Where's pymel in there?&lt;/em&gt;  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#wraptors"&gt;&lt;/a&gt;Wraptors&lt;/h1&gt;
&lt;p&gt;Wrappers, though, never really die off like the dinosaurs: they, in fact, more persistent as the cockroaches. And there’s a lesson in that. &lt;br /&gt;
Consider a classic case of wrapper-iteis: a system for &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;making maya GUI less of a pain&lt;/a&gt;. Everybody writes that one at some point in their TA career (I’ve done it 4 times to my certain knowledge, not counting one-offs and half-assed, abandonware). When somebody feels compelled to spruce something up that much it’s a sign. &lt;br /&gt;
Sure, most gui wrappers are just a reaction to the clunky, wordy way that Maya expects us to pop up a window or make a button. And sure, most of those wrappers (some of my own, I hasten to add) really aren’t much better: they’re just shortcuts that cut down on the carpal-tunnel of &lt;code&gt;cmds.textField(fieldname, q=True, text=True)&lt;/code&gt;. &lt;br /&gt;
Sure, saving keystrokes is nice, but over the life of a piece of code the time spent typing is a tiny fraction of that spent reading, debugging and refactoring: that you could (and probably should) just bit the bullet on. But so many persistent, repeated efforts to fix a problemare a symptom that something worse than wordiness is the problem. Wrapper-itis really runs rampant when the toolkit that is simply not adequate to the job at hand. If you have to spend a lot of time thinking about the implementation details &lt;em&gt;instead&lt;/em&gt; of the problem you really want to solve you’re not just wasting keystrokes: you’re wasting precious thought and time.&lt;br /&gt;
So I’ve been trying to soften my anti-wrapper stance. Sometimes it’s better to actually solve a recurring problem instead of papering it over; sometimes it’s worth taking the time to be in a position to write the code you &lt;em&gt;need&lt;/em&gt; to write instead of the code you’re &lt;em&gt;forced&lt;/em&gt; to write. Sometimes.&lt;br /&gt;
Which of course raises the question of how you can identify those situations and distinguish between a real need for better abstractions and a plain old peevish desire to avoid boilerplate.   &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#wraptitude"&gt;&lt;/a&gt;Wraptitude&lt;/h1&gt;
&lt;p&gt;The prime way to distinguish between a ‘wrappable’ problem and a purely syntactic one is to consider the needs of the person who’ll be picking through your code after you’be been run over by a bus. &lt;br /&gt;
&lt;img alt="" src="http://i.ytimg.com/vi/y_PrZ-J7D3k/maxresdefault.jpg" /&gt;&lt;br /&gt;
When your replacement comes to look at your code, will they see something that seems to clearly express the problems you were trying to solve? Or just code that clearly expresses your preferences for a particular set of formatting options and code idioms?&lt;br /&gt;
Here’s a little bit of code that reads some information from a database in order to add some ‘credits’ to a time account:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def replenish(user):  
    if user is None:  
        return False

    with connect_db() as db:  
        repl = db.execute(&amp;quot;SELECT replenished FROM users WHERE name LIKE ? AND DATE (replenished) &amp;lt;  DATE (&amp;#39;now&amp;#39;)&amp;quot;, (user,))  
        recent = repl.fetchone()

        if recent:  
            daynum = db.execute(&amp;quot;SELECT strftime (&amp;#39;%w&amp;#39;, &amp;#39;now&amp;#39;)&amp;quot;).fetchone()[0]  
            daynum = int(daynum)  
            repl_amount = db.execute(  
                &amp;quot;SELECT sun, mon, tues, weds, thurs, fri, sat FROM replenish WHERE users_name LIKE ?&amp;quot;, ( user,))  
            refresh = repl_amount.fetchone()[daynum]  
            cap_amount = db.execute(&amp;quot;SELECT cap, balance FROM users WHERE name LIKE ?&amp;quot;, (user,))  
            cap, balance = cap_amount.fetchone()  
            new_balance = min(cap, refresh + balance)

            db.execute(&amp;quot;UPDATE users SET balance = ? , replenished = DATE(&amp;#39;now&amp;#39;) WHERE name LIKE ?&amp;quot;, (new_balance, user))  
        log(db, user, &amp;quot;replenished with %i credits&amp;quot; % new_balance)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the basic logic is pretty simple. Stripped all the fluff, you merely need to:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;connect to the database&lt;/li&gt;
&lt;li&gt;ask the database the last time the user was topped off&lt;/li&gt;
&lt;li&gt;if the user hasn’t been replenished today, get the amount due&lt;/li&gt;
&lt;li&gt;add the amount to the user’s account&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s just four basic ideas. but it takes more than 20 lines to express them. &lt;br /&gt;
Far worse, the key logical linkages of the operation are implied, not stated.For the code to make real sense you need to know or deduce that the &lt;em&gt;users&lt;/em&gt; table has a field called &lt;em&gt;replenished&lt;/em&gt; which stores the last day when the user was topped off; that the ‘replenish’ table has seven fields containing the top-off numbers, arranged Sunday throguh Saturday; and that the user table stores both the maximum number of credits to store and the current balance of credits. The implementation of our simple, 4-step idea only makes sense with all of that special knowledge. It’s further obscured by time saving shortcuts, like using the actual column index in a database table to check today’s value. That may save a couple of lines but it renders the code even harder to parse. And, of course, there are syntax quirks big and small, particularly relating to the creation and formatting of the SQL. &lt;br /&gt;
This code works fine; it’s even fairly economical and readable for what it does (for a given value ‘economical’) But it’s not the kind of thing you’d ever want to &lt;em&gt;inherit&lt;/em&gt;; it makes sense to me, because I wrote it and I remember (at least today) what I was thinking about when I did. But some future inheritor (heck, even me a year from now) will have to think long and hard about what really ought to be a simple process. The whole thing is bogged down in implementation details that &lt;em&gt;obscure the intent&lt;/em&gt; of what’s going on. Really good code often reads almost like pseudo-code. This does not.&lt;br /&gt;
To illustrate what a good wrapper can do, here’s the same code using an ‘&lt;a href="https://en.wikipedia.org/wiki/Object-relational_mapping"&gt;object relational mapper&lt;/a&gt;‘ called &lt;a href="https://github.com/coleifer/peewee"&gt;peewee&lt;/a&gt;: it’s a wrapper around the SQL backend that map database operations onto classes and allows you to focus on the logic instead of the mechanics:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def replenish(user):  
    if user is None:  
        return  
    with connect_db().atomic():  
        today = datetime.now()  
        today_name = now.strftime(&amp;quot;%A&amp;quot;)

        updatable_user = User.get(name=user, replenished  &amp;lt; today)  
        today_update = Replenish.get(name = user, today_name &amp;gt; 0)  
        if updatable_user and  today_update:  
            refresh = getattr(today_update, today_name)  
            new_balance = min(updatable_user.cap, refresh + updatable_user.balance)  
            updatable_user.balance = new_balance  
            Log.create(user= user,  message = &amp;quot;replenished with %i credits&amp;quot; % new_balance)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That’s a significantly cleaner bit of code to read. It still requires some outside knowledge but the intention is much more clearly expressed and the message isn’t drowned out in quotes and parens. An ‘offscreen’ benefit, given the way peewee is structured, is that backtracking to the &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Replenish&lt;/code&gt; classes would tell the rest of the story pretty straightforwardly without a ton of comments. Only a handful of lines are needed to munge data into the right forms, and the code almost &lt;em&gt;reads&lt;/em&gt; like the summary. &lt;br /&gt;
That’s a good example of how wrappers can help: saving keystrokes is nice but clarifying the real &lt;em&gt;meaning&lt;/em&gt; of the code is priceless.  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#wrapola"&gt;&lt;/a&gt;Wrapola&lt;/h1&gt;
&lt;p&gt;Well, maybe not exactly price-&lt;em&gt;less&lt;/em&gt;. All wrapper code comes with a cost: there are new rules to learn and, probably, new bugs to encounter. If the wrapper uses odd conventions, unusual data formats or is simply slower than hand rolled code it may still be a bad bargain. Nonetheless, this example shows wrappers can be more than just a protest against awkward syntax and API’s that don’t match your taste. Ultimately wrappers are a perfect microcosm of what all coding is about: the search for a clearer understanding of the problem you’re trying to solve. &lt;br /&gt;
So if you’re thinking about writing a wrapper, ask yourself this: does the code you want to write teach you something about the problem your solving? Or does it just save you a few keystrokes? Typing is a pain, but you’ll spend a lot more tine looking at your code than you ever will typing it. So don’t focus on just counting lines or syntax: focus on whether the wrapper helps you understand the problem better. If the wrapped code reads like a description of your thought process, you’re on the right track. If it’s just getting you back to &lt;a href="http://www.twitch.tv/undeadlabs"&gt;that TwitchTV stream&lt;/a&gt; on your second monitor a few minutes earlier it might not be worth your time.  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#ps"&gt;&lt;/a&gt;PS&lt;/h1&gt;
&lt;p&gt;I used an ORM for my example because it provides such a powerful example of code that’s not bogged down in syntactic complexities. There is, however, a classic internet flame war about ORMs that I’m glossing over, with nerd rage aplenty for friends and foes of ORMs. Background &lt;a href="http://martinfowler.com/bliki/OrmHate.html"&gt;here&lt;/a&gt; if you care. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 12 Jul 2015 14:34:00 -0700</pubDate><guid>tag:,2015-07-12:Wraptastic!.html</guid></item><item><title>Porting Spelchek to Boo</title><link>/Porting-Spelchek-to-Boo-.html</link><description>&lt;hr /&gt;
&lt;p&gt;What could be more ghostly than a &lt;em&gt;post mortem?&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;If &lt;a href="http://techartsurvival.blogspot.com/2015/05/boo-who.html"&gt;my last post about Boo&lt;/a&gt; piqued your interest, but you haven’t had time to do a deep dive into the language to see for yourself, I’ve posted a version of the &lt;a href="https://github.com/theodox/spelchek"&gt;Spelchek&lt;/a&gt; Python spell checker module converted to Boo so you can see the similarities and differences between the two languages. &lt;br /&gt;
The original Python version is &lt;a href="https://github.com/theodox/spelchek/issues"&gt;here&lt;/a&gt; and the Boo port is &lt;a href="https://github.com/theodox/BooSpell"&gt;here&lt;/a&gt;. As a good indication of what I’ve been saying about the economy of Boo syntax, the Boo version comes in at almost the same size as the Python original (5.05 kb for Boo and 4.95kb for Python) and pretty much the same number of lines – I haven’t done the excersize of converting it to C# for comparison but I’d guess the C# version would come in at about half again as much typing.&lt;br /&gt;
Looking at the code, significant chunks are almost identical: the logic is pretty much the same and the type annotations are the only real difference. &lt;br /&gt;
Thus  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def add(word as string, pri as int):  
    &amp;quot;&amp;quot;&amp;quot;  
    Adds &amp;lt;word&amp;gt; to the dictionary with the specified priority.   
    &amp;quot;&amp;quot;&amp;quot;  
    _DICTIONARY[word.ToLower()] = pri
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;becomes   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def add(word, priority=4):  
&amp;quot;&amp;quot;&amp;quot;  
Adds &amp;lt;word&amp;gt; to the dictionary with the specified priority (default is 4)  
&amp;quot;&amp;quot;&amp;quot;  
    _DICTIONARY[word.lower().strip()] = priority
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is pretty much identical.&lt;br /&gt;
The tricky bit of the conversion was the routine which generates possible variants of the word - it generates variants of a word by transposition and deletions. In Python:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def first_order_variants(word):  
    &amp;quot;&amp;quot;&amp;quot;  
    return the obvious spelling variants of &amp;lt;word&amp;gt; with missing words, transpositions, or misplaced characters  
    &amp;quot;&amp;quot;&amp;quot;  
    splits = [(word[:i], word[i:]) for i in range(len(word) + 1)]  
    deletes = [a + b[1:] for a, b in splits if b]  
    transposes = [a + b[1] + b[0] + b[2:] for a, b in splits if len(b) &amp;gt; 1]  
    replaces = [a + c + b[1:] for a, b in splits for c in _ALPHABET if b]  
    inserts = [a + c + b for a, b in splits for c in _ALPHABET]  
    return set(deletes + transposes + replaces + inserts)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the first list comprehension, &lt;code&gt;splits&lt;/code&gt;, generates a lists of pairs representing places where the word could be broken up, so that ‘cat’ produces &lt;code&gt;[("c","at"), ("ca", "t")]&lt;/code&gt;. The other comprehensions use that list to try inserting, deleting or transposing letters to guess what the user might have really been typing.&lt;br /&gt;
In Boo, the tricky bit was getting the compiler to recognize that the &lt;code&gt;splits&lt;/code&gt; list contained a pair of strings and that all the lists produced by it would also be lists of strings. Porting the python code directly wouldn’t work because Boo would see &lt;code&gt;splits&lt;/code&gt; as a list of type &lt;code&gt;object&lt;/code&gt; instead of deducing that it was a set of string pairs. &lt;br /&gt;
Here’s the Boo version, which as you can see is recognizably the same but is clunkier than the Python, due to the need for typing,   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;first_order_variants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;obvious&lt;/span&gt; &lt;span class="n"&gt;spelling&lt;/span&gt; &lt;span class="n"&gt;variants&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transpositions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;misplaced&lt;/span&gt; &lt;span class="n"&gt;characters&lt;/span&gt;  
&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
    &lt;span class="n"&gt;_stringList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Boo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  
    &lt;span class="n"&gt;_strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Boo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;  
    &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_stringList&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;  
    &lt;span class="n"&gt;deletes&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="n"&gt;transposes&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="n"&gt;replaces&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_ALPHABET&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="n"&gt;inserts&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_ALPHABET&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HashSet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deletes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transposes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replaces&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inserts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnionWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To clean it up I added two ‘aliases’ up at the top, since the Boo syntax for declaring typed containers is hard to read (‘List[of string]’): so &lt;code&gt;_stringList&lt;/code&gt; is a shortcut for ‘list of string arrays’ and &lt;code&gt;_strings&lt;/code&gt; is a shortcut for ‘list of strings’.&lt;br /&gt;
The variable &lt;code&gt;pair&lt;/code&gt; contains a lambda (ie, an inline function) using Boo’s idiosyncratic syntax: you could mentally rewrite it as  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def pair(w as string, i as int) of (string):  
    return (w[:i], w(i:))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or in other words “give me a string and an integer, I’ll return a pair of strings split at the index you gave me.” &lt;br /&gt;
With those helpers in place the logic is identical, but it is harder to follow because of all the type-mongering. I’m pretty sure there are more elegant ways to do this withgout being so wordy, but I’m not an expert.   &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404&amp;amp;bpli=1&amp;amp;pli=1#so"&gt;&lt;/a&gt;So…&lt;/h1&gt;
&lt;p&gt;The point of the experiment was to see how hard the Python &amp;gt; Boo translation would be. This is an application where types actually matter a good deal, since all my values are strings and I need to be able to do string operations like joins on them – if all I was doing as asking questions of them things would have been more Pythonic (though probably slower as well: one of the reasons we need those types is to get the compiler to help us speed the code up). &lt;br /&gt;
While this is hardly a demanding application, it is at least a proof-of-concept for the idea of prototyping in Python and then selectively porting to Boo isn’t completely nuts.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 06 Jun 2015 22:13:00 -0700</pubDate><guid>tag:,2015-06-06:Porting-Spelchek-to-Boo-.html</guid></item><item><title>Boo Who?</title><link>/Boo-Who?.html</link><description>&lt;p&gt;Boo!&lt;/p&gt;
&lt;p&gt;Did I scare you?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-OFk47U8-b9E/VWvmUwg7gII/AAAAAAABL6E/61gYBKYRRN4/s1600/medium.png"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-OFk47U8-b9E/VWvmUwg7gII/AAAAAAABL6E/61gYBKYRRN4/s400/medium.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Evidently somebody's scared: the &lt;a href="https://github.com/bamboo/boo/wiki"&gt;Boo language&lt;/a&gt;, which has been a part of Unity for several years, is going to be removed from the Unity documentation in favor of C#. &lt;/p&gt;
&lt;p&gt;The reason is pretty simple, as this graph explains:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://blogs.unity3d.com/wp-content/uploads/2014/09/graph3.png" /&gt;&lt;/p&gt;
&lt;p&gt;For a lot of Unity developers (99.56% of them, apparently) this is non-news; Boo never really garnered much of a following in the Unity community. For new developers and recent grads, C# is an easy and very well documented option; for former web debs moving to mobile apps, UnityScript feels JavaScript-y enough to ease into a new environment. Boo, on the other hand, never got much traction: it's got a small but passionate community but it never garnered enough momentum to break out of its niche. &lt;/p&gt;
&lt;h2&gt;Boo Hoo&lt;/h2&gt;
&lt;p&gt;Now, I'm kind of a sucker for hopeless causes, so almost inevitably this news inclined me to revisit Boo, which I've toyed with a few times but never really tried to learn. I had to write a lot of C# for &lt;a href="http://store.steampowered.com/app/351040/"&gt;Moonrise&lt;/a&gt; and it made me long for the clarity and concision of Python. Even though C# is a perfectly capable language with lots of modern features (closures, firest class functions, etc) it's still very chatty. The tantalizing promise of Boo - not completely fulfilled, but pretty close, is that it combines both: the performance, runtime type safety, and intimate access to Unity that C# offers in a language not deformed by punctuation and rendered ridiculous by overly wordy syntax.&lt;/p&gt;
&lt;p&gt;Here's the aesthetic differences in a nutshell:&lt;/p&gt;
&lt;h3&gt;Boo&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;UnityEngine&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JumpingMovementController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonoBehaviour&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

 &lt;span class="n"&gt;_HORIZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Horizontal&amp;#39;&lt;/span&gt;  
 &lt;span class="n"&gt;_VERT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Vertical&amp;#39;&lt;/span&gt;  
 &lt;span class="n"&gt;_JUMP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jump&amp;#39;&lt;/span&gt;  
 &lt;span class="n"&gt;_Momentum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;  
 &lt;span class="n"&gt;_Gravity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;  
 &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;_Speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;  
 &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;_JumpSpeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;

 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;   
  &lt;span class="n"&gt;frame_speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_Speed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deltaTime&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
   &lt;span class="n"&gt;_Momentum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_JUMP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_JumpSpeed&lt;/span&gt;

  &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;_Momentum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deltaTime&lt;/span&gt;  
  &lt;span class="n"&gt;left_right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_HORIZ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;frame_speed&lt;/span&gt;  
  &lt;span class="n"&gt;forward_back&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_VERT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;frame_speed&lt;/span&gt;  
  &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forward_back&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Space&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;LateUpdate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
   &lt;span class="n"&gt;_Momentum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;_Gravity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deltaTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
   &lt;span class="n"&gt;_Momentum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
   &lt;span class="n"&gt;vp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
   &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;C&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using UnityEngine;  
using System;

public class JumpingMovementController(MonoBehaviour)  
{

    const static string _HORIZ = &amp;quot;Horizontal&amp;quot;;  
    const static string _VERT = &amp;quot;Vertical&amp;quot;;  
    const static string _JUMP = &amp;quot;Jump&amp;quot;;  
    var _Momentum = 0.0f;  
    var _Gravity = 2.0f;  
    public var _Speed = 1.0f;  
    public var _JumpSpeed = 1.5f;


    void Update()  
    {  
        var frame_speed = _Speed * Time.deltaTime

        if (transform.position.y == 0)   
        {  
            _Momentum += Input.GetAxis(_JUMP) * _JumpSpeed;  
        }

        var up =  _Momentum * Time.deltaTime;  
        var left_right = Input.GetAxis(_HORIZ) * frame_speed;  
        var forward_back = Input.GetAxis(_VERT) * frame_speed;  
        transform.Translate(new (Vector3(left_right, up, forward_back)), Space.Self);  
    }

    void LateUpdate()  
    {  
        if (transform.position.y &amp;gt; 0)   
        {  
            _Momentum -= _Gravity * Time.deltaTime;  
        }  
        else   
        {  
            _Momentum = 0;  
            vp = new Vector3(transform.position.x, 0, transform.position.z);  
            transform.position = vp;  
        }  
    }  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I just can't shake the feeling that the first code is something I don't mind reading and writing while the latter is a chore. It's also a whopping 45% more typing for the same result. And that delta only gets bigger if you want to try something a little more complicated: Boo supports offers the same list comprehension syntax as Python, so you can write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    addresses = [(x,y) for x in range(3) for y in range(3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where in C# you'd either get 6 lines of for-loops and nested brackets, or you'd have to use Linq. Even in the most compact form I can manage it's still much wordier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        var xs = Enumerable.Range(0, 3).ToList();  
        var ys = Enumerable.Range(0, 3).ToList();  
        var addresses = (from x in xs  
                         from y in ys  
                         select new Tuple&amp;lt;int,int&amp;gt;(x, y)).ToList();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to get to the same place. &lt;/p&gt;
&lt;h2&gt;Why Boother?&lt;/h2&gt;
&lt;p&gt;A hardcore programmer might object that this is "all just syntax". That's true - but since my everyday experience of working with a language is about 90% syntax I don't feel like it's fair to dismiss that concern as if it were irrelevant. That said, it can't be denied that modern C# 4 includes many language constructs that earlier versions of the language lacked: things like &lt;code&gt;var&lt;/code&gt; inferred variables, lambdas, closures, and named default arguments. These things all help make the code less chatty and more legilble: If you're a &lt;em&gt;good&lt;/em&gt; C# programmer you can write very terse, expressive code that's not absurdly wordy. &lt;/p&gt;
&lt;p&gt;Apart from those stupid curly brackets.&lt;/p&gt;
&lt;p&gt;On the other hand, the "culture" of the language was set in place before those kinds of features were added. The C# ethos definitely prefers the verbose to the understated, the extremely explicit to the implied.This isn't a terrible decision - like Java, it's a language designed to be used by huge teams of enterprise programmers working on titanic projects where only a few people see the whole project scope and most coders are locked away in cubicles on the 18th floor working on isolated modules to be used by other coders they will never meet.That's why C#'s obssession with visibility management and highly-specified behavior makes sense.C# is a language that's all about apportioning blame: it forces everything to be very explicit so you know which of the 6000 drones working on your enterprise app to bleame when things go wrong.&lt;/p&gt;
&lt;p&gt;In the context of a small game or a solo project, though, the Pythonic ethic of "we're all adults here" seems more natural and productive.Besides, for hobby projects and one offs fun is a totally legitimate concern: making minigames is something that gets crammed into nooks and crannies left over by work, kids and keeping the house from falling down around my ears.So fun is a totally legit criterion for selecting a language.&lt;/p&gt;
&lt;p&gt;And Boo is definitely more &lt;em&gt;fun&lt;/em&gt; than C#. &lt;/p&gt;
&lt;h2&gt;Boo Who?&lt;/h2&gt;
&lt;p&gt;Like many Pythoneers, I've always nursed a secret hunger for the magical button that would take all my tight, laconic Python code and magically make it perform like a "real" language. Boo is not the magic button, but it's a pretty good preview of what that might look like. As you can see from the code samples above, it looks and feels a lot like Python but under the hood is has similar performance and compile-time constraints to C#: in other words, Boo code can run as much as 20X faster than Python.&lt;/p&gt;
&lt;p&gt;That's what makes Boo so tantalizing. It is &lt;em&gt;almost&lt;/em&gt; Python, but you can write Unity games, Winforms apps, or even cross-platform DLLS with it. Plus, since Boo runs on the same dotnet CLR as C#, it runs on any platform with the DotNet framework or Mono installed, so a compiled Boo program can run on Windows, Macs, or Linux boxes. There's even an interactice shell so you can do one-offs and experiment, just like Python. But - unlike Python - you get the performance gains that come from a compiled, statically typed language.&lt;/p&gt;
&lt;p&gt;Typing and the compiler are the key difference between Boo and Python. The a compiler makes sure that all of your variables, return values and method signatures line up and uses that knowledge to optimize the final runtime code for you. You can do this in Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fred = 1   
fred = fred +  1  
print fred  
# 2  
fred = &amp;quot;fred&amp;quot;  
fred = fred + &amp;quot; flintstone&amp;quot;  
print fred  
# fred flintstone
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Boo, however, you'll get an error when you try to change &lt;code&gt;fred&lt;/code&gt; from an integer value to a string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fred = 1  
fred = fred +1   
fred = &amp;quot;fred&amp;quot;  
#------^  
#ERROR: Cannot convert `string` to `int`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In old-school C#, this was made obvious that all variables and to declare a type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int fred = 1;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In more modern C# you can use the &lt;code&gt;var&lt;/code&gt; keyword to make the compiler guess what type you want based on the initial input: when you give it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var fred = 1;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it sees that fred has an integer in it, and treats fred as an integer from then on. If you assign the variable with the result of a method call or another variable, C# uses the expected type of that return value to set the variable type. Boo does more or less the same thing: it uses the assignment value to guess the type of a variable. You can specify it explicitly if you prefer by using the &lt;code&gt;as&lt;/code&gt; keyword: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;barney as string  
barney = &amp;quot;barney&amp;quot;   #OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same syntax is used to specify inputs in methods and returns:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def bedrock (name as string) as string:  
    return name + &amp;quot;rock&amp;quot;

def inferred_return_type(name as string):  
    return name + &amp;quot;inferred&amp;quot;  
    # if the compiler can guess the output type  
    # you don&amp;#39;t need to &amp;#39;as&amp;#39; it
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you get out of the habit of re-using variables with different types, this is usually not too bad: 95% of the time the inference "just works" and you can write code that focuses on logic and good design instead of worrying about the types. The other 5% of the time, however, is often very frustrating. It's particularly tough when Boo's Python-like, but not &lt;em&gt;exactly&lt;/em&gt; Python behavior trips you up. Consider this little puzzle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sum (values as (int)) # expect an integer tuple  
    result = 0  
    for v in values:  
        result += v  
    return v

# works as expected for this case:  
example = (1,2,3)  
sum(example)  
# 6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However it can be broken if your input list isn't all of the same type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;example2 = (1,2,3,&amp;quot;X&amp;quot;)   
sum(example2)  
# ERROR: the best overload to the method sum((int)) is not compatible with the argument list &amp;#39;((object))&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's not entirely shocking: the compiler saw a mixed list in example2 and return and array of type &lt;code&gt;object&lt;/code&gt; (as in C#, &lt;code&gt;object&lt;/code&gt; is the base class of all types). So it is right to reject that as an argument for an int-specific function. Here's where it gets odd:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#reassign  
example2 = (1,2,3,4)  
sum (example2)  
# 10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time the compiler "helpfully" casts that array to an array of ints because it can. This is not a crazy behavior, but it's definitely going to raise some issues where test code works fine but production code contans bad values. The only way to be sure that things are what they seem is to force them into the right types at declaration time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;example3 as (int) == (1,2,3,4,5)  
sum(example3)  
# 15

example3 = (1,2,3,&amp;quot;one hundred&amp;quot;)  
#----------^  
# ERROR: Cannot convert `(object)` to `(int)`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This example highlights both the usefulness and the limitations of type inference: If you want a statically typed language (and all the compiler tricks that make it speedier than Python) you do have to think about how to manage your types. There's no way around it. If you've got enough C# experience, you can look at Boo as a neat way of writing speedy, statically typed code with less typing and more syntactic freedom - but if you're looking at it from the standpoint of loosey-goosey Pythonista it can seem like a lot of hurdles to jump. &lt;/p&gt;
&lt;p&gt;My (unscientific) impression is that a lot of people from the Python world come over to Boo and the familiar look of the code gives them a false sense of security. It's easy to write simple bits of code until the subtleties of type management bite you in the behind, and then to give up in frustration when things seem to get cluttered and uptight.&lt;/p&gt;
&lt;p&gt;It is, however, part of the territory: lots of other tools for speeding up Python such as &lt;a href="http://cython.org/"&gt;Cython&lt;/a&gt; expect the same kind of attention to variable types: here's a sample from Cython&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def f(double x):  
    return x**2-x

def integrate_f(double a, double b, int N):  
    cdef int i  
    cdef double s, dx  
    s = 0  
    dx = (b-a)/N  
    for i in range(N):  
        s += f(a+i*dx)  
    return s * dx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is just as finicky as C# or Boo.&lt;/p&gt;
&lt;p&gt;For me, at any rate, spending more than a year doing C# as a regular part of work made fiddling around with Boo much easier and more productive. The type management hassles strike me as inevitable, or even natural, after a year of typing verbose C# variable types. On the other hand the cleanliness of the layout, the lack of extraneous punctuation, and the clealiness of list comprehensions and Python style loops never gets old.&lt;/p&gt;
&lt;p&gt;While there are plenty of minor gotchas, and a few important high-level rules that can't be forgotten, Boo development flows in with an almost Pythonic fluency. If you put in the time to figure out the type inference behavior and add the annotations, you can get code thats &lt;em&gt;almost&lt;/em&gt; as flexible as Python and &lt;em&gt;almost&lt;/em&gt; as performant as C# - which, for my kind of pet projects is a great compromise. &lt;/p&gt;
&lt;h2&gt;Boo-ty is in the eye of the beholder&lt;/h2&gt;
&lt;p&gt;TL;DR: I've gotten pretty fond of Boo. Above all, it serves me well for noodling around in Unity where the API is mostly identical but the logic is cleaner, shorter and easier to read than the same code in C#. Translating the docs is rarely more than trivial, and the very narrow scope of a typical Unity code chunk keeps me from any of Boo's rough edges.&lt;/p&gt;
&lt;p&gt;Another hurdle for many Pythonistas, though one which does not matter in the the context of Unity games, is the lack of the Python standard library. About 70% of what you can do with the 'batteries included' in Python can, however, be replicated using the &lt;a href="https://msdn.microsoft.com/en-us/library/hfa3fa08%28v=vs.110%29.aspx"&gt;dotnet Base Class Library&lt;/a&gt; if you're running Boo on a Windows box (on Linux or OSX the percentage is lower: Mono has its own base class library but it's not a complete replica of the one from Microsoft). For many tools tasks and projects, this is more than enough: you'll be able to read and write XML, to decrypt JSON, to talk to an http server and so on although the function names and APIs will vary. I have to admit I prefer the Python toolkit to the dotnet one, which reflects the same bureaucratic mindset that I dislike in C#'s design, but it's still a big, robust set of tools. You can also use anything that's available as a dotnet DLL. Almost anything advertised as a usable with C# will work with Boo.&lt;/p&gt;
&lt;p&gt;All That said, I'd definitely think twice before basing a commercial Unity project or a critical pipeline component on Boo. There does seem to be a small but measurable perfromance penalty compared to C# (the performance is, however, pretty much on par with that of UnityScript). More importantly, the Boo's biggest weakness is documentation: with a small community and (from now on) no docs on the Unity site, finding your way around in the language at first is pretty awkward. The &lt;a href="https://github.com/bamboo/boo/wiki"&gt;documentation&lt;/a&gt; is a sporadic, volunteer effort with some glaring holes - it doesn't help that Google still sends you to the moribund Boo site on &lt;a href="http://boo.codehaus.org/"&gt;codehaus&lt;/a&gt; instead of the current docs, which are in a &lt;a href="https://github.com/bamboo/boo/wiki"&gt;Github Wiki&lt;/a&gt;. The language is officially at version 0.9.4.9 and hasn't incremented in a long time: it's still getting commits from the original author and few other devs but it's a much smaller project than, say, IronPython. In short, it's a cool language that has not found it's audience yet, and unless it does it will remain a niche player. &lt;/p&gt;
&lt;p&gt;Still, it's pretty cool too. If, after those caveats, it still sounds interesting, you'll be relieved to know that Boo is not really 'going away': For the forseeable future, the language will still work in Unity, Boo, like C# and UnityScript, runs on &lt;a href="http://www.mono-project.com/"&gt;Mono&lt;/a&gt;, much as Java runs on the JVM. Unity doesn't distinguish between the source of Mono assemblies: you can still use Boo, and even more exotic dotnet languages such as F# (though not, alas, IronPython!) in Unity today. The only practical result of Unity's decision to sunset Boo support is the disappearance of the Boo documentation from the Unity website - which , to be honest was rarely adequate - and the lack of a 'create Boo script' menu item. Dropping a boo script into your assets folder, however still creates runnable code, and it should continue to do so for the forseeable future. &lt;/p&gt;
&lt;p&gt;There's some question about how Unity's new cross-platform compiler technology, &lt;a href="http://blogs.unity3d.com/2014/05/20/the-future-of-scripting-in-unity/"&gt;IL2CPP&lt;/a&gt; will handle Boo. In principle, since it compiles the byte code produced by Mono rather than the original source, it too should work with any CLR language, be it Boo or F# or what have you. I've been able to compile Boo code to Unity WebGL games, which use IL2CPP, without obvious problems although I haven't done anything like a scientific test. It's not beyond belief that bugs which occur only in non-C#, non-UnityScript IL code may go unfixed. And, of course, it's impossible to say what will happen after Unity 5 - technology, particularly in games, moves too fast for confident future predictions. However, It seems pretty clear Boo will be working in Unity for a while to come even though it is being demoted from "officially supported" status to the same kind of l33t hacker underworld as functional languages. &lt;/p&gt;
&lt;h2&gt;Boo-Curious?&lt;/h2&gt;
&lt;p&gt;If you've got Unity installed already, you've already got everything you need to play with Boo. Just create a text file with a ".boo" extension inside a Unity project and you can write Unity components in Boo. If you don't have Unity, You can also &lt;a href="http://www.mono-project.com/download/"&gt;download Mono directly&lt;/a&gt;, which installs MonoDevelop and Boo automatically. &lt;/p&gt;
&lt;p&gt;If you're not fond of MonoDevelop - an editor for which I have… mixed… feelings - You can write Boo using &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;, which has a Boo syntax higlighting package and can run Boo compiles for you. &lt;/p&gt;
&lt;p&gt;If you're curious but don't want to take the plunge, you can see the language for yourself and play with it online, using this &lt;a href="http://tryboo.pollinimini.net/"&gt;interactive repl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The documentation - which (be warned!) is incomplete and not always up to date - is in the &lt;a href="https://github.com/bamboo/boo/wiki"&gt;Boo Project GitHub wiki&lt;/a&gt;. There's an older site at &lt;a href="http://boo.codehaus.org/"&gt;boo.codehaus.org&lt;/a&gt; which is tends to show up on the Google results but has &lt;em&gt;mostly&lt;/em&gt; been ported to the github. In cases of conflicting information, the GitGub wiki is likelier to be right. There's also a &lt;a href="https://groups.google.com/forum/#!forum/boolang"&gt;Google Group&lt;/a&gt; and a small pool of questions on &lt;a href="http://stackoverflow.com/questions/tagged/boo"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're a hardcore type, you can also download and rebuild &lt;a href="https://github.com/bamboo/boo"&gt;the source for the entire Boo language&lt;/a&gt; yourself from GitHub. Lastly, you might want to check out &lt;a href="https://github.com/drslump/BooJS"&gt;BooJS&lt;/a&gt;, a project which aims to compile Boo into JavaScript.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 31 May 2015 22:02:00 -0700</pubDate><guid>tag:,2015-05-31:Boo-Who</guid></item><item><title>Moonrise Early Access is Live!</title><link>/Moonrise-Early-Access-is-Live!.html</link><description>&lt;p&gt;Moonrise is &lt;a href="http://store.steampowered.com/app/351040/"&gt;up on Steam now&lt;/a&gt;! It's a blast to see people logging in from all over and playing.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://cdn.akamai.steamstatic.com/steam/apps/351040/ss_3e4a330e913cd4c8013c516deaaa87c2dc3cb4da.1920x1080.jpg?t=1432769730"&gt;&lt;img alt="" src="http://cdn.akamai.steamstatic.com/steam/apps/351040/ss_3e4a330e913cd4c8013c516deaaa87c2dc3cb4da.1920x1080.jpg?t=1432769730" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.blogger.com/"&gt;&lt;/a&gt;&lt;br /&gt;
Now that the cat is out of the bag I'll try to post some tech postmortems on the pipeline and some of the interesting shader work we did.  &lt;/p&gt;
&lt;p&gt;PS If you get into the game, I share the username 'Alpha' with my kids.  So try sending friend requests, but if you get turned down it might be the kids instead of me! Don't take it personally.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 27 May 2015 17:27:00 -0700</pubDate><guid>tag:,2015-05-27:Moonrise-Early-Access-is-Live!.html</guid></item><item><title>Moonrise coming to Steam Early Access next week!</title><link>/Moonrise-coming-to-Steam-Early-Access-next-week!.html</link><description>&lt;p&gt;I'm happy to note that &lt;a href="http://undeadlabs.com/2015/05/news/moonrise-coming-to-early-access-on-may-27/#more-7213"&gt;Moonrise&lt;/a&gt; will be debuting on Steam Early Access next week! &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 21 May 2015 17:15:00 -0700</pubDate><guid>tag:,2015-05-21:Moonrise-coming-to-Steam-Early-Access-next-week!.html</guid></item><item><title>spelchek</title><link>/spelchek.html</link><description>&lt;h2&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#spelchek"&gt;&lt;/a&gt;Spelchek&lt;/h2&gt;
&lt;p&gt;I’m planning one of the worst things that can happen to a TA: a big massive file move-and-rename operation. Much as I love my team, we have a poor record as a company when it comes to spelling, and it occurred to me that I’d like to at least have some degree of automatic spell checking on the names of the new files, folders and assets.&lt;br /&gt;
It turns out that there’s no good spell checker for Python that doesn’t come with some kind of extension module (BTW, I’d love to be wrong about that - if you know one definitely post it in the comments). &lt;a href="http://pythonhosted.org/pyenchant/"&gt;PyEnchant&lt;/a&gt; for example is great, but it’s got 32-bit only Windows extensions that I can’t distribute without a hassle.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://s-media-cache-ak0.pinimg.com/236x/55/2c/b5/552cb539fcc6b8addffb0eb19ec98298.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;I did, however, find a very neat example of Python Power in a little post by Peter Norvig, who put together a simple spellchecker in a few dozen lines of plain, readable Python &lt;a href="http://norvig.com/spell-correct.html"&gt;code and great explanations here&lt;/a&gt;. &lt;br /&gt;
I shamelessly borrowed his structure, with a couple of minor and not very creative tweaks. Peter’s original is built around Bayesian analysis: it guesses the correct word by looking at the relative frequencies with which variants show up – if ‘meet’ shows up 1000 times in your database but ‘mete’ shows up 5 times, that’s a good indication that ‘meet’ is the correct first guess. &lt;br /&gt;
Since I’m in a rush, I didn’t use that functionality very much. I scrounged around for as many sources correctly scored words. Unfortunately the only free source I could rely on turned out to be the venerable ‘GSL’ or ‘General Service List’, which has great data but only for about 2000 words (I used the version found &lt;a href="http://jbauman.com/gsl.html"&gt;here&lt;/a&gt;, by &lt;a href="http://jbauman.com/index.html"&gt;John Bauman&lt;/a&gt; as a the core of the list, and then scrounged the internet for other free sources. Since all of these were less common words than the ones in the GSL I gave them pretty arbitrary Bayes scores (4’s and 5’s for common words, 3’s for variants, plurals and participles). This is not sophisticated linguistics, but it’s close enough for horseshoes.&lt;br /&gt;
The result is up on github as &lt;a href="https://github.com/theodox/spelchek"&gt;spelchek&lt;/a&gt;, which I affectionately refer to as the &lt;em&gt;cheap-ass spell checker.&lt;/em&gt;&lt;br /&gt;
It is hardly rocket science, but it does work. You can do something like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;spelchek&lt;/span&gt;  
   &lt;span class="n"&gt;spelchek&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;correct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vhicle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="c1"&gt;# &amp;#39;vehicle&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    spelchek.guesses(&amp;#39;flied&amp;#39;)  
    # [&amp;#39;filed&amp;#39;, &amp;#39;flied&amp;#39;, &amp;#39;flies&amp;#39;, &amp;#39;lied&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I would caution against using this for hard-core text work where perfect accuracy matters -- like database stuff, a customer-facing website, or a word processor -- since I did not go with high quality commercially or academically vetted word lists. I’m reasonably certain that there are some mis-spellings or oddballs in the 75,000 or so words I ended up with from various sources. Still, the module useful for my intended use, which is making sure that we don’t get things like ‘floder’, ‘frunishings’ and ‘vetegation’ (all of which shipped with in &lt;a href="http://www.ign.com/games/state-of-decay-year-one-survival-edition/xbox-one-20023993"&gt;State of Decay&lt;/a&gt;, I’m sorry to admit). &lt;br /&gt;
As always, MIT licensed so go to town. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 16 May 2015 17:45:00 -0700</pubDate><guid>tag:,2015-05-16:spelchek.html</guid></item><item><title>Tech art for art directors</title><link>/Tech-art-for-art-directors.html</link><description>&lt;p&gt;I see that the slides from my 2015 GDC talk, &lt;em&gt;Technical Art For Art Directors&lt;/em&gt; is now up on the &lt;a href="http://www.gdcvault.com/play/1021806/Art-Direction-Bootcamp-Technical-Art"&gt;GDC Vault&lt;/a&gt;. &lt;strong&gt;paywall warning&lt;/strong&gt; Enjoy – and feedback in the comments is very welcome. I can post the slides if there is interest, but if you watch the video you’ll see that they don’t really work without the verbal context. I defy anybody who wasn't there to make sense of this image, for example....  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-XedE_j-dcHE/VUsCuvzzD_I/AAAAAAABLzM/VCbs1DtFLzM/s1600/21E0AD1CCD067F1F330E9BB69649A81C.jpeg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-XedE_j-dcHE/VUsCuvzzD_I/AAAAAAABLzM/VCbs1DtFLzM/s400/21E0AD1CCD067F1F330E9BB69649A81C.jpeg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ll say in passing that – despite the lack of text in the finished presentation – I had great luck putting this talk together in &lt;a href="http://techartsurvival.blogspot.com/2015/03/markdown-wrapup.html"&gt;Markdown&lt;/a&gt; using &lt;a href="http://www.decksetapp.com/"&gt;DeckSet&lt;/a&gt;, which let me do the first 90% of the presentation without ever opening PowerPoint or Keynote. The slides were just one big plain text file, which let me &lt;a href="https://github.com/theodox/tadwtf/blob/master/tadwtf_slides.md"&gt;put them up on github&lt;/a&gt; so I could version them and track changes without getting bogged down in the finicky formatting nonsense that ultimately consumes all slide decks. I particularly liked this workflow because I could work as if it was text but still run it as a slide show very early on, which gave me a chance to get my patter down and listen to the words instead of getting hung up on formatting text. Plain text FTW!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 09 May 2015 09:13:00 -0700</pubDate><guid>tag:,2015-05-09:Tech-art-for-art-directors.html</guid></item><item><title>Book Review</title><link>/Book-Review.html</link><description>&lt;p&gt;Computer books are a very hit-or-miss affair. I go through them like comic books but – like comic books – they rarely have much of an impact on me: I read along, nod, and ten minutes after I close the covers I’ve either compressed the whole thing into a crunched-down, dried-up mental summary or filed it away as something to look at for a very specific kind of reference. &lt;br /&gt;
It’s hard for a technical book to really &lt;em&gt;engage&lt;/em&gt; a reader. Clarity, clean exposition and simply not peddling misinformation by accident or oversight are hard enough and many tech books fail to even hit those mares. Engaging style and memorable insights are even tougher to conjure up.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/gp/product/0596802293/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0596802293&amp;amp;linkCode=as2&amp;amp;tag=tecsurgui-20&amp;amp;linkId=CVEGONEA7DGRZKKD"&gt;&lt;img alt="" src="http://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=0596802293&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=tecsurgui-20" /&gt;&lt;/a&gt;&lt;img alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=tecsurgui-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0596802293" /&gt;&lt;/p&gt;
&lt;p&gt;My personal favorite in this regard is &lt;a href="http://amzn.to/1FQKwV6"&gt;The Art Of Readable Code&lt;/a&gt; by Dustin Boswell and Trevor Foucher. Unlike most tech books it’s not about technology, it’s about &lt;em&gt;you&lt;/em&gt;. By which I mean it’s about how to approach programming problems with a pragmatic, long term view that’s about making your life more productive and less stressful in the long run by adopting smart practices. It’s not about whiz-bang tech - in fact, the book hops around between languages and problem sets and doesn’t really teach anything about &lt;em&gt;programming&lt;/em&gt; per se; rather, it’s about &lt;em&gt;writing&lt;/em&gt;: about making your code clear, expressive and humane. Programmer machismo often encourages us to write super-efficient alien artifacts which can be extremely impressive but which nobody wants to touch for fear of getting the &lt;em&gt;Space Odyssey&lt;/em&gt; treatment. I’ve started forcing this book on all my new people: it’s better than a style guide because it teaches you things to think about, rather than giving you a list of things to memorize and follow.&lt;br /&gt;
(hat tip to @Pat Corwin, by the way, who turned me on to this one)&lt;br /&gt;
What got me thinking about tech books just now is the fact that I’ve recently found one that’s almost but not quite in that elite class of game changers. &lt;a href="http://amzn.to/1AGMvW1"&gt;Effective Python&lt;/a&gt;, by Brett Slatkin, is more technical and a bit less fluent than &lt;a href="http://amzn.to/1FQKwV6"&gt;The Art Of Readable Code&lt;/a&gt;. Still, it caught my eye because it seems like a great mile-marker on the road from “pretty good python user” to “real Pythonista.”   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/gp/product/0134034287/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0134034287&amp;amp;linkCode=as2&amp;amp;tag=tecsurgui-20&amp;amp;linkId=CVFALVJQ7SEU6UMO"&gt;&lt;img alt="" src="http://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=0134034287&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=tecsurgui-20" /&gt;&lt;/a&gt;&lt;img alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=tecsurgui-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0134034287" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://amzn.to/1AGMvW1"&gt;Effective Python&lt;/a&gt; does a great job of explaining and illustrating several features of the language which can be overlooked by folks coming from a scripting background rather than computer science. Many of the habits which separate the Python zen masters from the mere acolytes are explained neatly and clearly: the mysteries of the &lt;a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python"&gt;yield keyword&lt;/a&gt;, the evils of the &lt;a href="http://eli.thegreenplace.net/2009/01/16/python-insight-beware-of-mutable-default-values-for-arguments"&gt;mutable default argument&lt;/a&gt;, and the unfathomable allure of &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;metaclasses&lt;/a&gt; are all dealt with clearly and in ways that don’t make you feel like a chump. Even better, the information is presented with a usable, practical slant: it’s neither an abstract set of rules to memorize nor a comp-sci nerdout about language features. Instead the book presents enough information for you to make good strategic choices: Perennial python puyzzlers like “list comprehension or loop?”, “Is it okay to use Try…except…else?” and “When to use propertites vs descriptors vs plain old fields” are all addressed in a reasonable, non-dogmatic way.&lt;br /&gt;
So, I’ll definitely be adding that one to the new-hire reading list in the future. Recommended!&lt;br /&gt;
PS if you haven’t checked out the &lt;a href="http://techartsurvival.blogspot.com/p/bookstore.html"&gt;Tech Art Bookstore&lt;/a&gt; in a while, I’ve added a bunch of new items over the last few months&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 06 May 2015 22:38:00 -0700</pubDate><guid>tag:,2015-05-06:Book-Review.html</guid></item><item><title>Goddamit, stop messing around</title><link>/Goddamit,-stop-messing-around.html</link><description>&lt;p&gt;It was inevitable, after I started noodling around with &lt;a href="http://techartsurvival.blogspot.com/2015/04/blockquote-background-f9f9f9-border_12.html"&gt;terminal colors in ConEmu&lt;/a&gt;, that I’d waste an afternoon cooking up a way to color my Maya terminal sessions automatically.&lt;br /&gt;
The actual code is &lt;a href="https://github.com/theodox/conemu"&gt;up on GitHub&lt;/a&gt; (under the usual MIT Open License - enjoy!).   &lt;/p&gt;
&lt;p&gt;As implemented, its a module you can activate simply by importing &lt;code&gt;conemu&lt;/code&gt;. Ordinarily I don't like modules that 'do things' on import, but this one is such a special case that it seems justifiable. Importing the module will replace &lt;code&gt;sys.stdout&lt;/code&gt;, &lt;code&gt;sys.stdin&lt;/code&gt;, and &lt;code&gt;sys.display_hook&lt;/code&gt; with ConEmu-specific classes that do a little color formatting to make it easier to work in &lt;code&gt;mayapy&lt;/code&gt;.  If for some reason you want to disable it, calling &lt;code&gt;conemu.unset_terminal()&lt;/code&gt; will restore the default terminal.  &lt;/p&gt;
&lt;p&gt;Here are the main features:  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#colored-prompts-and-printouts"&gt;&lt;/a&gt;Colored prompts and printouts&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-AvNLhOBExmw/VT0sX69KZ2I/AAAAAAABLvo/Znt5WQHspns/s1600/conemu_2_1.jpg"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-AvNLhOBExmw/VT0sX69KZ2I/AAAAAAABLvo/Znt5WQHspns/s1600/conemu_2_1.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This helps de-emphasize the prompt, which is the least interesting but item on screen, and to emphasize command results or printouts&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#unicode-objects-highlighted"&gt;&lt;/a&gt;Unicode objects highlighted&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-ciIg7fGJIGw/VT0sxi0-F-I/AAAAAAABLvw/hlbGzLSFB5w/s1600/conemu_2_2.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-ciIg7fGJIGw/VT0sxi0-F-I/AAAAAAABLvw/hlbGzLSFB5w/s1600/conemu_2_2.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since all Maya objects returned by commands are printed as unicode string (like &lt;code&gt;u'pCube1'&lt;/code&gt;, the terminal highlights unicode strings in a different color to make it easy to pick out Maya objects in return values. The annoying little &lt;code&gt;u&lt;/code&gt; is also suppressed.  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#code-objects-highlighted"&gt;&lt;/a&gt;Code objects highlighted&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/--6vJNm-EdE8/VT0s-3SVHuI/AAAAAAABLv4/SRVJ-2ZCWMQ/s1600/conemu_2_3.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/--6vJNm-EdE8/VT0s-3SVHuI/AAAAAAABLv4/SRVJ-2ZCWMQ/s1600/conemu_2_3.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code objects (classes, functions and so on) are highlighted separately  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#comment-colors"&gt;&lt;/a&gt;Comment colors&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-hUxg4Dc96vc/VT0tN5TF79I/AAAAAAABLwA/vUtHyrpuaXo/s1600/conemu_2_4.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-hUxg4Dc96vc/VT0tN5TF79I/AAAAAAABLwA/vUtHyrpuaXo/s1600/conemu_2_4.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lines beginning with a &lt;code&gt;#&lt;/code&gt; or a &lt;code&gt;/&lt;/code&gt; will be highlighted differently, allowing you separate out ordinary command results from warnings and infos. &lt;strong&gt;In this version I have not isolated the path used by &lt;code&gt;cmds.warning&lt;/code&gt;, which makes this less useful. Does anybody out there know which pipe that uses? It appears to bypass &lt;code&gt;sys.stdout.write()&lt;/code&gt; and sys.stderr.write()&lt;/strong&gt;   &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#automatic-prettyprint"&gt;&lt;/a&gt;Automatic prettyprint&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-ua1kHl9PyQA/VT0txVSoYJI/AAAAAAABLwI/gL5CZb0MMjk/s1600/conemu_2_5.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-ua1kHl9PyQA/VT0txVSoYJI/AAAAAAABLwI/gL5CZb0MMjk/s1600/conemu_2_5.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If the result of a command is anything other than a string, it will be run through &lt;a href="https://docs.python.org/2/library/pprint.html"&gt;&lt;code&gt;prettyprint&lt;/code&gt; &lt;/a&gt;so that it will be formatted in a slightly more legible manner. This is particularly handy for commands like &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;listAttr&lt;/code&gt; which produce a lot of results: &lt;code&gt;pprint&lt;/code&gt; will arrange these vertically if they result would otherwise be wider than 80 characters.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#utilities"&gt;&lt;/a&gt;Utilities&lt;/h2&gt;
&lt;p&gt;The module contains some helper classes if you want to make your own display more elaborate, or to mess with it interactively during a console session.  &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#terminal-screen-formatting"&gt;&lt;/a&gt;Terminal: screen formatting&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;&lt;code&gt;Terminal&lt;/code&gt;&lt;/em&gt; class makes it less cumbersome to control the display. The main use is to color or highlight text. The 16 terminal colors are available as &lt;code&gt;Terminal.color[0]&lt;/code&gt; through &lt;code&gt;Terminal.color[15]&lt;/code&gt;, and you can highlight a piece of text like so:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print &amp;quot;this is &amp;quot; + Terminal.color[10](&amp;quot;colored text&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The background colors are &lt;code&gt;Terminal.bg[0]&lt;/code&gt; through &lt;code&gt;terminal.bg[5]&lt;/code&gt; and work the same way:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;print Terminal.bg[2](&amp;quot;backgound text&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Terminal&lt;/code&gt; also has a helper for setting, coloring, and unsetting prompt strings.  &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#conemu-console-control"&gt;&lt;/a&gt;Conemu: console control&lt;/h3&gt;
&lt;p&gt;The &lt;em&gt;&lt;code&gt;Conemu&lt;/code&gt;&lt;/em&gt; class includes some limited access to the more elaborate functions offered by ConEmu (The methods in &lt;code&gt;Terminal&lt;/code&gt; might work in other ANSI terminals – I haven’t tried ! – but the ConEmu ones specific to ConEmu). The key methods are:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;ConEmu.alert(message)&lt;/code&gt;
    Pops up a GUI confirm dialog with ‘message’ in it.
&lt;code&gt;ConEmu.set_tab(message)&lt;/code&gt;
    Sets the name of the current ConEmu tab to ‘message’.
&lt;code&gt;ConEmu.set_title(message)&lt;/code&gt;
    Sets the name of the current ConEmu window to ‘message’.
&lt;code&gt;ConEmu.progress(active, progress)&lt;/code&gt;
    if &lt;code&gt;active&lt;/code&gt; is True, draw a progress indicator in the window task bar at &lt;code&gt;progress&lt;/code&gt; percent. For example &lt;code&gt;ConEmu.progress(True, 50)&lt;/code&gt; overlays a 50% progress bar on the ConEmu task bar icon. If &lt;code&gt;active&lt;/code&gt; is false, the progress bar is hidden. This can be handy for long running batch items&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 26 Apr 2015 11:38:00 -0700</pubDate><guid>tag:,2015-04-26:Goddamit,-stop-messing-around.html</guid></item><item><title>The right profile</title><link>/The-right-profile.html</link><description>&lt;p&gt;Lately I was working in one of those relatively rare TA tasks where performance really mattered. I had to do a lot of geometry processing and the whole thing was as slow as molasses, despite all my best guesses about clever little tricks to speed things up. &lt;/p&gt;
&lt;p&gt;To break the logjam, I resorted to actual profiling, something I tend to avoid except in emergencies. &lt;/p&gt;
&lt;p&gt;Now, you might wonder why I say I avoid profiling. If you skip ahead and see the trick I used here, and all the fiddly little bits of detailed performance data it provides, you may be particularly curious why anybody would want to pass up on all this cool, authoritative data. The reason, however, is really simple: Good profiling is so powerful that it can be overly seductive. Once you can see right down to the millisecond how tiny tweaks affect your code, the temptation to start re-working everything to shave a little bit off here and there is hard to escape.&lt;/p&gt;
&lt;p&gt;If you're working on a game engine, constant reference to the profiler might make sense. In regular TA work, however, milliseconds rarely matter: all that counts is the user's perception of responsiveness. Your users will care about the difference between a .1 second tool and a 1 second tool, or that between a 1 second tool and a 10 second tool. They are unlikely to care about - or even notice - the difference between a 1.3 second tool and a 1.1 second tool. The time you spend grinding out those extra fractions of a second may just not be worth it. As Donald Knuth, one of the great-grandaddies of all programming put it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So a word of warning before we proceed. Optimize late, only after you've got the problem solved and after you've got what seems like solid, working code that's just too slow. Stay focused on clarity, reliability and ease of maintenance first; only reach for the profiler in code where the perf has really become an issue. &lt;/p&gt;
&lt;h2&gt;Cheap-ass profiling&lt;/h2&gt;
&lt;p&gt;Python includes some excellent native profiling tools. The easiest one to use (and the one that's most handy for people working in Maya) is the &lt;a href="https://docs.python.org/2/library/profile.html"&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt; module. It allows you to extract very detailed timing and call-count information from a run of a function. &lt;/p&gt;
&lt;p&gt;Here's a basic example of profile in action. We'll start of with a couple of simple functions. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cProfile&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_math&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  
        &lt;span class="n"&gt;some_math&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we'll call them using &lt;code&gt;cProfile.run()&lt;/code&gt;. The run function takes a string which it will use &lt;code&gt;eval&lt;/code&gt; to execute. So in our case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cProfile.run(&amp;#39;do()&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That will print out the following report, or something pretty like it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     604 function calls in 2.096 seconds

Ordered by: standard name

ncalls  tottime  percall  cumtime  percall filename:lineno(function)  
    1    0.002    0.002    2.096    2.096 &amp;lt;maya console&amp;gt;:12(do)  
  200    0.003    0.000    0.003    0.000 &amp;lt;maya console&amp;gt;:6(some_math)  
  200    0.002    0.000    2.091    0.010 &amp;lt;maya console&amp;gt;:9(slow)  
    1    0.000    0.000    2.096    2.096 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)  
    1    0.000    0.000    0.000    0.000 {method &amp;#39;disable&amp;#39; of &amp;#39;_lsprof.Profiler&amp;#39; objects}  
    1    0.000    0.000    0.000    0.000 {range}  
  200    2.089    0.010    2.089    0.010 {time.sleep}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line in the report prints out the total time, in this case a shade over 2 seconds. Each line in the report that follows lists the following information for a single function call (including nested calls)&lt;/p&gt;
&lt;p&gt;ncalls
    The number of times a given function was called during this run. If the function is recursive, this number may show up as two numbers separated by a a slash, where the first is the true number of total calls and second the number of direct, non-recursive calls. As you can see here &lt;code&gt;do()&lt;/code&gt; itself was called only once, but the sub-functions &lt;code&gt;some_math()&lt;/code&gt; and &lt;code&gt;slow()&lt;/code&gt; were each called 200 times; &lt;code&gt;time.sleep()&lt;/code&gt; was called 200 times as well since it was called by every iteration of &lt;code&gt;slow()&lt;/code&gt;
tottime
    the total amount of time spent executing this function for the entire run. As you can see the call to &lt;code&gt;time.sleep&lt;/code&gt; occupies the bulk of the time in this run. Not that this is the time it takes to process the function - &lt;em&gt;not&lt;/em&gt; the real-world time it takes to run! So our &lt;code&gt;do()&lt;/code&gt; function in the first line shows a &lt;code&gt;tottime&lt;/code&gt; of .002 seconds even though it clearly took more than two seconds to run. 
percall
    The &lt;em&gt;average&lt;/em&gt; time spent executing the function on this line, if it was executed multiple times. Like &lt;code&gt;tottime&lt;/code&gt;, this measures processor time only and does not include things like network delays or (as in this case) thread sleeps.
cumtime
    this is the real world time needed to complete the call, or more precisely the total real world time spent on all of the calls (as you can see, it's the sleep call and &lt;code&gt;do()&lt;/code&gt; which each take up about two seconds)
percall
    the second percall column is the amount of average amount of real-world time spent executing the function on this line.
filename
    this identifies the function and if possible the origin of the file where the function came from. Functions that originate in C or other extension modules will show up in curly braces.&lt;/p&gt;
&lt;p&gt;As you can see this is &lt;em&gt;incredibly&lt;/em&gt; powerful right out of the box: it lets you see the relative importance of different functions to your overall perfomance and it effortlessly includes useful back-tracking information so you can find the offenders.&lt;/p&gt;
&lt;h2&gt;Record Keeping&lt;/h2&gt;
&lt;p&gt;If you want to keep a longer term record, you can dump the results of &lt;code&gt;cProfile.run()&lt;/code&gt; to disk. In this form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cProfile.run(&amp;#39;do()&amp;#39;, &amp;quot;C:/do_stats.prf&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll get a dump of the performance data to disk instead of an on-screen printout. A minor irritant is the fact that the dumped stats are not the plain-text version of what you see when running the stats interactively: they are the pickled version of a &lt;code&gt;Stats&lt;/code&gt; object: just opened in a text editor they are gibberish.&lt;/p&gt;
&lt;p&gt;To read them you need to import the &lt;code&gt;pstats&lt;/code&gt; module and create a new &lt;code&gt;Stats&lt;/code&gt; from the saved file. It's easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pstats&lt;/span&gt;  
&lt;span class="n"&gt;disk_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pstats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/do_stats.prf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Calling the &lt;code&gt;print_stats&lt;/code&gt; method of your new &lt;code&gt;Stats&lt;/code&gt; object will print out the familiar report. You can also use the &lt;code&gt;sort_stats&lt;/code&gt; method on the object to reorganize the results (by call count, say, or cumulative time). &lt;/p&gt;
&lt;p&gt;The details on the &lt;code&gt;Stats&lt;/code&gt; object are &lt;a href="https://docs.python.org/2/library/profile.html#pstats.Stats"&gt;in the docs&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;p&gt;I've already said that this kind of information can tempt you to cruise past to point of diminishing returns right on to squeezing-blood-from-a-stone-land. That said it's also worth noting that there is also bit of the Heisenberg uncertainty principle at work here: profiling slightly changes the performance characteristics of your code Game engine programmers or people who do embedded systems for guided missiles will care about that: you probably don't need to.&lt;/p&gt;
&lt;p&gt;In any case, approaching this kind of profiling with the wrong mindset will drive you crazy as you chase micro-second scale will-o-the-wisps. The numbers give a good general insight into the way your code is working, but don't accord them any larger importance just because they seem seem so official and computer-y. They are guidelines, not gospel.&lt;/p&gt;
&lt;h2&gt;Using the data&lt;/h2&gt;
&lt;p&gt;When you actually do start optimizing, what do you want to do with all those swanky numbers? The art of optimizing code is &lt;em&gt;waaaay&lt;/em&gt; too deep to cover in a few paragraphs but there are a couple of rules of thumb that are handy to think about while learning how to read the profile results:&lt;/p&gt;
&lt;h3&gt;Call Counts Count&lt;/h3&gt;
&lt;p&gt;The first thing to look at is &lt;em&gt;not&lt;/em&gt; the times: it's the call counts. &lt;/p&gt;
&lt;p&gt;If they seem wildly out of line, you may have inadvertently done something like call a more than you intended. If you have a script that does something to 500-vertex object but a particular vertex-oriented function shows up 2000 or 4000 times, that may mean you're approaching the data in an inefficient way. If it becomes something huge - like 250,000 calls - it sounds like you're doing an "all against all" or "n-squared" check: an algorithm that has to consider not just every vert, but every vertex-to-vertex relationship. These are generally something to avoid where possible, and the call count totals are a good way to spot cases where you've let one slip in by accident. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The evils of 'n-squared' and so on are illustrated nicely &lt;a href="http://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/"&gt;here&lt;/a&gt;. You might also want to check out &lt;a href="http://astore.amazon.com/tecsurgui-20/detail/1430232374"&gt;Python Algorithms&lt;/a&gt; if you're really getting in to waters where this kind of thing matters!&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Look for fat loops&lt;/h3&gt;
&lt;p&gt;The second thing too look at is the balance of times and call counts. The most performant code is a mix of infrequent big calls and high-frequency cheap ones. If your stats show a high call count and a high &lt;code&gt;cumtime&lt;/code&gt; on the same line, that's a big red flag saying "investigate me!" As you can see in the report above, the real villains (&lt;code&gt;slow()&lt;/code&gt; and in turn &lt;code&gt;time.sleep()&lt;/code&gt;) are easily spotted by the combination of high call counts and high cumtime numbers.&lt;/p&gt;
&lt;h3&gt;Use builtins where possible&lt;/h3&gt;
&lt;p&gt;Next, you want to check the balance between your own code and built-ins or Maya API code, as indicated by the curly brackets around the function names in the last column. In general, API or built-in calls are going to be faster than anything you write yourself: doing things like a deriving the distance between two 3-D points will usually run about 8x faster in the API than it would in pure python. So, you'd like to see lots of those kinds of calls, particularly inside loops with high call counts. &lt;/p&gt;
&lt;h3&gt;High cumtimes&lt;/h3&gt;
&lt;p&gt;Only after you've sorted through the high call counts, and high call/cumtime combinations, and aggressive use of builtins do you want to start looking at high cumtimes on their own. Of course, you won't have a good idea when those high times are &lt;em&gt;justified&lt;/em&gt; if you don't know how the code actually works, which is why you want to do your optimizing passes on code that is already legible and well organized. &lt;/p&gt;
&lt;h2&gt;Wrap&lt;/h2&gt;
&lt;p&gt;Naturally, these few notes just scratch the surface of how you optimize - this post is really about &lt;em&gt;profiling&lt;/em&gt; rather than optimizing. I'm sure we'll hit that topinc some other day. In the meantime, it's worth spending some time mastering the slightly retro, programmer-esque interface of the cProfile module. Doug Hellman's &lt;a href="http://pymotw.com/2/profile/"&gt;&lt;em&gt;Python Module Of the Week&lt;/em&gt; article&lt;/a&gt; on profiling is a good if you want to get beyond the basic report i'm using here. There's also a nice lightweight intro at &lt;a href="http://www.blog.pythonlibrary.org/2014/03/20/python-102-how-to-profile-your-code/"&gt;Mouse vs Python&lt;/a&gt;. The &lt;a href="https://docs.python.org/2/library/profile.html#"&gt;docs&lt;/a&gt; could be more friendly but they are authoritative.&lt;/p&gt;
&lt;p&gt;In the meantime, readers of a certain age will certainly remember who &lt;em&gt;really&lt;/em&gt; had the right profile&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 18 Apr 2015 22:16:00 -0700</pubDate><guid>tag:,2015-04-18:The-right-profile.html</guid></item><item><title>Didn't need those eyeballs anyway!</title><link>/Didn't-need-those-eyeballs-anyway!.html</link><description>&lt;p&gt;OK, I admit this one is pretty much useless. But it’s still kind of cool :)&lt;br /&gt;
&lt;a href="http://techartsurvival.blogspot.com/2015/04/blockquote-background-f9f9f9-border.html"&gt;Just the other day&lt;/a&gt; I discussed setting up &lt;a href="http://conemu.github.io/"&gt;ConEmu&lt;/a&gt; for use as a direct maya terminal. This is fun, but once you’ve got the console virus the next thing that happens is you start getting obsessed with stupid terminal formatting tricks. It’s almost as if going text modes sends you past the furthest apogee of spartan simplicity and starts you orbiting inevitably back towards GUI bells and whistles. &lt;br /&gt;
At least, I know that about 15 minutes after I posted that last one, I was trying to figure out how to get colored text into my maya terminal window.&lt;br /&gt;
It turns out it’s pretty easy. ConEmu supports &lt;a href="http://wiki.bash-hackers.org/scripting/terminalcodes"&gt;ANSI escape codes&lt;/a&gt;, those crazy 1970’s throwbacks that all the VIM kiddies use on their linux machines to make ugly termina color schemes:&lt;br /&gt;
&lt;img alt="" src="http://i.stack.imgur.com/79YI2.png" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;all this beauty... in &lt;em&gt;your&lt;/em&gt; hands!&lt;br /&gt;
This means any string that gets printed to ConEmu’s screen, if it contains color codes, will be in color! You can change background colors, foreground colors, even add bold, dim or (God help us) &lt;em&gt;blinking&lt;/em&gt; text to your printouts.&lt;br /&gt;
Here’s a quick way to test this out:&lt;br /&gt;
Start up a maya command shell in ConEmu (instructions &lt;a href="http://techartsurvival.blogspot.com/2015/04/blockquote-background-f9f9f9-border.html"&gt;here&lt;/a&gt; if you missed them last time).&lt;br /&gt;
In your maya session, try this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Maya&amp;gt; &amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This swaps in the custom prompt &lt;code&gt;Maya&amp;gt;&lt;/code&gt; for the generic &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;.&lt;br /&gt;
&lt;img alt="console_prompt" src="http://3.bp.blogspot.com/-mBMHF410Wy0/VSqmy2QJCEI/AAAAAAABLnw/qu1P2pz15Do/s1600/color_1.png" /&gt;&lt;br /&gt;
Now, let’s try to make it a bit cooler: try setting &lt;code&gt;sys.sp1&lt;/code&gt; to this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sys.ps1 = &amp;quot;\033[38;5;2mMaya&amp;gt;\033[0m &amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="color_console" src="http://2.bp.blogspot.com/-2J0dLUc78MI/VSqmyxXLdsI/AAAAAAABLn0/4ERl34IdqTI/s1600/color_0.png" /&gt;&lt;br /&gt;
Whoa!&lt;br /&gt;
Here’s what the gobbledygook means: &lt;br /&gt;
&lt;strong&gt;&lt;code&gt;\033&lt;/code&gt; &lt;/strong&gt;is the ascii code for ‘escape’, which terminals use to indicate a non-printable character. The square bracket - number - m sequences are displayc ommands which will affect the output. In this case we said “set the text mode to color index 2’ (probably green on your system), type out ‘Maya&amp;gt; ‘, then revert to the default color”.&lt;br /&gt;
Here’s a few of the formatting codes that ConEmu supports:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**\033[0m**&lt;/code&gt; resets all escapes and reverts to plain text.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**\033[1m**&lt;/code&gt; and &lt;code&gt;**\033[2m**&lt;/code&gt; start or end &lt;em&gt;bold&lt;/em&gt; text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**\033[4m**&lt;/code&gt; turns on ‘inverse’ mode, with foreground and background colors reversed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**\033[2J**&lt;/code&gt; clears the terminal screen and sets the prompt and cursor back to the top. You probably don’t want to use this as your prompt, since it clears the screen after every key press! However it can be useful for paging through long results, Unix-&lt;code&gt;more&lt;/code&gt; style.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**033[38;5;&amp;lt;index&amp;gt;m**&lt;/code&gt; sets the text color to the color &lt;code&gt;&amp;lt;index&amp;gt;&lt;/code&gt;. Colors are defined in the ConEmu settings dialog (&lt;em&gt;Features &amp;gt; Colors&lt;/em&gt;). There are 16 color; here you identify them by index number (Color #0 is the default background, color #15 is the default foreground) This allows you to swap schemes – several well known codiing color schemes such as Zeburn and Solarized are included in ConEmu.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;033[48;5;&amp;lt;index&amp;gt;m&lt;/code&gt; &lt;/strong&gt;sets the background color to the color &lt;code&gt;&amp;lt;index&amp;gt;&lt;/code&gt;. The background colors are a bit hard to spot: if you check the colors dialog you’ll see a few items have two numbers next to them (such as ‘1/4’ or ‘3/5’). The second number is the background index. &lt;strong&gt;Yes, it’s wierd – it was the 70’s. What do you expect?&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**\033[39m**&lt;/code&gt; resets any color settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These codes work sort of like HTML tags; if you “open” one and don’t “close” it you’ll find it stays on, so while you’re experimenting you’ll probably experience a few odd color moments. &lt;br /&gt;
But still… how cool is that? Now if we could only get it to syntax highlight… or recognize maya objects in return values… hmm. Things to think about :)&lt;br /&gt;
The Full list of escape codes supported by ConEmu is &lt;a href="http://conemu.github.io/en/AnsiEscapeCodes.html"&gt;here&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 12 Apr 2015 10:21:00 -0700</pubDate><guid>tag:,2015-04-12:Didn't-need-those-eyeballs-anyway!.html</guid></item><item><title>Published works</title><link>/Published-works.html</link><description>&lt;p&gt;This page collects links to my old Game Developer articles and other published works.  &lt;/p&gt;
&lt;h3&gt;Animation&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/12/the-conquest-of-space.html"&gt;The Conquest of Space&lt;/a&gt;:  a conceptual article about how riggers and animators should think about the concept of space in animation.  One of my favorites.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://techartsurvival.blogspot.com/2015/01/just-put-one-foot-in-front-of-other.html"&gt;Put One Foot In Front Of the Other&lt;/a&gt;:   A survey of how walk and run speeds relate in animations, along with one of my favorite tricks: variable gait blends to cover different combinations of speed and stride length  &lt;/p&gt;
&lt;h3&gt;Careers&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/09/the-game-artists-resume-guide-revisited.html"&gt;The Game Artists Resume Guide  &lt;/a&gt;A humorous or cynical (depending on how you look at it) guide to resumes for game artists.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/09/the-players-handbook.html"&gt;The Players Handbook: &lt;/a&gt;Career management for artists, Gygax-style  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/08/read-damn-ad.html"&gt;Read The Damn Ad: &lt;/a&gt;Advice on parsing the want ads when looking for a job in game art.  &lt;/p&gt;
&lt;h3&gt;Tech Art&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://techartsurvival.blogspot.com/2015/01/the-trust-fund.html"&gt;The Trust Fund: &lt;/a&gt;A meditation on getting your artists to trust you as a TA  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 11 Apr 2015 23:38:00 -0700</pubDate><guid>tag:,2015-04-11:Published-works.html</guid></item><item><title>Con Job</title><link>/Con-Job.html</link><description>&lt;p&gt;If you do a lot of tools work in maya – particularly if you’re working one something that integrates with a whole studio toolset, instead of being a one-off script – you spend a lot of time restarting. I think I know every pixel of the last five Maya splash screens by heart at this point. A good knowledge of the python &lt;code&gt;[reload()](https://docs.python.org/2/library/functions.html#reload)&lt;/code&gt; command can ease the pain a bit, but there are still a lot of times when you want to get in and out quickly and waiting for the GUI to spin up can be a real drag.&lt;br /&gt;
If this drives you nuts, &lt;code&gt;mayapy&lt;/code&gt; - the python interpreter that comes with Maya - can be a huge time saver. There are a lot of cases where you can fire off a mayapy and run a few lines of code just to validate that things are working and you don’t need to watch as all the GUI widgets draw in. This is particularly handy if you do a lot of tools work or script development, but’s also a great environment for doing quickie batch work – opening a bunch of files to troll for out of date rigs, missing textures, and similar annoyances.&lt;br /&gt;
All that said, the default mayapy experience is a bit too old-school if you’re running on Windows, where the python shell runs inside the horrendous &lt;code&gt;CMD&lt;/code&gt; prompt, the same one that makes using DOS so unpleasant. If you’re used to a nice IDE like &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; or a swanky text editor like &lt;a href="http://www.sublimetext.com/3"&gt;Sublime&lt;/a&gt;, the ugly fonts, the monochrome dullness, and above all the antediluvian lack of cut and paste are pretty offputting.&lt;br /&gt;
However, it’s not too hard to put a much more pleasant face on mayapy and make it a really useful tool.  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#con-ed"&gt;&lt;/a&gt;Con Ed&lt;/h1&gt;
&lt;h2&gt;&lt;a href="http://www.top10films.co.uk/img/conair_cage.jpg"&gt;&lt;img alt="" src="http://www.top10films.co.uk/img/conair_cage.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;obligatory "con" joke here.  &lt;/p&gt;
&lt;p&gt;The first thing to do is find a good &lt;em&gt;console program&lt;/em&gt;. A console provides the window and display services for command-line programs; &lt;code&gt;CMD.exe&lt;/code&gt; does the same thing, it just does it very &lt;em&gt;badly&lt;/em&gt;. There are several good options depending on your taste (good roundup &lt;a href="http://www.nextofwindows.com/4-better-windows-console-tools-alternatives-to-windows-built-in-command-prompt/"&gt;here&lt;/a&gt;)). I’m going to walk through the setup for my favorite emulator, &lt;a href="http://conemu.github.io/"&gt;ConEmu&lt;/a&gt;, but the same ideas should adapt to the other emulators pretty simply.&lt;br /&gt;
First, here’s a quick round up of what &lt;a href="http://conemu.github.io/"&gt;ConEmu&lt;/a&gt; is going to be doing for us and mayapay:  &lt;/p&gt;
&lt;p&gt;Cut and paste
    &lt;code&gt;Ctrl+C&lt;/code&gt;, &lt;code&gt;Ctrl+V&lt;/code&gt;. Worth the price of admission all by itself!
Customizable fonts
    A killer feature for those of us with old, weak eyes and/or aspirations to style
Command history
    If you’re testing out a bit of syntax, or doing something that repetitive but not worth really automating you’ll get a lot of value out of the command history: you can use the up and down arrows to scroll through your recently issued commands and repeat them. Especially when you’re testing a script over and over this takes the bite out of those two or three lines of setup you need to enter again and again.
Startup options
    We’ll want to pass a few flags and instructions to mayapy every time.
Multiple consoles in one window
    ConEmu allows you to run different shells in different tabs. This can be invaluable if you’re doing things like checking the contents of multiple folders, but it’s also a great way to compare the results of your maya scripts side-by-side in two different sessions
Transparency
    A palliative for OSX envy.&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#setup-basics"&gt;&lt;/a&gt;Setup basics&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Again, these instructions are for ConEmu – if you try this with a different console, add your experience in the comments for others!&lt;/strong&gt;&lt;br /&gt;
ConEmu is a great little tool, and it’s free, but it is a bit… overeager?… in its efforts to let you control everything. The interface is a bit old school, so it’s worth walking through the setup process step by step.&lt;br /&gt;
First you’ll want to download and install &lt;a href="http://conemu.github.io/"&gt;ConEmu&lt;/a&gt; (the installation instructions are down at the botton of the linked page, and the setup is basically ‘unzip into a folder’). &lt;br /&gt;
Once you’ve got ConEmu up and running, you’ll want to open the settings dialog and select the &lt;em&gt;Tasks&lt;/em&gt; option from the tree list at left. This will show you a dialog like this:  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://3.bp.blogspot.com/-w0mbodm7rfY/VSAucMI2xPI/AAAAAAABLnI/0y0424YSh94/s1600/conemu_1.jpg"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-w0mbodm7rfY/VSAucMI2xPI/AAAAAAABLnI/0y0424YSh94/s1600/conemu_1.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Like I said, old school&lt;br /&gt;
For starters going to create a startup preset that launches mayapy. ConEmu calls these ‘tasks’. To create a new one, click that &lt;code&gt;+&lt;/code&gt; botton under the list of predefined tasks. That will create a blank preset with a name like “Group #”, you can rename it by typing a better name in the text box just to the left of the word “Hotkey”. &lt;br /&gt;
The actual command you’ll type goes into the large text box on lower right. Just as test, enter the path to your mayapy &lt;em&gt;in quotes&lt;/em&gt;, (usually it’s in &lt;code&gt;Program files\Autodesk\MayaXXXX\bin\mayapy.exe&lt;/code&gt;) followed by a space and &lt;code&gt;-i&lt;/code&gt;. The &lt;code&gt;-i&lt;/code&gt; flag is important: it makes sure that mayaypy launches in interactive mode so you can actually use it – without the flag the application will launch and immediately quit! For maya 2015, for example, you can do:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;%ProgramFiles%/Autodesk/maya2015/bin/mayapy.exe&amp;quot; -i
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test out this minimal version by saving the settings (the &lt;em&gt;Save Settings…&lt;/em&gt;) button at lower right and making a new console using the green plus button at the upper right. Select the preset; if all goes right you’ll get a python prompt like this:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-6SwtLYQpf7s/VSAuvIdPHDI/AAAAAAABLnQ/gtXK892tdFs/s1600/conemu_2.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-6SwtLYQpf7s/VSAuvIdPHDI/AAAAAAABLnQ/gtXK892tdFs/s1600/conemu_2.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If it doesn’t work, go back and make sure that you surrounded the path to maypy.exe with quotes. &lt;strong&gt;&lt;code&gt;&amp;lt;insert rant about making an operating system with spaces in the paths that doesn't support spaces by default here!&amp;gt;&lt;/code&gt;&lt;/strong&gt;   &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#more-cowbell"&gt;&lt;/a&gt;More cowbell&lt;/h1&gt;
&lt;p&gt;With just these options, you’ve got a working python intepreter, but it’s doesn’t have any maya-specific features. To get an actual maya session you could manually start a &lt;a href="http://techartsurvival.blogspot.com/2014/04/earth-calling-mayastandalone.html"&gt;maya standalone&lt;/a&gt; by typing  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.standalone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;maya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;at the prompt. This works, but it’s a bit tedious. You can automate the process in ConEmu by editing your task description: Go back to the task settings in ConEmu add this to your configuration:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%ProgramFiles%/Autodesk/maya2015/bin/mayapy.exe&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import maya.standalone; maya.standalone.initialize()&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;making sure again to check your quotes. &lt;br /&gt;
When you launch a new ConEmu session for your preset you’ll probably notice a pause on startup: that’s Maya starting up in the backgrdound. If your maya loads tools or scripts at startup via &lt;code&gt;userSetup.py&lt;/code&gt;, you may see printouts or debug information scroll by as well. You should now be working in a standalone session, so you should be able to try something like:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-ncaJyLvqczY/VSAuvALxi_I/AAAAAAABLnU/64gr2WRWkdo/s1600/conemu3.jpg"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-ncaJyLvqczY/VSAuvALxi_I/AAAAAAABLnU/64gr2WRWkdo/s1600/conemu3.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#avoiding-usersetuppy"&gt;&lt;/a&gt;Avoiding userSetup.py&lt;/h1&gt;
&lt;p&gt;If your startup scripts do something dependent on the maya GUI you may get an error instead. The &lt;em&gt;Right ThingTM&lt;/em&gt; to do is to fix that: you don’t want GUI in your startup routine because it hampers your ability to do batch jobs or renders. &lt;br /&gt;
However as a stopgap measure you can &lt;a href="http://techartsurvival.blogspot.com/2014/05/no-soup-for-you-usersetuppy.html"&gt;suppress your userSetup.py&lt;/a&gt; and load a completely vanilla Maya. This requires setting an environment variable called &lt;code&gt;MAYA_SKIP_USERSETUP_PY&lt;/code&gt; to 0, which unfortunately is something ConEmu can’t do for you. However, you can work around that by creating a &lt;code&gt;.BAT&lt;/code&gt; file that sets the environment before launching mayapy. The bat will look like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;MAYA_SKIP_USERSETUP_PY&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  
&lt;span class="s2"&gt;&amp;quot;%ProgramFiles%/Autodesk/maya2015/bin/mayapy.exe&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import maya.standalone; maya.standalone.initialize()&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can point your ConEmu task at the .BAT file instead of directly at mayapy and you should get a no-userSetup session. &lt;br /&gt;
This trick can also be used to launch mayapy with different environment variables – for example, I use to maintain different mayapy’s for different projects based on a set of project-specific env vars.  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#con-air"&gt;&lt;/a&gt;Con Air&lt;/h1&gt;
&lt;p&gt;I’ve been using mayapy in the terminal window as a key part of my work for about a year now, and I’m sure I’ve saved many, many hours of waiting when I noodle on various bits of code, one-off batch tasks, and general noodling. In addition to speedier startup, running mayaPy in the console also gives you a more customizable view and command history, so it’s also a great replacement for many things you might otherwise want to do by starting up Maya and popping open the listener. &lt;br /&gt;
Of course, on the meta-meta-level it is a bit odd to by running a text only version of the most powerful graphics tool on the planet. But hey, that’s how we roll in techart land.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 04 Apr 2015 12:20:00 -0700</pubDate><guid>tag:,2015-04-04:Con-Job.html</guid></item><item><title>Maya Bug Watch: API2 and GetPoints()</title><link>/Maya-Bug-Watch:-API2-and-GetPoints().html</link><description>&lt;p&gt;In general I’m more or less a &lt;a href="http://techartsurvival.blogspot.com/2014/12/all-we-are-saying-is-give-api-20-chance.html"&gt;fan of Maya Python API 2.0&lt;/a&gt;. It’s more pythonic and feels faster than the old version. However, it’s not without its quirks and I just found one that really bit me in the behind.&lt;br /&gt;
If you want to get the vertices of an object in the api, the usual formula is:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the dagPath of the object&lt;/li&gt;
&lt;li&gt;make an &lt;a href="http://help.autodesk.com/view/MAYAUL/2015/ENU/?guid=__py_ref_class_open_maya_1_1_m_fn_mesh_html"&gt;MFnMesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;call the ‘GetPoints’ method of your mesh&lt;/li&gt;
&lt;li&gt;party on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Something like this, which returns a list of &lt;a href="http://help.autodesk.com/view/MAYAUL/2015/ENU/?guid=__py_ref_class_open_maya_1_1_m_point_html"&gt;MPoint&lt;/a&gt; objects for the verts in the mesh  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.api.OpenMaya&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;api&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_verts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;mobj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MGlobal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSelectionListByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDagPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="c1"&gt;# that&amp;#39;s lazy, it assumes that the first child is the mesh shape.  &lt;/span&gt;
    &lt;span class="c1"&gt;# in practice you need to be more careful...  &lt;/span&gt;
    &lt;span class="n"&gt;mfn_mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MFnMesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;vert_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mfn_mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPoints&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vert_array&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works fine and dandy… except:&lt;br /&gt;
&lt;em&gt;&lt;strong&gt;If the mesh has 256 or more verts, the first vertex comes back as garbage&lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
Here’s an example, using the same function:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mesh, _ = cmds.polyCube(sw = 1, sh= 1, sd = 1)  
print get_verts(mesh)[:4]  
#&amp;gt; [maya.api.OpenMaya.MPoint(-0.50000000000009082, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(0.5, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.5, 0.5, 0.5, 1), maya.api.OpenMaya.MPoint(0.5, 0.5, 0.5, 1)]

# this looks good... Here&amp;#39;s the same thing for a 226 vert cube:  
mesh, _ = cmds.polyCube(sw = 8, sh= 8, sd = 3)  
print get_verts(mesh)[:4]  
#&amp;gt; [maya.api.OpenMaya.MPoint(-0.50000000000005185, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.375, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.25, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.125, -0.5, 0.5, 1)]

# but up the vert count to 258:  
mesh, _ = cmds.polyCube(sw = 8, sh= 8, sd = 4)  
print get_verts(mesh)[:4]  
#&amp;gt; [maya.api.OpenMaya.MPoint(5.0277956463997711e-315, 5.0313386899592279e-315, 0.5, 1), maya.api.OpenMaya.MPoint(-0.375, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.25, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.125, -0.5, 0.5, 1)]

# that first point is gibberish: python can&amp;#39;t go to the -315th power!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I’ll leave it to wiser heads to figure out &lt;em&gt;why&lt;/em&gt; it works out like this. My guess is that something is borked in pointer math going on inside the wrapper around &lt;code&gt;MfnMesh&lt;/code&gt;, but I don’t know. Luckily, there’s a workaround: if you create &lt;em&gt;new&lt;/em&gt; MPoints out of the items coming back from the &lt;code&gt;GetPoints()&lt;/code&gt; call, you get good data. I’m not sure why but this should be so but it appears to be reliable on my machine (Windows 7, 64 bit maya 2015). Here’s the workaround:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def safe_get_verts(mesh):  
    mobj = api.MGlobal.getSelectionListByName(mesh).getDagPath(0)  
    mfn_mesh =  api.MFnMesh(mobj)  
    vert_array = mfn_mesh.getPoints()  
    return [api.MPoint(i) for i in vert_array]  # creating new MPoints fixes the issue

mesh, _ = cmds.polyCube(sw = 10, sh= 10, sd = 10)  
print safe_get_verts(mesh)[:4]  
#&amp;gt; [maya.api.OpenMaya.MPoint(-0.5, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.40000000596046448, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.30000001192092896, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.20000001788139343, -0.5, 0.5, 1)]
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 27 Mar 2015 21:20:00 -0700</pubDate><guid>tag:,2015-03-27:Maya-Bug-Watch:-API2-and-GetPoints().html</guid></item><item><title>Markdown Wrapup</title><link>/Markdown-Wrapup.html</link><description>&lt;p&gt;A &lt;a href="http://techartsurvival.blogspot.com/2014/11/wyg-wys.html"&gt;while back&lt;/a&gt; I blogged about how much I longed for a good &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt; based blogging platform. Since a couple of people inquired about how that’s gone, I thought I’d mention my (meager) findings since then.  &lt;/p&gt;
&lt;p&gt;There are several different ways you could get Markdown-based onto a blog:   &lt;/p&gt;
&lt;p&gt;Static site generators
    I looked at a number of static generators, like &lt;a href="https://github.com/gollum/gollum/wiki"&gt;Gollum&lt;/a&gt; from github and &lt;a href="http://getnikola.com/blog/"&gt;Nikola&lt;/a&gt;. Both of these were conceptually appealing, but suffered from similar issues, most notably the usual run of configuration and install issues the come with any web-world endeavor these days. I had a hell of time getting either one working install on the macbook I use for most of my writing and eventually decided that I wasn’t that interested in wrestling with those kind of things into the future. More importantly, I’m too busy to really admin my own server - I want a hosted service. If you’re more into running your own server – and you don’t mind sleuthing out things like getting the right Ruby package manager setup running – they could both work fine. 
Markdown-based blogs
    There are a few markdown based blogging hosts out there. The one I looked at most carefully was &lt;a href="https://www.silvrback.com/"&gt;Silvrback&lt;/a&gt;, and I enjoyed it a good deal. The writing was clean and simple and it came with a built-in syntax highlighting: the biggest damn hassle about all these posts has been getting the code samples into a reasonable format without hopping around between multiple sites and pasting a lot of esoteric formatting codes in HTML by hand. So, I had a good experience with Silvrback and I seriously considered switching. If you’re just getting started it’s definitely worth a look, particulary for technical blogs like this one.
&lt;img alt="silverback" src="http://knolzone.com/wp-content/uploads/2014/03/silvrback.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;Custom markdown
    The last option would be trying to take control of the markdown to HTML conversion process and spit out a minimal set of HTML that would play nice with Blogger but need no hand-work to make it pretty (you’ll recall that I bitched about my earlier efforts getting bogged down in &lt;code&gt;&amp;lt;p/&amp;gt;&lt;/code&gt; vs &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; and other HTML nonsense I don’t want to think about. There are lots of Markdown generators out there at varying levels of sophistication, but I also don’t want to think too much about micromanaging those.
After a few bouts of intense googling, I ended deciding to stick with Blogger for two reasons. First, I didn’t see an obvious way to port my old stuff – more than a hundred posts with all sorts of special formatting and so on – and I felt it would be bad for the site to be split across two hosts. Also, I worried about losing readers if I switched URLs (if I do this again, I’m going to set up a custom domain early so people know the site by a redirect I can switch at will!). I will admit that I also wondered if using Google for hosting has anything to do with search results - I’ve noticed that a significant portion of traffic comes through Google searches and I wonder if other hosts are quite as well covered by whatever magic algorithm Google uses.&lt;br /&gt;
Sticking with Blogger for hosting means figuring out to reconcile my markdown text and Blogger’s style sheets. Luckily, it turns out that &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; has a nicely configurable &lt;a href="https://github.com/revolunet/sublimetext-markdown-preview"&gt;Markdown preview plugin&lt;/a&gt;. I love Sublime anyway – it’s my go-to text editor for everything except heavy-duty C# and Python &lt;strong&gt;(VS and &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;, respectively, btw)&lt;/strong&gt;. &lt;br /&gt;
In ordinary use, MarkdownPreview “bakes” your Markdown info nicely formatted HTML with all sorts of swanky CSS formatting – which is precisely what makes things hard for Blogger. With a little extra work, however, you can get it to produce a stripped-down HTML with the right tags and links but without all the extra CSS that conflicts with the Blogger template. &lt;br /&gt;
It took a bunch of fiddling to figure out how it works, but once I got over the n00bishness it turns out to be very simple. Here’s a step-by-step to setting it up for yourself.  &lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#1-install-the-markdownediting-and-markdownpreview-packages-for-sublime-text"&gt;&lt;/a&gt;1. Install the MarkdownEditing and MarkdownPreview packages for Sublime Text.&lt;/h3&gt;
&lt;p&gt;This is pretty simple using Sublime’s excellent Package Manager, so I’ll skip the details &lt;strong&gt;(&lt;a href="http://www.granneman.com/webdev/editors/sublime-text/packages/how-to-install-and-use-package-control/"&gt;here’s some help&lt;/a&gt; if you need it.)&lt;/strong&gt;  &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#2-create-a-simplified-html-template"&gt;&lt;/a&gt;2. Create a simplified HTML template&lt;/h3&gt;
&lt;p&gt;You want to make a simple HTML template that Sublime can render Markdown into. You can add some customisations if you like but the main business of the template is to prevent MarkdownPreview from filling in all of it’s own CSS styles. &lt;br /&gt;
Luckily, it’s easy to do this: if you don’t add a placeholder for the HTML &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag, MardownPreview can’t stick all the styles in there. This means you can force Sublime to give you a stripped-down output that won’t override your Blogger template.&lt;br /&gt;
If all you want to do is get uncluttered HTML, you can just use   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;Body&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as your template. That will let you past your Markdown HTML into blogger while keeping your Blogger theme intact.&lt;br /&gt;
Since I do a lot of code samnples in this blog, I opted to include a little bit of custom CSS to pretty it up. MarkdownPreview uses &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; to generate highlighted code. Pygments marks up the html with a bunch of custom HTML classes for different language parts, and you just need to provide some CSS that will decorate those guys. There are plenty of examples that work with Pygments which you can cut-and-paste like &lt;a href="https://github.com/richleland/pygments-css"&gt;this set from Rich Leland&lt;/a&gt;. &lt;br /&gt;
For myself, I grabbed a free one that looked a lot like the highlighting style on Github – to keep my template simple I put it in a public folder on DropBox and used an HTML link to include it in the blog. &lt;strong&gt;Feel free to use it if you’d like, but don’t link to it: I may keep fiddling with it and you don’t want my changes!. You can also get it &lt;a href="https://gist.github.com/theodox/4fefeb539f1d8ec341b0"&gt;here&lt;/a&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://dl.dropboxusercontent.com/u/2977490/github.css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;  
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;BODY&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dropbox files contains the CSS styles for highlighting code, but none of the zillions of other styles that usually come out of the Markdown &amp;gt; HTML translation. This way, my Blogger template will control the appearance of everything and keep the general style of the blog – but the code coming out of Markdown will be highlighted. Plus, I can tweak old entries by just changing the shared file. &lt;strong&gt;One caution: Blogger is finicky about which links it will allow in the head tag: I would rather have linked to the Gists or a CSS file on github, but wasn’t able to get that to work.&lt;/strong&gt;  &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#3-customize-the-markdownpreview-package"&gt;&lt;/a&gt;3. Customize the MarkdownPreview package.&lt;/h3&gt;
&lt;p&gt;Open up the user settings for MarkdownPreview (&lt;strong&gt;Package Settings &amp;gt; Markdown Preview &amp;gt; Settings – User&lt;/strong&gt;). This will be a blank file the first time you open it, but like all Sublime settings files it’s a JSON file. We just need to tell the MarkdownPreview plugin to use our template:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{  
    &amp;quot;enable_highlight&amp;quot; : true,  
    &amp;quot;enable_pygments&amp;quot; : true,  
    &amp;quot;html_template&amp;quot; : &amp;quot;C:/path/to/blog_template.html&amp;quot;,  
    &amp;quot;skip_default_stylesheet&amp;quot;: true  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key thing values here are the &lt;code&gt;html_template&lt;/code&gt;, which is the path to the template file from step 2, and &lt;code&gt;skip_default_stylesheet&lt;/code&gt;, which tells MarkdownPreview not to insert all those other styles.   &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#4-build-your-blog"&gt;&lt;/a&gt;4. Build your blog!&lt;/h3&gt;
&lt;p&gt;With the template and settings in place, create some Markdown. In Sublime, generating the HTML uses the same ‘build’ model as compiling code. So you first set the build system to Markdown (&lt;strong&gt;Tools &amp;gt; Build System &amp;gt; Markdown&lt;/strong&gt;). Then you build it (&lt;strong&gt;CMD + B or Tools &amp;gt; Build&lt;/strong&gt;), which by default will create an HTML file alongside your markdown file. You can view the results in a browser directly or just open the HTML file in Sublime. &lt;br /&gt;
What you should have at this point is nicely formed HTML without tons of extra CSS (and, if you added code-highlight styles, some colorful highlited text as well). You can just cut the HTML and paste it straight into the HTML view in Blogger and you should have a perfect, Blogger friendly but Markdown-clean and easy blog entry. Once you’ve done the setup steps once, your only job is a single cut-and-paste (you can even configure MarkdownPreview to copy the HTML to the clipboard instead of writing to a file!).   &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#wrapup"&gt;&lt;/a&gt;Wrapup&lt;/h3&gt;
&lt;p&gt;This is not the perfect blogging system, by a long shot – but it’s a whole lot better than Blogger’s slow GUI, and it offers flexible code highlighting for all of the languages that Pygments supports. Once all the spadework is done, posting is as simple as writing in Markdown, hitting the build button, then pasting into Blogger. So far I’m finding it a huge improvement. &lt;br /&gt;
But of course, TA’s are &lt;em&gt;never&lt;/em&gt; satisfied so I bet this will come up again some other time…&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 17 Mar 2015 23:47:00 -0700</pubDate><guid>tag:,2015-03-17:Markdown-Wrapup.html</guid></item><item><title>You kids get offa my lawn!</title><link>/You-kids-get-offa-my-lawn!.html</link><description>&lt;p&gt;I didn't get a chance to go to the &lt;a href="http://www.gamasutra.com/view/news/238236/Im_still_creative__Game_industry_vets_rally_against_ageism.php"&gt;GDC panel on ageism&lt;/a&gt; this year, but it's definitely a topic that I've thought about a lot as I've gradually metamorphosed into an  old codger.  Seeing the panel and &lt;a href="http://www.gamesindustry.biz/articles/2015-03-12-is-ageism-the-only-prejudice-the-industry-isnt-discussing"&gt;related articles&lt;/a&gt; reminded me of one of the very first columns I wrote for Game Developer, all the way back in 2004 when my back didn't make those bizarre noises every time I bend over.  &lt;/p&gt;
&lt;p&gt;Some of the observations here are a bit dated -- most notably, the article is pretty optimistic about the options for climbing the corporate ladder, since it was written at a time when team sizes and big mega-game-conglomerates were growing instead of looking increasingly rare.  However the problems seem to be very much alive today.  As somebody with very talented and accomplished friends who've fallen off the industry tightrope in their 40's and early 50's I can attest that the problems are real.  &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;Never Hire Anyone Over 30&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.thestranger.com/images/blogimages/2010/06/19/1276982203-logans_run1.jpg"&gt;&lt;img alt="" src="http://www.thestranger.com/images/blogimages/2010/06/19/1276982203-logans_run1.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lately the games business has come to remind me of the glitzy shopping mall / utopia in &lt;em&gt;&lt;a href="http://www.imdb.com/title/tt0074812/"&gt;Logan's Run&lt;/a&gt;&lt;/em&gt;. _(Even your references have got cobwebs on them, old man! -- Ed.) _ It's a fabulous playground for young people  - though to be fair games biz is short on free love and polyester unitards – and we've all got blinking crystals in our palms, ticking away inexorably towards extinction. While we may not be facing the fiery Carousel at 30, it seems like very few us stay in the business past 35.  Take a look around at your next GDC or IGDA meeting: there will be a lot of pink and blue hair, but not much gray.  As one recruiter I spoke to told me:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Companies definitely want us [recruiters] to ask a lot of the questions that the law won't let them ask. Age discrimination would be the industry's dirty little secret if somebody would bother to keep it secret.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The reasons for the demographic skew in games are very complicated. After all, it's not as if the games industry's attitude towards age and experience is dictated by some sinister Young Boys Network.  &lt;/p&gt;
&lt;p&gt;So, let's start by saying what should be obvious: simpleminded discrimination based on age is stupid and shortsighted. Our industry has always had a lot of adolescent traits – particularly when it comes to deadlines and professionalism – and we'll never grow up if we don't find ways to retain experienced, mature people. That said, it's important to look at some common reasons employers and recruiters give for putting a discount on experienced artists. I'm not defending these attitudes, but you'll need to understand them if you want to manage your career effectively through your thirties  and hopefully beyond.  &lt;/p&gt;
&lt;h3&gt;The price of experience&lt;/h3&gt;
&lt;p&gt;One obvious handicap that veterans face is cost.  Artists with a lot of titles and long resumes expect to command salaries that reflect their experience. Obviously studios always have one eye on their budgets when making hiring decisions, so this makes changing jobs and chasing raises harder for a vet than for younger, cheaper talents.  In addition, many employers feel old pros will be tougher negotiators than new hires. They are less likely to believe in stock options or bonus packages and more interested in cold cash. Worst of all, from the employer's perspective,  a pro is relatively immune to the glamor of simply being in games. Where a lot of young talent is willing to work for peanuts, just for the chance to be close to the games they love, the romance wears a bit thin when its time to pay for the kids' braces or a new dishwasher.   &lt;/p&gt;
&lt;p&gt;Does this mean an experienced artist is necessarily a bad bargain for a company? Not at all. But it does mean that an eight or ten year vet needs to be able to tell a potential employer exactly why he or she is worth more money, or deserves more responsibility, than a younger artist with only one or two titles shipped. Like a manufacturer in a high wage area, a veteran artist needs to identify the things that he or she can do well, because competing on cost is not an option when you have a family and a mortgage.  &lt;/p&gt;
&lt;h3&gt;Fire in the  Belly&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;We are in the era of the rising star...  Rising stars are hungrier. They don't have a family to feed, they don't have outside commitments and  are able to work longer hours and spend their free time benefiting their career. They observe what others are doing, how they can do it better, and quickly catapult themselves ahead of the pack.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;-P,  a games industry recruiter.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;The line between investment and gambling is often hard to find. Everyone faced with a hiring decision fantasizes about catching a talented newcomer with great potential but a short  resume – the “Rookie of the Year”  who will come at a big discount and mature into a star performer.  Of course only a fraction of new hires will turn out to be stars, but like all forms of gambling hiring thrives on hope.   Companies yearn for great discoveries they way FPS players bash crates in search of hidden goodies. In a perverse way, this optimism undercuts the what should be a veteran's biggest asset: the same track record that proves you're reliable, hardworking, even very talented also gives a pretty good indication of your future performance -- which might be very good but isn't going to change the industry overnight.  It's easier for a search committee to project the fantasy of brilliant learning, professional growth and whole-hearted devotion on the blank space at the end of short resume.  &lt;/p&gt;
&lt;p&gt;Moreover the notion of the “rising star” also brings up the question of lifestyle, which may be the most damning liability which veterans face. The movie-montage version of game development (cue cross-fades over empty pizza boxes, empty coffee cups, and bleary animators wincing at the rising sun)  is a young persons game. Room-mates or parents might dislike you coming home from work at 2am, but spouses and kids have a legitimate right to be mad about it. If a company sees potential employees primarily as mythical man-months on legs they're certain to incline towards the young.  &lt;/p&gt;
&lt;p&gt;In this context, veteran artists need to be able to articulate clearly how they can get as more work done  in a livable 40 or 50 hour week than their gonzo colleagues do in 80. They need to prove to potential bosses that they are more, not less likely to make the milestones than the pizza and coffee crowd.  The key to effectively dealing with employer preconceptions is understanding what employers want  -- productivity --  and being showing how  you can deliver without last minute heroics. Producers may like man-hours, but they really love reliable scheduling and completed assets.  &lt;/p&gt;
&lt;h3&gt;Keeping up with the times&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;When I was 25 I'd stay up till 3 or 4 in the morning just  playing with the new features in the latest version of Max, doing little side projects. Nowadays, between meeting my deadlines at work and having a family life, I don't have the time or, frankly, the interest to check out anything new. I know I'm in danger of falling behind, but I've got other priorities. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;- T, an artist, 33.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;With the astounding rate of technical progress in our business, obsolescence is a permanent threat. An artist approaching mid career will always have a few painfully acquired skills that have become completely useless. Even worse, the the combination of production pressure in the office and family life at home makes it harder to keep up with new tools and techniques. The stereotype of the older artist with rusting tech skills is not really fair, since an experienced artist can often see through the details of a new tool or idea to the core concept more quickly than a younger person who has read the manual but hasn't learned to really think in 3d. But fair or not, the stereotype is a fact of life that experienced artists have to combat.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/_3_eHe_xYeo4/TKvTPFpdbdI/AAAAAAAAAB4/SO-KPfdvD-E/s1600/obsolete-301x283.jpg"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/_3_eHe_xYeo4/TKvTPFpdbdI/AAAAAAAAAB4/SO-KPfdvD-E/s1600/obsolete-301x283.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The cumulative weight of all these preconceptions makes the professional environment for artists in the decade bracket – the “Children of Doom” who got into games in the early 90's – a tough one. In the early stages of a career, practically the only thing that really counts is a strong body of work– every article on “how to get a job in games” will tell you that a strong demo reel is the magic ticket to games industry success. But when you're a veteran, looking for an appropriately senior job, everybody you're competing with has a strong reel: the 3dSMax fanboys and overly optimistic web designers already been weeded out. Add in a potential employer who is worried about your salary, your commitment to the job, and your technical skills and the picture seems pretty bleak.  &lt;/p&gt;
&lt;h3&gt;Don't Fear the Reaper&lt;/h3&gt;
&lt;p&gt;Against this backdrop the best thing you can do for your career is to understand how you look to potential employers. In effect, your career is a product, and every time you go looking for a job – within your current company or at a new one – you're doing marketing. We tend to snicker (or worse) when the word marketing comes up, but it's a fact of life for anybody who wants to sell anything. You wont sell much if you don't know what people want to buy,or what you have to sell.  &lt;/p&gt;
&lt;p&gt;Emotionally this is often a difficult leap for artists to make – we put so much of ourselves into our work that we're offended when people take our creative skills as a given and want to talk about how we “contribute to the team” or “drive the product.”  Unfortunately only a small fraction of us will be hired for our artistic genius or personal creative vision. Far more of us really are there to contribute to the team and drive the product. To manage our careers effectively, we need to understand how we fit into the complex machine of game production. In short, we need to market ourselves effectively.  &lt;/p&gt;
&lt;p&gt;On thing most headhunters will tell you is that their clients – our potential employers --   want solutions to specific problem. It's not enough to go to a studio and say, “I've got this artist who is a really great person and very talented.” What most companies want to hear instead is -- “You need somebody who can manage the pipeline on your upcoming PS3 title, and I've got just the person.” Very few companies have the luxury of hiring solely because an applicant is talented, or has great potential  – what 40 or 50 person studio can support a Xerox PARC or Advanced Technology Group for distracted geniuses?  &lt;/p&gt;
&lt;p&gt;The problem for us, of course, is that it's very difficult to predict the specific needs of individual companies in advance.  The range of knowledge you need to be a good marketer for yourself is pretty intimidating – you need to be up to date on current and future trends in technology, fads in pop culture that get recycled into game art,  and of course the rise and fall of different studios, in order to manage your career.  &lt;em&gt;This is a good place to plug another old column: &lt;a href="http://techartsurvival.blogspot.com/2014/08/read-damn-ad.html"&gt;Read The Damn Ad&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;Once you've mastered all of that, you need to build – I hate to have to be this crude about it – a brand for yourself. When you're 25 you can sell yourself on drive and potential. By 35 you have, intentionally or not, shut off some possibilities and embraced others.  Most studios are already subdivided to the point that modelers, animators, texture artists and level designers are seen as mutually exclusive jobs. Within those specialties new sub-specialties are emerging – scripters, character riggers, and shader writers, for example. As each new discipline matures, people who picked it up out of necessity or curiosity will become “experts” -- which is powerful selling point as long as those specialties are in demand. At mid career you have a complex mix of skills which represents most of your value in the eyes of a potential employer. You need to know which ones are in demand and which aren't.  At 25 you're a commodity product, one of the many warm bodies the industry needs to function. At 35 you need to be a specialty item with a narrower market but much higher potential value.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://fundraisingforce.com.au/wp-content/uploads/2014/11/Personal-branding.jpg"&gt;&lt;img alt="" src="http://fundraisingforce.com.au/wp-content/uploads/2014/11/Personal-branding.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Whether it's a technical or an artistic niche you're looking for, you have to remember that you don't have control over the environment in which you'll be trying to peddle yourself and your skills. If you were a history buff with a fantastic reel of Shermans and Tigers, you'd have had a hard time pitching yourself in 1999, when everyone wanted to build the next Half-Life or Unreal. But after &lt;em&gt;Saving Private Ryan&lt;/em&gt;, _Medal of Honor _and _Battlefield 1942 _you'd suddenly find yourself a hot commodity. Alas, even if you sat down today to today to master the details of the _PanzerKampfWagen IV ausf H., _it's probably too late. Something else will have already become the _specialite du jour. _  &lt;/p&gt;
&lt;p&gt;The same problem bedevils technical skills too. If you have a lot of production experience in, say, PS2 environments you've got a leg up relative to somebody who's only done DreamCast games. Yet becoming tagged as a PS2-monkey can one day become a drag on your career, if it ghettoizes you into B-list, end-of-lifecycle titles and keeps you away from cutting edge PS3 or Xbox2 games.  Specialization is a two edged sword, and you need to have an eye on the future as you indulge your passions. You also need to look for assignments that will keep you current with upcoming tech and topics.  &lt;/p&gt;
&lt;p&gt;The real key to being rewarded for your experience is honesty: the ability to take good hard look in the mirror. Without a realistic sense of your own strengths and weaknesses,  you won't be able to sell yourself. I don't mean weakness in the interview question, “my biggest weakness is I don't know when to stop devoting myself to the company” sense -- this is a sober look at your real skills and personality. If you know what you can do well, you can either find companies that need you, or become good at something they need that flows out of your existing skills. If you don't know what you're not good at, you'll always be competing at a disadvantage without knowing why.   &lt;/p&gt;
&lt;p&gt;One artist I know, with a track record dating back to VGA era, found his career slowing down because the combination of family life and production pressure made it almost impossible for him to keep up with cutting edge technology. After a lot of soul searching, he accepted the fact that he wasn't going to stay on the bleeding edge any more. He found a job doing interface design, rather than production art; as an “interaction designer” he can still use lessons he learned on a 286 about clear design, user expectations, and the relationship between interface constraints and gameplay. His deep knowledge of how gamers think makes him very good at his new job. Moreover in ten years he'll still be learning and growing, instead of swimming upstream against a continuing flood of technological change.   &lt;/p&gt;
&lt;h3&gt;Going Corporate&lt;/h3&gt;
&lt;p&gt;Of course, the  classic way to capitalize on experience is to move from line production to management. This is harder for artists than for many other folks -- we tend to be artists precisely because we enjoy making things, and a life spent monkeying with schedules and having meetings is a terrifying thought for a lot of us. It might be easier to seduce us into management if there were management niches to fill --  but  in most studios the career ladder is extremely short. You can become an art lead, and then an art director...  and then you're done and can retire.  Without a lot of intermediate positions it's tough to even know if you have the aptitude or the desire to leading a team.  &lt;/p&gt;
&lt;p&gt;Unfortunately, the role of Art Director is often a dubious reward for success as a production artist. The the key skills of an AD – communications, personnel management, transmitting a shared vision and getting people to collaborate on realizing it – are only tangentially related to the technical skills that make a great production artist. The notion that Art Direction is a “level up” in the great games industry RPG is a source of unhappiness and frustration for many.  If you do have people skills, though, you may find that not only art direction, but even becoming a producer or studio head is the best place to spend your second decade in games. Your artistic judgment will still be necessary, but you'll be free all nighters and carpal tunnel syndrome and all the year's you've spent watching games and games people will be a big asset to your work.  &lt;/p&gt;
&lt;h3&gt;Keep on keepin' on&lt;/h3&gt;
&lt;p&gt;Many of us, though, just want to keep on doing the work we love. It's always possible to keep beavering away, perfecting our craft and (hopefully) being rewarded for our skills and vision. Hopefully the tactics and observations we've sketched out here will at least help dedicated artists to remain well paid and well respected in their work even if there is no corporate ladder for them to climb.  &lt;/p&gt;
&lt;p&gt;In the Golden Age of Hollywood, craft specialists like cinematographers, set designers and effects people hardly ever made the jump to management either as directors or producers. However they did have their own parallel status hierarchy, in the form of professional societies and particularly the Oscars, which gave meaning and shape to careers that topped out, in terms of money and job titles, when you were 35 or 40.  Our industry would certainly benefit if we could have a similar level of professional respect and community, in which we could recognize and applaud each other's work. How many game artists work do you actually know? Can you put an artists name on a particular character or environment? If you read &lt;a href="http://www.gamasutra.com/view/feature/130519/the_anticommunist_manifesto.php"&gt;Jason Rubin's manifesto in the May GDMag&lt;/a&gt;, you know how much studios and developers need to work to promote their professional profiles. We need to do the same thing – to form a network that recognizes and rewards talent and expertise in our medium. That would be a benefit for all of us, old fogeys, young rebels and everybody in between.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 16 Mar 2015 19:05:00 -0700</pubDate><guid>tag:,2015-03-16:You-kids-get-offa-my-lawn!.html</guid></item><item><title>Procedural world tech</title><link>/Procedural-world-tech.html</link><description>&lt;p&gt;This page is a very &lt;em&gt;lightly&lt;/em&gt; curated list of resource I'm keeping for myself while researching procedural world generation tech.  I'm keeping links here but I'm not commenting (at least not yet) on whether or not they look good, feasible or just plain goofy.  &lt;/p&gt;
&lt;p&gt;http://www.tcd.ie/civileng/Staff/Brian.Caulfield/3A1/3A1%20Lecture%2013.pdf  one of several on clothoid road curve generation . Good reference numbers.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://hpcg.purdue.edu/bbenes/papers/Smelik14CGF.pdf"&gt;http://hpcg.purdue.edu/bbenes/papers/Smelik14CGF.pdf&lt;/a&gt;  survey of the 'state of the art'  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://hpcg.purdue.edu/?page=publication&amp;amp;id=170"&gt;http://hpcg.purdue.edu/?page=publication&amp;amp;id=170&lt;/a&gt;  (hydrography based terrain gen)  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=GJWuVwZO98s"&gt;http://www.youtube.com/watch?v=GJWuVwZO98s&lt;/a&gt;  (grid &amp;amp; layer system for infinite generation)  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=RAtdFKiqs34#t=143"&gt;http://www.youtube.com/watch?v=RAtdFKiqs34#t=143&lt;/a&gt;  (procedural rule expansion based on voronoi of a plane created with distorted hex grid)  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=FR9xI0GgrBY"&gt;http://www.youtube.com/watch?v=FR9xI0GgrBY&lt;/a&gt;  (by the guys who made Prison Architect!)  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gamasutra.com/view/news/208109/Video_tricks_for_procedural_terrain_generation_in_iOS_MMO_Supernauts.php"&gt;http://www.gamasutra.com/view/news/208109/Video_tricks_for_procedural_terrain_generation_in_iOS_MMO_Supernauts.php&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;http://www.graphics.rwth-aachen.de/media/papers/krecklau_generalized_grammar_071.pdf  &lt;/p&gt;
&lt;p&gt;http://www.world-machine.com/download.php?page=basic is a pretty slick node-based procedural terrain generator. No scatter/foliage etc, but generates very nice heightmaps with neat erosion filters.  &lt;/p&gt;
&lt;p&gt;http://procworld.blogspot.com  &lt;/p&gt;
&lt;p&gt;http://www.joesfer.com/?p=22  An interesting discussion of procedural weathering.  The particle paint feature in Substance Painter has been really cool, this is in a similar vein&lt;br /&gt;
.  &lt;/p&gt;
&lt;p&gt;Not tried yet:  &lt;/p&gt;
&lt;p&gt;http://www.geocontrol2.com/e_index.htm  &lt;/p&gt;
&lt;p&gt;http://www.daylongraphics.com/  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 14 Mar 2015 18:23:00 -0700</pubDate><guid>tag:,2015-03-14:Procedural-world-tech.html</guid></item><item><title>ScriptCtx</title><link>/ScriptCtx.html</link><description>&lt;p&gt;You might have noticed a poll in the right sidebar of the blog:  after a month of asking, it sounds like the vast majority of readers have never tried &lt;a href="http://download.autodesk.com/us/maya/2011help/CommandsPython/scriptCtx.html"&gt;scriptCtx&lt;/a&gt;, as you can see here:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-nyzePoD-TCQ/VQSDhjpJcEI/AAAAAAABLlc/vC5gm2L9nD4/s1600/poll.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-nyzePoD-TCQ/VQSDhjpJcEI/AAAAAAABLlc/vC5gm2L9nD4/s1600/poll.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There's an obvious reason for this: scriptCtx stinks.  But it's still kinda useful, so it's worth at least explaining how it works to the 68% of folks who don't even know what it does.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 14 Mar 2015 11:53:00 -0700</pubDate><guid>tag:,2015-03-14:ScriptCtx.html</guid></item><item><title>Site updates</title><link>/Site-updates.html</link><description>&lt;p&gt;I've finally gotten around to re-hosting the slides from the &lt;a href="http://theodox.github.io/#!cookbook/index.md"&gt;Character Rigger's Cookbook&lt;/a&gt; talk.  You can also get the &lt;a href="http://www.gdcvault.com/search.php#&amp;amp;category=free&amp;amp;firstfocus=&amp;amp;keyword=character+rigging%2Bbest%2Bpractices&amp;amp;conference_id="&gt;original audio on the GDC Vault&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://dl.dropboxusercontent.com/u/2977490/presentations/cookbook/img5.jpg"&gt;&lt;img alt="" src="https://dl.dropboxusercontent.com/u/2977490/presentations/cookbook/img5.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the tiny handfull of you how were using my Unity course notes, I'm in the process of moving them to a new host.  So the old link at &lt;em&gt;theodox.com&lt;/em&gt; is no longer correct (if you follow it you'll get a work-in-progress page; I'm experimenting with a cool new &lt;a href="http://dynalon.github.io/mdwiki/#!index.md"&gt;markdown based wiki&lt;/a&gt; that is much nicer than the old one at &lt;a href="http://tryscribble.com/"&gt;tryscribble.com&lt;/a&gt;, but I have yet to make 'real' pages).  I'll announce it here when they go live again.  &lt;/p&gt;
&lt;p&gt;While moving things around I also added redirect so you can find this blog at &lt;a href="http://blog.theodox.com/"&gt;blog.theodox.com&lt;/a&gt; as well as the usual blogspot link. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 14 Mar 2015 11:43:00 -0700</pubDate><guid>tag:,2015-03-14:Site-updates.html</guid></item><item><title>GDC on the horizon</title><link>/GDC-on-the-horizon.html</link><description>&lt;p&gt;For folks who'll be attending &lt;a href="http://www.gdconf.com/"&gt;GDC&lt;/a&gt; this year, I'll be doing a talk on &lt;strong&gt;Technical Art for Art Directors &lt;/strong&gt; at the &lt;a href="http://schedule.gdconf.com/session/art-direction-bootcamp-technical-art-direction"&gt;Art Director's bootcamp&lt;/a&gt; on Monday at 2:15.  Hope to see some of you there!  &lt;/p&gt;
&lt;p&gt;Update- almost there! 303 south hallI believe.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 24 Feb 2015 22:49:00 -0800</pubDate><guid>tag:,2015-02-24:GDC-on-the-horizon.html</guid></item><item><title>Poll tax</title><link>/Poll-tax.html</link><description>&lt;p&gt;I'm experimenting with Blogger's (not super impressive) poll support. So please check out the poll on &lt;em&gt;ScriptCtx&lt;/em&gt; on the right hand side of the page. If the survey produces good results I'll do more as way of getting more sense of what the community is doing out there....&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 14 Feb 2015 13:06:00 -0800</pubDate><guid>tag:,2015-02-14:Poll-tax.html</guid></item><item><title>What The...?</title><link>/What-The...?.html</link><description>&lt;p&gt;Like many Maya heads I have long wrestled with the problem of filtering lists to get what I'm interested in.  You're probably familiar with the use of  the &lt;strong&gt;type&lt;/strong&gt; flag in cmds.ls() to filter on types: for example this will give you only the transforms in your current selection:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cmds.ls(sl=True, type = 'transform')&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This works for any node type (the list is quite long: it's basically the whole maya node class hierarchy) and is a handy way to &lt;/p&gt;
&lt;p&gt;However I just noticed today that this works &lt;em&gt;a little&lt;/em&gt; for component selections as well.  For some reason Maya 2014+ seems to treat faces, edges and vertices as if they were nodes of a "float3" type (uv's are "float2"s) .  This means you can get the components from a mixed selection with:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cmds.ls(sl=True, type = 'float3')  &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Not the most earth-shattering discovery of the 21st century, but handy nonetheless.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 05 Feb 2015 22:57:00 -0800</pubDate><guid>tag:,2015-02-05:What-The...</guid></item><item><title>Just Put One Foot In Front of the Other</title><link>/Just-Put-One-Foot-In-Front-of-the-Other.html</link><description>&lt;p&gt;We've been look a lot at movement animations at work, which reminded me of this old &lt;em&gt;Game Developer&lt;/em&gt; article from 2007. It's got some handy reference for animators and tech animators, and it pushes one of my favorite ideas - a four way blend between  fast and slow, short and long versions of the same walk cycle as a way to get lots of variety and nicely tweakable ground speed for characters.  &lt;/p&gt;
&lt;p&gt;The humble walk cycle is the foundation of the animator’s art. A really good cycle doesn’t just move a character from place to place: every cycle ought to be a highly compressed character study, as concise and elegant as a haiku. The climax of &lt;strong&gt;Toy Story&lt;/strong&gt;, where Woody and Buzz race after the moving van, is a brilliant example of two characters doing the same thing, and yet doing it in ways that are perfect expressions of their respective personalities.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://img.elo7.com.br/product/main/3853F0/painel-decorativo-adesivo-buzz-e-woody.jpg"&gt;&lt;img alt="" src="http://img.elo7.com.br/product/main/3853F0/painel-decorativo-adesivo-buzz-e-woody.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All too often, of course, the demands of production get in the way of the poetic ideal.   Between the technical demands of game engines and the casual disregard which designers and players share for the laws of the universe, the harried game animator isn’t always going to have the opportunity to carve out that gem-like slice of time that describes a character.   &lt;/p&gt;
&lt;p&gt;Naturally most animators prefer a visual to a verbal reference for something as complex as a moving human being. In an ideal world we’d have the chance to perfect our knowledge with lots of reference footage, mocap data, and observation time. That’s the classical approach, going back to the days of Disney’s Nine Old Men, and any animator who can should pore over video , mocap, and &lt;a href="http://www.muybridge.org/"&gt;Muybridge &lt;/a&gt;when time permits.  Even so, it’s good to have a little cheat sheet handy for those times when there’s no authoritative reference lying around. In particular, it’s nice to be able to give designers and coders some real world facts about how human locomotion works for those delicate little negotiations around things like character speed. With that in mind, we’ll going to borrow a little science for this look at locomotion.   &lt;/p&gt;
&lt;p&gt;If you’re researching  the mechanics or physics of walking, you’re likelier to end up reading medical journals than back issues of &lt;a href="http://www.awn.com/"&gt;Animation World&lt;/a&gt; – most of the reference work on the web comes from academic researchers, not artists. From choreographers to fossil hunters to orthopedists, the study of movement on two legs is a busy field, so at least we’ll be able to borrow a little bit of terminology and some useful numbers from our scientific friends (some useful references can be found in the sidebar).  Of course our real interest s are art and drama, not science; so don’t be enslaved to any figures cited here.  Never forget the tried-and-true &lt;em&gt;Pixel Pusher&lt;/em&gt; rule:  Do what looks best to you, not what some book or magazine column (however witty, erudite and trustworthy it may be) tells you.  &lt;/p&gt;
&lt;p&gt;Any movement cycle can be defined by four basic components:&lt;br /&gt;
• &lt;strong&gt;Gait&lt;/strong&gt;: the pattern of footfalls&lt;br /&gt;
• &lt;strong&gt;Cadence&lt;/strong&gt;: the timing of the strides&lt;br /&gt;
• &lt;strong&gt;Stride &lt;/strong&gt;length: how much ground is covered by each pace.&lt;br /&gt;
• &lt;strong&gt;Stride width&lt;/strong&gt; : often forgotten, but an important key to the style of a cycle  &lt;/p&gt;
&lt;p&gt;You’ll notice that the obvious game play element, namely ground speed, isn’t in this list. As we’ll see, the speed of a cycle is produced by the interaction of the cadence and stride length; by itself, the speed doesn’t tell you enough to distinguish one walk from another.   &lt;/p&gt;
&lt;h2&gt;Walk, Don’t Run&lt;/h2&gt;
&lt;p&gt;Move cycles come in two basic flavors:  walks and runs. As any animator knows, walks contains a moment when both feet are on the ground at the same time, while in runs only a single foot is ever supporting the body. The mechanics of the two movements are quite different as well.   As every animation tutor since &lt;a href="http://www.amazon.com/Animation-Script-Screen-Shamus-Culhane/dp/0312050526"&gt;Seamus Culhane&lt;/a&gt; loves to repeat, a walk is a “controlled fall” – the walker pivots over the “down” foot like an inverted pendulum using a minimal expenditure of energy.  A run, in contrast, uses the raw power of the planted leg to essentially jump from foot to foot. This is why jogging is better exercise than walking even though a brisk walk may be faster than a slow jog:  walking is a more economical way to get around and running, even a slow run, is more forceful.  &lt;/p&gt;
&lt;p&gt;The shopworn game industry convention treats “walk” and “run” as different speeds, rather than different ways of moving.  It would, of course, be more flexible and realistic to cover a range of speeds. Unfortunately, we can’t achieve this just by blending walks and runs together:  the mechanics are quite different and there’s no such thing as having “one and a half” feet on the ground.  However, there is a lot of natural variation within the two gaits, so it is possible to cover a broad range of speeds by creating fast and slow versions of both the walk and run gaits with some overlap in their speed ranges.  &lt;/p&gt;
&lt;p&gt;Working with speed ranges, rather than single speeds, does involve some work on the code side. Tom Forsyth’s 2004 GameTech presentation &lt;a href="https://www.google.com/url?sa=t&amp;amp;rct=j&amp;amp;q=&amp;amp;esrc=s&amp;amp;source=web&amp;amp;cd=2&amp;amp;cad=rja&amp;amp;uact=8&amp;amp;ved=0CCQQFjAB&amp;amp;url=http%3A%2F%2Fgame-tech.com%2FTalks%2FHowToWalk.ppt&amp;amp;ei=R4zNVNf5FdLfoATdnILgAw&amp;amp;usg=AFQjCNG-GOmmaCAHoTX6wqYGQ-nYjYvTbw&amp;amp;sig2=g767DtSw4E6Tu34T6b9U7g&amp;amp;bvm=bv.85076809,d.cGU"&gt;How to Walk&lt;/a&gt; gives a good overview of the technical issues involved.   For the artist, job is in some ways easier than authoring two fixed speed cycles. Since the actual runtime speed of the character will be the product of a blend, animators can work on artistically clear extremes without waiting for design to settle on the character’s speed down to the last decimal place.  Doing two runs or walks also encourages animators to emphasize the character aspect of the cycle over the mechanics, since precise ground speed is less of a constraint.  &lt;/p&gt;
&lt;h2&gt;Hup Two Three Four&lt;/h2&gt;
&lt;p&gt;Of course many game engines already have a rough-and-ready mechanism for adjusting the speed of a move cycle: they slow down or speed up the default walk and run cycles.   &lt;/p&gt;
&lt;p&gt;Although this makes intuitive sense – moving slower or faster would certainly seem to mean stepping more or less quickly – it’s actually unrealistic.  You can see proof of this very easily by watching army drill maneuvers:  A typical quick march step uses a 5 foot (1.52 m) stride once per second (when the drill regulations were standardized in the 19th century that was a big purposeful step, but for today’s taller soldiers it’s a fairly natural pace.)   &lt;/p&gt;
&lt;p&gt;When the formation wheels around a corner, you’ll notice that the soldiers on the outside of the formation, who have to cover much more ground than those near the pivot, never break the rhythm of the march – they simply extend their strides to about 5’6” (1.67 m) to keep up with their ranks. The overall rhythm of march never varies (see around 0:40)  &lt;/p&gt;
&lt;p&gt;This image gives a good general idea of the relationship between cadence and stride length at different walking and running speeds.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-7A26L7405v0/VM3JVwYrLvI/AAAAAAABLhY/BAtDZqVp-VQ/s1600/walk%2Bspeeds.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-7A26L7405v0/VM3JVwYrLvI/AAAAAAABLhY/BAtDZqVp-VQ/s1600/walk%2Bspeeds.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As you can see,  variations in stride length account for more of the speed changes than changes in cadence: the brisk walk covers 2.5 times as much ground as the relaxed walk, but only 33% quicker.  This suggests that blending different stride walks is a more realistic way to adjust a character's ground speed than just adjusting playback speed. Blending cycles with different cadences is a bit of work for coders but it makes life much easier for animators.  Trying to create two walk cycles that cover quite different speeds but in the same amount of time is far harder than finding a combination of timing and stride that works both for the character and the specified speed.  &lt;/p&gt;
&lt;p&gt;Establishing a cadence is obviously critical to building a good cycle.  Since ground speed is the interaction of cadence and stride length, it’s important to find a combination that matches the character and not just to settle for one that “works” to move the character across the ground at the right velocity. Faster cadences imply excitement, hurry, or anxiety.   &lt;/p&gt;
&lt;p&gt;Slower cadences tend to suggest relaxation, fatigue, reluctance, or solemnity.  The army, for example, reserves a special 60-step-per minute (ie, 60 frame) step for funerals and memorial services.  Interestingly, though, cadence is not a good indicator of age: one famous study found that runners in their 80’s step at about the same cadence as those in their 30’s.  They do, however, cover far less ground with each stride. They also spend more of each cycle firmly on the ground, and less of it pushing off or bounding through the air.   &lt;/p&gt;
&lt;p&gt;Those geriatric marathoners illustrate an important rule to for working with movement cycles: cadence and stride length are hard constraints that have to be met, but that leaves a lot of room for individuality within the rhythm of the cycle. The point of balance, height of the vertical bounce, and side-to-side hip sway are all important to the character of a run or walk.  The depth of the “bounce”, in particular controls the character sense of weight and energy level as well.  Keeping that movement separated out from the gross movement of the character across the ground (as we discussed in &lt;a href="http://techartsurvival.blogspot.com/2014/12/the-conquest-of-space.html"&gt;The Conquest of Space&lt;/a&gt;) makes that a far easier variable to control.  &lt;/p&gt;
&lt;h2&gt;Daddy Long Legs&lt;/h2&gt;
&lt;p&gt;Stride length is an important determinant of speed, so it’s important to remind your concept artists and designers about it early on.  Even small changes in a character’s physique can make a big difference in his or her stride length, thus the range of plausible speeds.  Track and field coaches have a rule of thumb that a human’s stride length is about 83% of their height ; thus a typical 6’ (1.82 m) game character would have a stride length of just over 1.51 meters.  Combined with the common 120-steps-per-minute cadence this gives a “natural” walking speed for a human character of around 1.5 meters per second,  which is the figure you’ll find in many web references.  A 4’6” (1.37m) dwarven warrior, on the other hand,  has a natural stride length of about 1.13 meters. Unless he’s get very different proportions he’ll have to scurry to keep up with that six foot comrade: to match the human’s ground speed the dwarf will have to have about a 22 frame walk cycle, or more likely break into a run.  &lt;/p&gt;
&lt;p&gt;Although stature has a lot to do with stride length, it’s not the only factor.  For example, that track coaches’ rule of thumb says a man’s stride length is 83% of his height, but a woman’s is 82.6% of hers &lt;em&gt;(who knew track coaches were so precise? --ed)&lt;/em&gt;. Women, however, have proportionately longer legs than men, so the difference there is one of musculature and usage.  Race walkers may have a stride length that’s more than 90% of their height, since they’re willing to look silly in pursuit of speed:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.hemispheresmagazine.com/images/2012/apr/14-thefan.jpg"&gt;&lt;img alt="" src="http://www.hemispheresmagazine.com/images/2012/apr/14-thefan.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On the other hand children and older folks tend to use less of their potential stride because they’re less sure of their footing.  The very young and the very old also have a tough time keeping their stride lengths consistent – toddlers can vary their steps by as much as 20 or 30%, while by the mid teens most kids maintain their stride length down to the millimeter.   &lt;/p&gt;
&lt;p&gt;Not surprisingly, the flexibility of stride length is the animators greatest friend in the run cycle business – it’s hard for a human character to look anything but silly if the cycle is much faster than 14 frames (a fantastic 260 steps per minute) but it’s comparatively easy to add a little extra flight time to achieve the impossible speeds so beloved by designers. One useful tip when extending strides beyond their natural limit: don’t over extend the forward foot, instead shorten the plant and increase the kick of the back foot.  If the angle of the front leg at strike time is 45 degrees or lower it wants to be a brake, not a lever.  &lt;/p&gt;
&lt;h2&gt;Striding Wide&lt;/h2&gt;
&lt;p&gt;Those long strides convey confidence, drive, and assertiveness.  Shorter steps suggest caution or timidity – it’s why we call them “baby steps”. They’re also the way we adapt to complex or crowded environments.  The tension between confidence and caution is also reflected in the width of moving stride, a detail that animators often forget.   Children, the elderly, and the infirm walk keep their feet spread wide to help maintain balance, as does anyone who has to cope with uncertain terrain.  &lt;/p&gt;
&lt;p&gt;Narrower gaits are a sign of self assurance:  both Olympic sprinters and supermodels place their feet very close to the centerline of the body as they move along.  For the runner this is a matter of efficiency, since the thrust that pushes the body along works better close to the line of movement  -- although sprinters start with their feet about 15” apart, roughly in line with their hips, by the time they reach full stride 9 or 10 steps into their run  their steps are less than 7” wide.  In the case of supermodels, the narrow track width accentuates the sway of a woman’s hips (already wider than a man’s) and helps emphasize her femininity.   In both cases, however, the compact posture reflects confidence where a more open stance anticipates potential difficulties.  &lt;/p&gt;
&lt;h2&gt;Reference data&lt;/h2&gt;
&lt;p&gt;Here are some reasonable real world numbers from a variety of sources. As always, your eyes should be your guide; but these numbers form a good starting point.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Ground Speed&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;(meters/ sec)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;Ground speed (miles/hr)&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;Stride Length (meters)&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;Cadence&lt;/p&gt;
&lt;p&gt;(steps/min)&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;Frames&lt;/p&gt;
&lt;p&gt;(30 hz)&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;---|---|---|---|---|---  &lt;/p&gt;
&lt;p&gt;1  m/s&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;2.23 mph&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;1.2 m&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;100&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;36&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;Deliberate walk  &lt;/p&gt;
&lt;p&gt;1.5 m/s&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;3.35 mph&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;1.5&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;120&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;30&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;“average” walk  &lt;/p&gt;
&lt;p&gt;2.5 m/s&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;5.59 mph&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;2 m&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;150&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;24&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;Brisk stride  &lt;/p&gt;
&lt;p&gt;1.6 m/s&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;3.71 mph&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;1.33&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;150&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;24&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;Slow jog  &lt;/p&gt;
&lt;p&gt;2.7 m/s&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;6.03 mph&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;1.8 m&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;180&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;20&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;Easy jog  &lt;/p&gt;
&lt;p&gt;4.5m/s&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;10.06 mph&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;2.7m&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;200&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;18&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;Distance runner  &lt;/p&gt;
&lt;p&gt;11.2 m/s&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;25.05 mph&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;4.8 m&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;280&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;13&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;Sprinter  &lt;/p&gt;
&lt;p&gt;For comparison, here's a few game numbers.  You see why I said designers tend to ask for unrealistic speeds.  Athletes and very nervous people can hit many of these numbers -- briefly -- but most of them can't peg a quickscoped headshot at the same time.  &lt;/p&gt;
&lt;p&gt;Game&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;Player run speed  &lt;/p&gt;
&lt;p&gt;---|---  &lt;/p&gt;
&lt;p&gt;Max Payne&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;5.5 m/s  &lt;/p&gt;
&lt;p&gt;Jak And Daxter&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;6.6 m/s  &lt;/p&gt;
&lt;p&gt;Halo&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;6.86 m/s  &lt;/p&gt;
&lt;p&gt;God of War&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;7.5 m/s  &lt;/p&gt;
&lt;p&gt;Unreal Tournament 2004&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;8.8 m/s  &lt;/p&gt;
&lt;p&gt;Quake Wars : Enemy Territory&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;8.94 m/s  &lt;/p&gt;
&lt;p&gt;Serious Sam&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;12.5 m/s  &lt;/p&gt;
&lt;p&gt;Quake4&lt;/p&gt;
&lt;p&gt;| &lt;/p&gt;
&lt;p&gt;15.25 m/s  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 31 Jan 2015 22:56:00 -0800</pubDate><guid>tag:,2015-01-31:Just-Put-One-Foot-In-Front-of-the-Other.html</guid></item><item><title>Race to the bottom?</title><link>/Race-to-the-bottom?.html</link><description>&lt;p&gt;I'm notorious for issuing gloomy pronouncements at GDC and elsewhere about the long term decline in artist pay.  I often point out that my starting salary in 1995 was about what an 6-year veteran makes today.  Maybe I'm just trying to scare the fainthearted out of the business and drive prices back up.  &lt;/p&gt;
&lt;p&gt;Still, my complaints are nothing compared to what's been going in the VFX industry.  The latest victim is &lt;a href="http://www.cartoonbrew.com/business/breaking-dreamworks-animation-will-shut-down-pdidreamworks-studio-over-500-jobs-will-be-eliminated-108161.html"&gt;PDI&lt;/a&gt;, which will be laying off 500 people.  While games has had it's ups and downs the last few years, VFX has had a brutal time with lots of closures and disruptions.   &lt;/p&gt;
&lt;p&gt;In that connection I came across &lt;a href="https://vfxsoldier.wordpress.com/"&gt;VFXSoldier &lt;/a&gt;, a site which has been fighting for more unionization in the VFX world.  While I'm deeply ambivalent about unionizing in CG -- I don't know if it's really &lt;em&gt;possible,&lt;/em&gt; much less a good idea -- but it's certainly not something to dismiss without thinking about and it is hard to see how it could make life worse for the poor VFX folks.  It's a worthwhile read just to see how the other half lives. I'm curious to hear what others think.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 26 Jan 2015 00:04:00 -0800</pubDate><guid>tag:,2015-01-26:Race-to-the-bottom</guid></item><item><title>Whoop-de-do!</title><link>/Whoop-de-do!.html</link><description>&lt;h1&gt;WORK IN PROGRESS&lt;/h1&gt;
&lt;p&gt;I'm reworking this page right now as I transition over to &lt;a href="http://dynalon.github.io"&gt;MDWiki&lt;/a&gt; - which, I should say, is awesome. So, right now this is pretty much placeholder (the nav bar is pretty rudimentary, for example)&lt;/p&gt;
&lt;p&gt;The main item here at the moment is the &lt;a href="///E://Users/Stephen%20Theodore/theodox.github.io/cookbook/index.md"&gt;Character Riggers' Cookbook&lt;/a&gt; slide deck from GDC.&lt;/p&gt;
&lt;p&gt;In the meantime, you might find something useful on my &lt;a href="http://blog.theodox.com"&gt;blog&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test():  
    print 999  
    for item in (1, 2) : print item * 3
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 25 Jan 2015 17:43:00 -0800</pubDate><guid>tag:,2015-01-25:Whoop-de-do!.html</guid></item><item><title>The Trust Fund</title><link>/The-Trust-Fund.html</link><description>&lt;p&gt;A recent &lt;a href="http://tech-artists.org/forum/showthread.php?5243-Developing-Tools-for-your-pipeline-general-question"&gt;discussion on TAO&lt;/a&gt; reminded me of this old GDMag column from 2010. Tech artists always have to fight to stay focused on the relationship at the heart of our business: no amount of technical wizardry matters if your artists aren't actually benefitting from what you do.   &lt;/p&gt;
&lt;p&gt;While much has changed in the last five years, a lot of this still seems like good advice (to me, anyway, but I'm biased).  I might add a couple of sentences about 'more unit tests' and 'continuous integration' and similar buzzwords but that's just fluff: taking care of your users is all that really counts.  &lt;/p&gt;
&lt;p&gt;Every cloud, says the old cliche, has a silver lining.  Nobody likes the angst and insecurity of our dubious economy.  Still, in these lean times, at least we're far less likely to be dragged away from useful work for chirpy HR seminars on workplace communications or, God helps us, to don blindfolds and lean backwards into the clammy arms of that W.O.W. fanatic from IT so we can "learn to trust our teammates."  Say what you like about the dire business climate, at least it tamps down the fluff industry.  &lt;/p&gt;
&lt;p&gt;Honestly, though, the gurus of the workplace have it right about one thing. Blindfolds aside, trust is a key part of any functioning workplace and it's particularly important for us. We make art in a collective medium where all of the disciplines are inextricably tied up together.  You can make a career as a rock singer with a mediocre backing band.  You can prosper as the best actor on lame sitcom.  Cranking out great models for a game that crashes on load, however, isn't going to earn you fame or fortune. Our work can easily be dragged down by a lame graphics engine or a busted pipeline (though, to be fair, we should add that a fun design or a snappy engine can also be torpedoed by inadequate artwork).   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://unbounce.com/photos/trust-me.png"&gt;&lt;img alt="" src="http://unbounce.com/photos/trust-me.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Put bluntly, there are no lone geniuses in game art. We depend on other people -- graphics engineers, tools coders, designers, and our fellow artists --- to do what we do.   &lt;/p&gt;
&lt;p&gt;These relationships are the foundation of our work lives. This doesn't mean that you have start every whiteboard session with a group hug.  In our world, trust is more than just a warm fuzzy feeling.  A healthy respect for your teammates - or the suspicion that they don't know what they're doing -- shapes how you work in very concrete, un-emotional ways.  &lt;/p&gt;
&lt;h2&gt;Trust Busted&lt;/h2&gt;
&lt;p&gt;Consider the morning ritual that greets most working artists at the beginning of the day.  Theoretically we all saunter in, fire up the box, and do a get to pull down the latest tools and most recent build of the engine.  We grab a cup of coffee while the our system assimilates yesterday's changes and by the time we're finished with &lt;a href="http://icanhascheezburger.com/"&gt;icanhascheezburger.com&lt;/a&gt;,_ (wow, that is&lt;strong&gt; extremely&lt;/strong&gt; 2010! –ed) _we're all caught up and ready for the day's labors.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.themistrading.com/wp-content/uploads/2012/06/lucy.jpg"&gt;&lt;br /&gt;
&lt;img alt="" src="http://blog.themistrading.com/wp-content/uploads/2012/06/lucy.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That's the theory, but it's rarely the practice.  Far too many artists will do &lt;em&gt;anything&lt;/em&gt; to avoid that daily get.  "I don't like the risk," says one, "you never know if it's going to work from one day to the next."  Another artist complains, "The tool I need broke last month so I rolled back to a working one and now I don't want to get again." There's the perennial favorite, "It takes too long, so I only do it once a month." And don't forget the oldest standby of them all: "I don't worry about that stuff, I'm just need my Max files."   &lt;/p&gt;
&lt;p&gt;Sound familiar? This all-too-common story is a tangible example of a breakdown in trust, and you don't need to a special edition of Oprah to see how it undermines the studio.  If the artists don't trust the tools team, they try to bypass the tools and find workarounds. But this goes both ways: just imagine the dark mutterings coming from the engineering department every time they have to hunt down a 'bug' that's really caused by out-of-date tools or hacky workarounds.  The artists think the engineers are lost in the clouds, the tools team think the artists are big babies.  Pretty soon things bog down in recriminations and buck-passing.  &lt;/p&gt;
&lt;p&gt;The damage from this kind of breakdown goes far beyond eye-rolling and sarcastic IM messages.  It's more than everyday inter-departmental wrangling, too. If you cope with tool and process problems by simply opting out, you aren't just irritating the  tools coders or TA's -- you're also leaving your fellow artists hanging.  &lt;/p&gt;
&lt;p&gt;It's perfectly understandable, of course.  As an artist you're stuck with the studio toolset -- it's not like you can take your business somewhere else if you don't like the your in-house material editor or custom map tool. With deadlines looming and creative problems to solve, it's hard to gin up much enthusiasm for bird-dogging an obscure problem with a wonky exporter plugin or tracking down the exact setting that adds 11,000 warning messages to your map imports. The temptation to find a quick workaround and move on is overwhelming.  &lt;/p&gt;
&lt;p&gt;But – &lt;em&gt;and here's the important part&lt;/em&gt; ! – ducking out on the problem doesn't just bypass it.  It perpetuates it, for you and for everybody else.  &lt;/p&gt;
&lt;p&gt;When the culture in the art department deals with tools problems by simply ignoring them, it becomes impossible for the tools team or tech artists to build long-term solutions.  Nobody's going to fix a bug that never gets reported, and nobody's going to improve on a bad workflow if the artists don't lobby for a real improvement.  Grumbling to each other at lunch doesn't count -- unless someone actually makes it clear that there's an issue, things won't get better. &lt;em&gt;Never&lt;/em&gt; underestimate how little the other departments know about your problems.  The political hassles of scheduling and finding resources for a real fix may be a problem that has to be settled among leads — but its every line artist's responsibilty to make sure both the art leadership and the tools team know when things are broken.  &lt;/p&gt;
&lt;p&gt;The old chestnut about trusting is that it leaves you vulnerable.   Working artists can relate to that, because nothing makes you feel more vulnerable than having a critical part of your pipeline break down when you've a looming deadline and the producer is breathing down your neck.  Trusting can be scary -- hell, the entire output of the Lifetime Network is devoted to that theme — but as every learn-to-love-again melodrama teaches you need to take some risks if you want to grow... or to ship good games.  &lt;/p&gt;
&lt;h2&gt;Trust Building Excersize&lt;/h2&gt;
&lt;p&gt;Fortunately, there are some concrete things you can do to strengthen the bond of trust between the content team and the folks who are supposed to help them make the game —  and none of them requires a sit-down with Dr. Phil.  &lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;The most important way tools teams can build trust is to manage their releases better. Nobody would dare release a 99 cent iPhone game into the wild without testing and QA support (&lt;em&gt;really? have you been to the App Store lately? –ed.&lt;/em&gt;)  All too often, though, tools teams and tech artists roll out changes without doing the legwork needed to make sure the tools work as advertised.  When teams were smaller and development was less ponderous, tool writers learned to love fixing bugs and adding features with a simple checkin. It feels great to be able to drop in a one line fix into a script and tell your disgruntled customer "just get the latest version and you'll be able to work again."   &lt;/p&gt;
&lt;p&gt;In a big modern studio, though, that immediacy is an expensive luxury. When you're supporting 50 or 100 artists, the costs of catching bugs late mount up quickly.  This is particularly true for tools like Max and Maya plugins, which can leave bad data inside art files long after the original bug is fixed.  No fix is fast enough to pay for the cost of dozens of angry, idled artists.  Bugs will always happen, but an aggressive testing program (complete with real, live testers, whether they're QA folks or tech artists), will go a long way toward easing the pain. Testing will certainly slow the response time for feature requests and trivial fixes.  But the benefits in terms of quality and reliability - and therefore, trust between the tools team and the content team -- are more than enough to pay for the hassle.  &lt;/p&gt;
&lt;h3&gt;Regularity&lt;/h3&gt;
&lt;p&gt;Ship dates matter, as we all know too well. A planned release schedule for tools enhances trust, because it helps hard-working artists brace for changes. Tools that just magically appear in the daily synch are often simply ignored -- if the new skeleton editor came out while you were polishing run cycles, there's a good chance you don't even know its there (Note to tools and teacart teams everywhere: nobody reads those emails!)  When tools change their behavior or appearance without warning, artists lose faith in the stability of their environment.  And of course, if an innocent synch introduces bugs along with UI changes, the trust level will plummet and the vicious cycle of avoidance will begin.  &lt;/p&gt;
&lt;p&gt;If, on the other hand, tools go out the door at well advertised times -- hopefully, coordinated with production to avoid stepping on sensitive deadlines! -- everyone can budget the time and energy needed to make sure that the new functionality is supported, new workflows are well understood, and any bugs that slip through test are squashed before they do too much damage.  Scheduled releases, accompanied by scheduled learning time, are a safer and less intimidating way to keep the artists and tools builders communicating.  &lt;/p&gt;
&lt;h3&gt;Uniformity&lt;/h3&gt;
&lt;p&gt;Trust, as the cliche goes, is a two-way street.  If we want the tools to get better, we need to contribute something too.  The effort that goes into doing tools with adequate testing and support is hard to sustain if the production people subvert the new tools and insist on their right to opt out of changes.  Keeping an art team productive is a herculean labor.  There are a million sources of potential problems: out of date video drivers, conflicting versions of software, different OS versions — you name itg. When every artist has a completely private environment, with personally selected versions of tools and private workarounds, support is exponentially harder. Time that should go to fixing bugs in the current version of the tool will be wasted simply trying to figure out what's going on and why.  &lt;/p&gt;
&lt;p&gt;Surrendering control over your personal working environment is emotionally difficult for most artists. We're slavishly devoted to customizing our hotkeys, tweaking the layout of our custom toolbars, and enhancing our personal workflows with scripts and widgets we've downloaded from the net. We want the same level of personal control over our in-house tools.  Unfortunately, the line between what's personal and what has to be shared with others can be pretty blurry.  Out of date tools may be producing data that's subtly wrong without being obviously busted, dragging down game performance or leading to crashes. Tools that are made to work together may function poorly if they aren't updated in tandem.  And working a completely private environment means you can't give meaningful feedback to the tools folks to help them do their jobs better.  The tools guys can only support one good environment at a time; it should be the one you're working on.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.multiplestreammktg.com/blog/wp-content/uploads/2013/03/fb99-300x239.png"&gt;&lt;img alt="" src="http://www.multiplestreammktg.com/blog/wp-content/uploads/2013/03/fb99-300x239.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The touchy feely stuff&lt;/h3&gt;
&lt;p&gt;As any Oprah devotee knows, communication is the key to building trust.  Unfortunately, tools providers and line artists don't always communicate as well as they ought to.  Technical types tend to understand the needs of computers better than they do the needs of artists. They're always tempted to  to build tools that make things easier for computers, rather than helping artists.  Artists, on the other hand, are frequently too shy to  bring their concerns to the attention of the tools team.  &lt;/p&gt;
&lt;p&gt;If you don't tell people clearly what is broken in your workflow, what's preventing you from iterating, or what kind of changes would make things better, you have no right to bitch about the tools you've got.  Both sides need to explain their needs clearly and both sides need to listen attentively. Tech artists, who by nature have a foot in both worlds, are invaluable for helping these discussions along, as are producers who can provide high level guidance on the distinction between must-have and wouldn't-it-be-nice features.   &lt;/p&gt;
&lt;p&gt;The bottom line is really very simple. Artists, tech artists and tools engineers all need to commit to making things better.  Good tools don't make for good games on their own — but lousy tools certainly make for lousy games. So, if you skip the meetings, don't report bugs, and try to roll your own toolset, you're making your own life and your teammates lives harder in the long run.  &lt;/p&gt;
&lt;p&gt;Trust me on that.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://trevinwax.com/wp-content/uploads/2011/07/1969.gif"&gt;&lt;img alt="" src="http://trevinwax.com/wp-content/uploads/2011/07/1969.gif" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 22 Jan 2015 21:23:00 -0800</pubDate><guid>tag:,2015-01-22:The-Trust-Fund.html</guid></item><item><title>Be cross</title><link>/Be-cross.html</link><description>&lt;p&gt;We've talked a lot about the dot product in this series, because in an very important way it's the foundation of linear algebra.  However we've neglected the dot product's less famous little brother, the cross product, which is an extremely useful tool for TA's. So let's remedy that injustice.  &lt;/p&gt;
&lt;p&gt;The cross product, also known as the &lt;em&gt;vector product&lt;/em&gt;, is a vector operation like the dot product.  However it has two really important differences. &lt;/p&gt;
&lt;p&gt;The first one is why it gets the alias &lt;em&gt;vector&lt;/em&gt; product. The dot is a _scalar _product, because dotting two vectors gives you back a single number, a.k.a a "scalar" value.  The cross product is the _vector _product because it returns a new vector.  And, as it happens, that vector is very handy for anybody doing 3-d math because it's the normal of the plane defined by the original two vectors:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/images/crossproduct.jpg"&gt;&lt;img alt="" src="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/images/crossproduct.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The is obviously going to be useful, but it's a little trickier to explain exactly &lt;em&gt;how&lt;/em&gt; the cross product does its thing.  The dot-product based derivations that we've provided for matrices, for example, aren't too hard to follow once you get the whole bagels-and-coffee derivation.  Cross products... well, lets see if we can make a little sense of them.  As always, you &lt;em&gt;can&lt;/em&gt; just skate on, knowing that calling vectorA.cross(vectorB) will give you a vector at right angles to the vectorA and vectorB, but it's always a good idea to get under the hood and see how these little miracles operate instead of just taking them purely on faith.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 16 Jan 2015 19:11:00 -0800</pubDate><guid>tag:,2015-01-16:Be-cross.html</guid></item><item><title>Dang</title><link>/Dang.html</link><description>&lt;p&gt;You know the old saying, "you learn something new every day?" Well it's true. Usually, it's something like "I don't know where I left my keys," but sometimes you run into something that you realized you should have known all along and yet somehow it takes you by surprise.   &lt;/p&gt;
&lt;p&gt;Here's a little nugget that I stumbled onto today.  If you know Maya, you probably know that cmds.ls() with no arguments gives you a list of every entity in your current maya scene.  However if you pass in a list, ls() will filter it down.  It's very common to do something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;stuff = [&amp;#39;pCubeShape1&amp;#39;, &amp;#39;top&amp;#39;, &amp;#39;persp&amp;#39;]  
cmds.ls(stuff, type = &amp;#39;camera&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as a cheap way of filtering a list of objects by type, or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmds.ls(stuff, l = True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to get long names and so on.  All pretty 101.&lt;/p&gt;
&lt;p&gt;Now, if you're an old Pythonista, you've probably tried it like this too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmds.ls(*stuff, l = True)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and gotten the same result.  Usually, &lt;em&gt;args is a great help in writing simpler code, since you write functions that take an arbitrary number of arguments without forcing the callers to create lists or tuples. Your code can use loops or comprehensions knowing that the &lt;/em&gt;args will be iterable even if it's empty:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def starargs(*args):  
    for idx, item in enumerate (args):  
        print idx, &amp;#39;\t&amp;#39;, item


starargs() # prints nothing

starargs(&amp;#39;a&amp;#39;)  
# 0  a

starargs(&amp;#39;i&amp;#39;, &amp;#39;j&amp;#39;, &amp;#39;k&amp;#39;)  
# 0  i  
# 1  j  
# 2 k

starargs(*[&amp;#39;x&amp;#39;,&amp;#39;y&amp;#39;,&amp;#39;z&amp;#39;])  
# 0    x  
# 1    y  
# 2    z
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately this nice behavior can bite you if you use it with cmds.ls().  It's easy to miss the difference between&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmds.ls(stuff)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmds.ls(*stuff)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;especially because most functions will treat these interchangeably.  &lt;/p&gt;
&lt;p&gt;However (!) the &lt;em&gt;&lt;strong&gt;no arguments means list everything&lt;/strong&gt;&lt;/em&gt; behavior means that the first one returns and empty list, but the second returns &lt;strong&gt;a list of everything in Maya&lt;/strong&gt;.  If you were using the ls() as a filter or a long-name-converter you are likely to be very surprised by the results. I was using it as part of a cleanup routine, and I suddenly discovered I was 'cleaning' everything in my scenes.   &lt;/p&gt;
&lt;p&gt;Like I said, you learn something new everyday -- in this case, new curse words!&lt;/p&gt;
&lt;p&gt;You can work around it simply enough by not passing *args to ls(), or at least by not doing so without checking if the argument is valid:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def list_xforms (*args):  
      if not args: return []  
      return cmds.ls(*args, type=&amp;#39;transform&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not an earth-shaking discovery, just another one of the many mysteries of the Maya.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www-tc.pbs.org/wgbh/nova/assets/img/posters/cracking-maya-code-vi.jpg"&gt;&lt;img alt="" src="http://www-tc.pbs.org/wgbh/nova/assets/img/posters/cracking-maya-code-vi.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 10 Jan 2015 16:09:00 -0800</pubDate><guid>tag:,2015-01-10:Dang.html</guid></item><item><title>To Scale!</title><link>/To-Scale!.html</link><description>&lt;p&gt;In our &lt;a href="http://techartsurvival.blogspot.com/2014/12/adventures-in-4th-dimension.html"&gt;last visit to 3-d math land&lt;/a&gt;, we moved from the 2x2 and 3x3 matrices we used to learn how matrices function to the full 4x4 matrix that we all know and love to hate from 3d applications. This time I’d like to add support for scaling to our matrices so we can round out the ways matrices work.   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This might be a good time to back and breeze throught the &lt;a href="http://techartsurvival.blogspot.com/2014/12/adventures-in-4th-dimension.html"&gt;last installment in our math series&lt;/a&gt; if you’re a little fuzzy on how 4X4 matrices work, or just rusty after the holidays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The 4x4 matrix encodes both rotations and scales very elegantly. If that matrix represented a transfrom, the first three rows of the matrix would be correspond to the local coordinates of the transform, while the fourth row is the 3-D point where the origin of the transform sits (if you’re wondering where things like the pivot offset or maya’s joint orient come from, those are actually a series of matrices that are multiplied together: the &lt;a href="http://download.autodesk.com/us/maya/2009help/CommandsPython/xform.html"&gt;maya docs&lt;/a&gt; go into much more detail.).&lt;br /&gt;
Of course, we all know that transforms can also be scaled up or down. So what does that look like in matrix form?&lt;br /&gt;
Here’s our old friend the identity matrix:&lt;br /&gt;
1| 0| 0| 0&lt;br /&gt;
---|---|---|---&lt;br /&gt;
0| 1| 0| 0&lt;br /&gt;
0| 0| 1| 0&lt;br /&gt;
0| 0| 0| 1  &lt;/p&gt;
&lt;p&gt;and a sample point:&lt;br /&gt;
1| 1| 1| 1&lt;br /&gt;
---|---|---|---  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you're wondering why we need 4 points instead of three, you might want to check back after reviewing the last article in the series. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We want to figure out what to do to this matrix so that it returns points and vectors scaled: we’d like to turn our &lt;code&gt;[1,1,1]&lt;/code&gt; into &lt;code&gt;[2,2,2]&lt;/code&gt;&lt;br /&gt;
The natural first guess is just to scale up the whole thing by 2: in other words, we could try just changing the 1’s in our matrix to 2’s:&lt;br /&gt;
2| 0| 0| 0&lt;br /&gt;
---|---|---|---&lt;br /&gt;
0| 2| 0| 0&lt;br /&gt;
0| 0| 2| 0&lt;br /&gt;
0| 0| 0| 2  &lt;/p&gt;
&lt;p&gt;Easy - but let's do the math just to be sure:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,1] dot [2,0,0,0] = 2  
[1,1,1,1] dot [0,2,0,0] = 2  
[1,1,1,1] dot [0,0,2,0] = 2  
[1,1,1,1] dot [0,0,0,2] = 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This looks right at first, but there’s a problem. If you cast your mind back to the &lt;a href="http://techartsurvival.blogspot.com/2014/12/adventures-in-4th-dimension.html"&gt;brain bending vortex&lt;/a&gt; of &lt;a href="http://deltaorange.com/2012/03/08/the-truth-behind-homogenous-coordinates/"&gt;homogeneous coordinates&lt;/a&gt;, you’ll remember that the point &lt;code&gt;[2,2,2,2]&lt;/code&gt; is actually quite different from &lt;code&gt;[2,2,2,1]&lt;/code&gt;: in fact, it’s the same as [1,1,1,1] , since homogenous coordinates are divided by their last (W) coordinate when turned into plain old 3-D points. So, the naive approach turns out to be wrong: &lt;em&gt;we can’t just scale up every number in the matrix&lt;/em&gt;!&lt;br /&gt;
The culprit is that very last 2: it’s scaling up the W of the output -- which is equivalent to scaling the actual 3-D point &lt;strong&gt;down&lt;/strong&gt;. Scaling that last W component is _negating _all of the other scales.  &lt;/p&gt;
&lt;p&gt;Of course, that suggests that if we just reset that last row, we'll get the result we expected:  &lt;/p&gt;
&lt;p&gt;2| 0| 0| 0&lt;br /&gt;
0| 2| 0| 0&lt;br /&gt;
0| 0| 2| 0&lt;br /&gt;
0| 0| 0| 1  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,1] dot [2,0,0,0] = 2  
[1,1,1,1] dot [0,2,0,0] = 2  
[1,1,1,1] dot [0,0,2,0] = 2  
[1,1,1,1] dot [0,0,0,1] = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you take off your math hat momentarily, and resume your usual TA hat for a moment, you can we have to treat that last row differently from the others. Scaling a transform node up or down may move the children, but the origin of the transform isn’t changing. Scaling doesn’t need to touch that last matrix row, any more than the rotation does.  &lt;/p&gt;
&lt;p&gt;This is consistent with what we discovered last time while deriving the translation matrix: that last row is a slightly different beast than the others and gets handled separately. The upshot is quite simple: &lt;strong&gt;scale information in your matrix is encoded only in the upper left-hand 3x3 subsection.&lt;/strong&gt; It doesn’t affect the last row in any way.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#uniformity"&gt;&lt;/a&gt;Uniformity&lt;/h2&gt;
&lt;p&gt;So, we know know how to apply a uniform scale to a matrix. If you keep that Max/Maya transform node in mind for just another moment, you can probably get a good intuition about what non-uniform scales will look like in matrix form. We know that applying a non-uniform scale to enlarges everything along the local axes of the node; we also know that the first three rows of our matrix correspond to the local axes of a transform. This suggests that we should be able to apply non-uniform scales by simply scaling those rows differently.&lt;br /&gt;
Here’s a matrix that scales up by 2 in the X axis, by 3 in Y, and by 4 in Z:  &lt;/p&gt;
&lt;p&gt;2| 0| 0| 0&lt;br /&gt;
0| 3| 0| 0&lt;br /&gt;
0| 0| 4| 0&lt;br /&gt;
0| 0| 0| 1  &lt;/p&gt;
&lt;p&gt;And as you can see it scales our point as we'd like:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,1] dot [2,0,0,0] = 2  
[1,1,1,1] dot [0,2,0,0] = 3  
[1,1,1,1] dot [0,0,2,0] = 4  
[1,1,1,1] dot [0,0,0,1] = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Scale and rotation&lt;/h2&gt;
&lt;p&gt;It’s probably a good idea to try this with a more complex matrix as well, just to prove out what happens when the matrix isn’t neatly lined up with the world. Here’s a matrix that rotates 45 degrees in X and 30 in Z &lt;br /&gt;
.866| .5| 0| 0&lt;br /&gt;
---|---|---|---&lt;br /&gt;
-.353| .612| .707| 0&lt;br /&gt;
.353| -.612| .707| 0&lt;br /&gt;
0| 0| 0| 1  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can check back to our discussion of &lt;a href="http://techartsurvival.blogspot.com/2014/12/dot-matrix.html"&gt;rotation matrices&lt;/a&gt; to see the pattern behind those numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our test point becomes   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,1] dot [.866,-.353,.353,0] = .866  
[1,1,1,1] dot [.5, .612,-.612, 0] = .5  
[1,1,1,1] dot [0,.707,.707,0] = 1.414  
[1,1,1,1] dot [0,0,0,1] = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or &lt;code&gt;[.866, .5, .1.414]&lt;/code&gt; (I’ve done a little rounding for readability).  To make this a little less abstract, heres' a unit cube in Maya with that matrix applied:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-3MHZFxXQeMY/VKohUK39ItI/AAAAAAABLgQ/VSQCT-mKkns/s1600/45_30.png"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-3MHZFxXQeMY/VKohUK39ItI/AAAAAAABLgQ/VSQCT-mKkns/s1600/45_30.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since those first three rows represent the local axes of our transform, we have to multiply the whole row in order to apply a local scale. If we wanted to scale this matrix up by 2 along it’s local X, we’d get  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1.732&lt;/th&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.353&lt;/td&gt;
&lt;td&gt;-.612&lt;/td&gt;
&lt;td&gt;.707&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;(note how both .866 and .5 are doubled). Our new dots become:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,1] dot [1.732,-.353,.353,0] = 1.732  
[1,1,1,1] dot [1, .612,-.612, 0] = 1  
[1,1,1,1] dot [0, .707, .707, 0] = 1.414  
[1,1,1,1] dot [0,0,0,1] = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see how the X and Y dimensions have both scaled up, since the original X axis is pointing partially into world X and world Y. Here’s the same transformation in Maya for comparison - you can see that the orientation is preserved but the unit cube is scaled double along it's local X axis.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-xQrr4BXBAI0/VKolH8cyJcI/AAAAAAABLgY/TDc1GUziqRo/s1600/scaled_and_rotated.png"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-xQrr4BXBAI0/VKolH8cyJcI/AAAAAAABLgY/TDc1GUziqRo/s1600/scaled_and_rotated.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This demonstrates how you apply non-uniform scales: by scaling the contents of your X, Y or Z rows of your matrix.  You'll notice that we had to scale the entire row to get the correct results.   &lt;/p&gt;
&lt;p&gt;One important side-effect of this strategy is that not all of your row vectors will be normalized: if the matrix is scaled the vectors will have unpredictable lengths.  If you are using the matrix rows as vectors (for example, in a look-at equation) you'll have to remember to re-normalized them or you'll get wonky results.   &lt;/p&gt;
&lt;p&gt;On the other hand, the length of your row vectors actually encodes the local scales of your matrix. The local X scale of your matrix is the length of the first row, the local Y is the length of the second, and the local Z scale is the length of the third row.  &lt;/p&gt;
&lt;p&gt;In the examples above you can see that the rows of our (2,3,4) scale matrix are 2, 3 and 4 respectively  This is also true for the last example, despite the rotations. In case you’ve forgotten the formula, the length of a vector is the &lt;a href="http://www.netcomuk.co.uk/~jenolive/vect5.html"&gt;square root of the sum of it’s squared contents&lt;/a&gt;, or in more readable form:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def vector_length(v):  
   square_length = [i * i for i in v]  
   return math.sqrt(sum(square_length))
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;As you can see the vector length formula works for any length vector: Just add up the squares and take the square roots! A useful trick for many applications, though is not to bother getting square roots unless you need them: for example, if you want to sort vectors by length, you can just collect the sum of the component squares without getting the roots: the ordering is the same, but you don't have to do a bunch of expensive square roots since you only care about relative lenghts, not absolutes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With that in mind, the lenght of the X row of our tilted-and-scaled matrix is   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sqrt ( 1.732**2 + 1**2 + 0**2 )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in other words 2, as expected (with allowance for my rounding, anyway).  This is a particularly neat trick -- as always, working through my stuff has left me in awe of the geniuses who devised this system! -- because the scales are embedded in the matrix and easily recovered even though they don't show up as single numbers.  &lt;/p&gt;
&lt;p&gt;Pretty slick, huh?  But it also explains why you frequently get objects in Max and Maya reporting themselves with scale values that seem off, like 3.99999997 or the like:  that's floating point error accumulating in the calculation of the length of those row vectors.   &lt;/p&gt;
&lt;h1&gt;Next up&lt;/h1&gt;
&lt;p&gt;Scaling, it turns out, is quite pleasantly simple after the mad 4-D adventures involved in adding translation. It remains happily parked in the upper-left-hand corner of the matrix, doing its thing in a predictable way.  &lt;/p&gt;
&lt;p&gt;Next time out we’ll take a look at shears - a way to skew a matrix which usually happens by accident but which is sometimes useful to know about. In the meantime, Happy New Year and keep on dotting!  &lt;/p&gt;
&lt;h3&gt;Posts in this series&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/11/bagels-and-coffee-or-vector-dot-product.html"&gt;Bagels and Coffee (intro to dot products)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/11/dots-all-folks.html"&gt;Dots All Folks (dot product uses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/12/dot-matrix.html"&gt;Dot Matrix (intro to matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/12/adventures-in-4th-dimension.html"&gt;Adventures in the 4th Dimension (translation matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2015/01/to-scale.html"&gt;To Scale! (scale matrices)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 04 Jan 2015 22:08:00 -0800</pubDate><guid>tag:,2015-01-04:To-Scale!.html</guid></item><item><title>The Conquest of Space</title><link>/The-Conquest-of-Space.html</link><description>&lt;p&gt;One of the hardest thing about working in our business is that the technology evolves faster than our means of talking about it. There are a lot of things which we learn in the course of our work that we have a hard time passing on, because the field is so small and so few of us have leisure to try to find ways to sum up all of the practical knowledge we pick up along the way.&lt;br /&gt;
I originally wrote this for Game Developer in 2006, and it was always one of my favorite columns.  &lt;/p&gt;
&lt;blockquote&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;If I could get one message to you it would be this: the future of this country and the welfare of the free world depends upon our success in space.&lt;br /&gt;
– LBJ, 1968&lt;/em&gt;&lt;br /&gt;
_&lt;br /&gt;
_Artists are famous for preferring pictures to words (a certain keyboard-happy ~~columnist~~ blogger we know being a notable exception). But sometimes having a way to talk about something we know by intuition can be really important, even if it seems like stating the obvious. It’s a little unnerving for the fellow who first stands up to tell an audience of smart people stuff they already know by instinct, if not in words. It’s still a useful excersize once in a while.&lt;br /&gt;
For a perfect example take color theory. Seeing the world as the interaction of hues, values and saturations, or reds and greens and blues, is not natural. Cnce you’ve spent enough time messing about with color picker windows it may feel like second nature – but it’s actually very sophisticated, very well designed tool that makes your work easier. When you know that value contrasts are stronger than chroma contrasts, designing camoflague or deciding whether a wall texture needs a normal map are much simpler. tasks. Knowing how oversaturated colors mess with the perception of brightness will help you design a paint job for your giant killer robot which enhances, rather than obscures, his 3-d form. &lt;br /&gt;
So there can be a lot of value in talking about the basics. This month we’re going to look at a topic that’s as basic to animation as color is to painting. Call it groups, nulls, parenting, bones, joints or whatever piece of jargon you first picked up, the menagerie of terms refers to a single theme: the control of space. Like “color”, space is a simple abstraction that covers a lot of ground. Like color, it demands a little bit of study and thought if it is to be used effectively. Like color, is a concept that becomes more interesting, and more useful, the closer you look at it it.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#the-space-program"&gt;&lt;/a&gt;The Space Program&lt;/h2&gt;
&lt;p&gt;In it’s simplest form, of course, our kind of “space” is the local transformation node – for example, the hierarchy of bones that makes up an animated character. Ordinary people think of space as something empty and formless, but even novice CG animators know that spaces can be ranked into hierarchies, moved, rotated squashed, and skewed. This is so basic to what we do that we can easily overlook how odd it must seem to the rest of the world. But these special abilities are the reason spaces are so important. Spaces are important because spaces are where things happen. For computer animation, at least, knowing where things happen happen is critical for making them happen without going insane.&lt;br /&gt;
Consider a very basic example: Everybody knows that the moon goes around the Earth in a roughly circular orbit. The Earth itself flies around the sun in a huge ellipse. If you try to picture the path of the moon around the sun, you’ll realize it makes a horrendously complex pattern of loops in three dimensions, like a crazy cosmic game of Spirograph. You don’t have to ponder very long to see how painful it would be to set all the keys necessary to describe that path through what ordinary folks would call “space”.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-Groi_rA1a1I/VJsnN465wEI/AAAAAAABLcw/pYeUMYid3kQ/s1600/orrery.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-Groi_rA1a1I/VJsnN465wEI/AAAAAAABLcw/pYeUMYid3kQ/s1600/orrery.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However, with hierarchical spaces every animator knows there’s an easy way out of this. Since the moon orbits the earth, it’s far easier to describe it’s movement relative to the Earth. In an animation package this translates into to parenting the moon to the Earth, so that instead of the super-complex mandala it’s path becomes a simple circle. We’ll gloss over the fact that the earth is rotating too for the moment. Coming up with these examples is hard work, you know.&lt;br /&gt;
This is something most us did within days, if not hours, of our first encounter with a 3-d package. But it’s a very simple example of a very sophisticated idea: by picking the right frame of reference, a baroquely complicated movement – the spirograph path of the moon around the sun – becomes a very simple movement. That’s why spaces are important: a movement that’s almost impossible to describe – or to keyframe – in one space may be very simple in another.&lt;br /&gt;
Once you understand this concept, it becomes blazingly obvious that a rigger’s job is to find the right spaces. &lt;br /&gt;
If your character is walking or running around, you don’t want to have the IK targets for his hands just sitting around in the world. If the hand IK’s don’t live in the space of the body, they’ll have to be manually keyed to match his movement through the scene – a lot of work for no reward. Or, you might have a character who’s pacing around the room while arguing with someone else. If her head is rotating relative to her body, just focusing her gaze on the other character will take a ton of keys as she moves around. If her head is set up to rotate relative to the world (using an orient constraint on a control outside the body hierarchy) or relative to the other character (using an aim constraint), managing the head will be painless.&lt;br /&gt;
Working in the right spaces is easier, faster and gives you more energy to focus on character and style, rather than mechanics.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#the-right-stuff"&gt;&lt;/a&gt;The Right Stuff&lt;/h2&gt;
&lt;p&gt;The most important question to ask when setting up a control is, “Where does the motion make the most sense?” It’s easier and simpler to describe the motion of the moon relative to the earth than to the sun. It’s easier and simpler do describe the movement of a person in an elevator relative to the elevator. You can tell a good choice from a bad one because bad spatial choices always result in lots of counter-animation. Here’s a simple rule of thumb: Any time the you have to set a key merely to make it look as if nothing has happened, you’re working in the wrong space. You shouldn’t have to run to stay in place.&lt;br /&gt;
Counteranimation creates drudge work. Just as bad, it also confuses the relationship between keys and action in the scene. Every key ought to indicate some action in the scene – a change of position, rotation, or acceleration. A counter-animated key, though, doesn’t correspond to any event in the scene, because it’s job is to look as if it weren’t there. This creates messy F-Curves and a hard time for the animator who wants to tweak timings or find out what’s causing a hitch. If your F-Curve or dopesheet is much more complicated than your actual scene, it’s a good bet your rig has poorly chosen spaces.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://1.bp.blogspot.com/-uPnSQtH4D4k/VJsnYomazaI/AAAAAAABLc4/K2J_iP-Wa8w/s1600/fig1.tif"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-uPnSQtH4D4k/VJsnYomazaI/AAAAAAABLc4/K2J_iP-Wa8w/s1600/fig1.tif" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There's a lot of keys here - what are they all doing?  &lt;/p&gt;
&lt;p&gt;Good space choices, on the other hand, typically show up as clear, readable curves. Consider the illustration above: this set of F-Curves represents the translation of a character’s root bone as the character walks forward. This set is messy and complicated. The F-Curves below represent the same motion created with one important change in space arrangements:  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://4.bp.blogspot.com/-JPGlj5ui1eQ/VJsnlby3RxI/AAAAAAABLdA/46sZ-8c_Iuc/s1600/fig2.tif"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-JPGlj5ui1eQ/VJsnlby3RxI/AAAAAAABLdA/46sZ-8c_Iuc/s1600/fig2.tif" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Abstracting out just the movement of the root from movement through space makes it clear what's happening  &lt;/p&gt;
&lt;p&gt;In the second example the character’s hips are parented to a separate node at waist height which handles the forward movement through the world. This very minor change to the rig makes a huge difference to the animator, because the second hierarchy is well matched to the task.&lt;br /&gt;
The advantage of the second arrangement can be seen clearly just by looking at the Fcurves. The character’s hips are bouncing and swaying by a few inches, but they are also moving forward several feet. In the first example managing the keys becomes very difficult, because you can’t evaluate the different scales at the same time. Hunting around in the graph view for the curve you want is a waste of time. Sometimes it even makes sense to arrange your controls so that values which “should” be on different scales are closer together in units to make Fcurve management easier – for example, if you’ve got a hand that moves through inch-sized world units and has an IK-FK switching parameter on it, you might want that parameter to run from 0 to 50 or 0 to 100, rather than 0 to 1, to keep both sets of keys in view at the same time.&lt;br /&gt;
A more subtle reason why separating the large scale movement from the local one in our example is that the movement combines cyclical elements – the bounce and sway of the hips– with acyclical movement through the world. The cyclical component of the move, which could easily be defined with just a few keys, is held hostage to the acyclical part. If you wanted to alter the hesitation at the heel strike of each footstep, you’d need to change the tangents or move every one of the dozens of forward translation keys. By segregating the cyclical and acyclical moves into different spaces, you can use the looping feature in your Fcurve editor and only work on a single cycle, as the example shows.&lt;br /&gt;
The same problem happens when you’re working with multiple movement cycles on a single F-Curve. For example, a rower in a rowboat will bounce up and down (relative to the boat) while working the oars; but the boat itself will moves up and down on the waves. If you animated the rower through the world, you’d be representing both sets bounces on a single, messy curve. Obviously, if the rower is in the space of the boat this is easier to handle. Nobody with any experience would even consider animating the rower independently of the boat – yet riggers and animators often ignore the same type of situation when it comes up in a less blatant form, such as the secondary animation on a tail.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#mission-control"&gt;&lt;/a&gt;Mission Control&lt;/h2&gt;
&lt;p&gt;Very simple tweaks to the spatial hierarchy can be very powerful, but sometimes a simple hierarchy can become hard to navigate. In this example, how can we tell what aspect of the movement is coming from the world root or the hips? Overlapping spaces are always dangerous. Unfortunately they’re also unavoidable in a system based on hierarchies. The best method for dealing with this conundrum is to be absolutely clear about the meanings of the different controls.&lt;br /&gt;
Just deciding what “meaning” you expect out of a given spatial arrangement can completely change the way a rig behaves. If you took the example of the character above, you can get two very different kinds of performance from the setup simply by being clear about how you want to use that extra root node.&lt;br /&gt;
One way you could work with that world root node is to pretend it is the character’s center of gravity, as in this example:&lt;br /&gt;
&lt;a href="http://2.bp.blogspot.com/-lbb5xjqvZR8/VJsoD9ehPII/AAAAAAABLdI/erxybMmOsZk/s1600/fig3.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-lbb5xjqvZR8/VJsoD9ehPII/AAAAAAABLdI/erxybMmOsZk/s1600/fig3.png" /&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;The center-of-gravity node is a logical root space for ballistic moves  &lt;/p&gt;
&lt;p&gt;This is a great tool for dealing with acrobatic or ballistic moves – rolling, tumbling, diving and so on. In the air your body rotates around your center of gravity, not your hips – so if you try to tumble a character using the hips alone, you’ll end up having to move those hips as much as you rotate them to create the right appearance. It’s far more elegant and simple to simply treat that root node as if it were the center of gravity – you simplify large moves through the world as we’ve already shown, and when the character leaves the ground it can be moved and rotated without any nasty counteranimation.&lt;br /&gt;
On the other hand you could use that root node solely to handle those large spatial moves. Most games see characters as just a point and an orientation on the ground plane – so it’s often handy to specify that directly rather than relying on your animation exporter to figure out where the character “really is” for you. You might even use a box-shaped object corresponding to the character’s in-game bounding box as the root so the relationship is completely clear. Here I've shown it using a big arrow which makes the character’s frame of reference completely clear:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-oiSd-SYMusI/VJsoVGAAyUI/AAAAAAABLdQ/46Dw-im5_2w/s1600/fig4.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-oiSd-SYMusI/VJsoVGAAyUI/AAAAAAABLdQ/46Dw-im5_2w/s1600/fig4.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gluing the world root to the ground changes what the setup is good for. If the root node is locked to the floor and limited to yaw-only rotations it becomes a natural tool animating movement cycles or navigating through the world. It’s also easy to attach it to a motion path curve, a great way to visualize the character’s path through a scene. In this kind of setup it’s often wise to lock the controls you don’t want to play with (such as vertical translation or roll) to make the meaning of the root node unambiguous.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#splashdown"&gt;&lt;/a&gt;Splashdown&lt;/h2&gt;
&lt;p&gt;As we said at the outset, sometimes it’s important to step back and think about the basics. The simple example here is about as basic as you can imagine, but it’s a great illustration of a theoretical framework that’s a important to animators as color theory is to painters. Working in a young art form, it can be hard to step back from the day to day business of poly-pushing to see the larger picture of how we do our jobs, but even a little bit of theory can be a very powerful practical tool. Too much theory, of course, and you end up exhibiting yourself naked, covered in chcocolate, in a plexiglass box at the Tate Gallery.&lt;br /&gt;
Thankfully this doesn’t happen very often in the games business. It’s a nightmare getting that stuff out of your hair.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 26 Dec 2014 14:39:00 -0800</pubDate><guid>tag:,2014-12-26:The-Conquest-of-Space.html</guid></item><item><title>Comments requested</title><link>/Comments-requested.html</link><description>&lt;p&gt;I'm working a talk for &lt;a href="http://www.gdconf.com/"&gt;GDC&lt;/a&gt; , tentatively entitled "&lt;em&gt;Technical&lt;/em&gt; Art Director? What the heck does that mean?"  &lt;/p&gt;
&lt;p&gt;I'd love to hear thoughts from all you industry types on what the role means. That could be what you think it means for your company, or what you think it means when other people hear it, or what you think it ought to mean. &lt;/p&gt;
&lt;p&gt;Good anecdotes are particularly appreciated and may be shamelessly stolen :)&lt;/p&gt;
&lt;p&gt;So please comment below and let me know what you think while I'm trying to figure out what I think...  &lt;/p&gt;
&lt;p&gt;PS for future readers coming here via Google or whatnot, &lt;a href="http://techartsurvival.blogspot.com/2014/08/submit.html"&gt;this link goes to my perennial &lt;em&gt;how to write  a GDC talk&lt;/em&gt; post&lt;/a&gt;. Physician, heal thyself!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 21 Dec 2014 10:03:00 -0800</pubDate><guid>tag:,2014-12-21:Comments-requested.html</guid></item><item><title>Adventures in the 4th dimension</title><link>/Adventures-in-the-4th-dimension.html</link><description>&lt;p&gt;In &lt;a href="http://techartsurvival.blogspot.com/2014/12/dot-matrix.html"&gt;our last discussion of 3d math&lt;/a&gt;, we started to plumb the mysteries of the matrix. Along the way we discovered two important facts: First, that it’s possible to write an article about matrices with only the merest smidge of a Keanu Reeves mention and second (almost as important), that &lt;strong&gt;matrices are just a convention for applying dot products in series.&lt;/strong&gt; We walked through the derivation of matrices for a series of dot products and shows how hat simple operation allows you to do rotations in two and three dimensions.  &lt;/p&gt;
&lt;p&gt;Naturally, any TA reading this will be knows there's more. We all know that the matrices we’re most familiar with — the transform matrices that drive animation and modeling — do more than rotate. So this this time out we’re going talk about how &lt;strong&gt;translation&lt;/strong&gt; — spatial offsets — can be packed into matrices.  And we're going to do it in a truly brain bending way.  Sort of.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If none of this sounds familiar, you may want to return to the &lt;a href="http://techartsurvival.blogspot.com/2014/12/dot-matrix.html"&gt;previous post in the series&lt;/a&gt; before continuing.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After all of the time we’ve spent with dot products in this series, one thing we should remember is that dots are &lt;strong&gt;additive&lt;/strong&gt; — if you dot two vectors, you sum up all of the products. “Additive” is a nice quality to have if we’re thinking about adding translations to our matrices  It suggests that maybe we can use the additive-ness of dot products to teach our matrices how to do translations as well as rotations.  &lt;/p&gt;
&lt;p&gt;Multiplying a vector against a matrix, &lt;a href="http://techartsurvival.blogspot.com/2014/12/dot-matrix.html"&gt;you’ll recall&lt;/a&gt;, is nothing more than stringing together a set of dot products between the vector and the columns of the matrix. So, putting together the fact that dots are additive and the fact that matrix multiplication uses dots, it seems logical that we can just stick our translation right onto the bottom of the matrix.  By dropping it down at the end of the matrix columns, we'll add it add it to our results. One important side effect that we’ll have to worry about is that this will break the pretty symmetry we noted last time whereby every matrix row is an axis in the matrix's local coordinate system.  However we’ll deal with that after we know it works.  &lt;/p&gt;
&lt;p&gt;To keep things simple, let’s start with a rotate matrix that doesn’t do any, you know, &lt;em&gt;rotating&lt;/em&gt; — a matrix that works but leaves incoming data unchanged. That'll make it easier to see when our translations kick in. The correct math moniker for this do-nothing matrix is an &lt;em&gt;identity&lt;/em&gt; matrix (as in the otherwise-inexplicable &lt;em&gt;MakeIdentity&lt;/em&gt; command in Maya) and it’s just a set of rows that match the default XYZ axes:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I won’t bother with the math here, but if your work it out for yourself you’ll quickly see that dotting the columns of this matrix in turn against any vector returns the original vector unchanged.   &lt;/p&gt;
&lt;p&gt;Next, we’d like to add some extra information to this matrix to include a translation. Since we know our dots are going down the columns, if we tack on an extra row we should be getting a new value added to the output: hopefully, the translation we want. Adding an extra row for translation gives us a 4X3 matrix like this (with an example translation of &lt;code&gt;[1,2,3]&lt;/code&gt; :&lt;br /&gt;
1| 0| 0&lt;br /&gt;
---|---|---&lt;br /&gt;
0| 1| 0&lt;br /&gt;
0| 0| 1&lt;br /&gt;
1| 2| 3  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For future reference, matrices are usually described as ‘rows by columns’; in the last article we derived our matrix first as a 2X2 then as a 3X3 matrx. Most transformation matrices in 3d software are 4X4, for reasons that will become apparent shortly, but Max users will find this 4X3 format familiar — Maxscript makes extensive use of 4x3 matrices for object transforms.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So now we’ve got a test matrix that should offset our initial value by  &lt;code&gt;[1,2,3]&lt;/code&gt;. However, we immediately run into a problem: as we try to multiply our vector against this matrix. The columns now have 4 items but our vector only has 3. How can we sum up? Dot products require that both vectors being dotted have the same number of products, as you can see here:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1] dot [1,0,0,1] = (1 * 1) + (1 * 0) + (1 * 0) + (??? * 1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make this work, we are going to need to extend our vector to grab the translation values from the new matrix row. It needs to become a 4-dimensional vector. &lt;em&gt;The fourth dimension! Trippy! Cue &lt;a href="https://www.youtube.com/watch?v=4wQsWL-lMJw"&gt;theremin music&lt;/a&gt;....&lt;/em&gt;&lt;br /&gt;
We've actually dimension jumped before, while working through rotation matrices. We could borrow the same tactic we used in the last post when we moved from a 2-D matrix to a 3-D matrix by just taking on a zero to our vector. This seems like a natural idea, since we know that the 2-D vector &lt;code&gt;[X,Y]&lt;/code&gt; is equivalent to the 3-D vector &lt;code&gt;[X,Y,0]&lt;/code&gt;. So let’s see what happens if we do the dot products:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,0] dot [1,0,0,1] = (1 * 1) + (1 * 0) + (1 * 0) + (0 * 1) = 1  
[1,1,1,0] dot [0,1,0,2] = (1 * 0) + (1 * 1) + (1 * 0) + (0 * 2) = 1  
[1,1,1,0] dot [0,0,1,3] = (1 * 0) + (1 * 0) + (1 * 1) + (0 * 3) = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not what we were hoping for: our result is still  &lt;code&gt;[1,1,1]&lt;/code&gt;. What happened?  &lt;/p&gt;
&lt;p&gt;The extra zero has allowed us to __do __the dot product — but it's  also zeroing out the translation we are trying to add. Evidently zero is not what we want here (this is not just an misstep, though: we'll come back to those zeroes later). &lt;br /&gt;
For now, the fix is pretty obvious, even though it’s much less obvious how to what the fix is supposed to mean. If we turn that final zero into a one, we’ll get our translation added to the original value:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1,1,1,1 dot 1,0,0,1 = (1 * 1) + (1 * 0) + (1 * 0) + (1 * 1) = 2  
1,1,1,1 dot 0,1,0,2 = (1 * 0) + (1 * 1) + (1 * 0) + (1 * 2) = 3  
1,1,1,1 dot 0,0,1,3 = (1 * 0) + (1 * 0) + (1 * 1) + (1 * 3) = 4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There, at last, is the translation we are looking for; our vector &lt;code&gt;[1,1,1,1]&lt;/code&gt;has become &lt;code&gt;[2,3,4]&lt;/code&gt;, reflecting the offset in the last row of the matrix.  &lt;/p&gt;
&lt;p&gt;Well, it’s nice to get the right result, but this still leaves us with a bit of a conundrum.  I know what [2,3,4] means. But what the heck is that last coordinate doing there? Did we just make it up?  &lt;/p&gt;
&lt;h1&gt;X,Y,Z,WTH?&lt;/h1&gt;
&lt;p&gt;You may remember from our &lt;a href="http://techartsurvival.blogspot.com/2014/11/bagels-and-coffee-or-vector-dot-product.html"&gt;original discussion of dot products&lt;/a&gt; that &lt;em&gt;vector&lt;/em&gt; is actually a very general term, encompassing any bundle of numbers. In tech art we’re used to thinking of vectors as XYZ bundles in 3-D space, but a vector can just as easily be something else — such as your weekly Starbucks expenditure, which is how we started down this road in the first place. 3-D points can be represented by vectors — but so could any bundle of 3 numbers which formed part of a linear equation; say, the value of the dollar, the euro and the yen on a given day. Dot products and matrices work the same way regardless of the subject matter. So, one thing we know already is that all 3-D points are vectors, so to speak, but _not _all vectors are 3-D.&lt;br /&gt;
&lt;a href="http://micro.magnet.fsu.edu/optics/timeline/people/antiqueimages/euclid.jpg"&gt;&lt;img alt="" src="http://micro.magnet.fsu.edu/optics/timeline/people/antiqueimages/euclid.jpg" /&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Not only did he pioneer analytical geometry, he seems to have invented the Mall Santa look too.  &lt;/p&gt;
&lt;p&gt;The vectors we use in graphics, of course are usually &lt;a href="https://www.princeton.edu/~achaney/tmve/wiki100k/docs/Euclidean_vector.html"&gt;Euclidean vectors&lt;/a&gt;: a set of 3 numbers which represent a spatial offset in the X,Y and Z spatial dimensions. The word &lt;em&gt;vector&lt;/em&gt; comes from the Latin word for &lt;em&gt;one who carries&lt;/em&gt;: the vector is the spatial difference between two positions. We get misled by the fact that programming languages usually use the &lt;em&gt;algebraic&lt;/em&gt; name vector (as “bundle of numbers”) for the data type we use to hold the &lt;em&gt;geometric&lt;/em&gt; Euclidean vector. &lt;em&gt;The fact that algebraic vectors and Euclidean vectors share the same noun while meaning different things is, to put it mildly, _annoying.  _With the goofy stuff we're getting in to, I personally would be happy to skip these minor surprises.&lt;/em&gt;&lt;br /&gt;
To understand what that weird extra number, however, we have to add in a third concept: the Euclidean &lt;strong&gt;point&lt;/strong&gt;._ _Which is also frequently represented in code by something called "vector" but which is represents a different idea. Sigh. We will have to distinguish between two things which look similar when written down or stored as vectors in computer memory but which actually _mean _two different things. Up till now we've talked about vectors and points as if they were interchangeable, but to make the translation matrix work we need to differentiate them.  &lt;/p&gt;
&lt;p&gt;The default Euclidean vector is a purely relative quantity. It represents a &lt;em&gt;&lt;strong&gt;change&lt;/strong&gt;&lt;/em&gt; in position. That's why the vector that gets you from &lt;code&gt;[0,0,0]&lt;/code&gt; to &lt;code&gt;[1,1,1]&lt;/code&gt; and the vector that gets you from &lt;code&gt;[8,8,8]&lt;/code&gt; to &lt;code&gt;[9,9,9]&lt;/code&gt; are the same: the vector proper has no location of it's own. You can think of it as a surface normal, which tells you which way a surface is facing without telling you anything about where the surface actually &lt;em&gt;is&lt;/em&gt;, or the direction of a directional light which illuminates along a direction and which doesn't actually reside anywhere in 3-D space.  &lt;/p&gt;
&lt;p&gt;On the other hand a Euclidean point _is _an actual location in space. The point &lt;code&gt;[1,1,1]&lt;/code&gt; is just that : the location &lt;code&gt;[1,1,1]&lt;/code&gt;. it has no 'facing' or 'direction' the way a surface normal does - and it's not the same as any other 3-D point. It's an _address, _while a regular vector is an offset.  &lt;/p&gt;
&lt;p&gt;That's where our fourth coordinate comes in. &lt;strong&gt;Th&lt;strong&gt;&lt;em&gt;*e fourth coordinate in our example tells us if we’re dealing with a Euclidean point or a Euclidean vector, &lt;/em&gt;*that is, if we are dealing with something that can be translated or not.  If the last coordinate is a &lt;/strong&gt;1&lt;/strong&gt;, the data is a &lt;strong&gt;point &lt;/strong&gt;which can be transformed (moved, rotated and scaled). If the last coordinate is a &lt;strong&gt;0&lt;/strong&gt;, the data is a &lt;strong&gt;vector&lt;/strong&gt;, which can be rotated and scaled but not moved. The last number is known as the &lt;a href="http://en.wikipedia.org/wiki/Homogeneous_coordinates"&gt;homogeneous coordinate&lt;/a&gt;, although most people refer to it as the “W” component by analogy with X Y and Z.  &lt;em&gt;Although I kind of wish they had just wrapped it around back to A, or started at W, or something. XYZW? Like I said, I'd like to concentrate on the mind-warping concepts more and the annoying terminology less.  Oh well.&lt;/em&gt;  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#homegeneophobia"&gt;&lt;/a&gt;Homegeneophobia&lt;/h1&gt;
&lt;p&gt;If you’re practically minded, all you &lt;em&gt;really _need to know today is that a W of 1 is a point and a W of 0 is a direction. If you are especially literal minded, in fact, this next bit may be a bit... bizarre. You can probably skip it without missing much practical information, but try to stick it out. It will give you an appreciation of the abstract beauty the underlies matrix math.  I'm going to try to explain of the ‘meaning’ of the W coordinate but take this with a grain of salt, since this one goes a bit beyond my limited mathematical imagination.&lt;br /&gt;
We've already suggested that the W component represents a 4th dimension.  While that's kind of hard to visualize, we can see the results by 'projecting' onto the XYZ space that we are used to. Got that? Just like we project a 3-D set of points onto the 2-D screen of our computers, we can project a 4-D quantity into 3 dimensions.&lt;br /&gt;
Another way to think about it is that an XYZW vector is _one point along a 4-dimensional line that intersects 3-space&lt;/em&gt;.  In this image, engraver/ math whiz / literal Renaissance Man &lt;a href="http://www.albrecht-durer.org/"&gt;Albrecht Durer&lt;/a&gt; is using a perspective scrim to do his life drawing: projecting a 3-D reality on the 2-D silk screen by keeping his eye in one location and then seeing how the 3-D lady lines up with his 2-D grid.&lt;br /&gt;
&lt;a href="http://relativity.net.au/gaming/java/images/DurerFrustum.png"&gt;&lt;img alt="" src="http://relativity.net.au/gaming/java/images/DurerFrustum.png" /&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;A decent analogy for projecting 4-D down to 3, here a 3-D world projected  down to 2:   &lt;/p&gt;
&lt;p&gt;In this word, each 2-D point on the scrim corresponds to a 3-D line running from Durer's eye through the plane of the scrim and beyond.  In a matrix, each 3-D point is on a similar line that runs into the fourth dimension.  While it's hard to visualize, it's mathematically consistent - which is why the mathematicians like it.  &lt;/p&gt;
&lt;p&gt;How cool – or confusing – is that?    &lt;/p&gt;
&lt;p&gt;The point where our mystical 4-D vector intersects our plain old 3-D space corresponds to the point where Durer's eyeline passes through the scrim.  In our case, the point is  &lt;code&gt;[X,Y,Z]&lt;/code&gt; divided by &lt;code&gt;W&lt;/code&gt;. One side effect of this is that there are many different 4-D points that correspond to the same 3-D point: &lt;code&gt;[1,1,1,1]&lt;/code&gt;, &lt;code&gt;[2,2,2,2]&lt;/code&gt; and &lt;code&gt;[-1,-1,-1,-1]&lt;/code&gt; all represent the same point.  In the illustration above, you can see how each of the orange lines hits one _point _in 2-D, but that the point lies on a 3-D _line. _Going from 4-D space down to 3-D works the same way - except that the extra dimension is brain-bendingly hard to visualize.  &lt;/p&gt;
&lt;p&gt;A W value of 1 represents the projection of our 4-D vector onto boring old 3-D reality, sort of like the plane of the perspective scrim in the image above.  W values less than one approach the 'eye point', while values larger than 1 extend past the scrim into the scene.  To understand how the W changes the projected value in 3-D, imagine picking a point on Durer's 2-D screen and pushing back through the screen. As the distance (the W) increases, the projected point will get closer to the center of the screen.  In fact, this is plain old 1-point perspective in action:  A W approaches infinity, any coordinate translates into the perspective vanishing point, which in this case is the center of the scrim.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.robinurton.com/history/Renaissance/perspective.jpg"&gt;&lt;img alt="" src="http://www.robinurton.com/history/Renaissance/perspective.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;all lines converge at W=infinity, at least according to Piero Della Francesca&lt;/p&gt;
&lt;p&gt;If you’re still unable to wrap your brain around this - and I am not sure I really can, so don’t feel bad about it, you might find this YouTube from Jamie King helpful. You can relate it to the Durer image by imagining Jamie's example image is taken looking down on Durer's little perspective machine from above:  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Extra points for the gratuitous Bill and Ted reference, btw.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;This same analogy also explains, sort of, why W=0 vectors don’t move. As W increases, the points will converge on the center of his scrim, that is, the perspective vanishing point. On the other hand as W gets smaller they move away: the effect is like a camera zooming in:  everything on the image plane moves &lt;em&gt;away&lt;/em&gt; from the vanishing point. As W reaches zero the 'zoom' is now infinite: In math, all of your 4-D points would have become &lt;em&gt;impossible to convert back to 3-D&lt;/em&gt; because you'd be dividing their XYZ positions by zero.  It's sort of the inverse of a black hole: instead of all points collapsing down into a singularity, they are instead all smeared out infinitely -- which makes them effectively the same anyway. There's no difference between &lt;code&gt;[1,1,1,0]&lt;/code&gt; and &lt;code&gt;[999,999,999,0]&lt;/code&gt; in position, since they are both 'located' at  &lt;code&gt;[undefined,undefined,undefined]&lt;/code&gt; in 3 dimensions.  &lt;/p&gt;
&lt;p&gt;Since movement has no meaning in this bizarro singularity world, translations don't do anything. But — brain bend alert —  rotations still work. Of course, we already know from our earlier experiments with W's set to zero: the dots against the first 3 rows of the 4X3 matrix haven't changed, but a W=0 input vector won't translate.  Put another way, since dot products are a way of projecting one vector on to another, projecting a any 4-D vector onto a different 4-D vector with a W of 0 will keep you right at the 'eye point' out of which all those 4-D rays are shooting, so you won't have any W-ness to project yourself out into the 3-D world.  &lt;/p&gt;
&lt;p&gt;It's simultaneously baffling and awe-inspring. Like &lt;em&gt;&lt;a href="http://www.goat-simulator.com/"&gt;Goat Simulator&lt;/a&gt;.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;If you've stuck it out this far, the whole visualization actually has one imporant side benefit. It explains the _other _reason we need homogeneous coordinates: they allow us to handle perspective projections and regular geometry using the same set of rules. W coordinates that aren’t 0’s or 1’s generally crop up only when you’re working with the perspective matrix of a camera or trying to transform points from world space to screen space. However that’s a matter for another time.   &lt;/p&gt;
&lt;p&gt;For now, however, I need to relax my frontal lobe.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://www.lovingmystuff.co.uk/wp-content/uploads/2013/08/543.jpg"&gt;&lt;img alt="" src="http://www.lovingmystuff.co.uk/wp-content/uploads/2013/08/543.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Why did they wear those hankies on their heads, anyway?&lt;br /&gt;
Turning something nice and obvious like a 3-D point into an in infinite line in a dimension where parallel lines can intersect is just the sort of thing that gives mathematicians a bad name. Thankfully we don’t really need to understand all the metaphysics: we can just rely happily on the fact that this extra abstraction lets us handle translations using the same math we use for rotations. And we should be grateful that the kind of folks who do understand the way 4-dimensional vectors are projected into our 3-D world left us the 4X4 matrix which (despite this little exercise in gimcrackery) is a remarkably elegant and handy tool for practical purposes and can still be done with junior high school math skills.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Gottfried Chen’s blog also makes &lt;a href="http://deltaorange.com/2012/03/08/the-truth-behind-homogenous-coordinates"&gt;an heroic attempt to explain this to mere mortals&lt;/a&gt;. The great-grandaddy of all these discussions is Edwin Abbot’s classic novella (you read that right - it’s &lt;strong&gt;fiction&lt;/strong&gt;) &lt;a href="http://www.amazon.com/mn/search/?_encoding=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;field-keywords=flatland&amp;amp;linkCode=ur2&amp;amp;tag=tecsurgui-20&amp;amp;url=search-alias%3Daps&amp;amp;linkId=AIHJQXYL5IWCSXN6"&gt;Flatland&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#homogeneous"&gt;&lt;/a&gt;Homogenius!&lt;/h1&gt;
&lt;p&gt;Alright, let's get our feet back on the ground (which involves setting our Z coordinate to 0 and our W coordinate to 1).  &lt;/p&gt;
&lt;p&gt;If you just skipped over the mental gymnastics above —or if you just need to be brought back down to earth — let’s remind ourselves where we are:&lt;br /&gt;
We've got a nice, easy to manage system for packing spatial translations and rotations into a single operation, in the form of the 4X3 matrix. By adding a W coordinate — the ~~&lt;em&gt;mysterious&lt;/em&gt;~~ homogeneous coordinate – to the end of our original vector, we have gained the ability to do translations. We've also shown how we can toggle back and forth between rotation-only vector operations and rotate-and-translate point operations by changing the W coordinate from 0 to 1.&lt;br /&gt;
There is one little flaw to this nifty system, however: it’s lossy. Our 4-part vectors let us distinguish between points and pure vectors, but our 4x3 matrix is only giving us back 3 components not 4. This is fine if all we want is the points, but it’s throwing away information we might need to keep if, for example, if we wanted to multiply a point by several matrices in series. &lt;br /&gt;
If we want to get a 4—way vector back from the matrix we are going to need an extra column. Luckily, we know what we want from that extra column — we just need to preserve that W value and nothing else. So how do we get there?&lt;br /&gt;
We already know from &lt;a href="http://techartsurvival.blogspot.com/2014/12/dot-matrix.html"&gt;last time&lt;/a&gt; that the first 3 rows of our matrix are supposed to be the axes of the coordinate system which our matrix defines. By definition, an axis can’t move: it’s a direction, not a position. That suggests that it’s going turn into a vector with a W of 0 when we expand it into the next column. After all, you can’t &lt;em&gt;move&lt;/em&gt; the X axis or the Y axis: no matter how you rotate it around it is only an &lt;em&gt;axis&lt;/em&gt; if it passes through origin. The last row, on the other hand, is a &lt;em&gt;translation&lt;/em&gt;: it is actually intended to enforce a change of location: In other words, it’s a &lt;em&gt;point&lt;/em&gt; with a W value of 1, rather than a vector with a W of 0.&lt;br /&gt;
In other words our 4x3 matrix turns into a 4 x 4 matrix that looks like this:&lt;br /&gt;
1| 0| 0| 0&lt;br /&gt;
---|---|---|---&lt;br /&gt;
0| 1| 0| 0&lt;br /&gt;
0| 0| 1| 0&lt;br /&gt;
0| 0| 0| 1  &lt;/p&gt;
&lt;p&gt;The first 3 rows are the vectors defining our coordinate system and the last row is a point defining the spatial offset. Any TA should be able to visualize this as transform node — a group, a joint, a null or whatever you prefer — aligned so that it’s axes line up with the first 3 rows and it’s origin sits at the XYZ position of the fourth row.   &lt;/p&gt;
&lt;p&gt;The nice bit is that, despite all the 4-dimensional mumbo-jumbo this 4X4 matrix (just like the 3X3 and 4X3 versions we’ve touched on before) is &lt;strong&gt;still just a plain old set of dot products&lt;/strong&gt; when you clear away all the verbiage, special typography and extra dimensions. Dot your 4-D point or vector against the columns of this 4-D matrix and you’ll get back a rotated vector, just like we did when learning how matrices work. If your incoming W is set to 0, you’ll get just a rotation; if it’s set to 1, you’ll get a rotation and a translation at the same time. With plain old bagels-and-coffee math. &lt;br /&gt;
Petty slick, huh? &lt;br /&gt;
So, after a consciousness-expanding (and headache-inducing) journey into other dimensions, we’ve finally sort of arrived at the full 4X4 matrix that powers every graphics application under the sun. And, amazingly enough, we’ve just scratched the surface (&lt;em&gt;What is the surface of a 4-D object anyway? My brain hurts.&lt;/em&gt;)&lt;br /&gt;
Next time out we’ll talk about how a 4x4 matrix can encode scale as well, which luckily is a little less Timothy Leary than what we’ve already gone through.  Until then here's an animated gif of a 4-dimensional cube (which in this case is a 2-D projection of the 3-D physical extrusion of the 4-D object.... piece of cake!)  &lt;/p&gt;
&lt;p&gt;Me, I need a good stiff drink.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://24.media.tumblr.com/tumblr_m3dy5zVFhq1qgnjgmo1_400.gif"&gt;&lt;img alt="" src="http://24.media.tumblr.com/tumblr_m3dy5zVFhq1qgnjgmo1_400.gif" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Posts in this series&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/11/bagels-and-coffee-or-vector-dot-product.html"&gt;Bagels and Coffee (intro to dot products)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/11/dots-all-folks.html"&gt;Dots All Folks (dot product uses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/12/dot-matrix.html"&gt;Dot Matrix (intro to matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/12/adventures-in-4th-dimension.html"&gt;Adventures in the 4th Dimension (translation matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2015/01/to-scale.html"&gt;To Scale! (scale matrices)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 15 Dec 2014 23:35:00 -0800</pubDate><guid>tag:,2014-12-15:Adventures-in-the-4th-dimension.html</guid></item><item><title>All we are saying is give API 2.0 a chance</title><link>/All-we-are-saying-is-give-API-2.0-a-chance.html</link><description>&lt;p&gt;Doing all this math-related posting has reminded me of something I've been meaning to write up:  &lt;/p&gt;
&lt;p&gt;Maya's &lt;a href="http://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2015/ENU/Maya-SDK/py-ref/index-html.html"&gt;python API 2.0,&lt;/a&gt; first introduced in the 2013 version, got off to a rocky start. People complained about &lt;a href="http://stackoverflow.com/questions/20232835/maya-python-api-2-0-has-no-mitdag-so-how-traverse-dag-graph"&gt;missing functions&lt;/a&gt; and &lt;a href="http://jeremyyk.com/tutorials/maya-s-python-api-2-0-"&gt;missing modules&lt;/a&gt;.  It uses (mostly) the same function and class names as the original OpenMaya Python, which is a recipe for confusion. The documentation is pretty confusing too, since it points at the original C++ docs and leaves it up to you to do much of the translation in your head.    However....  &lt;/p&gt;
&lt;p&gt;One thing that API 2 definitely does right is to eliminate the dreaded _&lt;a href="http://techartsurvival.blogspot.com/2014/03/if-your-maya-python-api-is-crashing.html"&gt;MScriptUtil&lt;/a&gt;, _with its ugly and confusing interface and all of the opportunities for failures that it includes.  I've been busy porting over a bunch of geometry utilities to the new API and I'm routinely finding that stuff like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def APIVector( iterable, normal=False ):  
    &amp;#39;&amp;#39;&amp;#39;  
    return an iterable as an OpenMaya MVector

    if iterable is an openMaya MVector, returns untouched  
    &amp;#39;&amp;#39;&amp;#39;  
    if isinstance( iterable, OpenMaya.MVector ):  
        o_vector = iterable  
    else:  
        assert len( iterable ) == 3, &amp;quot;argument to APIVector must have 3 entries&amp;quot;  
        v_util = OpenMaya.MScriptUtil()  
        it = list( copy( iterable ) )  
        v_util.createFromDouble( iterable[0], iterable[1], iterable[2] )  
        o_vector = OpenMaya.MVector( v_util.asDoublePtr() )

    if normal:  
        o_vector = o_vector.normal ()  
    return o_vector
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Turns into to this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def APIVector(*iterable, **kwargs):


    result = None  
    try:  
        result = api2.MVector(iterable)  
    except ValueError:  
        result = api2.MVector(iterable[0])  
    finally:  
        if kwargs.pop(&amp;#39;normal&amp;#39;, False):  
            result.normalize()  
        return result
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In other words, one reasonable line for 4 icky ones.  &lt;/p&gt;
&lt;p&gt;Plus, the new versions are generally more pythonic - the API 2 version of _MVector, _for example supports both dot-access, bracket access, and iteration over the vector components (though, annoyingly, _not _slicing).  &lt;/p&gt;
&lt;p&gt;It's certainly not all perfect. You do have to be very careful about mixing API 1 and API 2 code in the same functions - even though they are both wrapping the same C++ underpinnings they are are mutually incompatible.  Some things are still cumbersome -- converting strings to MSelectionList items to MObjects to MFNs is still a waste of good brain cells -- but it's a step in the right direction. I'll post more as I know more.  &lt;/p&gt;
&lt;p&gt;By the way, I spent several minutes surfing around for a funny image to wrap up on, I even did a meme-generator.com thing with The Most Interesting Man In The World saying something dismissive about MScriptUtil.  And then I thought... "What's the point."  &lt;/p&gt;
&lt;p&gt;See? Progress _is _possible.   Or maybe I'm just getting old. In Internet Years I'm already like 7,303.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 12 Dec 2014 19:42:00 -0800</pubDate><guid>tag:,2014-12-12:All-we-are-saying-is-give-API-2.0-a-chance.html</guid></item><item><title>Dot Matrix</title><link>/Dot-Matrix.html</link><description>&lt;p&gt;We started our math review with a look at the &lt;a href="http://techartsurvival.blogspot.com/2014/11/bagels-and-coffee-or-vector-dot-product.html"&gt;dot product&lt;/a&gt;, and started out by showing how dots work in a minimalist way. This time out we’ll do the same thing the most basic component of 3d math - the matrix.   &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://images.macworld.com/images/news/graphics/150845-apple_imagewriter_original.jpg"&gt;&lt;img alt="" src="http://images.macworld.com/images/news/graphics/150845-apple_imagewriter_original.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There was a time when this was 'computer graphics'  &lt;/p&gt;
&lt;p&gt;Once you start looking closely, you'/ll find that  dot product and a matrix actually have a lot in common. As an older gentleman once told me when I proudly showed hin a 72 dpi dithered picture printed on my 1986 vintage Apple 2, &lt;em&gt;"Wait a minute... it's all just.... dots?"&lt;/em&gt;&lt;br /&gt;
_&lt;br /&gt;
_In fact, matrix multiplication is done by using dot products, as we’ll see shortly.  However, matrices are more complicated, both in concept and execution. For that reason we'll devote this post through how matrices work in the simplest possible way, so that it’s easy to see both the how and why of what they do. This post will be primarily about the most minimal example of how a matrix functions. I’ll do it in 2-d to keep the math a bit less wordy, though  the same thing works in 3 or even more dimensions. I’ll also be sticking to a simple rotate-only matrix to start with so the workings are simple - I’ll add in translations and scales next time out to keep the focus on the basics.  &lt;/p&gt;
&lt;h1&gt;First things first&lt;/h1&gt;
&lt;p&gt;So, starting with the bare minimum, let’s suppose we've got a simple unit-length vector &lt;code&gt;[1,0]&lt;/code&gt; and we’d like to figure out how to rotate it. Rotating that unit vector 45 degrees should end up as &lt;code&gt;[.707, .707], as you can see below:&lt;/code&gt;&lt;br /&gt;
&lt;a href="http://freespace.virgin.net/hugo.elias/routines/rotate01.gif"&gt;&lt;img alt="" src="http://freespace.virgin.net/hugo.elias/routines/rotate01.gif" /&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;We're trying to figure out an operation that will give these values as we rotate from [1,0] to [0,1]  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;(If the numbers seem surprising, you might want to hop back to the discussion of the unit circle  in our earlier &lt;a href="http://we%27re%20trying%20to%20figure%20out%20an%20operation%20that%20will%20give%20these%20values%20as%20we%20rotate%20from%20[1%2C0]%20to%20[0%2C1]/"&gt;discussion of dot products&lt;/a&gt;.)&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;The question is, what kind of operations do we need to do to perform that rotation? What tools do we have to make it work - and, even more importantly, to make it work for any vector and not just this one example?  &lt;/p&gt;
&lt;p&gt;First, just to clear the decks, let's check off things we know &lt;em&gt;wont’&lt;/em&gt; work.  &lt;/p&gt;
&lt;p&gt;We can see that difference between the first vector and the second is &lt;code&gt;[-.293, .707]&lt;/code&gt; – but it’s pretty obvious that simple addition is not the same thing as performing a rotation. If you’re not convinced, just note that adding the same vector again will get you &lt;code&gt;[.121, 1.414]&lt;/code&gt; rather than the expected &lt;code&gt;[0,1]&lt;/code&gt;. &lt;br /&gt;
Plain old multiplication either - there is no number we can multiply against the original &lt;code&gt;[1,0]&lt;/code&gt; that will get a non-zero result in the Y component.  &lt;/p&gt;
&lt;p&gt;So what can we do?  Fortunately, our old friend the &lt;a href="http://techartsurvival.blogspot.com/2014/11/dots-all-folks.html"&gt;dot product &lt;/a&gt;comes to the rescue. If you recall how we introduced dots, you should remember that one of the uses of the dot product is to project one vector on to another.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://gregegan.customer.netspace.net.au/ORTHOGONAL/02/004.png"&gt;&lt;img alt="" src="http://gregegan.customer.netspace.net.au/ORTHOGONAL/02/004.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So suppose what would happen if we tried to project our first vector onto another vector that looked like a rotated coordinate system. In other words, we could hold our original vector constant and ‘rotate’ the X-axis counterclockwise by 45 degrees. It’s a theory-of-relativity kind of thing: rotating our vector N degrees clockwise and rotating the world N degrees counter-clockwise are the same thing. By projecting our X-axis against the rotated vector, though, we get the X component we want from a 45 degree angle.&lt;br /&gt;
&lt;a href="http://2.bp.blogspot.com/-qbl5CZAwTN8/VH9FE9epOoI/AAAAAAABLZA/ZXbLLOU2qTU/s1600/rotate%2Bcoordfs.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-qbl5CZAwTN8/VH9FE9epOoI/AAAAAAABLZA/ZXbLLOU2qTU/s1600/rotate%2Bcoordfs.png" /&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;rotating a vector (left) is the same as counter-rotating the coordinate system (right)  &lt;/p&gt;
&lt;p&gt;We can use the &lt;a href="https://www.blogger.com/link"&gt;unit circle&lt;/a&gt; (or the chart of angle values above) to figure out what the right vector for the counter rotated X-axis is. In the rotated-X-axis world we will be dotting &lt;code&gt;[1,0]&lt;/code&gt; against the vector &lt;code&gt;[.707, -.707]&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dot ([1,0], [.707, -.707])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;equals  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(1 * .707) + (0 * -.707) = .707
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That operation gives us a good X-component - it represents how much of the original X is left when projected onto an X axis that has been rotated. If we do it again - remember, we’re trying to get a repeatable operation - we get  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dot ([.707, .707], [.707, -.707])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;equals  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(.707 * .707) + (.707 * -.707) = 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is what we want for the X component after two rotations. This dot product thing seems to be paying off (&lt;strong&gt;and I should know – I’ve been milking it for posts for a while&lt;/strong&gt;).&lt;br /&gt;
Of course, this only gives us half of the rotated vector! However, analogy suggests that we can get the Y component of the vector by projecting onto a rotated Y axis, just as we did for the X. The Y axis, rotated clockwise 45 degrees, is &lt;code&gt;[.707, .707]&lt;/code&gt;. Dotting against our original vector gives us  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dot ([1,0], [.707, .707])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in other words  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(1 * .707) + (0 * .707) = .707
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is the Y component we want after one application. The same operation on the rotated vector gives us  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dot ([.707, .707], [.707, .707])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;namely  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(.707 * .707) + (.707 * .707) = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, this gives us the Y value we expect for a 90 degree rotation.   &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://basementrejects.com/wp-content/uploads/2011/11/the-matrix-billboard.jpg"&gt;&lt;img alt="" src="http://basementrejects.com/wp-content/uploads/2011/11/the-matrix-billboard.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An example matrix showing a 90 degree rotation  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#dots-to-matrix"&gt;&lt;/a&gt;Dots to Matrix&lt;/h1&gt;
&lt;p&gt;So, that shows &lt;strong&gt;we can rotate a vector by using two dot products&lt;/strong&gt;: dot the X component of the vector against a counter-rotated X axis and the Y component of the vector against a counter-rotated Y axis, and you get the rotated result. &lt;em&gt;(Remember, the axes are rotated against the rotation you’re actually applying, because you want the projection of the rotated vector and you’re moving the universe instead of the data, Einstein-style). &lt;/em&gt;&lt;br /&gt;
_&lt;br /&gt;
_Now that we know how it works, it would be nice to have a simple way of saying “just do that two-dot thing” - in other words, we'd like to define an operation that will apply the two dot products at the same time, giving us the rotation we're after. And that’s all that the matrix - the mysterious whatchamacallit at the heart of 3-D math – really boils down to this:  it’s simply a convention for saying &lt;strong&gt;“make a new vector out of these dot products”.&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;br /&gt;
&lt;a href="http://www.papercraftsquare.com/wp-content/uploads/2014/09/Spaceballs-Dot-Matrix-Cube-Craft-Paper-Toy.jpg"&gt;&lt;img alt="" src="http://www.papercraftsquare.com/wp-content/uploads/2014/09/Spaceballs-Dot-Matrix-Cube-Craft-Paper-Toy.jpg" /&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I kind of hate the internet... but  I must admit, the mere existence of a &lt;em&gt;pepakura&lt;/em&gt; Minecraft&lt;br /&gt;
character for Dot Matrix from &lt;a href="http://www.imdb.com/title/tt0094012/"&gt;Spaceballs &lt;/a&gt;warms my heart.&lt;br /&gt;
 So here's the notation that is commonly used for saying "make a new vector out of dot products." We can re-write the whole mess above very simply as  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,0] * [  .707,  .707]  
        [ -.707,  .707]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where the first column of the matrix is the X-axis of our counter-rotated coordinate system and the second column is the Y-axis of the same. It's just a convention for saying:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x = [1,0] dot [ .707, -.707]  
y = [1,0] dot [ .707,  .707]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is exactly the same thing we took a couple of paragraphs above to explain in words.&lt;br /&gt;
So in the end it’s amazingly – almost embarrassingly – simple: you &lt;em&gt;&lt;strong&gt;dot your vector against each of the columns in the matrix in turn&lt;/strong&gt;&lt;/em&gt; and voila! you’ve got a new vector which applies the matrix transform. The big, scary matrix monster turns out not to be so scary - once you pull off this mask it turns out to be nothing but Old Man Dot Product in disguise!  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://static.tvtropes.org/pmwiki/pub/images/rsz_1meddlingkids_1686.jpg"&gt;&lt;img alt="" src="http://static.tvtropes.org/pmwiki/pub/images/rsz_1meddlingkids_1686.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It would have worked, too, if it wasn't for you meddling kids!&lt;br /&gt;
 In this example we’re only covering rotations : scales and translations we’ll touch on in a later outing -- however they work the same way. &lt;strong&gt; &lt;/strong&gt;Translation and scale are encoded into matrices a bit differently - but the mechanics are identical: &lt;strong&gt;Just dot the vector against each column in the matrix and you have your transformation.&lt;/strong&gt;&lt;br /&gt;
The big takeaway from this exercise is that the basic math is the same and it requires no skills you didn’t learn by seventh grade (or at least the first post in this series).  Matrices just aren't that hard once you know what they are actually doing.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;As I've said several times, all of this power is really based on simple math (addition and multiplication) disciplined by conventions such as normalized vectors in dot products or the row-column arrangement I’ve shown here. A convention, however, is to some degree arbitrary. In matrices, for example, you could get the same results by representing what I’ve written as rows to be columns and vice versa, and then dotting your vectors against the rows rather than the columns. The arrangement I’ve use here is known as ‘_row major&lt;/em&gt;’, and the alternate arrangement is ‘&lt;em&gt;column major&lt;/em&gt;’. You can usually recognize row-major systems because row-major operations tend to be written as "vector times matrix" where column major operations are usually written "matrix times vector."  The actual math is the same, apart from the convention used to write it down._&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The choice between row-major and column-major matrices is  typically made for you by the the environment you’re working in, so you will rarely have to worry about it. Still, we will revisit this in future discussion of matrices.  I'll be using row-major throughout to keep things consistent, and also because that is how Maya - my usual go-to app - is organized.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#matrix-fun"&gt;&lt;/a&gt;Matrix Fun&lt;/h1&gt;
&lt;p&gt;Working through this stuff one piece at a time should give even the most hardened and results oriented TA an dim appreciation for what the mathematicians mean by ‘elegance’. Here’s what’s so beautiful about this setup: Written out the way we've done it, the rows of the matrix correspond to the coordinate system you’d get by applying the matrix. Thus, after a 45 degree rotation your X-axis is now pointing at &lt;code&gt;[.707, .707]&lt;/code&gt; and your Y is now pointing at &lt;code&gt;[-.707, .707].&lt;/code&gt;So far we've stuck to 2-D examples, but the same is true in higher dimensions as well: the 4x4 matrices that we use everywhere in graphics, the local coordinate system is encoded the same way.&lt;br /&gt;
This is almost perfect in it’s elegance. Consider this little piece of gibberish from Maya:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmds.xform(&amp;#39;persp&amp;#39;, q=True, m=True)  
[0.7071067811865475,  
 -2.7755575615628907e-17,  
 -0.7071067811865476,  
 0.0,  
 -0.3312945782245394,  
 0.8834522085987726,  
 -0.3312945782245393,  
 0.0,  
 0.6246950475544245,  
 0.46852128566581774,  
 0.6246950475544244,  
 0.0,  
 240.0,  
 180.0,  
 240.0,  
 1.0] #
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That doesn’t appear to mean much beyond ‘WTH?’. However, when rearranged into a matrix (and truncated to fewer digits for legibility), it’s:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ 0.707, 0.000,-0.707, 0.000]  
[-0.331, 0.883,-0.331, 0.000]  
[ 0.625, 0.468, 0.625, 0.000]  
[ 240.0, 180.0, 240.0, 1.000]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which means the the &lt;em&gt;persp _camera in my Maya scene has an X axis pointing at &lt;code&gt;[0.707, 0.000,-0.707]&lt;/code&gt;, a Y axis pointing at &lt;code&gt;[-0.331, 0.883,-0.331]&lt;/code&gt; and a Z axis pointing at &lt;code&gt;[0.625, 0.468, 0.625]&lt;/code&gt; . _We’ll talk about the meaning of those zeros in the 4th column and the last row next time out&lt;/em&gt;. While it’s still a bit tough to visualize, it’s actually meaningful - not just some magic computer-y stuff you have to take on faith.&lt;br /&gt;
As a side benefit, the matrix-rows-are-local-axes scheme allows you to extract the cardinal axes of a matrix without doing anything fancier than grabbing a row. In the camera example, we can tell the camera is ‘aiming’ along &lt;code&gt;[-0.625, -0.468, -0.625]&lt;/code&gt; (Maya cameras aim down their own negative Z axis, so I’ve just taken that third row and multiplied by -1). You could use use this to figure out if the camera "sees" something by dotting that vector against a vector from the camera's position to the target, as we discussed &lt;a href="http://techartsurvival.blogspot.com/2014/11/dots-all-folks.html"&gt;last time&lt;/a&gt;. Extracting local axes this way is the key to many common applications, such as look-at constraints and camera framing.&lt;br /&gt;
Of course,anybody who knows any 3d graphics at all, of course, knows matrices are used for a lot more than just rotations, and that we’ve just scratched the surface. I’ve walked through the derivation this way for two reasons: first, to show how the matrix is really nothing more than &lt;em&gt;&lt;strong&gt;a convention for applying dot products in series.&lt;/strong&gt;&lt;/em&gt; Second, because I want to underline the importance of the fact that &lt;em&gt;&lt;strong&gt;matrix rows are axes of a local coordinate system&lt;/strong&gt;*&lt;/em&gt;. Next time out we’ll explain how matrices can also represent scale and translation, and how to put matrices together for even more matrix-y goodness.   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in a _row major _matrix, anyway.  And subject to some interesting qualifications we'll talk about in a later post....  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;PS: The Rotation Matrix Formula&lt;/h2&gt;
&lt;p&gt;There's one last topic to cover on rotation matrices: how to apply a generic rotation for any value and not just our 45 degree example. Keeping in mind what we've learned -- that the rows (of our &lt;em&gt;row major&lt;/em&gt; matrix, anyway) are the axes of the rotated coordinate system --  The 2-D example we've used all along generalizes very easily.  The unit circle tells us that the X and Y axes of a rotated coordinate system will look like this (where X is the first row and Y is the second)  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;cos(theta)&lt;/th&gt;
&lt;th&gt;sin(theta)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-sin(theta)&lt;/td&gt;
&lt;td&gt;cos(theta)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The cosine / sin in the first row takes the X and Y values from the unit circle, where the X axis is [1,0] and the Y axis is [0,1] You can check those values for a 0 rotation, and you'll see how that lines up with the default X and Y axes:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;0&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Using the same formula for a  30 degree rotation would give us  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.866&lt;/th&gt;
&lt;th&gt;.5&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-.5&lt;/td&gt;
&lt;td&gt;.866&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;since the cosine of 30 degrees is .866 and the sine is .5.  This also shows how that  negative sine works: the Y axis starts rotating backwards into negative-X as the coordinate system rotates counter-clockwise).   &lt;/p&gt;
&lt;p&gt;Although we haven't covered 3-D rotations this time out, it's not hard to see how this 2-D XY rotation should be the same thing as a rotation around the Z axis in 3 dimensions. A row-major Z rotation matrix looks like this: &lt;br /&gt;
 cos(theta) |  sin(theta) | 0&lt;br /&gt;
---|---|---&lt;br /&gt;
-sin(theta) |  cos(theta) | 0&lt;br /&gt;
0 | 0 | 1  &lt;/p&gt;
&lt;p&gt;This makes perfect sense when you remember that the rows of the matrix correspond to the axes of the rotated coordinate system in the matrix: in this example the X and Y axes are being rotated on the XY plane, but the Z axis still points straight at &lt;code&gt;[0,0,1]&lt;/code&gt; and neither X nor Y is rotating into the Z at all (hence the zeros tacked on to the first two rows).&lt;br /&gt;
Knowing that, it makes sense that an X rotation matrix -- with the X axis held constant and Y and Z rotating on the YZ plane -- looks like this:&lt;br /&gt;
1| 0| 0&lt;br /&gt;
---|---|---&lt;br /&gt;
0 |  cos(theta) |  sin(theta)&lt;br /&gt;
0 | -sin(theta) |  cos(theta)  &lt;/p&gt;
&lt;p&gt;The Y rotation matrix is a bit trickier. We know that the Y axis will be &lt;code&gt;[0,1,0]&lt;/code&gt;, but the sin-cos rotations have to be split among the X and Z axes like this so that the rotation is limited to the XZ plane:&lt;br /&gt;
 cos(theta) | 0 | -sin(theta)&lt;br /&gt;
---|---|---&lt;br /&gt;
0| 1| 0&lt;br /&gt;
 sin(theta) | 0 |  cos(theta)  &lt;/p&gt;
&lt;p&gt;These 3X3 matrices will do 3-D rotations, but you'll rarely see them alone. In most practical uses these matrices will be embedded into a 4X4 transformation matrix (for reasons we'll be talking about in a future post) but they will work the same way (for example, you can see them quite clearly in the &lt;a href="http://download.autodesk.com/us/maya/2011help/CommandsPython/xform.html"&gt;list of matrixes that accompanies the Maya xform command&lt;/a&gt;.  Next time out we'll talk about why these 3X3 matrixes turn into 4X4's and how that difference is key to including translations as well as rotations. Until then - keep dotting. And &lt;em&gt;&lt;a href="http://www.avclub.com/article/and-now-theres-spaceballs-edition-episode-vii-trai-212450"&gt;May the Schwartz Be With You!&lt;/a&gt; (Dot Matrix sighting at 0:30)&lt;/em&gt;  &lt;/p&gt;
&lt;h3&gt;Posts in this series&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/11/bagels-and-coffee-or-vector-dot-product.html"&gt;Bagels and Coffee (intro to dot products)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/11/dots-all-folks.html"&gt;Dots All Folks (dot product uses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/12/dot-matrix.html"&gt;Dot Matrix (intro to matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/12/adventures-in-4th-dimension.html"&gt;Adventures in the 4th Dimension (translation matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2015/01/to-scale.html"&gt;To Scale! (scale matrices)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 06 Dec 2014 12:22:00 -0800</pubDate><guid>tag:,2014-12-06:Dot-Matrix.html</guid></item><item><title>Dot's all, folks</title><link>/Dot's-all,-folks.html</link><description>&lt;p&gt;Last time out I went on (probably a bit too long) on the virtues of the dot product - the operation which takes two lists of numbers and multiplies them to create a single product. The highlight of the whole thing was the &lt;em&gt;cosine dot product&lt;/em&gt; - the handy fact that the dot product of two normalized vectors is the cosine of the angle between them.  &lt;/p&gt;
&lt;p&gt;Now that the theory is out of the way, it’s time to highlight some of the zillions of applications for this handy little operation.  &lt;/p&gt;
&lt;p&gt;_If none of this sounds familiar you might want to &lt;a href="http://techartsurvival.blogspot.com/2014/11/bagels-and-coffee-or-vector-dot-product.html"&gt;revisit the first post in the series&lt;/a&gt; before continuing. _  &lt;/p&gt;
&lt;p&gt;The dot product is incredibly useful for a TA for two reasons. First, dots allow you to &lt;em&gt;convert between geometric measures and angles&lt;/em&gt; without the need for matrices or complex formulae. Second, dots provide an efficient way to &lt;em&gt;project one vector on to another&lt;/em&gt;, allowing you to measure distances and quantities relative to an arbitrary axis or vector - a great tool for anything from color conversions in a pixel shader to measuring motion in a complex rig.&lt;br /&gt;
Before getting down to cases, a quick reminder of one important side fact we pointed out last time. A cosine dot product can only tell you &lt;em&gt;how different&lt;/em&gt; the angle between two vectors is - &lt;strong&gt;not&lt;/strong&gt; what rotations would transform one vector into the other. If you try out this example you’ll see that the dot of &lt;code&gt;[1,0,0]&lt;/code&gt; against both &lt;code&gt;[.5, .866, 0]&lt;/code&gt; and &lt;code&gt;[.5, -.866, 0]&lt;/code&gt; is .5, which (if you remember your sines and cosines) means the relative angle is 30 degrees. However one of those two vectors is clockwise from &lt;code&gt;[1,0,0]&lt;/code&gt; and the other is counter-clockwise from it. The dot, by itself, can’t tell you which one is which. Don’t forget that bit!  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As I mentioned in the last article, the math for dots is trivially simple. Maxscript &lt;a href="http://www.scriptspot.com/bobo/mel2mxs/arithmetic.htm"&gt;includes vector math functions&lt;/a&gt; by default, as does MEL, but vanilla maya.cmds does not. If you want to experiment with examples mentioned here in Maya python, you can import &lt;code&gt;pymel.core.datataypes&lt;/code&gt; and use the &lt;code&gt;Vector&lt;/code&gt;. I’ve also put a &lt;a href="https://github.com/theodox/vector"&gt;simple vector module up on Github&lt;/a&gt; that works in &lt;code&gt;Maya.cmds&lt;/code&gt;. I’ll be using that for these examples but translating between MXS, Pymel, and cmds should be a no-brainer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#rigging"&gt;&lt;/a&gt;rigging&lt;/h2&gt;
&lt;p&gt;One of the most common tasks in rigging is wrangling information into the correct frame of reference.This is particularly tough when dealing with angular data, since angles are often presented in the form of Euler angles whose numeric values can vary unpredictably and which are therefore hard to use in expressions or code. Here are a few examples of how dot’s can help riggers get angular information while avoiding the Euler blues  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#the-bends"&gt;&lt;/a&gt;The Bends&lt;/h4&gt;
&lt;p&gt;Dot’s are an excellent way to measure the extension of a limb, without relying on an Euler value which might be affected by local axis orientations, joint orients, or rotated local axes. Here’s an example that gets a reliable value for the extension of an arm (note: this is vanilla maya, you could do it more succintly with Pymel but it’s a better illustration to do it from scratch)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;shoulder_pos = cmds.xform(&amp;#39;r_shoulder&amp;#39;, t=True, w=True)  
elbow_pos = cmds.xform(&amp;#39;r_elbow&amp;#39;, t=True, w=True)  
wrist_pos = cmds.xform(&amp;#39;r_wrist&amp;#39;, t=True, w=True)

bicep_vector = (Vector3(*elbow_pos) - Vector3(*shoulder_pos)).normalized()  
forearm_vector = (Vector3(*wrist_pos) - Vector3(*elbow_pos)).normalized()  
elbow_bend = Vector3.dot(bicep_vector, forearm_vector)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then &lt;code&gt;arm_extension&lt;/code&gt; will be 1 at full extension and 0 when the arm is bent back completely on itself (&lt;em&gt;ouch!&lt;/em&gt;). You can map use this extension value to drive muscle deformations, blendshapes, or other behaviors without worrying about th underlying Euler values or converting from angles to linear ranges.  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#leaning-in"&gt;&lt;/a&gt;Leaning In&lt;/h4&gt;
&lt;p&gt;It’s often useful to have a general idea what a character’s whole body is doing, rather than focusing entirely on individual joint positions and orientations. For example, you might want to have rig behaviors turn on when a character is ‘upright’ and off when it it is ‘prone’, or vice-versa. Figuring out the gross orientation is often hard because there are so many bones cooperating to produce the visual effect – and because different animators may use different controls in different ways: animator A may prefer to put all of the big rotations onto a center-of-gravity control while animator B does everything on the pelvis.&lt;br /&gt;
Dots are great for extracting pose info from the world space position of key bones instead of trying to intuit them from rotation values. For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;head_pos = cmds.xform(&amp;#39;head&amp;#39;, t=True, w=True)  
pelvis_pos = cmds.xform(&amp;#39;pelvis&amp;#39;, t=True, w=True)

# how upright is the character’s body?  
body_vector = (Vector3(*head_pos) - Vector3(*pelvis_pos)).normalized()  
upright = Vector3.dot(body_vector, Vector3(0,1,0)) # for a y-up world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here upright will be close to 1 for an upstanding character, close to 0 for a prone character, and close to -1 for an upside down character (eg, during a handstand). This version tracks the pelvis-to-head vector so it will respond to things like a hunched-over spine; but one of the nice side effects of vector math it that you can easily ‘weight’ different elements as you put together your vectors. For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;chest_pos = cmds.xform(&amp;#39;spine_3&amp;#39;, q=True, t=True, w=True)  
head_and_chest = (Vector3(*chest_pos) * 2 + Vector3(*head_pos))  / 3.0  
body_vector = (Vector3(*head_and_chest) - Vector3(*pelvis_pos)).normalized()  
upright = Vector3.dot(body_vector, Vector3(0,1,0))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;would include bias the uprightness vector towards ‘spine_3’, diminishing the influence of the head on the final results.  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#looky-here"&gt;&lt;/a&gt;Looky here&lt;/h4&gt;
&lt;p&gt;You don’t always have to use positions to drive dot-product calculations. You can always get the local orientation of a transform by looking at it’s matrix (the exact reason for this will be shown in a later posting, for now take it on faith). This allows you to see how closely a given object is oriented towards a given vector. &lt;br /&gt;
For example, something like this will help you figure out if a character’s body is oriented in roughly the same direction as the character’s root bone:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# assuming that the bones are constructed with positive z as &amp;#39;forward&amp;#39;  
world_forward = lambda b: cmds.getAttr(b + &amp;quot;.worldMatrix&amp;quot;)[8:11]  
root_forward = Vector3(*world_forward(&amp;#39;root&amp;#39;))  
pelvis_forward = Vector3(*world_forward(&amp;#39;pelvis&amp;#39;))  
shoulders_forward = Vector3(*world_forward(&amp;#39;spine_3&amp;#39;))  
head_forward = Vector3(*world_forward(&amp;#39;head&amp;#39;))  
# get a weighted average of the pelvis, shoulder and head directions  
composite = ((pelvis_forward * 3) + (shoulders_forward * 2) + head_forward) / 5.0  
# flatten the composite and root vectors into 2 dimensions:  
composite = composite * Vector3(1,0,1)  
root_forward = root_forward * Vector3(1,0,1)  
orientation = Vector3.dot(composite.normalized(), (root_forward.normalized())
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A value of 1 would have the character facing precisely along the same direction as it’s root bone in 2D. This kind of thing is especially useful when you’re trying to manage a lot of animations which need to begin and end in similar poses - you can quickly check the overall posture of a lot of characters without too much detailed analysis to spot problems before going in and looking at the troublesome ones for hand fixing.  &lt;/p&gt;
&lt;h2&gt;shaders&lt;/h2&gt;
&lt;p&gt;Even more than rigging, shader authoring frequently involves a return to the math fundamentals. The most familiar example of the dot product in shader writing is the &lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404"&gt;Lambert rendering equation&lt;/a&gt; which we discussed in the last post. However, you can get a variety of other handy effects from the dot inb shaders. The key is to find the right set of vectors to work with. &lt;br /&gt;
For example, if you dot a surface normal against the vector along which the camera is looking, the result will tell you how directly surface is facing the camera. This allows you to create a &lt;a href="http://kylehalladay.com/blog/tutorial/2014/02/18/Fresnel-Shaders-From-The-Ground-Up.html"&gt;fresnel&lt;/a&gt; or edge-highlighting effect. &lt;br /&gt;
Here’s a snippet of a very minimal Unity shader that illustrates the principle:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;void surf (Input IN, inout SurfaceOutput o) {  
        // a hacky way to get the camera vector…  
        float3 cam_vect = UNITY_MATRIX_IT_MV[2].xyz;  
        float result = 1 - dot( cam_vect, o.Normal);  
        o.Albedo = float3(.5,pow(result, FresnelPower) ,.5);  
        o.Alpha = 1;  
        }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The only thing worth noting here is the way the result value is being inverted: we want the result number to be close to 1 at the horizon and close to zero where the camera normal and the surface normal are aligned, which is the reverse of what the dot would normally give us. By raising the result value to a higher or lower power (using &lt;code&gt;pow&lt;/code&gt;) we can sharpen or soften the effect; since it the result value should always be 1 or lower a higher power will result in a smaller result value and thus a tighter highlight as you can see in the images.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://4.bp.blogspot.com/-CPrevKORkfE/VHl_alL2OkI/AAAAAAABLWg/N9jWYdWum-4/s1600/fresnel.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-CPrevKORkfE/VHl_alL2OkI/AAAAAAABLWg/N9jWYdWum-4/s1600/fresnel.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The dotting the camera vector against the surface normal produces an edge highlight fresnel-style effect. &lt;br /&gt;
The size of the effect can be tweaked by raising the dot product value to a higher or lower power.  &lt;/p&gt;
&lt;p&gt;You can re-map that dot product in other ways as well. The popular Team Fortress 2 shader, for example, takes the dot between the light and the surface normal - which, of course, will range in value from -1 to 1 - and re-maps it onto the range 0 to 1 so it can be used to lookup a color value from a texture. That’s how the game achieves it’s distinctive ‘wrap-around’ lighting:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="The Team Fortress shader uses a shifted dot-product to look up lighting values from a hand-authored color ramp, creatng a distinctive illustrational look." src="http://www.maginot.eu/space/mgto/projects/mods/tf2_lightwarp/mgto_lightwarp_mod.jpg" /&gt;  &lt;/p&gt;
&lt;p&gt;Both of those uses use the ‘cosine falloff’ intepretation of the dot product, that is, they represent angular differences. However dots have another mathematical meaning: they represent the projection of one vector onto another. One really cool aspect the projective use of the dot is that the logic works in color spaces as well as physical space. For example, a shader writer of can get the luminance of a pixel elegantly like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;float luma = dot( float3(0.2126, 0.7152, 0.0722), pixel_color);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is essentially projecting the color onto a ‘luminance vector’ dominated by green (numbers derived from &lt;a href="https://en.wikipedia.org/wiki/Relative_luminance"&gt;this&lt;/a&gt;) You could use the same trick to identify ‘warm’ colors by dotting against a warm rgb value like (.707, .707, 0) - high dot values will be warm and low dot values will be cool. It takes some meditation to really grok what’s going on (try parsing what’s happening in &lt;a href="http://makc3d.wordpress.com/2011/04/06/matching-colors-in-rgb/"&gt;this example&lt;/a&gt;!) but dots can be a very handy trick for navigating color space as well as 3-d space.&lt;br /&gt;
Shader writers have one more sneaky use for dots - they can be a cheap substitute for selection functions. Shader authors often have to pack data into vectors for efficiency, but accessing one component of a vector would need an expensive if-then branch in theshader. Dots, however, can let you pick one component out of your vector without using branches. Since the dot of any vector composed of all zeros is of course zero. If one component is a one and the rest are zeros, the result will be the corresponding component of the other vector. Thus:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;float3 y = float3(0,1,0);  
float3 x = float3(1,0,0);  
float3 val = float3(.5, .866, 0);  
// dot(x,val) == val.x = .5;  
// dot(y,val) == val.y = .866;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is more compiler friendly than inserting a branch into the shader code to conditionally pick one component or another. I’ve found it especially useful in Unity, where ShaderLab limits your ability to pass custom data types to shaders and it’s often necessary to pack data into vectors or matrices just to get it from the game to the shader.  &lt;/p&gt;
&lt;h2&gt;tools&lt;/h2&gt;
&lt;p&gt;It’s easy to see who the kinds of tricks we’ve already laid out for shaders and rigging generalize for tool writing. The dot of a surface normal and a vector is a great proxy for whether or not the a surface is facing something, dots are great for analyzing geometry. For example, A tree-and-rock scattering script can dot the normal of a terrain against gravity to figure out which slopes are too steep for trees, or which areas are bottomland where there ought to be lots of bushes. A terrain editing tool could against a sun vector to identify exposed areas where the grass is yellowed and shady spots where it’s lush and green. &lt;br /&gt;
As with rigging , the dot also provides a way to check relative orientations. For example, you might need to know if an object has been where another object can ‘see’ it. If you dot a reference vector - such the object’s local X or Z axs - against the vector to a target, you can figure out if the target is ‘ahead’ or ‘behind’ the reference object. For example this function would tell you if the target was within some angle of the forward axis of the observer:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   def target_visible(reference, target, cone-angle = .5_):  
        &amp;quot;&amp;quot;&amp;quot;Is target within &amp;lt;coneangle&amp;gt; when viewed on references&amp;#39; local Z axis?&amp;quot;&amp;quot;&amp;quot;  
        reference-vector =  cmds.getAttr(reference + &amp;quot;.worldMatrix&amp;quot;)[8:11]  
        target_pos = cmds.xform(target, q=True, t=True, ws=True)  
        reference-pos = cmds.xform(reference, q=True, t=True, ws=True)  
        target-vector = (Vector3(*target-pos) - Vector3(* reference-pos))  
        return Vector3.dot(target-vector.normalized(), reference-vector.normalized()) &amp;lt;= cone-angle
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could restrict that to one or two axes using the same trick in the rigging example, or use the full cone angle as done here.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As an aside, this brings up the issue of converting between dots and angles. Since the geometric dot product (as always, assuming you’ve got normalized vectors) is a cosine, you can convert it to an angle by using the arc-cosine function (&lt;code&gt;acos&lt;/code&gt; in Python and most other languages) like so:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cosine = Vector3.dot(a, b)  
angle_in_radians = math.acos(cosine)  
angle_in_degrees = math.degrees(angle_in_radians)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The projective function of dots is also useful in tools. For example, you can use a dot to clamp a line to the position of the mouse, even if the line is constrained so that the mouse doesn’t physically rest on the line:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;line_vector = Vector2(.707, .707)  # a 45 degree line  
line_origin = Vector2(200, 200)    # start drawing at pixel (200,200)  
while (mouse.down()):  
    line_end = Vector2.dot( Vector2(*mouse.position) - line_origin, line_vector)  
    draw_line (line_origin, line_origin + line_end)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#further-reading"&gt;&lt;/a&gt;Further reading&lt;/h3&gt;
&lt;p&gt;If this one whetted your appetite and you need to know more, here’s a few links I found handy while reading up:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chrisevans3d.com/pub/_blog/maya-python-vector-math-primer/"&gt;Chris Evans’ vector math tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a href="http://mathinsight.org/dot_product"&gt;page on projective dot products&lt;/a&gt;, along with an applet that helps you visualize how the projection works&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-2/"&gt;This post from Wolfire&lt;/a&gt;, developers of &lt;a href="http://www.wolfire.com/overgrowth"&gt;Overgrowth&lt;/a&gt; includes some nice examples of how dots are used in AI and game code (plus a peek at some other concepts I’ll be covering later in this series)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href="https://plus.google.com/105359351421932966635"&gt;+Paul Vosper&lt;/a&gt;  put me on to the excellent &lt;a href="http://scratchapixel.com/"&gt;Scratchapixel.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll be back on the math trail again as soon as I emerge from my &lt;a href="http://www.webmd.com/food-recipes/features/the-truth-about-tryptophan"&gt;mythical tryptophan coma.  &lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;Posts in this series&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/11/bagels-and-coffee-or-vector-dot-product.html"&gt;Bagels and Coffee (intro to dot products)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/11/dots-all-folks.html"&gt;Dots All Folks (dot product uses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/12/dot-matrix.html"&gt;Dot Matrix (intro to matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/12/adventures-in-4th-dimension.html"&gt;Adventures in the 4th Dimension (translation matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2015/01/to-scale.html"&gt;To Scale! (scale matrices)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 29 Nov 2014 00:12:00 -0800</pubDate><guid>tag:,2014-11-29:Dot's-all,-folks.html</guid></item><item><title>Bagels and Coffee, or, the vector dot product and you</title><link>/Bagels-and-Coffee,-or,-the-vector-dot-product-and-you.html</link><description>&lt;p&gt;I’ve been boning up on my math lately. &lt;br /&gt;
Like most TA’s I’ve cobbled together a bag of tricks from different situations I’ve dealt with over the years, but I’ve never really gone back to shore up my shaky high school trigonometry and pre-calculus. It’s certainly possible (at least, I hope it is!) to be a good TA with only seat-of-the-pants math skills — after all, we have parenting and scaling and all the other cool tricks in our apps to do the heavy lifting for us. Still, I’ve been finding that paying more attention to the math fundamentals is helping me solve problems more efficiently and elegantly than my patented hack-and-slash techniques did.&lt;br /&gt;
So, I’m starting an occasional series on some basic math concepts that I hope will be useful to other TA’s. I know it’s been helpful to me - there’s nothing that concentrates the mind like putting something out there on the internet for public commentary - it’s really forces you to think things through… &lt;em&gt;At least, as long as you’re not on Twitter&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;To kick off the series, I want to start off with a simple operation that I use all the time, the humble &lt;a href="http://en.wikipedia.org/wiki/Dot_product"&gt;dot product&lt;/a&gt;. Also known as the 'scalar' product, the dot is an operation for turning lists of numbers into a single number. It’s also astonishingly useful for graphics. I’ve used it for years, but only recently did I try to see how and &lt;em&gt;why&lt;/em&gt; it works instead of just relying on the second-hand assurance &lt;em&gt;that&lt;/em&gt; it works.&lt;br /&gt;
The dot is all about combining operations on lists. We always run into it in the context of geometric vectors, but in the pure math world vector is just another way of saying “list of similar numbers.” If you go to the coffee shop every day and buy a $5 latte, its obviously going to cost $25 a week (Tote that up over 48 work weeks a year - it's a lot of money! I bring instant. But I digress). If you buy a $2 bagel on monday and a $3 cookie on Wednesday and Friday, how much will it cost?:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;5 * 5 = $25 for coffee  
2 * 1 = $2 for bagel  
3 * 2 = $6 for cookies
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes $33 total a week (you really should bring in your snacks from home. You'll save a ton!) &lt;br /&gt;
Besides helping you save money on lunch, this is a classic (though non-3-d related) example of the dot product in action. Dots are nothing more than a structured way of multiplying two lists of numbers. In this case we have list of prices:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[5, 2, 3]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and a list of quantities:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[5, 1, 2]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dot operation merely multiplies the numbers in the same position in the list and adds them together. As you can see, this is trivial math:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(5 * 5) +  (2 * 1) + (3 * 2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Despite it's humble origins, however, this trick -- multiplying ordered pairs of numbers and adding them up - is absolutely basic in 3-D graphics. The lists of prices and quantities become vectors (in fact, general purpose algebra calls any list a 'vector') and with a simple convention the dot product takes on a very interesting and useful set of properties for TA’s to exploit.&lt;br /&gt;
The most famous example of the dot product in graphics is &lt;a href="http://en.wikipedia.org/wiki/Lambertian_reflectance"&gt;the original Lambert shading equation&lt;/a&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;N dot L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where N is a surface normal and L is the angle of the incident light.   &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://upload.wikimedia.org/wikipedia/commons/thumb/0/03/VisualPhotometry_Fig2_from_Lambert'sPhotometria.jpg/2880px-VisualPhotometry_Fig2_from_Lambert'sPhotometria.jpg"&gt;&lt;img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/03/VisualPhotometry_Fig2_from_Lambert'sPhotometria.jpg/2880px-VisualPhotometry_Fig2_from_Lambert'sPhotometria.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The 'Lambert shader' is based on this math textbook from 1760. How cool is that?  &lt;/p&gt;
&lt;p&gt;Lambertian shading is probably the single most common operation in computer graphics, but it’s the same math as figuring out your coffee budget. Here’s how the magical translation from bagels and coffee to shaded pixels works:&lt;br /&gt;
Imagine a sphere being lit by a directional light from straight above, in classic CG fashion. The vector to the light would be   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0, 0, 1]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On top of the sphere, the normal vector would point the same way - it too would point up towards  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0, 0, 1]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dot of these two is:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(0 * 0) + (0 * 0) + (1 * 1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in other words, 1. This makes sense: our light is directly overhead, so the sample point on top of the sphere receives the full incoming light. Compare this to a point halfway down the sphere. A a normal point 45 degrees from the vertical might be   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[.707, 0, .707]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the dot would be  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(0 *.707) + (0 * 0) + (1 * .707)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or .707. That means this sample point is getting about 70% of the incoming light. At the horizon of the sphere the dot will be &lt;code&gt;[0,0,1] dot [1, 0, 0]&lt;/code&gt;. This dots out to   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(1 * 0) + (0 * 0) + (0 * 1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or 0. This makes sense - at the horizon of the sphere the light is parallel to the surface and imparts no light.&lt;br /&gt;
Or, in pretty picture form:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.upvector.com/pages/Tutorials/Intro%20to%20Shaders/images/lambert1.gif"&gt;&lt;img alt="" src="http://www.upvector.com/pages/Tutorials/Intro%20to%20Shaders/images/lambert1.gif" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Wherefore art thou cos(theta)?&lt;/h3&gt;
&lt;p&gt;So, it appears of this fancy-pants rendering is coming from the same bagels-and-coffee trick. How come? Lambert’s law isn’t some simple interpolation - it’s based on cosines, which give it the characteristic soft falloff around the horizon. How does this work?&lt;br /&gt;
The sharp-eyed reader might notice that all of the vectors in this example are &lt;em&gt;normalized&lt;/em&gt;, that is to say the length of all of the vectors in this example are 1. That’s is the special convention that turns a plain-vanilla dot product into a geometric proposition. As long as the vectors are normalized -- but &lt;strong&gt;only&lt;/strong&gt; if they are normalized -- the dot product of the light vector and the normal vector is the cosine of the angle between the two vectors. That’s what makes the nice soft falloff on a Lambert-lit object, but it has lots of other properties as well.&lt;br /&gt;
To understand how this bagels-and-coffee math turns into trigonometry, remember that ‘normalizing’ a vector just means setting its length to one. Visualize what happens if you sweep a 1-unit long line segment around in a circle, starting from the horizontal. As the segment rotates, you can draw a right triangle from it’s end point up or down to the horizontal axis, as in the example below:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mathsisfun.com/geometry/images/circle-unit-sct.gif"&gt;&lt;img alt="" src="http://www.mathsisfun.com/geometry/images/circle-unit-sct.gif" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you recall your high-school trigonometry you’ll remember that the cosine of an angle in a right triangle is the ratio between the side of a right triangle next to the angle and the hypotenuse of the same triangle &lt;em&gt;(the “CAH” in “&lt;a href="http://www.mathwords.com/s/sohcahtoa.htm"&gt;SOHCAHTOA&lt;/a&gt;,” if you learned it the way I did)&lt;/em&gt;. In this case, our hypotenuse is always 1 (it’s a unit line). so  the cosine is just the width of our right triangle. All of this works as described &lt;em&gt;only&lt;/em&gt; if the vectors are normalized,however - when your dots give you wonky results, non-normalized vectors are always the first thing to look for.&lt;br /&gt;
&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=ZffZvSH285c"&gt;This video from Khan Academy&lt;/a&gt; gives you a more in-depth derivation if this description isn’t clear.&lt;/em&gt;&lt;br /&gt;
Once you grasp the unit-circle-cosine setup, it’s easy to see how dotting unit vectors creates cosine values rather than lunch budgets. See what happens when you dot a random vector against &lt;code&gt;[1,0,0]&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;example = [.866, .5, 0]  
reference = [1, 0, 0]  
example dot reference = (.866 * 1) + (.5 * 0) + (0 * 0) = .866
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the X component of the example vector has been preserved, but the other two are zeroed out. (This illustrates the meaning of the dot project - it’s the &lt;em&gt;projection&lt;/em&gt; of one vector on to another. We’ll touch on that more in the next post). &lt;br /&gt;
In this case, projecting that 60 degree line segment onto the vector &lt;code&gt;[1,0,0]&lt;/code&gt;creates a line segment from &lt;code&gt;[0,0,0]&lt;/code&gt;to &lt;code&gt;[.866,0,0]&lt;/code&gt; and the same kind of right triangle we described above. The ratio of the hypotenuse vector to this new ‘adjacent’ vector is .866 / 1, that is, plain old .866 — which we we know from the unit circle is the cosine of 60 degrees and the answer we were looking for. &lt;br /&gt;
This is how the dot of two normalized (!) vectors is alway the cosine of the angle between them.  &lt;/p&gt;
&lt;h3&gt;Dot's all, folks&lt;/h3&gt;
&lt;p&gt;So that's the basic theory of the dot product. Of course what the ruthlessly practical TA will want to know about is uses, not theory. Some of the applications will be obvious but there is a &lt;a href="https://www.youtube.com/watch?v=-mTUmczVdik"&gt;plethora&lt;/a&gt; of less obvious ways the dot product can make your life eaiser. I’ll hit those in my next post.  In the meantime, bring instant coffee instead of paying for that venti tripple mocchachino every day. That stuff’ll totally blow your budget.  &lt;/p&gt;
&lt;h3&gt;Posts in this series&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/11/bagels-and-coffee-or-vector-dot-product.html"&gt;Bagels and Coffee (intro to dot products)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/11/dots-all-folks.html"&gt;Dots All Folks (dot product uses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/12/dot-matrix.html"&gt;Dot Matrix (intro to matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/12/adventures-in-4th-dimension.html"&gt;Adventures in the 4th Dimension (translation matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://techartsurvival.blogspot.com/2015/01/to-scale.html"&gt;To Scale! (scale matrices)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 22 Nov 2014 11:46:00 -0800</pubDate><guid>tag:,2014-11-22:Bagels-and-Coffee,-or,-the-vector-dot-product-and-you.html</guid></item><item><title>Big (?) Python bucks!</title><link>/Big-(?)-Python-bucks!.html</link><description>&lt;p&gt;I've frequently commented in the past on the &lt;a href="http://www.gamasutra.com/view/news/221533/Game_Developer_Salary_Survey_2014_The_results_are_in.php"&gt;Game Developers Salary Survey&lt;/a&gt;.  For you Pythonistas out there, there's some nice data (amateur grade, but still pretty good) to be found at the &lt;a href="http://nbviewer.ipython.org/github/agilevic/pystreet/blob/master/notebooks/PyStreet%20Python%20Developer%20Salary%20Survey%20Results.ipynb"&gt;Python Developer Salary Survey&lt;/a&gt;.  No mention of what you get for knowing Max / Maya, however, but by crunching the numbers I'd guess it &lt;em&gt;subtracts&lt;/em&gt; about $30k per year.   &lt;/p&gt;
&lt;p&gt;Or maybe that's just because we're all lousy programmers.  &lt;/p&gt;
&lt;p&gt;EDIT: fixed bad link  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 16 Nov 2014 21:43:00 -0800</pubDate><guid>tag:,2014-11-16:Big-(</guid></item><item><title>Coderscrowd</title><link>/Coderscrowd.html</link><description>&lt;p&gt;http://coderscrowd.com/app/public/home&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 13 Nov 2014 00:42:00 -0800</pubDate><guid>tag:,2014-11-13:Coderscrowd.html</guid></item><item><title>Dot Net is Open?</title><link>/Dot-Net-is-Open?.html</link><description>&lt;p&gt;Courtesy of &lt;a href="https://plus.google.com/116275833090172173559"&gt;+Robert Butterworth&lt;/a&gt;  comes the news that &lt;a href="http://blogs.msdn.com/b/dotnet/archive/2014/11/12/net-core-is-open-source.aspx"&gt;.Net is now open source&lt;/a&gt;.  Future development will be done out of GitHub (!).  Is the timing - on the anniversary of the fall of the Berlin Wall - just a coincidence?  &lt;/p&gt;
&lt;p&gt;In the short term this probably only means that some projects which have avoided .Net for being closed-source may consider using C# or other .Net languages. Over the medium term it probably presages a 3-6% decline in the use of the dollar sign in derisive online references to Micro$oft.  What's most interesting, though, is what it might mean for Unity, which is hard to predict but tantalizing to speculate on.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://logomentor.com/logos/dot-net-logo.gif"&gt;&lt;img alt="" src="http://logomentor.com/logos/dot-net-logo.gif" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mono is an impressive effort but it's always been rough around the edges (particularly in the supporting toolsets - nothing makes you appreciate Visual Studio like a few hours with MonoDevelop!  Since MS picked up SyntaxTree and made &lt;a href="http://unityvs.com/"&gt;UnityVS&lt;/a&gt; available to all, the editor situation has been a lot better. But the guesswork around different DotNet subsets (and some general wonkiness in the deep-down internals of building big Unity projects) is a blemish on Unity's otherwise nicely polished cross-platform credentials.   &lt;/p&gt;
&lt;p&gt;A lot of the reason for that is that Mono was developed in a 'clean room' - for legal reasons neither the Mono team nor the MS .Net team were allowed to actually look at each other's code. It's quite impressive that the result works as well as it does. but throwing open the curtains has got to have some benefits as we move forward.  It's particularly cool that the .Net tean are actually working with de Izcaza and Xamarin on creating future cross-platform implementations,  &lt;/p&gt;
&lt;p&gt;It's even possible that this will benefit Maya, by making it possible to do a full-stack .Net port for Maya's running on Linux and OSX.  And maybe, just maybe, this might make things better for the &lt;a href="https://code.google.com/p/trypython/"&gt;Silverlight IronPython web tech&lt;/a&gt;, which would be pretty cool, given the lame state of &lt;a href="http://techartsurvival.blogspot.com/2013/12/python-in-browsers.html"&gt;Python in the browser&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Of course, it's hard to see how any of these things will really play out. It's not like no big company has ever "Open-Sourced" something before as a PR friendly way of ending support for it. But it's always more fun to be an optimist.  &lt;/p&gt;
&lt;p&gt;Interesting side note: even &lt;em&gt;they&lt;/em&gt; don't use TFS for version control. See, optimism is sometimes justified - every tyranny falls some day.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 13 Nov 2014 00:38:00 -0800</pubDate><guid>tag:,2014-11-13:Dot-Net-is-Open</guid></item><item><title>WYG &gt; WYS</title><link>/WYG-%3E-WYS.html</link><description>&lt;p&gt;&lt;em&gt;Update 4/4/2015:  I've got a much improved pipeline for markdown blogging using Sublime Text, as detailed &lt;a href="http://techartsurvival.blogspot.com/2015/03/markdown-wrapup.html"&gt;here&lt;/a&gt;.  I'm also having a lot of luck with &lt;a href="http://dynalon.github.io/mdwiki/#!index.md"&gt;MDWiki &lt;/a&gt;for static sites on &lt;a href="http://github.io/"&gt;github.io&lt;/a&gt;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;&lt;br /&gt;
_First off, a confession. I’ve become a plaintext nazi. 30 years since I first hit _Ctrl+I&lt;/em&gt; to italicise a piece of text, I’ve pretty much abandoned fancy-pants text edtors for the hardcore geek chic of plain text and &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt;.&lt;br /&gt;
To be honest, this makes me uncomfortable, because plain-text-chauvinism is the techie equivalent of skinny jeans and ironical facial hair; it’s definitely a thing for the Cool Kids,tm a demographic which is not really my native habitat.&lt;br /&gt;
 But I’m willing to be cool if that’s what it takes.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt; is just a great tool for writing web or wiki content. If you spend a lot of time typing - particularly if you’re a TA who spends a lot of typing Python! – it becomes natural really quickly.&lt;br /&gt;
The great thing about markdown is that it’s not dependent on the vagaries of a particular editor or application. There’s no need to worry about the layout of the menus or the mnemonics of the hotkeys - you just type. You just tap away without taking your hands off the keyboard to hit special key combinations for formatting (eg &lt;strong&gt;bold&lt;/strong&gt;, &lt;em&gt;italic&lt;/em&gt;), so you go a lot faster. &lt;br /&gt;
In markdown, the emphasis is on the structure of what you’re writing instead of the presentation. You don’t format, you ‘mark up’ - that is you indicate what the job of a particular bit of text, is but you don’t describe it’s appearance. You can create headings, lists, block quotes, and even code snippets just using some simple conventions. Moreover the conventions are pretty readable in plain text. For example, you this little snippet of text  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heading  
========  
This is some plain text

### subheading  
    * list item  
    * other list item
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Produces this formatted output:  &lt;/p&gt;
&lt;h1&gt;heading&lt;/h1&gt;
&lt;p&gt;text goes here  &lt;/p&gt;
&lt;h3&gt;subheading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;list item&lt;/li&gt;
&lt;li&gt;other list item&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The actual look of the output is going to be controlled down stream something else. Most markdown is processed into HTML using CSS to control things like fonts, line-spacing, and alignment. &lt;br /&gt;
I’ve found that markdown makes me a lot more productive than traditional WYSWIG editing. In part that’s because I can write markdown in a very stripped-down editor like &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; on the PC or &lt;a href="http://www.ulyssesapp.com/"&gt;Ulysses&lt;/a&gt; on the Mac. These stripped-down editors are really qick and responsive, since they do so much next to nothing in the realm of document layout. Most important for me, they include far fewer distractions than Word or even Google Docs, so I can focus on the job at hand instead of fiddling around with styles and formatting. &lt;br /&gt;
In cases where the layout actually matters I can take the finished text and export it via HTML or PDF to a traditional layout program, but nowadays that almost never happens: I literally cannot remember the last time I worried about the layout of words and images on a printed page (which is a pretty odd reflection for me, since I only got into computers because of &lt;a href="http://www.opticentre.net/FAQ/Desktop-publishing-%28DTP%29/History-of-Desktop-publishing/"&gt;desktop publishing&lt;/a&gt;, back when that was a thing.). Some flavors of markdown include the ability to inline html directly in the text for special purposes - for example, I got the superscript after Cool Kids tm by typing  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Cool Kids &lt;span class="nt"&gt;&amp;lt;sup&amp;gt;&lt;/span&gt;tm&lt;span class="nt"&gt;&amp;lt;/sup&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;99 times out of 100, however, this level of specificity isn’t important until the real work of writing is done and I’m just polishing up - I’m much happier focusing on the actual content and tweaking the visuals at the very last minute. That’s what a lifetime of game devlopment does to a person. &lt;br /&gt;
Nowadays I do all my writing in plain text and markdown, with two exceptions. The wiki we use at work, &lt;a href="https://www.atlassian.com/software/confluence?_mid=2c4fae43fb6d045f4fbe6afdba94a6fe&amp;amp;gclid=Cj0KEQjwt7KiBRD9lOePpe_BhrgBEiQAHaS_19HAtXBp54afa2VUzVBDBXsvpGSZWav3m92wizJ8DZsaAtPB8P8HAQ"&gt;Confluence&lt;/a&gt;, doesn’t support markdown and to be perfectly frank it drives me nuts: The editor feels sluggish and the workflow constantly distracts me from what I’m supposed to be actually writing. And, unfotunately, Blogger doesn’t support md either. Blogger is at least not quite as sluggish as Confluence, but it definitely feels like wearing a deep-sea diver suit compared to blazing away in a plain text editor with markdown.&lt;br /&gt;
Luckily I’ve found an option that at least looks pretty good. This post was written entirely in &lt;a href="https://stackedit.io/"&gt;StackEdit&lt;/a&gt;, a free online markdown editor which also allows publishing directly to Blogger. I followed &lt;a href="http://www.g14n.info/2013/12/how-to-use-markdown-to-edit-blogger.html"&gt;these instructions&lt;/a&gt; by Gianluca Casati which seem to work pretty well. &lt;br /&gt;
On the upside, this feels a lot more productive and focused than the usual Blogger writing process. In particular, it’s way easier to include short bits of code in markdown. Including code snippets into blogger, on the other hand, is a huge pain in the patootie; In the past I’ve used &lt;a href="https://help.github.com/articles/about-gists/"&gt;Gists&lt;/a&gt;, which are not to hard to embed and produce nicely highlighted code in lots of languages. For long format code it’s still a great tool. However it’s not ideal for small snippets of a few lines - there’s a lot of hopping around between editors and it’s very disjointed, which tends to get in the way of good flow when writing. For short jobs I will often just hand-edit the HTML produced by Blogger, which works but is, frankly, BS. &lt;br /&gt;
One the downside, the StackEdit &amp;gt; markdown &amp;gt; html &amp;gt; Blogger pipeline is precisely the sort of jury-rigged song and dance that drives me crazy in my day job. Translations are rarely perfect in any case, and inserting three of them along the way to do a single job offends my sense of Pipeline Fu. I have yet to figure out how to tweak the final results to stay in line with the established style of the blog, and it’s particularly tough to tweak the final results directly in Blogger if I need to make a tweak. The last straw is blogger's maddening habit of replacing &amp;lt;p&amp;gt; tags with &amp;lt;br/&amp;gt; tags, even if you paste HTML right into the HTML editor.  It all feels a lot like a complex MEL pipeline. It works... but it feels wrong.&lt;br /&gt;
So, apologies for any wierd fomatting here - this is a very beta version of a new process. I’m still not satisfied that this is the ‘right’ way to write for the web (Santa, if you’re reading this, I’d &lt;em&gt;kill&lt;/em&gt; for a good markdown blogging platform that also did Python syntax highlighting!).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 01 Nov 2014 11:00:00 -0700</pubDate><guid>tag:,2014-11-01:WYG-&gt;-WYS.html</guid></item><item><title>The Dog Ate My Homework</title><link>/The-Dog-Ate-My-Homework.html</link><description>&lt;p&gt;I had an interesting issue at work the other day. While the details are unit-test specific, I learned a useful general idea that’s worth sharing.  &lt;/p&gt;
&lt;p&gt;We run all of our various Maya tools through a single build system which runs unit tests and compiles code for our different targets (currently Maya 2011 and 2015). Ordinarily, since I’m very allergic to using binaries when I don’t have to, this multi-maya setup doesn’t cause us a lot of headaches. I have a little extractor routine which unzips the few binaries we do distribute in the right places, and all the rest of the code is blissfully unaware of which Maya version it’s running (with the exception of the nasty &lt;a href="http://techartsurvival.blogspot.com/2014/09/2015-bug-watch-ls.html"&gt;ls bug I mentioned a few weeks ago&lt;/a&gt;.)  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://rs1img.memecdn.com/how-many-times-have-you-heard-amp-quot-my-dog-ate-my-homework-amp-quot_fb_2216011.jpg"&gt;&lt;img alt="" src="http://rs1img.memecdn.com/how-many-times-have-you-heard-amp-quot-my-dog-ate-my-homework-amp-quot_fb_2216011.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last week, however, we added a new tool and accompanying test suite to the toolkit. It works fine in 2015 (where we do all of our actual development right now), but crashes in 2011. After a bit of head-scratching we eventually realized that this one was absurdly simple: the test uses a saved Maya so that it can work with known, valid data. Of course the file was saved from Maya 2015, so when the Maya 2011 version of the tests tries to run boot up, it falls over because 2011 won’t read a 2015 file.&lt;br /&gt;
Or, as the checkin comment has it, “Doh!”  &lt;/p&gt;
&lt;h2&gt;Test cancelled!&lt;/h2&gt;
&lt;p&gt;The obvious fix is just to skip the test in Maya 2011 - a test that can never pass is hardly generating much useful information, and the likelihood that our small pool of 2011 customers actually need this tool is low anyway. Skipping a test is easy enough if you’re running the tests manually in an IDE – but a lot more complex if you’re got a build server that’s trying to auto-detect the tests. Plus, designing a system that makes it &lt;em&gt;too&lt;/em&gt; easy to skip tests is a Bad Thingtm; - you generally want all of your tests running all the time, since “I’ll re-enable that test after I deal with this problem” is right up there with “the check is in the mail” and “it’s not you, it’s me” in the probity department. &lt;br /&gt;
So, the goal is to allow us to conditionally disable tests based on a hard constraint - in this case, when they are running on an inappropriate version of Maya - without compromising the tests as a whole . Secondarily it would be nice to do this without any kind of central registry file - we’d really just like the tests to just run, except when they &lt;em&gt;can’t&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://i1.wp.com/lotsofhumor.com/wp-content/uploads/2013/04/didnt-study-for-test-test-cancelled.jpg"&gt;&lt;img alt="" src="http://i1.wp.com/lotsofhumor.com/wp-content/uploads/2013/04/didnt-study-for-test-test-cancelled.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, typically a test runner will detect tests by looking for classes that derive from &lt;a href="https://docs.python.org/2/library/unittest.html"&gt;unittest.TestCase&lt;/a&gt;. The easiest way to skip the test, therefore, is simply not to define it at all - if the test runner doesn’t see the class when it imports your test modules, we’ll be fine. &lt;em&gt;Note: this strategy won’t work if you have some kind of hand-rolled test harness that finds tests by string parsing file contents or something like that! However, you probably want to be doing the standard thing anyway… As they say in Python land, &lt;a href="http://legacy.python.org/dev/peps/pep-0020/"&gt;“There should be one– and preferably only one –obvious way to do it.”&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;In C++ or C# you could do this with a “preprocessor directive”, aka a “#define” - a conditional check that runs at compile time to include or exclude certain parts of a file.   &lt;/p&gt;
&lt;p&gt;In Python we don’t even need that: you can just inline the check in your file and it will execute when the module is imported. Here’s a simple example which conditionally use Raymond Hettinger’s &lt;a href="https://pypi.python.org/pypi/ordereddict"&gt;ordereddict module&lt;/a&gt; in Python 2.6 and the equivalent built-in version in Python 2.7:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ordereddict&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;_(If you are total #IFDEF addict there is also the &lt;a href="http://stackoverflow.com/questions/482014/how-would-you-do-the-equivalent-of-preprocessor-directives-in-python"&gt;pypredef module&lt;/a&gt;. Not my cup of tea, but the author does make some good points about the utility of his approach). _  &lt;/p&gt;
&lt;p&gt;The inline approach works fine in small amounts, but it’s aesthetically unappealing - it forces a bunch of module-level definitions away from the left margin, visually demoting them from important names to generic code blocks. More importantly, it’s easy to mess up: a misplaced indentation can radically change the contents of your file, and even though I’m a big fan of indentations over cur lies, I miss my indents with depressing regularity.  &lt;/p&gt;
&lt;p&gt;Fortunately, Python has an elegantly succinct way of annotating code for higher-level purposes without messing up the visual cleanliness and logical flow: &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808"&gt;decorators&lt;/a&gt;. Decorators are handy here for two reasons: first off, they express your intent very clearly by telling future readers something unambiguous about the structure of your code. Secondly, they can execute code (even fairly complex code, though frankly it’s a bad idea for what I’m describing here!) without compromising the layout and readability of your module.&lt;br /&gt;
The particularly nice thing about decorators in this case is that the way decorators work in any case is a natural match for the problem we have.   &lt;/p&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h2&gt;The substitute teacher&lt;/h2&gt;
&lt;p&gt;A decorator is just a function (or a callable class) which takes another function or class as an argument. When Python finds a decorated function or class, it calls the decorator function and passes the target – that is, the decorated bit of code – as an argument Whatever comes out of the decorator function is then swapped in for the original code. &lt;br /&gt;
Here’s a simple example, using functions for simplicity:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def decorated(original_func):  
        def replacement_func(arg):  
        # this function replaces the original  
        # it only knows what the original does  
        # because that was passed in when the  
        # decorator was called....  
        print &amp;quot;calling original&amp;quot;  
        result = original_func(arg)  
        print &amp;quot;original says : &amp;quot;, result  
        return result  
    return replacement_func   
    # return our new replacement function  
    # but bind it to the name of the original

@decorated  
def size(arg):  
   return len(arg)

example = size( [1,2,3])  
# calling original  
# original says : 3  
print example:  
# 3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The decorator can completely replace the original code if it wants to:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def override(original\_func):  
   def completely\_different():  
       return &amp;quot;and now for something completely different&amp;quot;

@override  
def parrot():  
    return &amp;quot;I’d like to make a complaint about a parrot&amp;quot;

print parrot()  
# and now for something completely different
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or, it could leave it untouched too:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def untouched(original_func):  
    return original_func

@untouched  
def spam():  
    return &amp;quot;spam!&amp;quot;

print spam()  
#spam!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The essential thing here is that the decorator sort of like one of those elves who swap out children for changelings. Officially nothing has changed - the name you defined in the un-decorated code is right there - but under the hood it may be different.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://bartsblackboard.com/files/2009/11/The-Simpsons-05x11-Homer-The-Vigilante.jpg"&gt;&lt;img alt="" src="http://bartsblackboard.com/files/2009/11/The-Simpsons-05x11-Homer-The-Vigilante.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Mandatory testing&lt;/h2&gt;
&lt;p&gt;Once you understand the decorator-as-changeling idea, it becomes pretty easy to see how the decorator can allow code swaps based on some condition. You might, for example, try to patch around a function which returns an empty list in Maya 2014, but &lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404"&gt;crashes in Maya 2015&lt;/a&gt;(link):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def safe_2015(original_func):  
        if &amp;#39;2015&amp;#39; in cmds.about(v=True):  
        # wrap it for safety in 2015  
        def safe\_ls(*args, **kwargs):  
            try:  
                return original_func(*args, **kwargs)  
            except RuntimeError:  
                return []()  
        return safe_ls  
    else:  
        # send it back unchanged in non-2015  
        return original_func

@safe_2015    
def do_something():  
   \#....
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(&lt;em&gt;Disclaimer: I wouldn’t use this code in practice! It’s a good example of the principle, but not a wise way to patch around the 2015 ls bug&lt;/em&gt;).  &lt;/p&gt;
&lt;p&gt;Returning at long last to the problem of suppressing tests: we just need to harness the power of decorators to replace the class definition of our test classes with something else that won’t get run by our test suite. And, luckily, that’s really easy to do since we don’t have to return anything:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def Only2015(original):  
    if &amp;#39;2015&amp;#39; in cmds.about(v=True):  
            return original # untouched!  
        else:  
            return object # the decorated class is now just object
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if your do something like this in your tests:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.standalone&lt;/span&gt;  
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;maya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="nd"&gt;@Only2015&lt;/span&gt;  
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test2015Only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_its_2015&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2015&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestOtherVersions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_any_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you’d expect, both of these test will run and pass when run on a Maya 2015 python. However, under any other version of Maya the file really looks like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;  
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.standalone&lt;/span&gt;  
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;maya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# in 2014 &amp;lt;, this TestCase class has been replaced by a dumb object() class  &lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test2015Only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestOtherVersions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;_any&lt;/span&gt;\&lt;span class="n"&gt;_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because &lt;strong&gt;Test2015Only &lt;/strong&gt;is now an &lt;strong&gt;object()&lt;/strong&gt; instead of a &lt;strong&gt;TestCase&lt;/strong&gt;, the test runner doesn’t even see it and doesn’t try to run it.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#makeup-work"&gt;&lt;/a&gt;Makeup work&lt;/h2&gt;
&lt;p&gt;This is a lovely example of why Python can be so much fun. The language has the magical ability to extend itself on the fly - in this case, change the meaning of whole blocks of otherwise conventional code - but at the same time it offers simple, conservative mechanisms that keep that process for degenerating into mere anarchy (or, worse, into &lt;em&gt;&lt;a href="http://qph.is.quoracdn.net/main-qimg-eb6eb210fd4116ef10fee083428ed482?convert_to_webp=true"&gt;JavaScript&lt;/a&gt;&lt;/em&gt;).  &lt;/p&gt;
&lt;p&gt;This particular gimmick was a great way to clean up our messy test set. Predictably, about 30 seconds I verified that it worked I was starting to brainstorm all sorts of cool new uses for this tactic.   &lt;/p&gt;
&lt;p&gt;A few more minutes of reflection, however, brought me to see that this kind of trick should be reserved for special occasions. The ability to swap the contents of a name based on runtime condition is definitely cool - but it’s hardly a good practice for readability and maintenance down the road. It happens to be a nice fit for this problem because a test is never going to be used by anything other than the test suite. Trying the same thing with, say, a geometry library that gets imported all over the place would be a nightmare to debug.  &lt;/p&gt;
&lt;p&gt;Magic is wonderful but, best used &lt;em&gt;sparingly&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://pad2.whstatic.com/images/thumb/f/f5/Get-out-of-Class-Step-6.jpg/670px-Get-out-of-Class-Step-6.jpg"&gt;&lt;img alt="" src="http://pad2.whstatic.com/images/thumb/f/f5/Get-out-of-Class-Step-6.jpg/670px-Get-out-of-Class-Step-6.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 30 Oct 2014 09:55:00 -0700</pubDate><guid>tag:,2014-10-30:The-Dog-Ate-My-Homework.html</guid></item><item><title>Good tricks</title><link>/Good-tricks.html</link><description>&lt;h2&gt;itertools is your friend&lt;/h2&gt;
&lt;p&gt;The itertools module is a bit of Python arcana that many people overlook.  For an in-depth look , &lt;a href="http://pymotw.com/2/itertools/index.html"&gt;Doug Hellman's PyMOTW article&lt;/a&gt; is a great overview.. Here are some of the highlights:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;itertools.chain  &lt;/strong&gt; is a fast way to string a list of iterables together. For example, you might have a list of lists - say, a bunch of component selections in Maya - and want to combine them into a single list.  It creates a generator that you can run through one item at a time or convert to a list with a list comprehension&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;  
&lt;span class="n"&gt;cube_verts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pCube1.vtx[1]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pCube1.vtx[2]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pCube1.vtx[4]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pCube1.vtx[5]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;sphere_verts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pSphere1.vtx[10]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pSphere1.vtx[11]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pSphere1.vtx[12]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pSphere1.vtx[99]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;plane_verts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pPlane1.vtx[2]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pPlane1.vtx[20]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pPlane1.vtx[200]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pPlane1.vtx[202]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cube_verts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sphere_verts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plane_verts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

&lt;span class="c1"&gt;#pCube1.vtx[1]  &lt;/span&gt;
&lt;span class="c1"&gt;#pCube1.vtx[2]  &lt;/span&gt;
&lt;span class="c1"&gt;#pCube1.vtx[4]  &lt;/span&gt;
&lt;span class="c1"&gt;#pCube1.vtx[5]  &lt;/span&gt;
&lt;span class="c1"&gt;#pSphere1.vtx[10]  &lt;/span&gt;
&lt;span class="c1"&gt;#pSphere1.vtx[11]  &lt;/span&gt;
&lt;span class="c1"&gt;#pSphere1.vtx[12]  &lt;/span&gt;
&lt;span class="c1"&gt;#pSphere1.vtx[99]  &lt;/span&gt;
&lt;span class="c1"&gt;#pPlane1.vtx[2]  &lt;/span&gt;
&lt;span class="c1"&gt;#pPlane1.vtx[20]  &lt;/span&gt;
&lt;span class="c1"&gt;#pPlane1.vtx[200]  &lt;/span&gt;
&lt;span class="c1"&gt;#pPlane1.vtx[202]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;strong&gt;itertools.product  &lt;/strong&gt; will give you a generator that produces all the combinations of multiple iterable items. For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;axes = (&amp;#39;x&amp;#39;, &amp;#39;y&amp;#39;, &amp;#39;z&amp;#39;)  
dimensions = (-1, 0, 1)  
print [i for i in itertools.product(axes, dimensions)]  
# [(&amp;#39;x&amp;#39;, -1), (&amp;#39;x&amp;#39;, 0), (&amp;#39;x&amp;#39;, 1), (&amp;#39;y&amp;#39;, -1), (&amp;#39;y&amp;#39;, 0), (&amp;#39;y&amp;#39;, 1), (&amp;#39;z&amp;#39;, -1), (&amp;#39;z&amp;#39;, 0), (&amp;#39;z&amp;#39;, 1)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;regex testers&lt;/h2&gt;
&lt;h3&gt;Python: &lt;a href="https://pythex.org/"&gt;Pythex&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;C# / dotnet : &lt;a href="http://regexstorm.net/tester"&gt;Regex Storm&lt;/a&gt;&lt;/h3&gt;
&lt;h2&gt;Coding Tips&lt;/h2&gt;
&lt;h3&gt;&lt;strong&gt;Maya list returns&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Before maya 2014, cmds had several commands with an annoying, anti-pythonic behaviour: if you ask a question that usually returns a list but get no results, Maya will return &lt;em&gt;None&lt;/em&gt; instead of an empty list. The most common example is a call to &lt;em&gt;cmds.ls&lt;/em&gt; which returns nothing:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;good_stuff = cmds.ls(type=&amp;#39;mesh&amp;#39;)  
for item in good_stuff:  
    do_something(item)  
# ERROR: NoneType is not iterable
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Luckily, Python has a handy language feature that makes it easy to avoid this trap without an extra if test. If you change the ls like so:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;good_stuff = cmds.ls(type=&amp;#39;mesh&amp;#39;) or []  
for item in good_stuff:  
    do_something(item)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The 'or []' will pass a list result with something in it unchanged; but if the result is None, the or will substitute the empty list. Everything downstream from there can rely on the presence of a real list, even if it's empty   &lt;/p&gt;
&lt;h3&gt;Maya like selection-or-list behavior&lt;/h3&gt;
&lt;p&gt;If you want to make a function that behaves like the default maya commands -- that is, it works on arguments you pass or on selected objects -- you can combine the *args variable input and the or [] trick to make a nice one liner :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def mayalike(*args):  
     my_objects = args or cmds.ls(sl=True) or []  
     for item in my_objects:  
           #do stuff
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will use args if provided, ls-sl if not, and [] if there is nothing selected  &lt;/p&gt;
&lt;h3&gt;multiple assignment&lt;/h3&gt;
&lt;p&gt;python has a handy trick of unpacking iterables in a single assigment call.  This lets you write things like:&lt;/p&gt;
&lt;p&gt;rotation = [ 0, 90, 0 ]&lt;/p&gt;
&lt;p&gt;rx, ry, rz = rotation&lt;/p&gt;
&lt;p&gt;which saves some annoying boilderplate.  It can be especially useful when dealing with functions that produce tuple or list results:&lt;/p&gt;
&lt;p&gt;filename, extension = os.splitext(completefilename)&lt;/p&gt;
&lt;p&gt;which is much more elegant than&lt;/p&gt;
&lt;p&gt;results = os.splitext(completefilename)&lt;/p&gt;
&lt;p&gt;filename = results[0]&lt;/p&gt;
&lt;p&gt;extension = results[1]&lt;/p&gt;
&lt;p&gt;It's a good idea, though, to resist the temptation to overdo it: if you find yourself unpacking long tuples a lot:&lt;/p&gt;
&lt;p&gt;name, address, state, zip, phone = customer&lt;/p&gt;
&lt;p&gt;that's a good sign that customer should be a dictionary, a class, or a &lt;a href="http://pymotw.com/2/collections/namedtuple.html"&gt;namedtuple &lt;/a&gt;so you can parse it reliably:&lt;/p&gt;
&lt;h3&gt;Learn to love Mayapy&lt;/h3&gt;
&lt;p&gt;If' your doing a lot of work that involves restarting and reloading maya - particularly if you're iterating on one script that involves a bunch of setup work -- the common trick is to keep all of your steps in a python tab in your listener.  It's better than nothing, but it's still pretty slow.  &lt;/p&gt;
&lt;p&gt;If what you're working on does not require GUI access, you can use MayaPy.exe and the -c and -i flags to get into your script quickly. The -c flag launches mayapy and runs a command, and the -i flag keeps the  interpreter running. So you can boot mayapy directly into a running, headless copy of maya python like this:  &lt;/p&gt;
&lt;p&gt;path/to/maya.py.exe -i -c "import maya.standalone; maya.standalone.initialize()"  &lt;/p&gt;
&lt;p&gt;and obviously you could put your test setup in a separate module and import that after standalone. I've found this saves me a &lt;em&gt;huge&lt;/em&gt; amount of time when I'm iterating on something that doesn't need GUI.  I stick this into a button in my IDE or make a shell alias / bat script to do it.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://lesterbanks.com/2014/01/maya-using-transfer-attributes-as-a-shrink-wrap-deformer/"&gt;http://lesterbanks.com/2014/01/maya-using-transfer-attributes-as-a-shrink-wrap-deformer/&lt;/a&gt;&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 29 Oct 2014 19:12:00 -0700</pubDate><guid>tag:,2014-10-29:Good-tricks.html</guid></item><item><title>A PID controller for Unity</title><link>/A-PID-controller-for-Unity.html</link><description>&lt;p&gt;Outside of work I've been toying a lot with &lt;a href="http://www.dexterindustries.com/BrickPi/"&gt;BrickPi&lt;/a&gt;, which allows a &lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; to control &lt;a href="http://www.lego.com/en-us/mindstorms/?domainredir=mindstorms.lego.com"&gt;Lego Mindstorms&lt;/a&gt; sensors and motors.  One of the neatest ideas I stumbled on in my reading is the &lt;a href="http://en.wikipedia.org/wiki/PID_controller#Droop"&gt;Proportional Integral Differential Controller&lt;/a&gt;, or 'PID' for short. It's a nifty idea with a lot of possible applications in games, particularly in animation.  &lt;/p&gt;
&lt;p&gt;A PID is an algorithm for adjusting a process so that it converges on a desired outcome: imagine a thermostat, for example, that controls heaters and air conditioners to keep a constant temperature.  PID's were originally invented for automatic steering of ships; nowadays they are in all sorts of semi-automatic control systems from thermostats to autopilots to &lt;a href="http://www.chrismarion.net/index.php?option=com_content&amp;amp;view=article&amp;amp;id=122:the-segway-theory&amp;amp;catid=44:robotics"&gt;Segways&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Here's &lt;a href="https://www.youtube.com/watch?v=XfAt6hNV8XM"&gt;a great video on the background theory &lt;/a&gt;of PID controllers.  But on a high level here's how it works:  &lt;/p&gt;
&lt;p&gt;The PID controller uses three different strategies simultaneously try to nudge a process in the right direction.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;strong&gt;proportional&lt;/strong&gt; component applies a direct fix to the process; the strength of the correction is proportional to how far off the signal is from the target value.(need correct names) &lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;integral&lt;/strong&gt; component applies a fix based on how long the signal has been off. Essentially the integral fix will be more powerful if the signal has been away from the target for long times.  &lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;differential &lt;/strong&gt; component applies a fix which scales based on how quickly the error is diminishing. It's useful for preventing overshoots: as the corrections take hold and the signal approaches the target more quickly, the correction will scale down.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Basic code&lt;/h3&gt;
&lt;p&gt;I've put the basic code for the PID controller &lt;a href="https://gist.github.com/theodox/3c956ccffd3d5d060b15"&gt;up on GitHub&lt;/a&gt;.  Since it's in C# it's fairly self-explanatory, but here's some basic highlights of how it's put together.&lt;/p&gt;
&lt;p&gt;The Monobehavior component itself is called &lt;strong&gt;Follower&lt;/strong&gt;, and it's really just example of how a PID controller could be rather than a complete system in it's own right. When applied to a game object, a Follower will try to &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 27 Oct 2014 23:01:00 -0700</pubDate><guid>tag:,2014-10-27:A-PID-controller-for-Unity.html</guid></item><item><title>Laziness and cleanliness and MEL, Oh My.</title><link>/Laziness-and-cleanliness-and-MEL,-Oh-My..html</link><description>&lt;p&gt;The other day I was following a &lt;a href="http://tech-artists.org/forum/showthread.php?5077-FBX-Exporting-from-Maya"&gt;thread on Tech-Artists&lt;/a&gt; which reminded me of one of those little Maya things that doesn't really matter, but which drives me bonkers: busted front ends for Maya plugins.  &lt;/p&gt;
&lt;p&gt;When a developer makes a plugin for Maya, they can create new Mel commands as well as new nodes. The new commands will ultimately use the same basic strategy to parse their incoming arguments: Maya will give them an &lt;a href="http://knowledge.autodesk.com/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2015/ENU/Maya-SDK/py-ref/class-open-maya-1-1-m-arg-list-html.html"&gt;MArgList&lt;/a&gt; object and they will have to parse out what that means. If the plugin uses an &lt;a href="http://knowledge.autodesk.com/support/maya/getting-started/caas/CloudHelp/cloudhelp/2015/ENU/Maya-SDK/py-ref/class-open-maya-1-1-m-syntax-html.html"&gt;MSyntax&lt;/a&gt; and an &lt;a href="http://knowledge.autodesk.com/support/maya/getting-started/caas/CloudHelp/cloudhelp/2015/ENU/Maya-SDK/py-ref/class-open-maya-1-1-m-arg-parser-html.html"&gt;MArgParser&lt;/a&gt; to pull the values out then the plugin will behave just like the functions in maya.cmds.  Flags and arguments will be checked the same way that we're used to in the rest of Maya Python.  &lt;/p&gt;
&lt;p&gt;Unfortunately, there's no law that says the plugin has to do it 'correctly'.  There are more than a few plugins that don't use the standard MSyntax/MArgParser combo and just pull values out of the argument list directly.  The most notorious offender is the FBX Plugin, which generates a ton of commands which all fail to use the standard parsing mechanism.  And, of course, there are also bits of MEL lying around from other sources as well that are a bit painful to call from Python, That's why you see tons of hairy beasts like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.mel&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;mel&lt;/span&gt;  
&lt;span class="n"&gt;mel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FBXExportBakeComplexStart -v &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;  
&lt;span class="n"&gt;mel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FBXExportBakeComplexEnd -v &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;end_frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;  
&lt;span class="n"&gt;mel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FBXExport -f &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;get_export_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.fbx&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While this is workable, it's fragile: composing strings inline inside a function call is an invitation to bugs like forgetting an escaped quote (tell me you'd notice that last escape in the final line if it was borked!) or a bit of significant whitespace. It's also harder to meta-program anything that's written like this - you can't create a dictionary of options or a variable length list of arguments when you call the function. Last - but not least, at least not for lousy typists like myself - you can't rely on autocompletion in your IDE to make things quicker and less error prone.  &lt;/p&gt;
&lt;p&gt;In cases like this it's handy to be able to fall back on a wrapper that will feed the plugin a correctly formatted MEL-style argument but which looks and codes like regular Maya Python. Luckily, you can usually rely on the MEL syntax, even when the plugin's argument parsing is as Python-unfriendly as the FBX plugins: If the MEL version doesn't work either, the whole thing isn't worth rescuing ! -- but if it does then you can Python-ify the front end with a little bit of Python magic to make sure the arguments are passed correctly.  &lt;/p&gt;
&lt;p&gt;One thing we can do to make this a simple job is to use what's known as &lt;em&gt;MEL function syntax&lt;/em&gt;.  This is a little-used MEL behavior that lets you call MEL more or less like a traditional computer function, rather than the shell-style script format you usually see. Function syntax uses parentheses and a comma-delimited list of arguments rather than white space. It means that these two calls are identical:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spaceLocator -p 1 2 3 -n &amp;quot;fred&amp;quot;;  
spaceLocator(&amp;quot;-p&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;,  &amp;quot;3&amp;quot;,  &amp;quot;-n&amp;quot;,  &amp;quot;fred&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While you probably don't want to type that second one, it's a lot easier to manage if you're trying to turn a bunch of flags and arguments into a MEL command string.  What we'll be doing is creating a function that generates argument strings in the function syntax style and then passes them to MEL for you, allowing you to use the familiar cmds-style arguments and keywords instead of doing all the string assembly in-line with your other code.  &lt;/p&gt;
&lt;p&gt;The rest of the relevant MEL syntax rules are pretty simple, with one exception we'll touch on later:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Everything&lt;/em&gt; is a string!&lt;/li&gt;
&lt;li&gt;Flags are preceded by a dash&lt;/li&gt;
&lt;li&gt;Flags come first&lt;/li&gt;
&lt;li&gt;Non-flag arguments follow flags&lt;/li&gt;
&lt;li&gt;Multipart values are just a series of single values&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That first one may suprise you but it's true - and in our case it's extremely useful. If you're dubious, though, try this in your MEL listener:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;polyCube (&amp;quot;-name&amp;quot;, &amp;quot;hello&amp;quot;, &amp;quot;-width&amp;quot;, &amp;quot;999&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Implementing these rules in a function turns out to be pretty simple.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.mel&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_mel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="c1"&gt;# makes every value into a tuple or list so we can string them together easily  &lt;/span&gt;
    &lt;span class="n"&gt;unpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__iter__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;  
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;   
        &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="c1"&gt;# if the flag value is True of False, skip it   &lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;maya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quoted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function will correctly format a MEL call for almost all circumstances (see note 1, below, for the exception).  For example the irritating FBX commands above become  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;run_mel(&amp;quot;FBXExportBakeComplexStart&amp;quot;, v = start_frames[x])  
run_mel(&amp;quot;FBXExportBakeComplexEnd&amp;quot;, v = end_frames[x])  
run_mel(&amp;quot;FBXExport&amp;quot;, f = get_export_file(x) + &amp;quot;.fbx&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's a big improvement over all that string assembly (not leastaways because it pushes all the string nonsense into one place where it's easy to find and fix bugs!)   However it's still a bit ugly. Wouldn't it be cleaner and more readable to nudge these guys another step towards looking like real Python?  &lt;/p&gt;
&lt;p&gt;Luckily that's quite easy to do. After all, the run_mel("command") part of this is the same except for the command names. So why not make a second function that makes functions with the right command names?  This is basically just a tweak on the way decorators work. For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def mel_cmd(cmd):  
    def wrap (*args, **kwargs):  
        return run_mel(cmd, *args, **kwargs)  
    return wrap
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This takes a MEL command name ("cmd") and makes a new function which calls run_mel using that command. So you can create objects which look and work like Python commands but do all the nasty mel stuff under the hood like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FBXExport = mel_cmd(&amp;quot;FBXExport&amp;quot;)      
FBXExportBakeComplexStart = mel_cmd(&amp;quot;FBXExportBakeComplexStart&amp;quot;)  
FBXExportBakeComplexEnd = mel_cmd(&amp;quot;FBXExportBakeComplexEnd&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And call them just like real Python:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FBXExport(f = &amp;quot;this_is_a_lot_nicer.fbx&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All this might seem like a bit of extra work -- and it is, though its not much more work than all those laboriously hand-stitched string concatenations you'd have to do otherwise.. More importantly, this actually is a case where code cleanliness is next to Godliness: keeping rogue MEL from invading your python code is a big boon to long term maintenance.  String assembly is notoriously bug prone: it's way too easy to miss a closing quote, or to append something that's not a string and bring the whole rickety edifice crashing down.  Moreover, exposing all of that stringy stuff to other code makes it impossible to do clever python tricks like passing keyword arguments as dictionaries.  So in this case, a little upfront work is definitely worth it.  &lt;/p&gt;
&lt;p&gt;Plus, if you're lazy like me you can import these functions in a module and they'll autocomplete. Fat Fingers FTW!   &lt;/p&gt;
&lt;p&gt;So, if you find this useful, the complete code is &lt;a href="https://gist.github.com/theodox/9a2e2b92867fa82ea328"&gt;up on Github.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note 1&lt;/strong&gt;: If you're a real mel-head you may have noticed one limitation in the &lt;strong&gt;run_mel&lt;/strong&gt; implementation above.  MEL allows multi-use flags, for commands like  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -type transform -type camera
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However the function here doesn't try to figure format arguments that way. In part because it's a relatively rare feature in MEL, but mostly because it doesn't occur in the places I've needed to wrap MEL commands.  It would not be hard to extend the function so you could annotate some flags as being multi-use - if you give it a whirl let me know and I'll post it for others to see.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note 2: &lt;/strong&gt;The &lt;a href="https://gist.github.com/theodox/2b83b1c47a18448d3cbf"&gt;Github also has another module&lt;/a&gt; which uses the same basic idea (but a slightly different code structure) to wrap that stupid FBX plugin.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 26 Oct 2014 00:18:00 -0700</pubDate><guid>tag:,2014-10-26:Laziness-and-cleanliness-and-MEL,-Oh-My..html</guid></item><item><title>The Heart of Dorkness</title><link>/The-Heart-of-Dorkness.html</link><description>&lt;p&gt;&lt;a href="http://thephilter.com/wp-content/uploads/2014/05/unsound.jpg"&gt;&lt;img alt="" src="http://thephilter.com/wp-content/uploads/2014/05/unsound.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One of the peculiar pleasures of TA life is the fact that most of us get rewarded traits which are not always valued in other jobs.  If you are a TA, the odds are pretty good that you are curious to the point of distraction about how things work. It's also a good bet that you find the idea of doing things "better" perversely compelling, so much so that you spend a lot of time on honing your ways of doing things even when your current routine is more or less adequate.   &lt;/p&gt;
&lt;p&gt;In general this is a trait which serves us well.  Over time, all the extra energy we pour into poking at things and seeing how they work is well rewarded.  Its why we are the folks who know all the obscure features in Max and Maya which nobody else bothered to learn; it's why we know how to troll through all those log files to figure out why things don't work in our games; its why we can be relied on to ferret out the one teensy little difference between the one file that that crashes an artist's machine and the hundreds of similar ones.  &lt;/p&gt;
&lt;p&gt;Sometimes, though, this beneficial quirk of personality turns into an unhealthy obsession, You set off on a mission and end up chasing some kind of "better way" so far that you completely lose sight of your actual objectives.  I had a bad case today, where I let a relatively simple bit of UI code degenerate into an overwrought exercise in  data binding paradig&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 21 Oct 2014 19:52:00 -0700</pubDate><guid>tag:,2014-10-21:The-Heart-of-Dorkness.html</guid></item><item><title>The Dismal Science : Technical Debt For Technical Artists</title><link>/The-Dismal-Science-:-Technical-Debt-For-Technical-Artists.html</link><description>&lt;p&gt;From the estimable &lt;a href="https://plus.google.com/105359351421932966635"&gt;+Paul Vosper&lt;/a&gt;  an excellent discussion of &lt;a href="https://medium.com/@joaomilho/festina-lente-e29070811b84"&gt;technical debt&lt;/a&gt;: the long term costs you incur by prioritizing the here-and-now demands of everyday life over technical and architectural needs.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.darwinsmoney.com/wp-content/uploads/2011/07/debt-slave.jpg"&gt;&lt;img alt="" src="http://www.darwinsmoney.com/wp-content/uploads/2011/07/debt-slave.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tech debt is a great subject any developer to ponder, but it's particularly relevant to TAs because so many of us are in roles that are fundamentally reactive rather than proactive - we fight fires, solve mysteries, and provide workarounds for broken systems.  Keeping our artists happy and productive gives us an endless series of demands: there is always another button or hotkey on the backlog, or another new feature to try to massage into some kind of workable shapes.  &lt;/p&gt;
&lt;p&gt;The demands of doing good customer service often leave us with little time or energy to look at our own infrastructure. It's can be hard to spend a week rebuilding the way you build menus in Maya or how your file naming system works when you have a pile of post-it's taped to your monitor with new feature requests and bugs to track down.   &lt;/p&gt;
&lt;p&gt;The more-or-less inevitable result is that a lot of TA code devolves into a rat's nest -- not only is old bad code lying around, impeding growth, but it's constantly inserting itself into your newer, better code, entrenching itself further and making it harder to rationalize and streamline your toolkit. This, of course, will gradually degrade your ability to respond to new requests in future, putting you farther and farther behind user wants and needs...  TA life involves a lot of firefighting, and relatively little room for planning ahead or even keeping the cobwebs off the darker recesses of the tool shed.  &lt;/p&gt;
&lt;p&gt;Tech debt - like real world debt - is always piling up. As with real world debt the choice is not between debt and a completely cash-on-hand lifestyle: it's between reasonable debts and crazy ones.  Getting a mortgage is an investment: financing your vacation on a credit card with a 17% APR is crazy.  If you want to survive, it's a good idea to try to distinguish different kinds of tech debt so you can make smarter choices that will pay off in the long run.  &lt;/p&gt;
&lt;h3&gt;Bad debts&lt;/h3&gt;
&lt;p&gt;When you're looking at an old piece of code and trying to figure out whether it needs to be overhauled, start by figuring out if where your reaction comes from.  There's a difference between rebuilding a system that works and is functional and rebuilding one that's buggy. Anybody who spends a lot of time with old code  knows that aesthetics do matter: sometimes an old routine or function just begs to be fixed, not because it doesn't work but because it's just ugly: the code is wordy, the variable names opaque, the algorithms too esoteric or too ad-hoc.  Every time you step through it you feel like you need to shower.  Some old code is positively painful to read, even if the hypothetical alternatives are no faster, more capable, or bug free.  &lt;/p&gt;
&lt;p&gt;Sad to say, fixing code &lt;em&gt;just&lt;/em&gt; for aesthetics is a luxury purchase - the kind you should not buy on credit. For one thing, the time spent replacing functional code with equally functional but less embarrassing code could be better spent upgrading stuff that is, you know, _actually busted. _Or in making existing code more robust and capable. Or adding new features. For another, no upgrade is really free: the new code will come with weaknesses and flaws of its own.  If you're doing things right it should be an improvement: but it's an investment which will take a while to mature. So you should be careful before you squander your precious time on an upgrade. Figure out the payoff!  &lt;/p&gt;
&lt;p&gt;Here's another way to think about it: If you spend a lot of time supporting artists, you occasionally run into to the ones who spend an inordinate amount of time on managing their scenes: sometimes you'll be struck by the sheer beauty of the top-down view of a level, or the elegant simplicity of the outliner layout for a character. These are admirable things, no doubt. If you've spent a lot of time supporting artists you've probably also observed that those perfectly groomed files are not always the best art in the game. For artists, organization is a means to an end, not an end itself. For tech-artist coders, the same is true about spiffy new programming paradigms and modish idioms.  They can be helpful - but they're not a substitute for the actual work.  &lt;/p&gt;
&lt;p&gt;That doesn't mean that ugly old code should never get touched: if the code is actually creating problems then the ugliness is just a symptom of a more serious problem that needs addressing.  In a way that would make the ghost of John Keats smirk, it's often true that  ugliness is a symbol of something morally wrong... ok, let's say _technologically _wrong... in your code.  &lt;/p&gt;
&lt;p&gt;Here are a couple of tests that might help you distinguish the merely ugly from the must-be-eradicated.&lt;/p&gt;
&lt;h4&gt;Does it work reliably and predictably?&lt;/h4&gt;
&lt;p&gt;Obviously, code that doesn't work at all is going to get reworked.  However the tricky judgement calls often involve code which _sort of _works. Which works for a given value of working. The payoff for replacing the code depends a lot on how well you understand that that given value really is.  &lt;/p&gt;
&lt;p&gt;Maybe it's a function with a hidden side effect that works the first time it runs but not afterwards. Maybe it's a module that can only handle some kinds of geometry but fails spectacularly on others. Or maybe it's just code that nobody can figure out how to use correctly - it seems to lead otherwise sane TAs to create bugs because it's got complex setup requirements, unexplained dependencies, or works only when run at midnight on Walpurgisnacht.  &lt;/p&gt;
&lt;p&gt;The obvious symptom of unreliability is that it generates superstition. If you don't know why things break you start to develop theories which become increasingly insane (one of my artists used to insist with complete seriousness that this Max install would not work properly when his keyboard was too close to his monitor).  You can spot the real troublemakers when you start doing things like repeating the same function three times in a row just to make sure that it works, or juggling import statements to create exactly the right set of useful side effects.   &lt;/p&gt;
&lt;p&gt;These are sure signs that something is really wrong, wrong-wrong and not just  "it offends my higher techie sensibilities" wrong. This kind of stuff is the going to drive you crazy over time. When  every invocation has to be swaddled in try blocks and holy water, that's a good reason to take said old code out behind the barn.  Or, as the investment bankers say, it's time to write down your non-performing assets.&lt;/p&gt;
&lt;h3&gt;Is it built to last?&lt;/h3&gt;
&lt;p&gt;Sometimes bad code is not really &lt;em&gt;bad&lt;/em&gt;, merely misunderstood.   &lt;/p&gt;
&lt;p&gt;If a particular module or function becomes too ambitious, it can get entrenched in the codebase and leveraged into positions where it really doesn't belong. You might have a perfectly serviceable module for, say, parsing a particular file format.   Somebody later finds that another file format can be parsed in a similar way, with a few text substitutions and syntax swaps, and some fileModuleX is now being used to read files Y, Z, and Q  -- all with their own odd special cases and gotchas.   Each one may be fine - but collectively you've got a snarled nest of assumptions and shortcuts that can't survive any significant changes: tweak a single function in the original module and the whole edifice comes tumbling down like a tranche of sub-prime mortgages.&lt;/p&gt;
&lt;p&gt;Equally bad are cases where a big complex module is being used for a minor side-effect or trivial information.   Activating a huge, complex geometry handling module because one of it's objects has a cheap call to collect names of bad UV channels may work, but that doesn't make it goods practice.  It's particularly tricky if you're relying on outside modules, since you'll be hard pressed to know all of the side effects that may come from importing hundreds or thousands of lines just to save yourself writing a few dozen of your own.&lt;/p&gt;
&lt;p&gt;A good way to spot code that has grown too important for it's own good is to look for radical mismatches between the names of functions and classes and their actual jobs. When you find yourself calling get_topology_order as a fancy way to count UV shells, or creating an AnimationMorpher() object just to figure out how if there are any keys on a particular object -- those are good signs something has gone wrong.  Another symptom of danger is importing modules without using them, relying on setup actions and initializations to make things right for you.  This can work as long as you have rigid control over the order in which your imports happens -- which is rather like saying that juggling chainsaws can work as long as you don't miss one.&lt;/p&gt;
&lt;p&gt;All TA's have a soft spot in their hearts for the &lt;em&gt;Righteous Hack&lt;/em&gt; - the clever bit of lateral thinking that can quickly upend an apparently insoluble problem and solve it in a jiffy with inspired ingenuity and bit of better-to-ask-forgiveness-than-permission swagger.  That's part of the job, and something to be proud of.  That doesn't mean it's the right way to conduct business day-in and day-out.   Saving the day with a last minute miracle based on duct tape and genius is a grand thing.  But once the immediate crisis is past it's time to go back, clean up the mess, and put something more credible in place for the long haul. When you see evidence of deliberate misuse -- or just of insupportable mission creep -- it's time to think about refactoring the original code into smaller, more targeted chunks that do just one thing at at time, instead of relying on side-effects for important behavior.&lt;/p&gt;
&lt;h3&gt;Can it grow?&lt;/h3&gt;
&lt;p&gt;The last big indicator that old code is really bad, and not merely unfashionable, is when you find it's holding you back in other areas. You might have a perfectly serviceable tool today that a year from now will feel like a straitjacket.  In our business nothing is ever "done": we constantly have to adapt to new situations, and our tools need to be able to do the same.  &lt;/p&gt;
&lt;p&gt;Stagnation can happen for a lot of reasons. You might have code that's too dependent on obsolescent third party pieces -- a  binary that can't be recompiled for next year's Maya, or an out of date module that ties you to an old version of Python.  Or, you may have tied yourself up in knots by entangling your core code and your UI so tightly that neither can be changed without unpredictable ramifications in the other. When you find yourself figuring out how to find a particular button by name in order to 'push' it in code, because the function you really want is buried so deep in the UI that it's impossible to set up any other way, that's a good indication that you should break out the hacksaw and start cutting the old tool down into nicely modular code that can be cleanly used in more than one setting.  &lt;/p&gt;
&lt;p&gt;Your toolkit is like a garden: it a little ecosystem that needs to be tended and nurtured. If any part of it dies in place, it's easy for rot to spread.  Be a vigilant gardener.  &lt;/p&gt;
&lt;h3&gt;Pay it forward&lt;/h3&gt;
&lt;h2&gt;&lt;a href="http://www.businesskorea.co.kr/sites/default/files/field/image/lending%20and%20investment.jpg"&gt;&lt;img alt="" src="http://www.businesskorea.co.kr/sites/default/files/field/image/lending%20and%20investment.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I know this image is supposed to encourage investment. But is that... manure? I mean, growth is a metaphor, but really?  &lt;/p&gt;
&lt;p&gt;Despite all this, caution is still appropriate. In a crazy business like ours, "If it ain't broke, don't fix it" still seems like a reasonable stance.  TA's (particularly the more grizzled among us) are usually all too familiar with the gap between optimistic plans and the messy realities of execution, particularly in a line of work where emergencies tend to appear without warning and large projects are rarely suffered to mature in peace.  &lt;/p&gt;
&lt;p&gt;Nonetheless, there really are times  -- I've tried to sketch out a few -- when the long term costs of bad code are going to add up.  &lt;/p&gt;
&lt;p&gt;Your choice is not between change and stasis - it's between steady, rational maintenance and unplanned emergency overhauls that come about when some weak point in the system fails at the wrong moment.   A bug which used to be a minor annoyance can be a major productivity killer in a new version of your DCC tools.  A new project may demand an upgrade, forcing you to prune out elderly binaries and orphaned tools.   You might even have to upgrade to Windows 8 -- stranger things have happened.   &lt;/p&gt;
&lt;p&gt;Change is inevitable, so you should always be on the lookout for the weak spots in your toolkit.  Be willing to do regular maintenance so you will have fewer massive overhauls  -- it's far cheaper to clean your gutters every fall than to have to replace your whole roof every five or six years. Just as with any other form of maintenance,  keeping a codebase healthy  never takes the form of a single heroic intervention that fixes all problems for all time.  Instead, it's a steady pitter-pat of small scale changes that keep old code growing and evolving healthily -- or sometimes sending it off to live on a farm.   &lt;/p&gt;
&lt;p&gt;If you prefer the debt metaphor, smart maintenance is sort of like periodically re-balancing your portfolio: you adjust for changing conditions,  trim out under performing assets, and embrace new opportunities as they come up -- always knowing that what's working today may need to be revisited tomorrow, when the software equivalent of the Federal Reserve changes policy and all your carefully assured positions look silly.  And (to run that metaphor right into the ground) you need to maximize your investments two ways: by looking for growth opportunities and by dumping laggards that are dragging your portfolio down.  &lt;/p&gt;
&lt;p&gt;Regardless of which similes you prefer, the basics are simple: keep your eyes open and look for small, low costs ways to improve things. When small fixes aren't enough, do some careful cutting and patch in higher quality code.  Except in extreme cases this won't involve much drama or even much technical brilliance: just good workmanship,  attention to detail, and an eye to keeping future maintenance costs as low as possible.  &lt;/p&gt;
&lt;p&gt;Fortunately a lot of modern development practice embraces the notion of constant change; as the always-on web development has become ubiquitous methodologies have evolved to keep the chaos at bay.  Here are few important tools that a modern TA can borrow from other kinds of programming to make to make the process of overhauling old code less intimidating and error-prone.  &lt;/p&gt;
&lt;h4&gt;&lt;em&gt;Agility&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;&lt;br /&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;__"Agile" is the most overused, least useful word in software (or at least, in software blogging).  It means too many things to too many people to be a reasonable answer to anything anymore: as a practice, it's so over-defined it's impossible to define.  &lt;/p&gt;
&lt;p&gt;As a goal, however, agility is an obviously good thing to strive for.  Don't make plans that stretch out into the indefinite future: focus on achievable goals in the short- and mid-term. Don't imagine fixing your code as a giant, ultra-complicated process that can be planned down to the tiniest detail. Instead, visualize it as doing just what we always do: dealing with whatever comes up, using the resources available, and working in small pieces that do clearly defined things well instead of grand systems that won't come together until the fabulous future arrives.  &lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Constant refactoring&lt;/strong&gt;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;In an agile world you're constantly correcting course - which means not just writing new code, but fixing the old as you go.  In a world that has become agile-obsessed, we can at least be glad that there are a wealth of tools designed  for cleaning up and rationalizing code: changing names, moving things around, and partitioning big ugly functions into neatly scoped smaller ones can all be done  efficiently with modern tools.  &lt;/p&gt;
&lt;p&gt;The debatable border line between code that's just ugly and code that's actually bad can be straightened out considerably by just cleaning up names and reorganizing the code into tighter scopes.  This is a Good Thing.  It's a direct attack on one of the biggest sources of code entropy: name drift.  As the old programmer's saw has it:  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Programming is easy.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;Naming things is hard.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;If you haven't gotten familiar with the refactoring tools in your editor, you should.  If the whole concept is unfamiliar, &lt;a href="https://www.youtube.com/watch?v=OFIiFaBulHg"&gt;here's a pretty good little video showing how refactoring works in the Wing IDE&lt;/a&gt;.  There is similar functionality in &lt;a href="http://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; (my favorite),  &lt;a href="http://pydev.org/"&gt;Eclipse/Pydev&lt;/a&gt;, &lt;a href="http://pytools.codeplex.com/"&gt;PTVS&lt;/a&gt;, and &lt;a href="https://wiki.python.org/moin/IntegratedDevelopmentEnvironments"&gt;many others&lt;/a&gt;.  You can achieve the same thing with the &lt;a href="http://rope.sourceforge.net/"&gt;rope&lt;/a&gt; library, although a good IDE seems to me like a great way to buy convenience for not much money.&lt;/p&gt;
&lt;h4&gt;&lt;em&gt;&lt;strong&gt;Test Driven Development&lt;/strong&gt;&lt;/em&gt;.&lt;/h4&gt;
&lt;p&gt;TDD, for those readers who haven't gotten the gospel from &lt;a href="https://plus.google.com/112207898076601628221"&gt;+Rob Galanakis&lt;/a&gt;, is a coding practice where you build up your codebase along side a set of tests: short programs which exercise your code to make sure it's doing everything it promises to do.  It's a classic programmery hot-potato topic, with some folks who swear by it, others who naysay, and a lot of folks in the middle who think it's an interesting idea but never quite run with it  &lt;/p&gt;
&lt;p&gt;I'm way too lazy to take a big stand the &lt;em&gt;right&lt;/em&gt; way to do TDD, or whether or not TDD is_ the_ right way to do software; but I can make one statement with complete certainty: The more tests you have, the less scary it is to make changes to your code.  &lt;/p&gt;
&lt;p&gt;Most TA's are pretty smart folks, they anticipate and catch the obvious problems that come with any serious change to existing tools. The really scary stuff is the &lt;em&gt;unanticipated&lt;/em&gt; changes, because those are the ones which get you from behind.  Say you clean up some old file handling code and make sure that it always returns consistent slashes. You'll feel great -- tend that garden, baby ! -- right up until the day you find another function that counts left-slashes to test for path depth and now returns garbage.  Thats' the sort of thing that tests are far better at catching than even the most prudent bit of prior planning.  &lt;/p&gt;
&lt;p&gt;TDD is not  cure-all for bugs or a guarantee that nothing will ever go wrong in your code. It does, however,  make changes appreciably less scary and therefore it is a huge aid to maintaining your code base.   In the world of technical debt management, testing is a blue chip investment.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Good release management.  &lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;There's one  last precaution you need to be sure that tending your garden doesn't let loose too much havok on your users.  You need a clear and well defined release policy.  &lt;/p&gt;
&lt;p&gt;Nothing makes you more timid, more unwilling to fix problems, or more unpopular with your users than dropping every line of code you change directly into your artists' laps.  _You _need the ability to experiment, make changes, and to use source control for your own sanity.  &lt;a href="http://tech-artists.org/forum/showthread.php?3752-Best-Way-to-Share-Your-Scripts"&gt;_They _need to be able to work without worrying that every sync could put an end to their working day.&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;At a minimum, this means you have some kind of staging area where TA's and maybe carefully select guinea pigs can work on bleeding edge code while the rest of the team goes on with safe, stable working tech.  If you've got a robust set of tests, you can automate the process by setting up a build system that tests and packages changes as you make them.  If you've got a big team you may even be able to enlist an actual tester to make sure that things are stable for the users every day. No matter how you approach it, you must have have a solid firewall between your efforts to keep the codebase happy and the users, who don't know or care about your technical balance sheet.  &lt;/p&gt;
&lt;p&gt;Circling back around to that damned financial metaphor, technical debt is not something to be embraced heedlessly, but neither is it something you should shun at all cost.  All your daily decisions have to be made with two different goals in mind: satisfying the necessities of the moment and staying solvent for the future,  Alas, much like managing money the only incontestable advice is the most banal: work hard, think ahead, don't take foolish risks but don't keep all your money under the mattress.   A solid working environment for your artists isn't an artifact you can create and forget; it's a dynamic system that grows and changes over time.  Its never "done."  Your main job is to keep it progressing.  &lt;/p&gt;
&lt;p&gt;Now, that all can be a bit frustrating, if you think of yourself as a problem solver who just 'solves' problems they way you solve a crossword puzzle - it's no fun to work your way through the Sunday Times while somebody's sneaking in and changing the clues as you move along.  &lt;/p&gt;
&lt;p&gt;On the other hand, think of the job security!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 05 Oct 2014 22:45:00 -0700</pubDate><guid>tag:,2014-10-05:The-Dismal-Science-:-Technical-Debt-For-Technical-Artists.html</guid></item><item><title>The Player's Handbook</title><link>/The-Player's-Handbook.html</link><description>&lt;p&gt;In keeping with the other career articles I've been reposting, here's a favorite old piece from Game Developer about career arcs in games.   The illustrations are from the absolutely priceless &lt;a href="http://oldschoolfrp.tumblr.com/"&gt;Old School FRP Tumblr&lt;/a&gt;, which is a treasure trove of 1980's era RPG artwork that any gamer ought to check out. &lt;a href="http://grognardia.blogspot.com/"&gt;Know your history&lt;/a&gt;!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-P9XxysKumkE/VBkeTkKo6hI/AAAAAAABIfk/Gj0q3gmxXFU/s1600/wiz.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-P9XxysKumkE/VBkeTkKo6hI/AAAAAAABIfk/Gj0q3gmxXFU/s1600/wiz.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Congratulations!&lt;/strong&gt;  By purchasing &lt;strong&gt;The Games Industry™&lt;/strong&gt;you’ve entered a universe of fantastic adventure! Players in &lt;strong&gt;The Games Industry™&lt;/strong&gt; collaborate to create exciting new worlds, a form of collaborative story-telling that combines the ancient arts of the bards with the most up-to-date developments in rules complexity, arcane technicalities, and perverse randomness.  Hopefully, your new purchase will keep you occupied for many years – growing in power, battling monsters, and accumulating treasure. You are guaranteed many a sleepless night in the company of your fellow players. Welcome!&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://i273.photobucket.com/albums/jj239/silverleaf1982/Generator/PlayersHandbook.jpg"&gt;&lt;img alt="" src="http://i273.photobucket.com/albums/jj239/silverleaf1982/Generator/PlayersHandbook.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The first step for new players in &lt;strong&gt;The Games Industry&lt;/strong&gt;™ is to create a &lt;em&gt;character&lt;/em&gt;. In &lt;strong&gt;The Games Industry,&lt;/strong&gt;™  your character represents you – he or she forms your alter ego.  Some players choose a character exactly like themselves, while others prefer to play a very different role in &lt;strong&gt;The Games Industry™&lt;/strong&gt;  than they do in real life. Whichever path you choose, be aware that picking a character is of the utmost importance to your career in &lt;strong&gt;The Games Industry™.   &lt;/strong&gt;Other players and the many monsters you encounter in the game will react to you based on which character you play  -- or which one they believe you are playing. Be sure to choose one that works well with your instincts and goals. It’s critical to be aware of the strengths and limitations of the different types of characters you encounter if you want to succeed in the game.  &lt;/p&gt;
&lt;p&gt;New players create a character by choosing from one of several archetypes. The choice of archetype, in turn helps drive certain career paths. For example, a player who wants specialize in Game Design might choose to begin his career as an &lt;em&gt;Obsessive Nintendo Fanboy&lt;/em&gt; – a choice which would make it difficult to, for example, meet members of the opposite sex but which gives him great advantages in areas like the pharmacological uses of mushrooms or reminiscing endlessly about &lt;em&gt;Goldeneye.  &lt;strong&gt; &lt;/strong&gt;&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To show you how the choice of archetype can affect your career, we’ll take a look at some of the options available to the player who wants to pursue a career in the arts. In &lt;strong&gt;The Games Industry&lt;/strong&gt;,™ artistic characters  have a variety of magical powers which can be used to amaze and enchant players, monsters, and reviewers. Although an artist character can come from any race, gender, or ethnic background , they tend to conform to one of the following archetypical character design patterns:  &lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;The Perfectionist&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Perfectionists&lt;/strong&gt;are a subclass of artists devoted, first and foremost, to the pursuit of their craft. In the game you will often find them toiling away in the wee hours on details which are all but invisible to the average passerby.  Though each pixel or polygon seems to be pure overkill, the cumulative effect is one of tremendous magical power. The creations of a true Perfectionist compel the most cynical monsters – even hardened Producers and inscrutable Marketroids -- to admiration and awe.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-kdZqkcf4DcE/VBka0RVJFgI/AAAAAAABIfQ/5bfXllzuVMo/s1600/perf.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-kdZqkcf4DcE/VBka0RVJFgI/AAAAAAABIfQ/5bfXllzuVMo/s1600/perf.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;**&lt;/h3&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Bonuses  &lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Dedication&lt;/strong&gt;_._Perfectionists gain +5 for all rolls against artistic skill thanks to their selfless devotion to craft.  To gain this bonuses, they practice obsessively –even when not being paid. For example, you’ll find them thronging the halls of your local art school with greasy sheaves of charcoal drawings tucked under their arms, or worshipfully studying at the feet of the local Animation Mentor.  Perfectionists earn double XP for works in traditional media.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mystic Charm. &lt;/strong&gt; At higher levels, the true Perfectionist can hypnotize members of other classes, such as Programmers, into stunned admiration.  This power works better when the Perfectionist cultivates an otherworldly air and acts as if every decision were an inspiration from on high instead of a deliberate choice.  &lt;/p&gt;
&lt;p&gt;When the &lt;em&gt;Mystic Charm&lt;/em&gt; is active the Perfectionist can operate with enormous creative freedom. However if the power is negated (by a Programmer using the &lt;em&gt;Graphics Budget&lt;/em&gt; power, for example) the Perfectionist may find themselves is tricky spot.  It’s also important to remember that other artists are partially immune to this power, and they’ll be quick to complain if it’s overused.&lt;/p&gt;
&lt;h3&gt;**&lt;/h3&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Weaknesses&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Speed. &lt;/strong&gt; The heavy armor of dedication which most Perfectionists wear tends to reduce their agility.  Without careful attention, the Perfectionist can easily slide past the point of diminishing returns into an endless cycle of revisions and tweaks that are invisible to others.   Players nearing a milestone must roll a 12 or higher to break the cycle, or suffer 1D6 worth of delays.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Agility.&lt;/strong&gt; The single minded focus which gives the Perfectionist power can also lead to tunnel-vision.  Unless carefully played, Perfectionists can endanger themselves by ignoring promising new spells , potions, and magic items later in the game.  Perfectionist players must cope with a -2 adjustment for learning  new technologies and techniques. if you’re playing as a Perfectionist, be sure to guard against this weakness with careful attention to new techniques as well as old standbys.    &lt;/p&gt;
&lt;h3&gt;**&lt;/h3&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Strategy:&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Playing a Perfectionist is a difficult game. The dedication which defines this class can get in the way of mundane tasks like scheduling and budgeting, so Perfectionists often find it hard to learn management as leads. Perfectionists can thrive when they are recognized for their talents either as specialized craftspeople or creative visionaries. If parties where the route to power runs through spreadsheets and meetings, Perfectionists are often unhappy. Perfectionist players need to plan ahead with their colleagues to build a secure and rewarding creative niche.  &lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;The Tinkerer&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Where the Perfectionist character pursues the most exalted forms of art, the &lt;strong&gt;Tinkerer &lt;/strong&gt;archetype enjoys mixing the nitty-gritty of technology with the solemnities of aesthetics. What the Perfectionist hopes to achieve by sheer dedication and relentless practice, the Tinkerer strives to accomplish by mastering every trick and tool the game allows.   Tinkerers are a hybrid class, which shares some of the characteristics of both the Artist and the Programmer. This can make for a powerful combination in the hand of a skilled player – or an awkward compromise if played unwisely.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-r-NGID7ZSkA/VBkYE0BY4hI/AAAAAAABIfE/_XydBULmxV0/s1600/tinkerer.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-r-NGID7ZSkA/VBkYE0BY4hI/AAAAAAABIfE/_XydBULmxV0/s1600/tinkerer.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;**&lt;/h3&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Bonuses&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Inventiveness. &lt;/strong&gt;Tinkerers refuse to accept the status quo. No underused engine feature, no obscure corner of an art package, is too esoteric for the Tinkerer to play with. Tinkerers gain extensive bonuses for any situation where a recalcitrant game engine or art tool needs to be manhandled into a job it wasn’t intended for – for example, if your party is trying to simulate cloth using only skeletal animations, you’ll need a Tinkerer on hand.__  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Buffing.&lt;/strong&gt; Tinkerers are extremely valuable to the other members of their party when they learn to share the fruits of their curiosity.  They give nearby Artists a +1 to Productivity by sharing their technical knowledge.  They can also perform spells ranging from simple charms like _Bobo’s Magical ScriptSpot _to advanced magicks like home-brewed level editors.__  &lt;/p&gt;
&lt;h3&gt;**&lt;/h3&gt;
&lt;p&gt;**&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Weaknesses&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hypnotism.&lt;/strong&gt; Like monkeys and some kinds of birds, Tinkerers are easily fascinated by shiny new toys. When confronted with a new piece of technology, a Tinkerer must roll a saving through against Focus or lose 1-20 hours of productivity to fiddling around.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Split Loyalties.&lt;/strong&gt; As Tinkerers grow in level, it becomes harder for them to maintain their dual identities. Above level 10 the benefits of specializing either on the “artistic” or “technical” sides of the archetype become much clearer. If you’re planning a Tinkerer character, you should think several steps ahead to be sure you end up playing the role your really want – otherwise you may end up as a “Jack of All Trades, Master of None.”  Above level 10 Tinkerers must make a saving roll against Charisma or risk turning into Programmers once and for all.  &lt;/p&gt;
&lt;h3&gt;Strategy&lt;/h3&gt;
&lt;p&gt;Because the Tinkerer is a support class, it's important to make sure you don't get sucked in to doing only the work that other characters won't do. Getting stuck in a rut can lead to a career of virtual serfdom, grinding XP at monotonous and unrewarding tasks.  &lt;/p&gt;
&lt;p&gt;Effective tinkering requires a long term commitment to learning and experimentation: mastering new skills is what makes this class tick.  Seek out every scroll, grimoire and tome you can to learn the spells which will help you escape this hideous fate.  &lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;The Footsoldier&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;The stalwart &lt;strong&gt;Footsoldier&lt;/strong&gt;can’t always generate the glamour of the Perfectionist or the wizardry of the Tinkerer. Nevertheless this archetype is the backbone of almost every party.  No victories can be won without their phenomenal powers of endurance and will to win.  Don’t make the mistake of defining the Footsoldiers in your group by negatives – they may not be aesthetic or technical superstars, but it is their steadfast dedication to getting things done that turns the tide of many a dire battle. Where the other archetypes define themselves by their skills, Footsldiers regard discipline as the highest virtue: give them a mission and they’ll see it through, on time and on spec.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-tWY1GADyWSA/VBkb2967WnI/AAAAAAABIfY/o_jG0kDxi_g/s1600/carry.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-tWY1GADyWSA/VBkb2967WnI/AAAAAAABIfY/o_jG0kDxi_g/s1600/carry.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Bonuses:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Endurance. &lt;/strong&gt;Footsoldiers start with a bonus of +6 to Endurance.  As hardened veterans, they excel at pacing themselves – they know when to put in that midnight effort and when to save themselves for tomorrows struggles.  Players, however, should beware of party leaders who use this bonus as an excuse for skimping on support – a Footsoldier may be willing to put in tedious hours of repetitive work to help the team, but that’s no excuse for not providing the magic items that would make handle the gruntwork and let them focus on the more artistic tasks they love.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Leadership. &lt;/strong&gt;The experience that Footsoldiers accumulate on the front lines gives them important leadership bonuses as they rise in level.  Ruthless commitment to finishing the job means that it’s often the Footsoldiers who are tapped for commanding roles later in the game – other classes count on the Footsoldiers to keep Tinkerers and Perfectionists focused on the enemy, and train new recruits in the hard ways of discipline.  Footsoldiers gain +1 on rolls for promotions for every two levels they earn.  &lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Weaknesses&lt;/h3&gt;
&lt;p&gt;The Footsoldier archetype is well balanced. Lacking some of the flashy powers sported by other characters, they lack many of their weaknesses as well.  Apart from a small -1 deduction from Charisma, the Footsoldier is well defended on all sides.&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Strategy&lt;/h3&gt;
&lt;p&gt;The biggest risk that Footsoldier players run is that of being under-appreciated. Although they are the indispensible vanguard of any artistic clan, they are sometimes slighted when it’s time to pass out the booty. Magic items, like the &lt;em&gt;+5 Killer Portfolio_or _Schlieffer’s Amazing Rig&lt;/em&gt; tend to wind up with the more attention-grabbing members of the party – the loyal Footsoldiers who do so much of the actual work are sometimes forgotten.  Footsoldier players need to be able to remind their leaders exactly how much value they bring to the party and to establish reputations as the indispensible, reliable pillars of the team if they want to compete with their flashier brerthren.  &lt;/p&gt;
&lt;p&gt;The most recent edition of the &lt;strong&gt;Games Industry™ &lt;/strong&gt; ruleset introduces another important challenges for the Footsoldier. With the new &lt;strong&gt;Games Industry: Foreign Lands &lt;/strong&gt; expansion pack, many teams have tried to replace their Footsoldiers with non-player characters (NPCs) in order to keep more of the treasure and XP for themselves.  If you’re playing a Footsoldier you’ll need to find roles to play that are safe from NPCs.  You can’t always count on loyalty from your leaders in &lt;strong&gt;The Games Industry™&lt;/strong&gt; so you need to look out for yourself.  You’ll never be as cheap as an NPC, so your best defense is to concentrate on making yourself more valuable to your teammates instead.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-ABLw3rn2Tws/VBkXeaehjUI/AAAAAAABIe8/TF3bvefVRSU/s1600/henchmen.jpg"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-ABLw3rn2Tws/VBkXeaehjUI/AAAAAAABIe8/TF3bvefVRSU/s1600/henchmen.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This may seem like a lot of rules for a simple game, but this complexity simply reflects the many play styles you’ll encounter in &lt;strong&gt;The Games Industry™  &lt;/strong&gt; Once you’ve entered the rich fantasy life of &lt;strong&gt;The Games Industry™ &lt;/strong&gt;you’ll find it hard to go back to real life.  &lt;/p&gt;
&lt;p&gt;Particularly in the six months or so before shipping. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: New players should note this set does not include everything you need to play. You’ll also need the following: A copy of Photoshop, proof of citizenship or an H-1 B visa, the &lt;strong&gt;Employees Handbook&lt;/strong&gt; (2d edition rules), Red Bull Energy Drink, a free Nvidia T-shirt, and internet access.  &lt;strong&gt;The Games Industry&lt;/strong&gt;™ features an ever-expanding  list of accessories and expansion kits.  See your local game store for details.&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 16 Sep 2014 22:53:00 -0700</pubDate><guid>tag:,2014-09-16:The-Player's-Handbook.html</guid></item><item><title>The Game Artists Resume Guide (Revisited)</title><link>/The-Game-Artists-Resume-Guide-(Revisited).html</link><description>&lt;p&gt;I noticed that my recent repost of the old job hunting guide, &lt;a href="http://techartsurvival.blogspot.com/2014/08/read-damn-ad.html"&gt;Read  The Damn Ad,&lt;/a&gt; has quickly amassed a lot of views and links. In the interest of completeness, therefore, I thought I'd also repost the bookending article (also from Game Developer)  on the nuts and bolts of applying for a job.     &lt;/p&gt;
&lt;p&gt;The whole thing is after the jump...  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I've left the original article as is for historical reasons, but annotations in orange are updated advice or notes on how things have changed since 2006&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;Your resume is is not just a neutral transcript of your past career – it's a precious opportunity to get the full attention of the person who can hire you.  In the business world the rule of thumb is that the resume gets just under  20 seconds of the reader's undivided attention. That is your window for positioning yourself clearly in the reader's mind – and as you can imagine there's not a lot of room for subtlety. A resume bears more resemblance to tightly targeted ad campaign than it does to a biography.&lt;/p&gt;
&lt;h2&gt;Customize!&lt;/h2&gt;
&lt;p&gt;The real difference between successful and unsuccessful resumes isn’t the presentation: it’s the content. &lt;/p&gt;
&lt;p&gt;However, as we stressed in &lt;a href="http://techartsurvival.blogspot.com/2014/08/read-damn-ad.html"&gt;Read The Damn Ad&lt;/a&gt;, most companies are looking to fill specific slots.  Most of the time and energy in resume creation, therefore, goes into fine-tuning the resume for each specific application. You resume has to tell a story that underlines your fitness for the job on offer. A level designer job, for example, could be described to emphasize its 3-d modelling aspect, game design skills, or the production pipeline management issues. Which description you choose depends on the  job you are seeking. It's unfortunately true that groping for multiple ways to describe your past achievements can become pretty tiresome. After a few applications, though, you'll build up a library of targeted resumes that can be recycled for similar jobs with very little effort.&lt;/p&gt;
&lt;p&gt;Of course, you shouldn’t confuse legitimate marketing with dishonesty when adapting your resume. There is a world of difference between selectively highlighting aspects of your real experience and inventing skills, responsibilities and job titles. It's easy to be cynical and believe that "everybody does it," but in fact very few people lie on their resumes – especially in a tight-knit industry like ours, where word gets around quickly and bad reputations are hard to shake. So it's not only wrong to lie, it's also stupid.&lt;/p&gt;
&lt;p&gt;Targeting your resume works best if you learn to read job ads very closely. They might sound formulaic, but most ad descriptions offer important clues about how the employer is going to evaluate candidates. Consider this sample ad:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Engulfing Arts Inc., Los Diablos CA. &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Environment Artist&lt;/strong&gt;&lt;br /&gt;
We are seeking an environmental artist for a multi-platform game. The artist will use 3DStudio Max to  build and texture architectural, and natural models for a fantasy adventure game with cartoon-style art direction. 2-3 years experience in 3Ds Max and 2 years game experience required.  Ability to work well in a team environment under short deadlines a must. Preference given to candidates with strong organic modeling and texturing skills.&lt;/p&gt;
&lt;p&gt;The main point, of course,  is clear: the opening is for an artist with some experience doing cartoon style environments who can handle organic modeling.   &lt;/p&gt;
&lt;p&gt;But what _other _clues can you infer from the wording of the ad?  &lt;/p&gt;
&lt;p&gt;Because the job is designated as "artist", and the ad makes no mention of game design skills, it's a good guess that the team uses a split art/design pipeline, so that the game design skills implied in a job like "level designer" aren't going to be a priority. A line like "Ability to work well in a team environment" might be pure boilerplate – but it might also mean that previous team-members have had trouble taking direction (it may also mean the company uses a top-down, centralised organization). Finally the description clearly states that the team lumps modeling and texturing together, so it's a good guess that a the job will go to someone who can both model and paint textures. &lt;/p&gt;
&lt;p&gt;With this information in hand, you should re-work your basic resume skeleton to  emphasize the key points the employer is looking for. Most resumes contain an "objective line," which describes the job you want,  and a  "Summary” paragraph which highlights the skills and accomplishments of yours which will interest the potential employer. These sections are obvious places for empasizing the experience and skills you want to highlight. In the case of our example ad, something like this would be appropriate:&lt;/p&gt;
&lt;p&gt;Objective:  Seeking a position where I can use my experience modeling and texturing with 3D Studio on a team building an expressive fantasy world. &lt;/p&gt;
&lt;p&gt;It's often useful to echo the key phrases of the ad itself when describing yourself, in order to emphasize that you fit the job on offer. The obvious drawback to this strategy is that it's eay to end up sounding like a marketing drone.  If you find it hard to jam all of your points into the objective line or summary paragraph, don't forget that the cover letter is a good place to make claims you can't squeeze into the straightjacket of resume convention.&lt;/p&gt;
&lt;h2&gt;Formatting&lt;/h2&gt;
&lt;p&gt;Knowing how much rides on your 20 seconds in the sun, it's easy to drive yourself crazy trying to come up with a format for all of your brilliantly targeted resume data. Do you use a chronological or skills-based format? Is it OK to use color paper or graphics? It’s easy to get distracted by the range of trivial choices involved in putting together your life's story – even if you’ve been around the block a few times, the business of condensing your whole career onto a single sheet of paper, a web page, or a pdf  is nerve-wracking.  &lt;/p&gt;
&lt;p&gt;It probably goes without saying - though that never stops me - that nowadays  your info will be delivered in electronic rather than paper format. That doesn't mean, however, that you don't have to be vigilant about presentation!  &lt;/p&gt;
&lt;p&gt;Don’t waste a lot of time searching for the “official” format – the advice books and websites don’t all agree among themselves. What you do need to shoot for is clarity and a base level of professionalism.. The overworked screener on the other end of the transaction is always looking for a good excuse to move on to the next application. This means you can't afford to look amateurish or lazy – you need to keep that reader in a receptive frame of mind in preparation for the all-important demo viewing. When you complete your resume, make sure to get some friends (preferably more than one) to help you with proofreading and copy editing before you send it out into the cold, cruel world.&lt;/p&gt;
&lt;p&gt;As an artist, you’re not completely bound by the draconian rules of a standard business resume (no colored paper, only standard fonts, and so on). However, if you do want to experiment with novel formatting, color, or pictures, remember that your potential reader has a thick stack of resumes to sort through before going home for dinner. Avoid any design decision which is more likely to annoy than to please that reader. Unusual fonts, artsy paper, and idiosyncratic layout  can help your resume stand out from the crowd -- but you have to be really confident in your graphic design skills if you want to travel that route. If you're not dead certain you can create a visually arresting resume without confusing or annoying the reader, err on the side of simplicity and save your artistic statements for the portfolio.&lt;/p&gt;
&lt;p&gt;Since this was written in 2006, &lt;a href="https://www.linkedin.com/nhome/"&gt;LinkedIn &lt;/a&gt;has become an extremely important aspect of the hiring process.  It's a kind of permanent resume, available to recruiters and possible employers - and also to your coworkers.  It's a good idea to maintain your Linked-In page on a regular basis before you're actively looking for work. In the first place, you may attract attention from potential employers, recruiters or, best of all, old colleagues who are looking to fill a slot informally without a full blown job search.  If you've pondered the lessons of the companion article, you'll know that last one is by far the most important aspect of the whole thing.  &lt;/p&gt;
&lt;p&gt;Doing your maintenance on a regular basis is also a good idea because a sudden burst of Linked-In postings is a good indication that somebody is feeling restless. If you tweak a line here or there every few months it's just part of the (semi-)social media white noise. If you do a huge update right around the time you get turned down for a promotion you may be attracting the wrong kind of attention.  &lt;/p&gt;
&lt;p&gt;LinkedIn does pose some interesting problems as a way of describing yourself to potential employers. For one thing, it's generic: you can't cherrypick or massage things the way you can in a targeted resume. Luckily you're not bound by strict formatting requirements of a resume either, so you can be more general than you would be when applying for a formal position and you can include links to more targeted portfolios and demos.  &lt;/p&gt;
&lt;h2&gt;The Demo&lt;/h2&gt;
&lt;p&gt;Thus we come at last to the portion of the job application that nobody can complain about. If you are an artist, your portfolio is the core of your job application, the make-or-break opportunity that will (or won't) land you a job. Unfortunately, all the competitive forces that make drafting a resume such a painstaking task are still in play when your reviewer sits down to review your samples. For this reason you need to devote even more energy and time to crafting your portfolio than you do to the details of your resume and cover letter. Finding work is hard work!&lt;/p&gt;
&lt;p&gt;The first rule, most important skill you need when assembling a portfolio is &lt;em&gt;ruthlessness&lt;/em&gt;. You need to be a pitiless critic of your own work, because any weak samples that find their way into your demo will drag down the perceived value of your better work. The demo, after all, serves a double purpose for your reviewer. It not only shows the quality of your handiwork – it also demonstrates something of your taste and judgement. Allowing weak items into your collection may cause the reviewer to wonder if you can tell the difference between your best and worst efforts, or whether your better efforts are mainly luck. So if you're faced with a choice between fewer samples and a lower average quality, have the courage to cut.&lt;/p&gt;
&lt;h3&gt;How much?&lt;/h3&gt;
&lt;p&gt;Of course, it's natural to worry about whether you've got enough material, especially when you're busily culling out the weaker pieces. "Enough" is whatever you need to sell a convincing picture of your professional skills to a complete stranger. For a confident, established illustrator that might be as little as three or four finished paintings. Most of us, though, will want to provide a bit more. How much depends on the medium you're delivering in. &lt;/p&gt;
&lt;p&gt;For &lt;strong&gt;motion media&lt;/strong&gt; (animations, slideshows, turntables or in-game movies) you need to provide at least 45 seconds of material. That might not sound like much but it's longer than most television commercials, and plenty of time sell yourself. Four or five minutes is the upper limit -- if your reviewer is still wondering how good you are after five minutes, you haven't been sufficiently ruthless in your selection process. &lt;/p&gt;
&lt;p&gt;For &lt;strong&gt;stills &lt;/strong&gt;(screenshots, renders or drawings) you should try to provide at least a dozen images. If you’re delivering images in bulk (for example a folder full of JPEGs) you shouldn’t send more than forty. If you’re using a webpage you might incude more than that, as long as the viewer won’t be overwhelmed by facing them all at once. Multiple shots of the same subject – for example a profile and a full-face shot of the same character – are fine provided they offer the viewer more insight into your work; if they start to seem like padding. though,  the net result is probably negative. Large, complex pieces should be presented in a way which emphasizes different aspects and makes the breadth of the piece clear to the viewer. For example if you're submitting shots of a complete game level which you've modelled and textured, be sure to select shots which emphasize the variety and detail in the level – too much repetition will make the shots seem monotonous and may feel like padding to the reviewer. &lt;/p&gt;
&lt;h3&gt;Annotation&lt;/h3&gt;
&lt;p&gt;When you assemble your list of images and videos, it’s important that the reviewer have access to critical information about the samples. We’d like to think that our work speaks for itself – but often it doesn’t. Make sure that the reviewer can easily find out the following information for each piece:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What game is it from, and when?&lt;/li&gt;
&lt;li&gt;If this is a game shot, what the delivery platform? You don’t want your Nintendo 64 shots to be compared to Half Life II&lt;/li&gt;
&lt;li&gt;What part of the work is yours? This is particularly critical for cutscenes and in-game shots. This is &lt;strong&gt;the number one question&lt;/strong&gt; the reviewer will be asking him or herself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s also a good idea to include a short, pointed discussion of the design, gameplay or technical problems that you tackled to create the image. A picture of a tank is a picture of a tank – but telling the reviewer “I designed this model around a gameplay requirement for a massive vehicle capable of smashing holes in walls to deliver a squad of space marines into a fortified bunker. The huge hydraulic rams serve to emphasize the vehicle’s breaching function and visually underline its unstoppable, bull-like character” helps the reviewer see your professional skills at work. Don’t try to cram too much into the notes, a sentence or two is sufficient -- but very useful.&lt;/p&gt;
&lt;h2&gt;Media&lt;/h2&gt;
&lt;p&gt;As you'll see, a lot has happened in this area since the original article was written.  And yet this was less than a decade ago. Wow.  &lt;/p&gt;
&lt;p&gt;Distributing work is somewhat tricky, because its difficult to know what hardware and software your work will be viewed on. The only hard and fast rule is &lt;strong&gt;pay strict attention to any submission guidelines &lt;/strong&gt;that come with the job ads – don’t send a CD to a company that asks for VHS tapes, or vice versa!   &lt;/p&gt;
&lt;p&gt;VHS? What's VHS?&lt;/p&gt;
&lt;p&gt;It’s a ~~good idea~~ critical to have a well designed, responsive &lt;strong&gt;web page. &lt;/strong&gt;The ability to click through from a resume email directly to the samples is a useful convenience that will endear you to the reviewer. Plus the ease of annotating allows you to include notes with your images easily and painlessly.  &lt;/p&gt;
&lt;p&gt;As with the resume, don’t knock yourself out on the graphic design of your site unless you’re really trying to showcase your design skills – and certainly don’t take any risks with the navigation or scripts that might leave a visitor stranded and annoyed. It’s also best to keep Flash or Shockwave components to a minimum unless you’re a web specialist and can be confident that your site works well on all browsers and platforms. Vanilla HTML may not be thrilling, but it will be accessible to almost anyone with a computer. The big drawback to using a website as primary vehicle for your portfolio is that bandwidth and storage costs may make it hard to showcase animations, turntables or 3-d models. Anything that takes more than a few seconds to download is in danger of being skipped by the busy screener.   &lt;/p&gt;
&lt;p&gt;It's pretty astonishing how old fashioned that paragraph seems in light of the last seven or eight years of web history. Nowadays it's easy to find sites to host high quality video and big images with minimal latency.  Of course, today's reviewers and screeners are also much more savvy web consumers: they've been exposed to a lot of very sophisticated and subtle web design and they will be much more critical of the nuances of your presentation than might have been the case back in the day. This puts more stress on your presentation skills - even though there's no reason to assume that every 3-D modeler is also a web designer it's a common perception among less artsy folks who may be the first to check out your work.    &lt;/p&gt;
&lt;p&gt;If you don't fancy yourself a web designer, shop around for a site which is image-friendly, stylish, and  doesn't compete with your artwork.  You don't even need to shell out for a custom site hosting arrangements, there are plenty of free make-your-own-site and blogging services that can be used for portfolio hosting.  Sites like &lt;a href="https://www.behance.net/about"&gt;Behance&lt;/a&gt; and &lt;a href="https://carbonmade.com/"&gt;CarbonMade&lt;/a&gt; are specifically designed for portfolio hosting and generally help to showcase your work rather than competing with it.  &lt;/p&gt;
&lt;p&gt;If you're a 3D artist you have also got a very compelling new tool in the form of Unity.  A simple Unity demo app (either downloadable or hosted using the Unity web player) can be a far more effective sales tool than folder of stills: you can not only showcase your modelling skills but many nuances of shading and texturing are much more obvious with a turntable or a walkaround camera than they are in a static shot.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CD-Roms &lt;/strong&gt;are cheap to make and easy to mail. They excel distributing large files (for example game levels and 3-d model source files). You can also use them to distribute images either as individual files or a self-contained HTML website. If you use standard image formats (such as JPEG) and HTML or plain text notes, you can burn your CD as ISO-9660 format to make it work on Macs, PCs and Linux. Unfortunately animation and video files which depend on downloadable codecs or rely on system resources can easily cause trouble between different OS’s. MPEG-1 (VCD) and MPEG-2 (DVD) formats are cross platform, but not trivial to author – if you create a VCD or DVD format reel be sure to test it on both computers and consumer DVD players!   &lt;/p&gt;
&lt;p&gt;Nowadays, If you do have to bring physical media - say, extra ammo for your interview, or a quick demo while you're hitting a job fair booth at GDC - use a flash drive (bring multiples in case somebody asks to keep it!).  Laptops are of course a great demo medium, but for hands on demos a tablet can be more effective: even though the screen is smaller the tactile nature of tablet navigation and the ease of zooming in on a detail make for a much more intimate experience.  Keep an eye out for image or portfolio hosting sites that work well and smoothly with your tablet when you're shopping for a place to host your stuff.&lt;/p&gt;
&lt;p&gt;~~For this reason you may prefer to deliver motion materials (especially animations, but also game footage and turntables) on &lt;strong&gt;VHS tape&lt;/strong&gt;. Until fairly a few years ago VHS was the standard way to distribute demo material, and many companies still demand VHS as the only submission format. It’s is a reliable way to distribute motion media, but it’s a poor way to demonstrate stills, detailed textures, or model wireframes. It’s also unfortunately true that sending a VHS tape to a company without a VCR is a waste of time and postage.~~  &lt;/p&gt;
&lt;p&gt;It's kind of sad that I am actually embarrassed to have written about VHS tape in 2006. I mean, it was a long time ago, right? Not my fault! I liked Betamax better anyway.  &lt;/p&gt;
&lt;h2&gt;Wrapup&lt;/h2&gt;
&lt;p&gt;That pretty much concludes our tour through the battle-scarred wastes of the job search. It might seem like this is a lot to go through for a simple job application, but almost every rule we’ve laid out can be reduced to two simple ideas.  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don’t give the reviewer and excuse to fail you and move on to the next candidate quickly. &lt;/li&gt;
&lt;li&gt;Carefully edit every part of your application, from the cover letter to the notes accompanying your portfolio, in order to reinforce your fitness for the job on offer. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you remember those two points, the rest follows logically. There’s no question it can be a lot of work – but if you buckle down to the hard work of job-hunting, you’ll be  at a real job a lot faster than the applicants who skimp on it. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 05 Sep 2014 11:00:00 -0700</pubDate><guid>tag:,2014-09-05:The-Game-Artists-Resume-Guide-(Revisited).html</guid></item><item><title>2015 Bug watch: ls()</title><link>/2015-Bug-watch:-ls().html</link><description>&lt;p&gt;For people switching to Maya 2015 here's an irritating bug in the 2015 Maya python layer.  &lt;/p&gt;
&lt;p&gt;In all Mayas before 2015 (as far as I can check, anyway), calling cmds.ls() with a string that was not a valid Maya object name was allowed. You could for example, call  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and you'd get back an empty array. In 2015, however, it looks like they have changed the way maya.cmds is converting the string into a dag node reference; it you call the same thing in 2015 you'll get this instead:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Error: Syntax error: unexpected end @ at position 1 while parsing:  
# ; ; @  
# ; ; ^  
# : @  
# Traceback (most recent call last):  
# ; File &amp;quot;&amp;quot;, line 1, in   
# RuntimeError: Syntax error: unexpected end @ at position 1 while parsing:  
# ; ; @  
# ; ; ^  
# : @ #
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a bit more serious than it seems at first glance, because ls is such a common command. Any ls operation which includes a string that starts with anything other than a letter or a number with raise an exception, so there are a lot of places which used to just chug along silently that are going to start raising exceptions.  &lt;/p&gt;
&lt;p&gt;My workaround is to patch cmds.ls on startup so that it safely renames any bad string before passing them to Maya.  I do this in my bootstrap routine so I don't have to chase down every occurrence of ls anywhere in my code  (1,001 of them, or so PyCharm tells me...).  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.cmds&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cmds&lt;/span&gt;

&lt;span class="n"&gt;VALID_OBJECT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;^[|]?([^a-zA-Z_\?\*\:\|])|([^a-zA-Z0-9_\?\*\:\|\.\[\]])&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;as_u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;addPrefix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;safe_ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Patches maya 2015 cmds.ls so that it does not except when passed illegal name characters.  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_BASE_LS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__iter__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
       &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;test_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VALID_OBJECT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as_u&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_BASE_LS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;safe_ls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes sure that existing code works as it did before and I don't &lt;em&gt;think&lt;/em&gt; it will break anything, since the invalid character strings were never going to be ls'ed into anything anyway.  Ordinarily I'm not a big fan of magical behind the scenes fixes but this is a pretty serious change to the behavior of ls which doesn't seem like an intentional upgrade so much as an oversight on Autodesk's part. So, at least until the old behavior comes back I'm gonna try it.  &lt;/p&gt;
&lt;p&gt;Update: Hat tip to +Robert White for pointing out that the original regex I posted did not handle namespaces. Code above includes the fix.  Never would have figured it out without &lt;a href="https://pythex.org/"&gt;Pythex!&lt;/a&gt;  &lt;/p&gt;
&lt;p&gt;Update 2: Updated the safe_ls procedure to handle more of the allowable syntax in older mayas  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 04 Sep 2014 12:15:00 -0700</pubDate><guid>tag:,2014-09-04:2015-Bug-watch:-ls().html</guid></item><item><title>Sony's Open Source Toolset</title><link>/Sony's-Open-Source-Toolset.html</link><description>&lt;p&gt;I noticed on &lt;a href="http://www.gamasutra.com/view/news/224682/Sony_releases_level_editor_thats_open_source_and_engineagnostic.php"&gt;Gamasutra &lt;/a&gt;(hat tip &lt;a href="https://plus.google.com/114297709081673565436"&gt;+Jon Jones&lt;/a&gt; ) that Sony is open-sourcing its &lt;a href="https://github.com/SonyWWS/ATF"&gt;Authoring Tools Framework&lt;/a&gt;.    &lt;/p&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/wiki/SonyWWS/ATF/images/LBP_PSP_2.png?raw=true"&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wiki/SonyWWS/ATF/images/LBP_PSP_2.png?raw=true" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is an interesting idea and I'm a big fan of putting this sort of thing out there - not only does it provide people a good starting point for their own projects, it also allows the curious to see what's going on even if they aren't actually using the code.  I'm sure I'll be poking around in it even if I never use a line of C#.  It's a goodwill gesture, a community service, and a nice way of asking people to fix your bugs for you for free. A win-win!  &lt;/p&gt;
&lt;p&gt;I am curious as to where the tools are actually pitched. The blurb clains the ATF is used in Naughty Dog's level editor and shader editor for &lt;em&gt;The Last of Us&lt;/em&gt;, a sequence editor for &lt;em&gt;Killzone&lt;/em&gt;, an animation blending tool for &lt;em&gt;God of War&lt;/em&gt;, and  a visual state machine editor for Quantic Dream among other things. That's a pretty broad palette for a single toolkit.  Overly-tight coupling between particular games and particular tools is one reason why game production advances in fits and starts: we have to choose between the completely generic, one-size-fits-all solutions ("Let's just make our level editor in Maya!" or "Just make the particle system UI look like Max's") and tools that can only do a very specific job for a very specific project. The middle ground between these extremes is, I think, fertile territory to explore if you're interested in game toolsets that don't suck.  &lt;/p&gt;
&lt;p&gt;I'll be curious to see what's in Sony's toybox. I'm especially curious to hear from anybody who has actually worked with this code -- comment away!  &lt;/p&gt;
&lt;p&gt;The project is available for cloning on &lt;a href="https://github.com/SonyWWS/ATF"&gt;github&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 03 Sep 2014 23:34:00 -0700</pubDate><guid>tag:,2014-09-03:Sony's-Open-Source-Toolset.html</guid></item><item><title>Size is the enemy: an oldie but a goodie</title><link>/Size-is-the-enemy:-an-oldie-but-a-goodie.html</link><description>&lt;p&gt;While googling my way around some strategy issues lately I rediscovered &lt;a href="http://blog.codinghorror.com/size-is-the-enemy/"&gt;this 2007 post from Jeff Atwood&lt;/a&gt; which neatly sums up a few important things that have been factoring very large in my thinking lately:  Plus, I've spent the last 4 days in the madness that is Pax (shout out to all the great folks who came by the booths, by the way!) so I'm a little grumpy.  &lt;/p&gt;
&lt;p&gt;The reasons why are enumerated after the jump....  (Update 9/3) see below  &lt;/p&gt;
&lt;h2&gt;#1: Maintain &amp;gt; Build&lt;/h2&gt;
&lt;p&gt;Maintaining any codebase is way harder than making it. Waaaaaay harder.  &lt;/p&gt;
&lt;p&gt;I've been presiding over a rewrite of my own toolset - one that is only 2.5 years or so of my own work - and I'm amazed and appalled at how crufty it is. Lots of important things are held together with spit and bailing wire. Lots of trivial things are massively over-engineered. And -- though I pride myself on being good about code reuse, _there's-only-one-way-to-do-it, _and extending earlier solutions instead of reinventing things -- it's full of pointless duplication.   &lt;/p&gt;
&lt;p&gt;And even though it's 90% my own work it's full of conflicting style choices and paradigms.  I guess it shows I'm still learning, so I haven't gotten totally stale yet.  &lt;/p&gt;
&lt;h2&gt;#2: Dynamic &amp;gt; Static&lt;/h2&gt;
&lt;p&gt;I've been looking a lot at possible language alternatives to Python for future tools. I love Python. I mean, in a totally unhealthy, creepy, even stalker-y way. But I don't like being to beholden to any one tech or approach. I'd love to get beyond Python's erratic distribution mechanisms, and Id' &lt;em&gt;really&lt;/em&gt; like to get my hands on a decent GUI toolkit that didn't make me program C++ indirectly ( &lt;a href="http://shoesrb.com/"&gt;Python Shoes&lt;/a&gt;, where are you?)  &lt;/p&gt;
&lt;p&gt;So, while tinkering with &lt;a href="http://boo.codehaus.org/"&gt;Boo&lt;/a&gt;, &lt;a href="http://cobra-language.com/"&gt;Cobra&lt;/a&gt;, &lt;a href="http://nimrod-lang.org/documentation.html"&gt;Nimrod &lt;/a&gt;and a few other options I've been revisiting the old theological debate about dynamic vs static languages; working on &lt;a href="http://moonrise-game.com/"&gt;Moonrise &lt;/a&gt; (in Unity) has made me realise that C# was designed with the express intention of driving me insane. It seems routinely true that I write 4 times as many lines of C# as I do in Python. I'm sure I'm saving a few bugs because of all the clunky type management stuff, but I think I'd rather just fix the bugs than suffer through the oceans of boilerplate that C# induces.   &lt;/p&gt;
&lt;p&gt;To be fair, it's a little worse in Unity than in the rest of the world: you can do a lot to make C# suck less using attributes and reflection and other meta-techniques, but those are tougher to do in Unity's special flavor of C#.   &lt;/p&gt;
&lt;p&gt;Still, I think I've finally made up my mind on this one: I'd rather take the risks that come with dynamic code over the sheer, mind-numbing boredom that comes with obsessive type safety.  Especially in a world where overhauling and updating and refactoring code is the &lt;em&gt;real&lt;/em&gt; work: building it is just the first chapter.  &lt;/p&gt;
&lt;h2&gt;#3 I hate curly braces.&lt;/h2&gt;
&lt;p&gt;I'm not even trying to deny it anymore. I hate the little bastards.  What a waste of space.  &lt;/p&gt;
&lt;h2&gt;#4  I'm Screwed&lt;/h2&gt;
&lt;p&gt;The interesting problem - if I end up just getting cozy with my prejudices and preferences - is now how to pick a decent dynamic environment for tools development while (A) not having the code base degenerate into mush and  (B) having decent GUI options.   And if at all possible, (C), no goddam curly brackets.  &lt;/p&gt;
&lt;p&gt;For most of my work - managing files, talking to databases, and dealing with data on disk performance is not really the most important problem: I tend to deal in minute-scale problems not hour-scale problems, so cutting them down by a factor of 5 is a nice plus rather than a live-or-die necessity.  While this means a bit more freedom, it also removes a sorting criterion from the problem.  &lt;/p&gt;
&lt;p&gt;The stinky part is that, for the given problem set there really is &lt;strong&gt;no obvious winner&lt;/strong&gt;.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I could imagine that the combination of &lt;a href="https://www.ruby-lang.org/en/"&gt;Ruby &lt;/a&gt;and &lt;a href="http://shoesrb.com/"&gt;Shoes&lt;/a&gt; would be super productive, even though the Shoes GUI is pretty limited compared to QT or WPF.  I could probably tolerate those block ending markers in Ruby, and there is a good set of standard library code out there. The perf is not great but that's my least important problem. I don't think it's much easier to distribute Ruby apps to users than it is to do with Python, however.&lt;/li&gt;
&lt;li&gt;Nimrod looks like a cool little language, but has no equivalent of the Python standardlib.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boo and Cobra both use the same CLR as C#, so theoretically you can use them to drive GUI apps with WPF or winforms, but that puts you right back into programming a clunky language through the medium of a nicer one: if I wanted that I'd stick with PyQT.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Javascript is actually super powerful, in the sense that has the same kind of high level fluidity that Python does. It's also got the best (or at least the most broadly available and flexible) GUI out there in the form of  HTML + CSS. Unfortunately it's got the security sandbox so you need a special infrastructure to do even really mundane stuff like trolling the files on a hard disk -- to say nothing of it's famously bad issues with local vs global variables and scoping.  &lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; can eleminate a lot of the worst syntactic pain (and the blankety-blank curly brackets) but it's hard to maintain code which is written in one language but actually &lt;em&gt;run&lt;/em&gt; in another: "compiles to Javascript" is pretty cool until you have to actually debug something which is only genetically related to the code you actually &lt;em&gt;wrote.&lt;br /&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(update 9/3) You can do an HTML front end for a python app with the &lt;a href="https://code.google.com/p/cefpython/"&gt;Chromium Embedded Framework for python&lt;/a&gt;. That actually works pretty well, and lets you keep JS for the light weight UI manipulation while passing the heavy lifting off to Python fairly transparently. The only caveat: the day after I discovered this I went to work, installed the Maya 2015 trial -- and promptly found that &lt;em&gt;their&lt;/em&gt; shiny new HTML gui front end had a Javascript error and did not work, thereby preventing me from logging iu to the trial. It's the new thing altight, but it's not quite there.  And It's still a 2-language solution, albeit a nice one.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(update 9/3):  For completeness sake I should mention the combination of Jytron and AWT or Swing. This works right out of the box - if you have Jython, you have a complete GUI toolkit with no downloads, installs or DLLs to manage. You can also &lt;a href="http://stackoverflow.com/questions/16701979/packaging-a-jython-program-in-an-executable-jar"&gt;compiile Jython to executables&lt;/a&gt;, buit it's not a completely transparent process and it seems a bit fiddly. Still, could be an optiom....  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(ipdate 9/3)::  I've also been experimenting a lot with compiling IronPython to exes using the IL compiler that comes with IronPython. So far it actually looks pretty good: the exes are smaller than similar Py2Exes or PyInstaller projects and they seem to be less prone to obscure compilation problems too.... maybe some light at the end of the tunnel?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;_&lt;strong&gt;TLDR: &lt;/strong&gt; _There really is nothing that fills the niche of a powerful, flexible language with good GUI and distribution options right now.  Sigh.  &lt;/p&gt;
&lt;p&gt;Please, prove me wrong !&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 01 Sep 2014 22:39:00 -0700</pubDate><guid>tag:,2014-09-01:Size-is-the-enemy:-an-oldie-but-a-goodie.html</guid></item><item><title>Distributing IronPython exes</title><link>/Distributing-IronPython-exes.html</link><description>&lt;p&gt;Inside c# exe  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;zip up the standard lib&lt;/li&gt;
&lt;li&gt;Include it as embedded resource&lt;/li&gt;
&lt;li&gt;Put it on on sys.metapath with a ResourceMetaPathImporter&lt;ol&gt;
&lt;li&gt;http://blog.ironpython.net/2012/07/whats-new-in-ironpython-273.html&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Create a C# app with included Ironython script engine&lt;ol&gt;
&lt;li&gt;Same as the Unity blog post&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Build!&lt;ol&gt;
&lt;li&gt;whole thing is pretty small - mine compiled to under 4 mb&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;IPy exe&lt;/p&gt;
&lt;p&gt;http://stackoverflow.com/questions/6195781/ironpython-exe-compiled-using-pyc-py-cannot-import-module-os&lt;/p&gt;
&lt;p&gt;Essentially: compile an Ipy stdlib dll using the pyc compiler&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;clr.AddReference(&amp;#39;StdLib&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 01 Sep 2014 21:41:00 -0700</pubDate><guid>tag:,2014-09-01:Distributing-IronPython-exes.html</guid></item><item><title>Pax!</title><link>/Pax!.html</link><description>&lt;p&gt;Ear plugs? &lt;strong&gt;Check&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Throat lozenges? &lt;strong&gt;Check&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Hand sanitizer? &lt;strong&gt;Check&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Let's the games begin&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;I'll be working the Moonrise booth Friday, and manning the State of Decay booth Sunday and Monday. Stop by!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 28 Aug 2014 23:04:00 -0700</pubDate><guid>tag:,2014-08-28:Pax!.html</guid></item><item><title>Pax Dev State of Decay Post-mortem</title><link>/Pax-Dev-State-of-Decay-Post-mortem.html</link><description>&lt;p&gt;&lt;a href="http://undeadlabs.com/wp-content/uploads/2012/01/mural.jpg"&gt;&lt;img alt="" src="http://undeadlabs.com/wp-content/uploads/2012/01/mural.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'll be &lt;a href="http://dev.paxsite.com/schedule/panel/state-of-decay-postmortem"&gt;on a panel this Thursday at Pax Dev,&lt;/a&gt; along with a bunch of my &lt;a href="https://plus.google.com/108326676864227822131"&gt;+Undead Labs&lt;/a&gt;  colleagues to talk about how we shipped a big open world game with a teensy tiny team.  Since we're also debuting &lt;a href="http://moonrise-game.com/"&gt;Moonrise &lt;/a&gt;at the show, and hanging out with &lt;a href="http://undeadlabs.com/about-state-of-decay/"&gt;State of Decay&lt;/a&gt; fans as well, it's gonna be a busy, busy week. Hope to see you there!  &lt;/p&gt;
&lt;p&gt;PS. You know we're looking for some serious senior tech-artists, right?  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 25 Aug 2014 20:13:00 -0700</pubDate><guid>tag:,2014-08-25:Pax-Dev-State-of-Decay-Post-mortem.html</guid></item><item><title>Physically based rendering notes</title><link>/Physically-based-rendering-notes.html</link><description>&lt;p&gt;https://www.marmoset.co/toolbag/learn/pbr-theory  &lt;/p&gt;
&lt;p&gt;http://blog.selfshadow.com/publications/s2013-shading-course/pixar/s2013_pbs_pixar_slides.pdf  &lt;/p&gt;
&lt;p&gt;http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_slides.pdf  &lt;/p&gt;
&lt;p&gt;http://render.otoy.com/  &lt;/p&gt;
&lt;p&gt;http://www.marmoset.co/toolbag/learn/pbr-theory&lt;br /&gt;
http://www.marmoset.co/toolbag/learn/pbr-practice  &lt;/p&gt;
&lt;p&gt;Hat tip : +Robert-Jan Brems &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 20 Aug 2014 18:17:00 -0700</pubDate><guid>tag:,2014-08-20:Physically-based-rendering-notes.html</guid></item><item><title>SIGGRAPH 2014 Short Review</title><link>/SIGGRAPH-2014-Short-Review.html</link><description>&lt;p&gt;It's been &lt;a href="http://moonrise-game.com/"&gt;crazy times at Undead Labs&lt;/a&gt; as we &lt;a href="http://undeadlabs.com/2014/08/news/pinny-arcade-now-featuring-moonrise-pin/"&gt;get ready for Pax&lt;/a&gt;.  I did sneak in a lightning visit to SIGGRAPH, since it drive-able in Vancouver, but I had to cut it pretty short.   &lt;/p&gt;
&lt;p&gt;The highlight of the show was the &lt;a href="http://tech-artists.org/forum/showthread.php?4885-Siggraph-2014-TA-Meetup"&gt;TA beer night at the Butcher and Bullock&lt;/a&gt;  -- hats off to &lt;a href="https://plus.google.com/116275833090172173559"&gt;+Robert Butterworth&lt;/a&gt;  for putting together -- but there was some other stuff going on as well. Here's a very partial and completely unscientific brain dump of what I saw. The important caveat here is that my limited schedule kept me on a very short leash:  I spent all day Monday in the &lt;em&gt;Advances in Real Time Graphics&lt;/em&gt; course, which I'm pleased to say has become a SIGGRAPH institution (go Natasha!) and then all day Tuesday talking to vendors, so I'm 100% certain to have missed a lot of cool and interesting stuff. This was an all business visit, so most of what I have to report is general impressions rather than new cutting edge research.  My impressions are after the jump...  &lt;/p&gt;
&lt;h2&gt;Have a PBR!&lt;/h2&gt;
&lt;p&gt;The trend towards &lt;a href="http://www.marmoset.co/toolbag/learn/pbr-theory"&gt;physically based rendering&lt;/a&gt; is getting even more pronounced: I think there's no question this will be this year's buzzword of the year, at least in games.  I've been working with PBR renderers at work (mostly, but not only Marmoset) and it really is a better way to work, at least if your working with realistic subject matter.  I've got an article in the works for 3D World about exactly this - lost somewhere in the labyrinth that is print production - and the takeaway is that it's a good thing for anybody in game art to be boning up on.  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;The standard textbook, &lt;a href="http://www.amazon.com/gp/product/0123750792/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0123750792&amp;amp;linkCode=as2&amp;amp;tag=tecsurgui-20&amp;amp;linkId=HDVQMGQOD6MKGOCB"&gt;Physically Based Rendering, Second Edition: From Theory To Implementation&lt;/a&gt;&lt;img alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=tecsurgui-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0123750792" /&gt;, is a bit of a slog. It has great info but very coder-centric. The Marmoset site linked above has some great intro level material.  For a deeper dive there's &lt;a href="http://seblagarde.wordpress.com/2011/08/17/feeding-a-physical-based-lighting-mode/"&gt;this post from Sebastian Lagarde&lt;/a&gt;. There's also a couple of decent video intros:&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Hat tip : +Robert-Jan Brems&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I think there's a near-future blog post in all this somewhere :)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;One side note: the need for high quality specular light samples - usually cubemaps - in a PBR pipeline has the nice side-effect that you can usually count on a reflection map for lots of areas which might not have gotten one traditionally. Combine with depth buffer reflections for fun and profit!  There were good talks from the &lt;em&gt;Killzone&lt;/em&gt; and _Thief _teams about real-time depth buffer reflections which I think are going to make a noticeable difference in tone from last gen graphics as it becomes more common.  &lt;/p&gt;
&lt;h2&gt;Free samples&lt;/h2&gt;
&lt;p&gt;One of the side effects of the new console generation is that everybody is revisiting antialiasing and sampling.  From 720p to 1080p means pushing more than 2X the pixels. This makes MSAA a worrisome burden: you've to do a lot of sampling at that res.  &lt;/p&gt;
&lt;p&gt;Not surprisingly there was a lot of interest in alternatives to brute force antialiasing at this year's graphics course. I particularly liked the paper from Michel Drobot of Guerilla on 'Hybrid Reconstructive AA', which to my less-than-wizardly ears sounded like a variant of temporal AA (in which you accumulate AA over a few frames by varying the precise sampling point in the 3d world a little bit on each render) spiced up by oversampling just the coverage buffer of the graphics card to get enough data to do higher quality sample weighting on the AA for edges. ~~ I know that's kind of a sketchy description, unfortunately the paper is not up yet for linking so I can't go through it more academically;  however it will eventually show up on the course website at ~~  The slide with all the gory details are now up at &lt;a href="http://advances.realtimerendering.com/"&gt;advances.realtimerendering.com&lt;/a&gt;.  &lt;/p&gt;
&lt;h2&gt;Fabric 50&lt;/h2&gt;
&lt;p&gt;What does it say about me in my old age that one of the pulse-pounders of the show was a change in licensing terms? The &lt;a href="http://fabricengine.com/fabric50/"&gt;Fabric 50 program&lt;/a&gt; is a new idea from the makers of the &lt;a href="http://fabricengine.com/"&gt;Fabric Engine&lt;/a&gt;. Fabric is a high performance, highly parallel computing engine that is intended to be used inside DCC tools like Maya or as the core of a standalone app. The key goal is to put lots and lots of power in a package that is usable by mortals so you can write a pretty beefy tool without having to go back to school and learn all the dark arts of multiprocessing and parallelism. The 50 program allows studios up to 50 licenses for free in an effort to get more tool makers using and evangelising for the tech. I'm pretty sure I'll be dropping this one on my tech director's desk soon.   &lt;/p&gt;
&lt;h2&gt;The Dismal Science&lt;/h2&gt;
&lt;p&gt;Business-wise this felt like a slow year to  me. Not sure how much of that comes from the size of the venue, how much comes from Hollywood types skipping out on the cross-border travel, and how much is the result of the slow implosion of the big-budget FX industry but the overall vibe among vendors was fairly mellow.   &lt;/p&gt;
&lt;p&gt;The advances in capture and acquisition tech are kind of like those in cell phones: we're so jaded that we don't even notice the miracles anymore. I saw a lot of mocap demos - it's the siggraph show floor, so ball suits abound - and I was struck by how clean and lag-less the captured images were all round; even the bargain stuff looks pretty damn good these days.  &lt;/p&gt;
&lt;p&gt;There's no big 3d application booths anymore - the market has gotten so mature (or monopolized, depending on your mood) that big stage shows and high power demos you used to see are gone - the Autodesk booth was literally a 10 foot cube featuring primarily  abstract artwork.   &lt;/p&gt;
&lt;p&gt;One 3d app demo I did catch was a &lt;a href="http://www.thefoundry.co.uk/products/modo/latest-version/"&gt;Modo 801&lt;/a&gt; animation demo. I've been ambivalent about Modo's efforts to compete head on with the Max/Maya juggernaught, but I was quite impressed by their animation workflow (here's a video from their site, which covers a lot of the ground I saw in a more bullet-pointy fashion:)  &lt;/p&gt;
&lt;p&gt;I'm usually a bit suspicious of efforts to port the pen-and-paper workflow to CG, since I don't see the point in mimicking the artifacts of one medium in another. However the timing chart workflow is a fresh take on an aspec of animation which has been badly overshadowed by the minutia of rigging, and I hope it inspires everybody to kickstart the moribund business of animation software. Speaking of which, I had an interesting talk with the founder of French startup &lt;a href="http://www.nukeygara.com/"&gt;Nukeygara&lt;/a&gt;, who was showing an interesting and unconventional standalone animation package called Akeytsu (no, I'm not sure how to pronounce it either. It's &lt;em&gt;French&lt;/em&gt;. Just roll with it!) This vid gives a pretty good idea where this is going:  &lt;/p&gt;
&lt;p&gt;I'm very curious to see how this one works out: I'm still waiting for somebody -- please! -- to shake up animation the way Zbrush has (and continues to) shake up modelling. Like recent GDC's it seemed like schools and training programs took up as much floor space as vendors, which is a little scary: call me selfish but I kind of miss the days when  our skills were rare and esoteric.  Of course, the kids coming out of these programs are all waaaay more sophisticated technically and artistically than I was at the same point in my career, so it's good for the art form I suppose.  &lt;/p&gt;
&lt;p&gt;Not for my ego, though.  &lt;/p&gt;
&lt;h2&gt;The Meet Market&lt;/h2&gt;
&lt;p&gt;The Job fair was a tad small this year -- like the show floor, it might just be the distance from LA, but I'd say there were only about two dozen booths.  Many of these seemed to be BC based VFX houses as well: the hurly burly of the old days with 4 hour lines at ILM and Pixar was not much in evidence, at least not while I was there. I saw a handful of game companies (biggies like Blizzard and smaller ones) but things seemed a bit subdued. Here's hoping that's just an artifact of the time and place of the show.  Maybe there was more action in private suites and hotel rooms, perhaps the internet has taken some of the flesh-pressing out of the process. Still, a bit worrisome.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 20 Aug 2014 12:28:00 -0700</pubDate><guid>tag:,2014-08-20:SIGGRAPH-2014-Short-Review.html</guid></item><item><title>Submit!</title><link>/Submit!.html</link><description>&lt;p&gt;For any readers who are thinking about doing a GDC talk in 2015, it's time to get your submissions in! Talk abstracts &lt;a href="http://www.gdconf.com/conference/c4p/"&gt;should be submitted by August 28th&lt;/a&gt;!   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gdconf.com/img/logos/download/gdc_logo.jpg"&gt;&lt;img alt="" src="http://www.gdconf.com/img/logos/download/gdc_logo.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tech artists are an important part of GDC: sharing knowledge, inspring people to work smarter, and teaching better ways to get things done are what we do all the time -- doing a talk is just taking your day job on the road. So hurry up and get those proposals together!   &lt;/p&gt;
&lt;p&gt;After the jump I've reposted an article I did for &lt;em&gt;Game Developer _ back in 2008 which outlines some of the things I think make for a good GDC talk.  _Update: I added a longish list of stuff that has changed since the original 2008 article in the comments - in particular, don't forget to read the new submission guidelines and don't forget 25 minute talks if you're getting your feet wet&lt;/em&gt;  &lt;/p&gt;
&lt;h2&gt;Why it matters&lt;/h2&gt;
&lt;p&gt;GDC is important because it is one of the few institutions devoted to spreading that knowledge around, instead of hoarding it. Older business has have professional schools and academic wings that help to keep them vibrant, and though we are gradually evolving these sorts of things as well we are still, on the whole we still have to do the spade work ourselves.&lt;/p&gt;
&lt;p&gt;Being a GDC speaker offers a nice boost to a resume. It gives you some visibility among your peers and also gives you a chance to demonstrate your chops in front of an audience that's likely to contain possible employers who are looking for skills like yours.  If all that weren’t enough, speaking at the GDC earns you a free conference pass, a free tote bag, and the chance to bump into Will Wright in the speakers lounge. Not surprisingly, a lot of folks would like to win that coveted speakers badge.  &lt;/p&gt;
&lt;p&gt;It’s a good thing that the rewards are so steep (did we mention the tote bag?),  because putting  together a good talk is a serious undertaking.  It requires serious planning, because talk proposals are submitted six months or more before the show. It takes a lot of preparation: creating a slide deck, putting together example art, and doing enough practice to be a confident presenter. And it’s also highly competive – only a fraction of the talks that are submitted to the conference website are approved for the show. &lt;/p&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;It helps to understand how the evaluation process works. Proposals are submitted to the GDC via the conference website at GDConf.com, usually over the summer of the preceding year. The proposals are vetted by an advisory board of developers . The conference management recruits advisors from a number of studios for the various “tracks” or disciplines. The advisory board looks all of the proposals and ranks them on the appeal of the topic, the quality of the proposed treatment, and the track record of the speaker.  &lt;/p&gt;
&lt;p&gt;The board is also responsible for filtering out the large number of talk proposals that are basically sales pitches or user-group style sessions.  &lt;/p&gt;
&lt;p&gt;While there’s nothing  inherently wrong with a talk on your fabulous new motion capture camera or your amazing new paint package,  the conference tries to steer clear of potential conflicts interest by routing these through a separate process . You’ll see these sorts of talks in the show catalog as “Sponsored” sessions, as in “Sponsored by Autodesk”. If you’re thinking about a topic that involves a lot of very particular attention to one product, service or vendor you might want to get in touch with the conference staff before submitting your proposal in order to get a little more guidance on the rules for distinguishing between the regular conference sessions and the sponsored variety.&lt;/p&gt;
&lt;h2&gt;The Keys to a good talk&lt;/h2&gt;
&lt;p&gt;When you start to develop your topic, you don’t need to be too academic.  That’s how the programmers amuse themselves. GDC talk aren’t classroom exercises, they are a chance to share practical knowledge. The unique value of the show is that it’s oriented around a professional community.  You can pick up the finer points of Zbrush at your local branch of Gnomon, and you can get a lot more help for your keyframing skills from a few months of Animation Mentor than you’ll ever get from a 50 minute lecture.  What you can’t get anywhere else is the combination of technical information and rubber-meets-road experience that comes from other devs, so a good talk combines technical or artistic command of a given subject with an understanding of production realities. &lt;/p&gt;
&lt;h2&gt;The Takeaway&lt;/h2&gt;
&lt;p&gt;The first thing the advisory boards look for in a proposal is the “takeaway” – the key nugget of wisdom that the audience will (hopefully) get from the presentation.  From a selfish standpoint, the conference likes snappy takeaways because those are what you show your boss when trying to wangle yourself a junket to the show:  Good takeaways make for more conference goers.  More importantly, though, the takeaway is a the acid test of what you’re trying to say in your talk – if you can’t figure out the two or three sentence distillation of what you want to get across, the audience and the reviewers won’t either.&lt;/p&gt;
&lt;p&gt;A good takeaway is concise and straightforward. “Attendees will learn the pros and cons of the major normal mapping techniques, with particular attention to choosing the right technique for your game genre” is a good example while “Attendees will learn the coolest normal mapping tricks EVAR!” is not.  &lt;/p&gt;
&lt;h2&gt;Scope&lt;/h2&gt;
&lt;p&gt;As we’ve said before, the unique value of a show like the GDC is the combination of technical and artistic knowledge with real world experience. You can learn as much, or more, from your presenter’s accounts of hassles and failures as from the theory they are trying to explicate.   Thus this year’s talk on _&lt;a href="http://gdcvault.com/play/279/Stylization-with-a-Purpose-The"&gt;The Illustrative World of Team Fortress 2&lt;/a&gt;_could teach a lot about dealing with multiplayer-only title or working with the Source Engine material editor, as well as offering some general wisdom about stylized character art.  The best talks teach general principles using real world production as vivid examples, striking a balance between simple post-mortems on the one hand and pure theory on the other.&lt;/p&gt;
&lt;p&gt;Trying to go very deep is very tough in the typical hour-long lecture format. If you focus too closely on the precise specifics of a particular technique or technology you’ll probably lose many of your listeners in the thickets of details.  And if you can’t provide a larger takeaway, you won’t be able to reach audience members who work in other genres or on other platforms.  A talk about how to use non-linear animation tools to crank out lots of animations for multiplayer games, using your online shooter as a case –in-point  is going to work a lot better than a talk about the six months you spent getting everybody to learn the Trax editor in Maya.&lt;/p&gt;
&lt;p&gt;On the other hand, overly broad talks are also weak. It’s a notorious truth, for example, that every year produces a large number of talks about art direction.  Most of these are good proposals from serious professionals – but the more broadly these talks are pitched, the more they will tend to overlap, so inevitably the large number of proposals gets whittled down to only one or two talks – there’s only so much room on the program for Grand Unified Theories of Art, no matter how worthwhile.   &lt;/p&gt;
&lt;p&gt;On the other hand,   a talk about creating art direction for international products, with special reference to a porting a popular Korean game to the US, a primer on doing historical costume research as shown in a Renaissance themed adventure game, and a third talk about the special challenges of creating a visual direction for DS games can all coexist happily.  &lt;/p&gt;
&lt;h2&gt;Focus&lt;/h2&gt;
&lt;p&gt;Working in an esoteric business like ours can be lonely. Every veteran game artist has a closet full of favorite tactics and war stories to share, and an audience full of the only people in the world who have any idea what you’re talking about is a standing temptation to cram every tip and trick of your career into your Powerpoint.  Unfortunately, that grab-bag approach may make good fodder for a bull session on the suite party circuit (or maybe not, as many GDC afterparty vets can attest… but we digress) but it’s murder for a GDC talk. &lt;/p&gt;
&lt;p&gt;Verbal presentation  is a much less efficient medium than print or the web; to really reach an audience effectively you need to make sure that your points are clearly marshaled an mutually reinforcing, and that means your talk outline needs to be clearly structured , well thought out presentation of your points and not just a laundry list.  Talk proposals with good topics and interesting speakers often fail to make the grade if they come with fuzzy or incomplete outlines – just as in high school English, coming up with a strong outline is the key to success both in the submissions process and in crafting a popular talk. Fortunately, a good takeaway and the strong hook will both nudge the proposal towards a clear, well focused structure. &lt;/p&gt;
&lt;h2&gt;Credentials&lt;/h2&gt;
&lt;p&gt;If you haven’t given a GDC talk before, landing a speaking gig is more challenging. First-time speakers confront the same catch-22 that maddens first-time job seekers:  without any experience, it’s hard to convince people to let you earn experience.  Unsurprisingly, audiences and reviewers are attracted by well known names and high profile titles.  If you have had the good luck to work on a high profile franchise (or better yet, a big hit from the last year) your proposal will have a big leg up over an equally good submission from an eager but obscure competitor.  This probably means some good talks don’t get accepted, but it does reflect the preferences of the audience.&lt;/p&gt;
&lt;p&gt;Naturally, if you’ve given a successful talk at the GDC before it’s also much easier to get another chance. The GDC carefully tracks audience responses – fill out those cards, people! – so that earlier talk might not be such an advantage if the ratings were unimpressive. The ratings are done on a 5 point scale – if a previous session averaged 3 or under, it’ll be pretty tough to win a second chance.  &lt;/p&gt;
&lt;p&gt;If your resume isn’t studded with million sellers, you should make sure to burnish up any other credentials you may have. Presentations at other industry shows certainly help, as does experience as a teacher or writer.  If your fear you're at a disadvantage in the credentials department because you should think about developing your presentation skills and name recognition. A semester or two teaching at your local art school or community college game design program can be helpful, as can a guest spot in Game Developer or other industry publications.  In any event if you’re worried about breaking in the hallowed ranks of GDC presenters, you have all the more incentive to really hone your proposal into an irresistible pitch.&lt;/p&gt;
&lt;h2&gt;Why Bother?&lt;/h2&gt;
&lt;p&gt;If this sounds  like a lot of work, it is.  Landing a speakers badge for the GDC is an accomplishment in itself.  You’ll need a well crafted topic, some hard won personal expertise, and the willingness to get up in front of an audience of smart, skeptical peers who won’t hesitate to call BS.  Is it really worth it?&lt;/p&gt;
&lt;p&gt;Well, the practical benefits for your career are obvious – if you make a name for yourself as a presenter you’re going to have a big leg up in future job searches.  As  a side benefit, you’ll become a Jedi master of whatever subject you set out to speak on – no matter how well you knew it when you clicked the “send” button on your proposal, a few months of slide-crafting and run-throughs will force you to know the subject far, far better than you thought possible.   &lt;/p&gt;
&lt;p&gt;Even with all purely personal benefits, pinning on the lav mic and facing the crowd is also a real service to the community.  Older professions have a pretty good sense of what it means to be a member of the club – if you’re a lawyer or an accountant, you have a pretty clear idea of how you can expect your work life career to go. In our young (not to say “infantile”) business those expectations are much more fluid and are still evolving . Stepping into the spotlight for a few minutes is helping to define those expectations for yourself and for your peers.  What does it mean to be a “game artist?” You’re helping us all to figure it out. If that comes with a tote bag, so much the better.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 14 Aug 2014 22:52:00 -0700</pubDate><guid>tag:,2014-08-14:Submit!.html</guid></item><item><title>Oh, Maya....</title><link>/Oh,-Maya.....html</link><description>&lt;p&gt;This is an elderly bug, but it's worth recording because it's both very puzzling and hard to diagnose:  &lt;/p&gt;
&lt;p&gt;In Maya 2011 (and I'm certain _not _in 2014, can't say for sure about 2012 or 2013)  there's a truly bizarre bug in the behavior of tabLayout controls.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 06 Aug 2014 22:30:00 -0700</pubDate><guid>tag:,2014-08-06:Oh,-Maya.....html</guid></item><item><title>Moonrise announcement</title><link>/Moonrise-announcement.html</link><description>&lt;p&gt;So, we just took the wraps off &lt;a href="http://undeadlabs.com/2014/08/news/moonrise/"&gt;our latest project&lt;/a&gt;:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://undeadlabs.com/wp-content/uploads/2014/08/Moonrise02.jpg"&gt;&lt;img alt="" src="http://undeadlabs.com/wp-content/uploads/2014/08/Moonrise02.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We'll be showing the beta at &lt;a href="http://prime.paxsite.com/"&gt;Pax Prime&lt;/a&gt; (booth 6103).  It's been a really fun project to work on (for a grizzled ancient like yrs. truly, working on mobile is kind of liberating. It's like the old days of limited budgets and tiny teams.  Its so nice to get something from concept to execution in 18 months instead of 4 or 5 years, and with a team that can meet in a lunch room instead of needing a whole theater.  &lt;/p&gt;
&lt;p&gt;...the game looks a lot nicer than they did in the old days though. I used to sneer at mobile graphics, but nowadays it's pretty awesome what you can accomplish with a little care.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-_fZyKqsKkGs/U-MKvBP9dcI/AAAAAAABIZk/hZpIULBgxLw/s1600/town.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-_fZyKqsKkGs/U-MKvBP9dcI/AAAAAAABIZk/hZpIULBgxLw/s1600/town.jpg" /&gt;&lt;/a&gt;&lt;a href="http://2.bp.blogspot.com/-X4uma6gxdB4/U-MKvJe7UPI/AAAAAAABIZo/CLjG8PIOglg/s1600/combat.jpg"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-X4uma6gxdB4/U-MKvJe7UPI/AAAAAAABIZo/CLjG8PIOglg/s1600/combat.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PS. In case you're wondering: It's not a zombie game.  But we're not out of the zombie business, not by a long shot. Check out article linked above for more from HQ.  But trust me, there's a lot of zombies in our future too. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 06 Aug 2014 22:20:00 -0700</pubDate><guid>tag:,2014-08-06:Moonrise-announcement.html</guid></item><item><title>Read The Damn Ad!</title><link>/Read-The-Damn-Ad!.html</link><description>&lt;p&gt;This is an article I originally wrote for the late lamented &lt;a href="http://www.gamasutra.com/features/game-developer-magazine/"&gt;Game Developer Magazine&lt;/a&gt; on the black art of  job hunting.  Hiring has been on my mind a lot lately and so I've had to revisit a lot of things I touched on here.  Although a lot has changed in the intervening decade, the brutal realities of the job market haven 't changed much -- except, perhaps, to get a tad more brutal as the pool of qualified candidates has grown faster than the games biz as a whole.   &lt;/p&gt;
&lt;p&gt;So, without further ado, here's a disgruntled reader's guide to resumes and cover letters.   &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dear Job Applicant,&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;_Thank you for applying for the opening we advertised. While we specifically requested only applications from candidates having four or more years of industry experience, we understand that you might not have realized which industry we intended. However we are impressed by your entrepreneurial drive and are sure that the skills you learned behind the cash register at McDonalds can contribute greatly to our team environment. _&lt;/p&gt;
&lt;p&gt;_We are somewhat concerned, however, that you may have mistaken our ad for one from another company. Since none of the four identical resumes and cover letters we received from you mentioned our company or which position you were applying for, we just wanted to contact you to be sure that you were, in fact, responding to one of our ads.  My assistant and I spent quite some time puzzling over this and were unable to reach a conclusion, so we thought it best to contact you and see if we could figure out what, exactly you intended. After all, we receive dozens of applications a week – what excuse could we have for giving each one less than our undivided attention?  _&lt;/p&gt;
&lt;p&gt;_In any case, we also have a more personal motive for contacting you. We really wanted to thank you for introducing us to the fascinating world of post-industrial Thrashtronica – a musical style we had never even heard of around the office until we went out and bought a VHS player to view your samples. The nightmarish soundscape certainly taught us a few things about the meaningless void at the heart of modern capitalism! It's a good thing the turntable animations on your tape were 15 minutes long, so we were able to hear the entire piece.  _&lt;/p&gt;
&lt;p&gt;Ahhh! It's spring, and the air is full of new life.  Everything old is new again -- particularly the soundtracks (and the appetizers) at those GDC parties. Everywhere you look, studios flush with greenlight funding are strutting their gorgeous plumage before a new crop of art-school grads, hoping to entice them into an intricate mating dance. Birds do, bees do it – even Hollywood TD's do – so let's do it: let's talk about job hunting. But rather than the looking at if from the perspective of the potential hire, let's stop and look at the hiring process from the other side of things – the way it looks from the other side.   &lt;/p&gt;
&lt;p&gt;There's really only two things you need to remember when approaching preparing  job applications:&lt;/p&gt;
&lt;h2&gt;Rule #1:&lt;em&gt; Hiring hurts&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Hiring is a slow, expensive, and risky proposition.  &lt;/p&gt;
&lt;p&gt;Think about the employment process from the perspective of a company that has a slot to fill: In order to get one person, you need to spend a couple of weeks contacting various websites and magazines, writing up a set of ads that adequately describe the exact job you're trying to fill – assuming you can get management and production to agree on what that is! You'll also have to spend at least a few hundred bucks on each ad.  &lt;/p&gt;
&lt;p&gt;Once you've laid out all this money and time, you'll get hundreds of applications – and 95 percent of them will be from people who haven't got any of the qualifications you're seeking. Nevertheless, you'll need to have a dedicated person to spend weeks sifting through all the resumes and looking at all the portfolios of old school work, 3-d package tutorial images, and scanned-in charcoals from figure classes.  &lt;/p&gt;
&lt;p&gt;When you finally get to the really good candidates, half of them will already be taken. To top it all off, the remainders won't come to work for you unless you actually &lt;em&gt;give them money&lt;/em&gt;. Just to show up! And there's probably a recruiter, a moving company, or an immigration laywer lurking in the background with a bill as well. You know, it's really not hard to see why companies hate hiring.&lt;/p&gt;
&lt;h2&gt;Rule #2 &lt;em&gt;Companies are desperate and pathetic&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Of course, as horrible as hiring can be for companies, it's also an unavoidable necessity.  The power of the the old-boys-and-girls network is a product of how much companies dislike the ordinary “over the counter” hiring process -- bringing aboard that old friend or former colleague means skipping the most laborious and risky parts of the hiring process, so naturally it's popular with firms in a hurry. We all know how this can stack the deck against folks without pre-existing industry connections.  &lt;/p&gt;
&lt;p&gt;Luckily for outsiders – and unfortunately for the potential employers --  no company can fill every vacancy from the ranks of old friends and former co-workers. Companies with vacancies are constantly aware that every day an opening stays vacant is a day lost – possibly many days, if the empty seat is an important one. So any would-be employer will eventually turn to the public forums – the websites and recruiting firms (and, &lt;em&gt;ahem,&lt;/em&gt; magazines – ed.) where job-seekers congregate.  &lt;/p&gt;
&lt;p&gt;It's tough for the companies, because it involves them in all the unpleasant stuff we sketched out just a moment ago. But it's good news for the hopeful job seeker --  by the time a job posting hits the boards, the company is absolutely committed to filling that empty chair.&lt;/p&gt;
&lt;h2&gt;Living by the rules&lt;/h2&gt;
&lt;p&gt;Now, we all know that it's not just the companies that suffer. Job-hunting (particularly when you're out of work) is a morass of frustration and uncertainty. It can be easy to be overwhelmed by the injustice of it all – you know how good you are, how passionate you are about games, and what great work you can do. The nonsense generated by the process – the resumes and cover letters, the formula interview questions, and of course the dreaded issue of _prior experience – _eventually starts to seem like a vast shadowy conspiracy directed right at you. “I know I can do the job!” you want to scream, “Let's just cut to the chase!” &lt;/p&gt;
&lt;p&gt;The sad truth, though, is that the miseries inflicted on job seekers aren't just random cruelties. They are logical byproducts of the dilemmas faced by potential employers. Companies hate hiring, and at the same time companies are desperate for people.  The rituals of the job hunt have evolved out of these conflicting demands. Figuring out why employers set you to jumping a particular set of hoops is a very powerful tool to help you upgrade your own job application. It's also a good way to keep yourself focused when the emotional drain of job hunting gets you down.&lt;/p&gt;
&lt;h2&gt;Mysteries of the cover letter&lt;/h2&gt;
&lt;p&gt;Let's look at an example of how seeing the process from the perspective of employers can make take some of the mystery – and misery – out of job hunting. Take the tradition of the cover letter as an example. It's easy for a job hunter to see the cover letter as a meaningless formality. After all, a dab hand at writing cover letters is hardly a guarantee of artistic or technical skill.  The ability to search for the name of the last company you applied to and replace it with the name of the next hardly betokens artistic brilliance or technical savvy. Moreover artists aren't famous for their verbal skills to begin with.  Don't forget either that many talented folks don't speak English as a first language.  &lt;/p&gt;
&lt;p&gt;So why _do _we bother with cover letters? Or, more to the point, why do the _companies _bother? After all if _you _think cover letters are a meaningless formality, just imagine what the HR person on the other end goes through, sorting through them by the dozen. &lt;/p&gt;
&lt;p&gt;In fact, the cover letter makes sense when seen against the backdrop of the two basic rules of hiring. The screener or HR person or producer who reads your application is trapped between two conflicting desires: &lt;em&gt;the desire to find a great candidate, _and _the desire to dispose of all the no-hope candidates as efficiently as possible.&lt;/em&gt;  The cover letter helps the screener in both directions.&lt;/p&gt;
&lt;p&gt;On the positive side, a good cover letter lets the screener know that you've actually paid some attention to the requirements of the job at hand.  &lt;/p&gt;
&lt;p&gt;It may sound strange, but proving that you have read the ad is suprisingly important matter. Until you've been tasked with screening resumes yourself, you'll literally cannot believe how few applicants pay attention to the carefully thought out, diplomatically worded prose that describe a job on offer. Place an ad for a concept artist, and 30-40% of the respondents will be modelers or level designer or animators. Post a job requiring two shipped titles, and half the respondents will be in their senior year at art school.  &lt;/p&gt;
&lt;p&gt;Against this backdrop, a decent cover letter which clearly indicates that you've read and understood the job requirements automatically tells the screener that you're in the top half of the incoming wave of resumes. Even if your cover letter simply explains why you'd be good for the job even though you don't meet the formal criteria you'll probably get a free pass on the first cut. The key thing is to tell the screener simply and clearly that you know what job is on offer and that you have the professional chops and personal drive to do that job. &lt;/p&gt;
&lt;p&gt;Which brings us, of course, to second reason cover letters exist.  &lt;/p&gt;
&lt;p&gt;Remember our rule #1 – companies hate hiring. No matter how badly a company wants to fill that slot, most of the applicants for the slot will be completely unqualified. The employer wants to get to to the handful of good candidates quickly  -- and that means dispensing with the bad ones as fast as possible. In this context, a cover letter offers &lt;em&gt;a chance to fail &lt;/em&gt;– in other words, a fast way for the screener to find weak candidates.  If you can't put together two reasonable paragraphs that tell the screener (a) you've read the ad and (b) you'd make a good match for the job on offer,  your application is headed for the circular file. It's not strictly true that a bad cover letter will sink you right away, because most screeners are conscientious enough (and desperate enough to find that mythical good candidate) that they'll still check out the resume and reel. But make no mistake, if you blow the cover letter stage of the process you're set up for elimination in the next round – anything else is a comeback.&lt;/p&gt;
&lt;h2&gt;The Awful Truth&lt;/h2&gt;
&lt;p&gt;“Wait a minute,” you're thinking, “did he really mean to say that a stupid cover letter means more than my demos?”  &lt;/p&gt;
&lt;p&gt;Well, no.  &lt;/p&gt;
&lt;p&gt;No artist gets a job with a terrible reel and a great cover letter. But don't let that fact make you forget that rule #1 is lurking in the background at every stage of your job application. The person sorting and screening job applications – no matter how nice and open minded they are –  spends most of their time looking for reasons &lt;em&gt;not&lt;/em&gt; to spend time with a given resume or reel. To put it more succinctly, most of the screener's job is figuring out who &lt;em&gt;not&lt;/em&gt; to hire.  &lt;/p&gt;
&lt;p&gt;Against this context the cover letter, and then the resume, and finally and most ultimately the demo, are all up against a pretty stark test – it's always sudden death overtime in the hiring business. It's not because any rational person thinks a cover letter, or even a well formatted resume in .doc format, is an indication of artistic talent. It's because there are a lot of resumes and not much time, so every niggling detail can become an excuse to move on to the next item in the in-box. &lt;/p&gt;
&lt;p&gt;If this sounds brutal, that's because it is. But it's purely impersonal – it's a fact of life that can be managed if you understand it and work with it. Above all, nobody is exempt, not even the greatest talents among us. Next month we'll finish off our discussion of job hunting by looking at how resumes and demo reels function in the hiring process. In the meantime, polish up those cover letters. And please, &lt;em&gt;read the damn ads&lt;/em&gt;!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://cdn.gagbay.com/2013/12/after_months_of_unsuccessful_job_hunting_this_is_how_i_imagine_every_hr_department_that_emails_me-398855.jpg"&gt;&lt;img alt="" src="http://cdn.gagbay.com/2013/12/after_months_of_unsuccessful_job_hunting_this_is_how_i_imagine_every_hr_department_that_emails_me-398855.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 01 Aug 2014 11:30:00 -0700</pubDate><guid>tag:,2014-08-01:Read-The-Damn-Ad!.html</guid></item><item><title>Rob G's Maya Python book is finally out</title><link>/Rob-G's-Maya-Python-book-is-finally-out.html</link><description>&lt;p&gt;I see Rob Galanakis's new book is finally available for realz on Amazon.   &lt;/p&gt;
&lt;p&gt;I've added a few new books to the &lt;a href="http://astore.amazon.com/tecsurgui-20"&gt;Techart bookstore page&lt;/a&gt; too!  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 30 Jul 2014 22:28:00 -0700</pubDate><guid>tag:,2014-07-30:Rob-G's-Maya-Python-book-is-finally-out.html</guid></item><item><title>Pythonistas need Pythonista!</title><link>/Pythonistas-need-Pythonista!.html</link><description>&lt;p&gt;If you consider yourself a Pythonista, you've probably been frustrated by the difficulty involved in getting to work in Python on iOS devices.  I just stumbled upon a really cool answer to your prayers in the form of &lt;a href="http://omz-software.com/pythonista/"&gt;Pythonista&lt;/a&gt;. It's not brand new - it looks like it came out last year - but I just found out about it and flipped my proverbial wig.  &lt;/p&gt;
&lt;p&gt;Pythonista is a sandboxed Python 2.7 development environment for iOS.  It borrows a page from the playbook of earlier sandboxes like &lt;a href="http://twolivesleft.com/Codea/"&gt;Codea&lt;/a&gt;. and manages to skirt Apple's rules for what you can do on the device while still allowing plenty of power.  It includes a script editor (a pretty slick one for iOS, by the way) ,an interactive environment, and a bunch of libraries to make development really useful.  Among the 'batteries' included are heavy hitters like &lt;em&gt;pil,&lt;/em&gt; _numpy _and _matplotlib, _along with a few cool little things like a text-to-speech module and tools for dealing with the iOS console.&lt;/p&gt;
&lt;p&gt;The most impressive inclusions are the &lt;em&gt;scene _and _ui _modules: custom modules devoted to iOS drawing and UI.  Ironically, it's easier to develop a GUI application on your iPad using Pythonista than it is to do it on a desktop machine - the app even comes with a UI builder tool similar to QT's interface builder (not nearly as deep or complex, of course, but iOS UI is less complex than desktop). You can read multiple touches.  You can even do hardware accelerate drawing - nice for things like a finger-sketching program.  Since Pythonista includes _pil&lt;/em&gt;, you can even do stuff like image processing:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://a1.mzstatic.com/us/r30/Purple2/v4/11/f3/e5/11f3e59b-90f9-68e2-fc61-c6f440bfccf7/screen568x568.jpeg"&gt;&lt;img alt="" src="http://a1.mzstatic.com/us/r30/Purple2/v4/11/f3/e5/11f3e59b-90f9-68e2-fc61-c6f440bfccf7/screen568x568.jpeg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pythonista's main limitation is that it's not possible to add external modules to the library in the usual ways: &lt;em&gt;setuptools&lt;/em&gt; and &lt;em&gt;pip&lt;/em&gt; aren't available.  You can manually install pure-python modules by copy-paste-save, and there are few installation tools floating around on the web such as &lt;a href="https://gist.github.com/pudquick/4116558"&gt;pipista&lt;/a&gt; and &lt;a href="https://gist.github.com/anonymous/5243199"&gt;Pypi&lt;/a&gt;.  (As an aside: here's a &lt;a href="http://randomfoo.net/2013/12/08/pythonista-and-ios-automation"&gt;handy collection of Pythonista snippets and links&lt;/a&gt;).  Modules with binary dependencies -- such as the perforce api -- are off-limits; I'm not sure it it would be possible to use .pyd's that were properly compiled for iOS or if the security sandbox won't allow arbitrary binary code at all.  &lt;/p&gt;
&lt;p&gt;All in all, it's pretty cool stuff for any Pythonerd.  My big project right now is a touch based inteface on the iPad to control a &lt;a href="http://www.dexterindustries.com/BrickPi/"&gt;BrickPi&lt;/a&gt; Mindstorms robot, but at some point I think an asset-database / issue tracker client on the iPad would be a handy tool for our production team .  Pretty cool for $6.99!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 27 Jul 2014 13:07:00 -0700</pubDate><guid>tag:,2014-07-27:Pythonistas-need-Pythonista!.html</guid></item><item><title>Pipeline book out in Japan (!)</title><link>/Pipeline-book-out-in-Japan-(!).html</link><description>&lt;p&gt;I just heard that &lt;a href="http://www.borndigital.co.jp/book/5160.html"&gt;the Production Pipeline book is out in Japan&lt;/a&gt; as of today. Wowsers!  &lt;/p&gt;
&lt;p&gt;This is actually my second time being published in Japan. I also contributed a chapter to &lt;a href="http://webcatplus.nii.ac.jp/webcatplus/details/book/25610405.html"&gt;97 Things Every Game Creator Should Know.&lt;/a&gt;  But still. Japan. I mean...    &lt;/p&gt;
&lt;p&gt;PS:  The books is still up for sale on Amazon:  And it's also on the &lt;a href="http://techartsurvival.blogspot.com/p/bookstore.html"&gt;Tech Art Bookstore&lt;/a&gt; page.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 11 Jul 2014 21:57:00 -0700</pubDate><guid>tag:,2014-07-11:Pipeline-book-out-in-Japan-(!).html</guid></item><item><title>Handy link: Python string format cookbook</title><link>/Handy-link:-Python-string-format-cookbook.html</link><description>&lt;p&gt;If you're like me and addicted to using the old-school percent-symbol based string format, the newer bracket-based formatting is probably a bit mysterious. The &lt;a href="https://docs.python.org/2/library/string.html#format-specification-mini-language"&gt;python docs&lt;/a&gt; certainly don't help, they seem to be written for C programmers on meth (a help document entitled 'string format specification mini language' does not scream 'usability' to me, at any rate).   &lt;/p&gt;
&lt;p&gt;So, many props to Marcus Kazmierczak for his handy &lt;a href="http://mkaz.com/2012/10/10/python-string-format/"&gt;Python String Formatting Cookbook&lt;/a&gt; page. It's already saved me a ton of profanity. Here's to elevating the discourse of the internet!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 09 Jul 2014 23:51:00 -0700</pubDate><guid>tag:,2014-07-09:Handy-link:-Python-string-format-cookbook.html</guid></item><item><title>Save The Environment 2: I am the .Egg Man</title><link>/Save-The-Environment-2:-I-am-the-.Egg-Man.html</link><description>&lt;p&gt;In my last, bumper-sticker-laden post I offered to share a little bit about the way I pack up my tools for users.  This time I'll try to actually describe the process.  &lt;/p&gt;
&lt;p&gt;After a all the buildup, I wish I could make this sound more high tech and impressive. Basically, I just pack up what I have and send it all out to my users in a big ol' zip file.  The zip ends up on their Maya's PYTHONPATH, and gives them exactly the same stuff I had when I created the zip.  That's kind of it.  It's basically a simplified version of a &lt;a href="http://mrtopf.de/blog/en/a-small-introduction-to-python-eggs/"&gt;python egg&lt;/a&gt;; however since I'm distributing an entire ecosystem in one shot I've opted to do the packaging myself instead of relying on &lt;a href="https://pypi.python.org/pypi/setuptools"&gt;setuptools&lt;/a&gt; and all of its complex dependency management arrangements.  &lt;/p&gt;
&lt;p&gt;Simple as it is, this system has saved me a huge amount of time and energy over the last few years. It's been a long time since I've had to worry about a mysterious import failure or the wrong version of a module.  Simplicity and robustness are very important, especially in the foundation of a pipeline. Of course, they don't always make for the most engaging blog posts  But I'll do what I can, even if it means resorting to some pretty lame egg puns.  &lt;/p&gt;
&lt;h2&gt;You can't make an omelette without...&lt;/h2&gt;
&lt;p&gt;There actually are some details worth discussing, but before I get into them, I should talk about why this works for the special case of Maya tools - and why it might not work as well for other forms of application development.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://gabrielutasi.com/copyright/gabrielutasi/052307.egg.gif"&gt;&lt;img alt="" src="http://gabrielutasi.com/copyright/gabrielutasi/052307.egg.gif" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My primary problem - the thing I worry most about - is &lt;strong&gt;making sure that all my users are running the same code at the same time&lt;/strong&gt;.  Maya tools are hard enough - it's tough to really nail things down when your data structures are just lying around in the scene where users can poke at them.  Between that and the inexorable tick-tock of the game development  clock, I've gotten very resistant to  debugging problems I already solved a week or a month ago and which are only showing up because Jane/Joe Artist doesn't like downloading the latest tools.  &lt;/p&gt;
&lt;p&gt;Similarly, it needs to be &lt;strong&gt;hard for an end user to delete or mangle vital stuff&lt;/strong&gt;.  I've had artists at a former company who decided to "speedup their startup time" by deleting the file that downloaded the latest tools - a fact which only came to light when their out-of-date data started bringing down nightly builds.  Most users have a few scripts or tools of their own, but I'm not keen on having unvetted stuff from the intenet being dumped into the same folder where all my tools live - there are lots of ways that can go wrong.  &lt;/p&gt;
&lt;p&gt;Another thing that's also important is that the system needs to be &lt;strong&gt;clean&lt;/strong&gt;: it has to be easy to install and to uninstall, and easy for users to switch between toolsets.  I've got to support multiple teams in house and outsources and I don't want to worry about micromanaging hundreds of files on other people's disks.  &lt;/p&gt;
&lt;p&gt;The last  thing I need  to do is to keep this system &lt;strong&gt;independent of our internal source control&lt;/strong&gt;. Source control's real job -- managing change over time -- is hard enough.  Using it as a cheapo distribution service is pushing it into a role it's not intended for.  For one thing, many users have reasons (sometimes good, sometimes bad) for opting out of the daily sync ritual.  I don't want my users dropping out of sync with the rest of the team on purpose or by accident -- but I'm also leery of forcing them to sync at a time they didn't choose, since I don't know what they're up to or what other people may have checked in.  Plus, we don't always give outsourcers direct access to source control and I don't want to have to maintain different systems in and out of house.  &lt;/p&gt;
&lt;p&gt;Besides,  I want to be able to use source control selfishly, to make my own job easier.  I want to track my development and have the ability to debug or roll back or branch as I need while working, without worrying that checking in the wrong file will bring my whole team to a halt.  I once had a team of 80 artists brought to a screeching halt by a guy who checked in a maxScript file that was auto-synced by everybody in the building. Unfortunately, he did it from a unicode text editor - and Max hates unicode in maxScript. The auto-sync, keep-everybody-current system gave everybody the crashing file straight from his incautious checkin -- and, of course, it broke their auto-syncing as well as killing their Maxes. Since then I've been pretty leery of using source control to get things into users' hands.  &lt;/p&gt;
&lt;h2&gt;How to lay an egg&lt;/h2&gt;
&lt;p&gt;It's the sum of all these considerations that gives rise to the method I use -- which is, as I said, just zipping up a complete environment and distributing that directly to users via a net share or an http server.  &lt;/p&gt;
&lt;p&gt;The zip comes with a userSetup.py that checks the shared drive for newer versions and grab it if needed and then adds the zip file to the user's PATH.  &lt;em&gt;Rocket Science FTW!&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;This system satisfies most of my key concerns at a shot:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It's all one piece (well, two if you count _userSetup.py). _That means that every user has exactly the same code - and there are no out-of-date .pyc files lying in wait to confuse things.&lt;/li&gt;
&lt;li&gt;Keeping people up to date is automatic&lt;/li&gt;
&lt;li&gt;It can be delivered to a user's personal maya directory - no need to touch the base Maya install&lt;/li&gt;
&lt;li&gt;It's outside of source control&lt;/li&gt;
&lt;li&gt;It's easy to adapt for multiple projects.  userSetup can check an environment variable to decide between multiple zips, and the zips can coexist happily with each other.&lt;/li&gt;
&lt;li&gt;It's trivial to remove: there are no permanent alterations to the local filesystem or the maya installation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most complicated bit - and "complicated" here is a pretty relative term - is making sure that the zip file is exactly equivalent to the folder structure I use when I'm developing. My project folder looks more or less like this:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-1Z9srlWTbMA/U7YY-sLus2I/AAAAAAABIZI/7f4yysrcJA4/s1600/folders.png"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-1Z9srlWTbMA/U7YY-sLus2I/AAAAAAABIZI/7f4yysrcJA4/s1600/folders.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Most of this is what you'd expect: the .py files are modules, and the folders with the little dots in them are python packages. As long as my project folder is on the Python path, these are all available for import in the usual way.  The mildly interesting bit are the folders highlighted in green; those are external modules like PyMySql and Perforce, which I keep separately so I can manage the legal mumbo-jumbo that comes with redistributing and licensing.  In this example 'external' is not a package (note the blue parent folder - my IDE paints them blue if they aren't on the python path) so none of these packages are going to be on the python path or available for import without a smidge of extra work.  &lt;/p&gt;
&lt;p&gt;On my own machine, where I'm running from loose files, I add project to my Python path using the wonderful, and often overlooked standard library module site.  site is an alternative method of managing your Python search path - instead of appending paths onto sys.path, you can add directories using using &lt;a href="https://docs.python.org/2/library/site.html"&gt;site.addsitedir()&lt;/a&gt;.  The truly excellent feature of site, though, that it's data-driven: when you add a directory with site.addsitedir(), the module will search the folder for text files with the .pth extension and then add any directories specified there as well.   That UL_maya.pth file down near the bottom of the picture is my .pth file: it includes entries for my external modules so that they are automatically included when my project folder is added to the path.  &lt;/p&gt;
&lt;p&gt;Unfortunately, site does not know how to deal with pth files inside a zip file.  So, my startup code includes a little shim which duplicates the functionality of addsitedir. Luckily it's pretty simple:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
&lt;span class="sd"&gt;ul.paths.py&lt;/span&gt;

&lt;span class="sd"&gt;mimics the site module: process .pth files identically for zip and loose file distributions  &lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zipfile&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_pth_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;yield&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_pth_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
                &lt;span class="k"&gt;continue&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
                &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  
                &lt;span class="k"&gt;continue&lt;/span&gt;  
            &lt;span class="n"&gt;new_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{0}/{1}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;new_path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FolderSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.pth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
                    &lt;span class="n"&gt;clean_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roots&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
                    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ZipSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ZipFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;all_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namelist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;all_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;pth_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_names&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.pth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pthfile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pth_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;local_pth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pthfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pthfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;U&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;local_pth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include_site_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
&lt;span class="sd"&gt;    for every .pth file in or under each root, process the pth file  &lt;/span&gt;
&lt;span class="sd"&gt;    in the same way as site.addsitedir()  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bootstrap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path shim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_root&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_zipfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;ZipSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;FolderSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This way, adding the whole environment just requires calling include_site_files(). Under the hood the Processor classes will read the .pth files and process them the same way site.addsitedir does: adding named folders to the python path, ignoring comments, and executing imports.  &lt;/p&gt;
&lt;p&gt;I don't use that auto-import functionality right now but it would work nicely if you wanted to create a self-registering plugin system where each plugin was a zip of its own.  If you were feeling adventurous, you could bootstrap your whole Maya toolset by adding an import statement to the end of a .pth file in the zip.  As I said, that's not what I do right now -  I currently call my main bootstrap routine from userSetup.py,  since I'm habitually averse to relying the side effects of imports for important jobs.  &lt;/p&gt;
&lt;h2&gt;If (eggs) in one_basket:&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://stylebook-p.s3.amazonaws.com/prod/assets/5018bfdd15121/5018bfdd15121-large.jpg"&gt;&lt;img alt="" src="http://stylebook-p.s3.amazonaws.com/prod/assets/5018bfdd15121/5018bfdd15121-large.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's userSetup.py that provides the  actual link between the zip file and a running copy of Maya. I like to keep it as simple as I can, since it's the hardest part of the system to update.  All it really needs to do is download the latest zip file (from a shared network drive  or via http)  and shim it in with site.addsitedir.  Here's a very simple example:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;This is an example userSetup.py. It should be copied into  &lt;/span&gt;
&lt;span class="sd"&gt;one of the  user&amp;#39;s MAYA_SCRIPT_DIR folders (typically, the one for the   &lt;/span&gt;
&lt;span class="sd"&gt;current version, like &amp;#39;2014x64&amp;#39;,  but it works in the generic one as well)  &lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;site&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;ZIP_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAYA_ZIP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mayatools.zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_startup_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_globals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;tools_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAYA_DEV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tools_root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
         &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addsitedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expandvars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tools_root&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;script_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAYA_SCRIPT_PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;script_dirs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;tools_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ZIP_NAME&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tools_root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
                &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addsitedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tools_root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
                &lt;span class="k"&gt;break&lt;/span&gt;  
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ul.bootstrap&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;bootstrap&lt;/span&gt;  
    &lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_globals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;_startup_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  
    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;_startup_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll note that nothing is really going on here: just download the zip, add it to the path, and call the bootstrap module. End of story.  &lt;/p&gt;
&lt;p&gt;This is because you want to keep all the real work inside your bootstrap module. If you try to do anything fancy in userSetup itself, you have to worry about version drift: what happens if the contractor machine in the corner gets turned on after a year of downtime, with a userSetup that's many versions behind?  Moreover, you have no way of preventing users from messing with userSetup for their own reasons: if the code is simple, it's much less likely to be broken by an adventurous artists.   &lt;/p&gt;
&lt;p&gt;The bootstrapper module itself is where all of the complex work takes place:  it knows how to unpack the binary resources like plugins or icons from the zip file if they have changed,  how to turn on persistent scriptJobs , and how to load menu items -- all the zillions of things you want to do when you set up you environment. Since it provides a single entry point, it's a great opportunity to put some order and discipline into your setup process: it's far safer than importing dozens of tools or modules in a long userSetup that's not versioned or updated centrally.  &lt;/p&gt;
&lt;p&gt;You might notice that all the information needed by userSetup is stashed into environment variables. That makes it easy to boot different environments by launching Maya with the right settings; it's easy to give the users batch files which launch the correct versions of the tools by just setting the variables correctly. This has the nice side effect of supporting nonstandard locations transparently - there's always that one artist who insists on keeping things on an X: drive to consider.  It's easy to see how this could be done with config files rather than env vars, the logic is so simple that the details hardly matter.  &lt;/p&gt;
&lt;p&gt;One evolutionary step forward I haven't used in production is to move the userSetup / zip pair to a &lt;a href="http://techartsurvival.blogspot.com/2014/01/mayas-mildy-magical-modules.html"&gt;Maya module&lt;/a&gt;.  That would allow for more complex arrangements such as a shared core environment with branch or project specific additions; it would also mean that toolset management would be done by enabling or disabling modules rather than swapping environment variables.  The main hassle would be the fact that a user could simultaneously enable more than one toolset and get random results, since you could never be sure which version of a given module you were getting. It might work better as an outsource-friendly mod than as a replacement for the variable-swapping setup.  &lt;/p&gt;
&lt;h2&gt;Hot times in the hen house&lt;/h2&gt;
&lt;p&gt;The zipped environment is created by a simple Python build program.  There's not much magic here either.  The build script runs unit tests and aborts the packaging process if they fail.  If the tests pass, the builder gets the latest versions of any external resources (like icons, or binary plugins), and strips out some stuff like unit tests that doesn't need to get to the users.   I add a little bit of metadata -- basically, a text file -- to the zip so I can quickly find out which distribution is running; this is a great way avoid those headsmacking "I fixed that bug a week ago, but user X hasn't restarted Maya in two weeks" mysteries.   &lt;/p&gt;
&lt;p&gt;One nice refinement that we discovered almost by accident is using the &lt;a href="https://docs.python.org/2/library/py_compile.html"&gt;py_compile &lt;/a&gt;module to pre-compile the whole shebang before packing.  Our system ships only pyc files instead of pys.  This speeds up load times and slims down the zip file by a noticeable amount. However the most important thing it does is make sure that every module - even those with no unit tests, which are alas too numerous - is at least minimally importable. py_compile will complain if it encounters a module with a syntax error that cannot be compiled. Over the years this has saved me countless small humiliations by making sure that stupid typos and oversights don't result in a busted Maya.  &lt;/p&gt;
&lt;p&gt;These days I use a little python program which polls my GitHub repositories for changes and tries to create a new build when a checkin is pushed to the master branch.  The server handles running multiple builds for different Maya versions: When Autodesk rev'ed the version of Python inside Maya, it meant that we needed different .pyc's for different versions of Maya. For most of the last several years, though,  I simply used a zip script from a command line or as an external tool in my IDE and that answered fine for most purposes.  Moving to a server is just a way of making it more painless for a team to do the right thing automatically instead of appointing one person as 'build master' and making them sync and push the button to start a build.  _Extra credit: Can you guess who the build master was, and why he decided to write the server? _  &lt;/p&gt;
&lt;h2&gt;Hatchlings&lt;/h2&gt;
&lt;p&gt;One problem I don't have to solve for this application - but one which looms very large in the setuptools-distutils-easy_install end of Pythonland - is dealing with a diversity of OS's and hardware.  I'm happy not to try to deal with things like recompiling a slew of C extension modules for DEC-Alpha chips running OS/2 or whatever. I've only got Windows users currently (though pretty much everything I write works on OSX, since I often develop on my laptop).  This removes, for me, the primary appeal of the traditional python distribution pipeline, which is the option of automatically creating whatever esoteric binaries you need just by typing a few lines at the command prompt.  &lt;/p&gt;
&lt;p&gt;The price for not letting users compile on their machines is that I have to pre-package the right binaries. To the extent that I can, I end-run around the problem by using pure python modules in preference to binary alternatives, such as using &lt;a href="https://github.com/PyMySQL/PyMySQL"&gt;PyMySql&lt;/a&gt; in preference to MySQLdb, or elementTree instead of &lt;a href="http://lxml.de/"&gt;lXml&lt;/a&gt;. Inevitably, this does give away some performance (rarely so much that I'm bothered by it) but it hugely enhances portability.  The unavoidable exceptions are things like Maya plugins or the Perforce API, both very finicky about OS and bit-depth; these have to be distributed as part of my zip files and extracted at startup time.  The bootstrapper module includes a manifest which tells it which files to use for which Maya/OS/bit-depth combination, and uses that info to makes sure that things get delivered to the right place.   &lt;/p&gt;
&lt;p&gt;The only complication I've run into is that a user (often, me) is may be running multiple maya sessions, and a later one may want to unpack a new version of a binary plugin while an older session is still using a previous version. Unsurprisingly, you can't overwrite the old one since Maya is using it. I haven't quite figured out what to do in that situation, beyond displaying an error dialog and suggesting that the user restarts all of the Maya instances using the same plugin.  For the time being the overlap between tool changes and multiple Maya sessions is rare enough that I tolerate it. It would be possible to dump things into a temp directory in that case, but honestly it sounds like overkill even to me.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stylebook-p.s3.amazonaws.com/prod/assets/4ff82077d338e/4ff82077d338e-large.jpg"&gt;&lt;img alt="" src="http://stylebook-p.s3.amazonaws.com/prod/assets/4ff82077d338e/4ff82077d338e-large.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Counting your chickens&lt;/h2&gt;
&lt;p&gt;So, that's kind of it. It's not very sexy but it's been extremely useful for me over the last 4 years - the amount of mystery which this system removed from my life is uncountable.  Because the actual code I use is pretty tied up with work-specific problems, I have not ventured to make a cleaned up, genericised version for public consumption so far, though if there were a lot of interest I could probably whip up a cleanroom version.  &lt;/p&gt;
&lt;p&gt;Hope other folks find this one useful. I know it's certainly ~~accompanied ~~saved my bacon !  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 05 Jul 2014 23:00:00 -0700</pubDate><guid>tag:,2014-07-05:Save-The-Environment-2:-I-am-the-.Egg-Man.html</guid></item><item><title>Binary bonanza!</title><link>/Binary-bonanza!.html</link><description>&lt;p&gt;Here's a &lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;very complete source for a variety of python package binary distributions&lt;/a&gt;, covering a pretty broad variety of platforms, python versions and bit depths.  A good page to bookmark next time your scrounging for a rare extension module you can't compile.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 26 Jun 2014 20:21:00 -0700</pubDate><guid>tag:,2014-06-26:Binary-bonanza!.html</guid></item><item><title>mGui updates</title><link>/mGui-updates.html</link><description>&lt;p&gt;For anybody whos been following the mGui Maya GUI construction kit posts, I've added a few fixes and tweaks to the GitHub project in the last couple of weeks:&lt;br /&gt;
&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/theodox/mGui/blob/master/mGui/progress.py"&gt;mGui.progress&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The progress module wraps Maya's progressBar command for mGui style coding of progress bars.   &lt;/p&gt;
&lt;p&gt;There are two classes in the module;  &lt;strong&gt;ProgressBar &lt;/strong&gt; is the generic version and &lt;strong&gt;MainProgressBar &lt;/strong&gt;always points at Maya's main progress bar.  Both classes have _start(), update() _and _end() _methods instead of Maya's clunky _cmds.progressBar(name, e=True, beginProgress=1) _ and so on.  They also both have an iter method, which will loop over a generator expression and update the progress bar for each yield then pass along the value. This allows simple idioms like:  &lt;/p&gt;
&lt;p&gt;``  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGui.progress&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MainProgressBar&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="c1"&gt;# pretend this is as long, slow function...  &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

&lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MainProgressBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_files&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;each_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="c1"&gt;# here&amp;#39;s where you do something with the results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;``  &lt;/p&gt;
&lt;p&gt;So you can update the progress bar without unduly intertwining the GUI update and the program logic.  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/theodox/mGui/blob/master/mGui/menu_loader.py"&gt;mGui.menu_loader&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The menu_loader module will create menus from a &lt;a href="http://pyyaml.org/wiki/PyYAMLDocumentation"&gt;YAML&lt;/a&gt; data file.  It does a little bit of introspection to figure out how to create the items and attach their handlers to functions. This makes it easy to set up a menu with several items from a single setup routine.&lt;/p&gt;
&lt;p&gt;The menu data is a text-based YAML file that looks like this:  &lt;/p&gt;
&lt;p&gt;``  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sx"&gt;!MMenu  &lt;/span&gt;
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;UndeadLabs&lt;/span&gt;  
    &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Undead&lt;/span&gt; &lt;span class="n"&gt;Labs&lt;/span&gt;  
    &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="o"&gt;-&lt;/span&gt; !&lt;span class="n"&gt;MMenuItem&lt;/span&gt;  
            &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;About&lt;/span&gt;  
            &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;About&lt;/span&gt; &lt;span class="n"&gt;Undead&lt;/span&gt; &lt;span class="n"&gt;Labs&lt;/span&gt;&lt;span class="c"&gt;...  &lt;/span&gt;
            &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &amp;quot;&lt;span class="n"&gt;About&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;UndeadLabs&lt;/span&gt; &lt;span class="n"&gt;tool&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&amp;quot;  
            &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aboutDialog&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;

        &lt;span class="o"&gt;-&lt;/span&gt; !&lt;span class="n"&gt;MMenuItem&lt;/span&gt;  
            &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RemoteDebugger&lt;/span&gt;  
            &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;Remote&lt;/span&gt; &lt;span class="n"&gt;Debugger&lt;/span&gt;  
            &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;Stop&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;debugger&lt;/span&gt;  
            &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remoteDebug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_debugger_dialog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;``  &lt;/p&gt;
&lt;p&gt;And loading the menu is as simple as:  &lt;/p&gt;
&lt;p&gt;``  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mGui.menu_loader&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;loader&lt;/span&gt;  
&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path/to/undeadlabs.YAML&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;``   &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/theodox/mGui/blob/master/mGui/scriptJobs.py"&gt;mGui.scriptJobs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The scriptJobs module adapts the event model for use with scriptJobs. A ScriptJobEvent is a derivative of Event which allows you to hook multiple handlers to a single scriptjob (in the same way that the other Event classes allow for multicast delegates):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGui.scriptJobs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_selected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;sj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptJobEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SelectionChanged&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;sj&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;print_selected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As with all the mGui Event classes, you can add multiple handlers to  single event:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sj += some_other_function()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The module also includes named subclasses to simplify setup. That way you can do things like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;closing_sj = RecentCommandChanged()  
closing_sj += close_handler
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is a bit nicer and less typo prone if you use an autocompleting IDE.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 24 Jun 2014 22:10:00 -0700</pubDate><guid>tag:,2014-06-24:mGui-updates.html</guid></item><item><title>From the annals of bug subtlety</title><link>/From-the-annals-of-bug-subtlety.html</link><description>&lt;p&gt;... comes an object lesson in why it's nice to have a debugger.&lt;/p&gt;
&lt;p&gt;I'm porting a biggish python codebase to support multiple OSs  and maya versions.  As I move things around I try to use the opportunity to shore up test coverage.  And it feels like the most boring chore imaginable, until something like this crops up.&lt;/p&gt;
&lt;p&gt;I've got an exporter framework that I share between projects and files, and when I was moving from 2011- only to multiple version.  It's important code, so it's tested - but the test is really dumb: it creates a test scene, imports the test framework, and calls one function. But running the tests in 2014 never works - even though I can manually execute the exact steps in a regular copy of maya and all is well.&lt;/p&gt;
&lt;p&gt;So I threw it under the debugger -- &lt;a href="http://www.jetbrains.com/pycharm/"&gt;PyCharm FTW! &lt;/a&gt; -- and started stepping through. No dice, everything seemed OK but still the test failed: it could not find my test objects. Finally, in desperation, I started stepping though the test and issuing an ls() after every step... and I found that the break wasn't caused by running code - it was caused by importing my module.  I didn't call it - just &lt;em&gt;imported&lt;/em&gt; it.  WTF?&lt;/p&gt;
&lt;p&gt;It turns out that _importing PyMel was wiping my test scene _in 2014! The tests all run under maya.standalone, and the bug only shows up there, which is why just doing it by hand in maya wasn't showing the same symptoms.&lt;/p&gt;
&lt;p&gt;Here's my repro case:&lt;/p&gt;
&lt;p&gt;import maya.cmds as cmds&lt;/p&gt;
&lt;p&gt;cmds.polyCube()&lt;/p&gt;
&lt;h1&gt;[u'pCube1', u'polyCube1']&lt;/h1&gt;
&lt;p&gt;cmds.ls(type='transform')&lt;/p&gt;
&lt;h1&gt;[u'front', u'pCube1', u'persp', u'side', u'top']&lt;/h1&gt;
&lt;p&gt;import pymel.core as pm&lt;/p&gt;
&lt;p&gt;cmds.ls(type='transform')&lt;/p&gt;
&lt;h1&gt;[u'front', u'persp', u'side', u'top']&lt;/h1&gt;
&lt;p&gt;This is a 100% repro in maya.standalone - but &lt;em&gt;not&lt;/em&gt; in GUI maya, where the bug does not occur.Is this true for everybody else ?   The workaround is to import pymel earlier so that the destruction doesn't affect anything important. &lt;/p&gt;
&lt;p&gt;But... ouch!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 20 Jun 2014 11:39:00 -0700</pubDate><guid>tag:,2014-06-20:From-the-annals-of-bug-subtlety.html</guid></item><item><title>I think this does not count as a meme gif :)</title><link>/I-think-this-does-not-count-as-a-meme-gif-:).html</link><description>&lt;p&gt;&lt;a href="http://ft.trillian.im/358c43ab64c4c31c809b49887dda431711fc5c26/6q3MtgQ520CBZbqz6G6Sum7r2HTDr.jpg"&gt;&lt;img alt="" src="http://ft.trillian.im/358c43ab64c4c31c809b49887dda431711fc5c26/6q3MtgQ520CBZbqz6G6Sum7r2HTDr.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 14 Jun 2014 12:34:00 -0700</pubDate><guid>tag:,2014-06-14:I-think-this-does-not-count-as-a-meme-gif-:).html</guid></item><item><title>Chromosaurus!</title><link>/Chromosaurus!.html</link><description>&lt;p&gt;This 1985 short from Pacific Data Images (&lt;a href="http://en.wikipedia.org/wiki/Pacific_Data_Images"&gt;the X chromosome in the DNA of Dreamworks Animation&lt;/a&gt;) was extremely popular in the late 80's / early 90's CG compilation VHS market, frequently accompanied by trippy electronica.   &lt;/p&gt;
&lt;p&gt;Of special note: this is well before the the popularization of our mesh skinning techniques: all the moving parts are jointed, and the ripples in the tail are all damped sine waves instead of skeletal animation.  I'm pretty sure these aren't raytraced, it looks to me like a tweaked reflection map.  &lt;/p&gt;
&lt;p&gt;One of the saddest generation gap experiences of my life is trying to explain to my 14 year old son, who's never known a world without casually photoreal CG, why this set a generation of nerdly hearts afire.  At least he appreciated the soundtrack.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 06 Jun 2014 21:54:00 -0700</pubDate><guid>tag:,2014-06-06:Chromosaurus!.html</guid></item><item><title>Save the environment!</title><link>/Save-the-environment!.html</link><description>&lt;p&gt;&lt;a href="https://plus.google.com/112207898076601628221"&gt;+Rob Galanakis&lt;/a&gt;  posted this on Google+, and as I started to reply I realized this would be a useful thing to put out to a wider audience.  Or maybe useful isn't the right word - it's just something that bugs me so I want to bloviate about it.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey +Cory Mogk , +Brad Clark, +Steve Theodore , and whoever else in #techart . Has anyone figured out a viable model for reusing Python libraries in Maya, like other Python applications with pip/virtualenv/requirements.txt do? Is there a conversation anywhere?﻿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The short answer to Rob's question is : I've tried to go this route, but I couldn't get a virtualenv-based approach to match for my needs.   For the long answer, read on...  &lt;/p&gt;
&lt;h2&gt;If You're Not Outraged, You're Not Paying Attention&lt;/h2&gt;
&lt;p&gt;Like &lt;a href="http://lucumr.pocoo.org/2014/1/27/python-on-wheels/"&gt;a lot of people&lt;/a&gt;, I'm pretty unhappy about &lt;a href="http://www.simplistix.co.uk/presentations/python_package_management_08/python_package_management_08.pdf"&gt;the state of python environment management&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.faithvillage.com/files/galleries/acf1e1575cba5c2dcbb9966017bab1622c3bfee9-7aaec91bedc07579a475225ff6467f07/thumbs/acf1e1575cba5c2dcbb9966017bab1622c3bfee9-7aaec91bedc07579a475225ff6467f07-hero_image-resize-260-620-fill.jpg"&gt;&lt;img alt="" src="http://www.faithvillage.com/files/galleries/acf1e1575cba5c2dcbb9966017bab1622c3bfee9-7aaec91bedc07579a475225ff6467f07/thumbs/acf1e1575cba5c2dcbb9966017bab1622c3bfee9-7aaec91bedc07579a475225ff6467f07-hero_image-resize-260-620-fill.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There's no dependable, low-maintenance way for people to distribute things -- or to cleanly install things that depend on other things. Even the best tools are wonky, jacked up scaffolding on layers of older, crummier code.  &lt;/p&gt;
&lt;p&gt;The boundaries of any particular piece of Python are porous to begin with, both because of cross imports and also python's magical morphing and monkey patching abilities - but the messy state of the distribution ecosystem makes things far worse than they should be. Figuring out how to correctly set up a new module in this ambiguous environment is treacherous. It's not for nothing that the "easy" installation tools, pip and easy_install between them have 17,000+ questions on StackOverflow!  &lt;/p&gt;
&lt;p&gt;The typical &lt;a href="http://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows"&gt;easy_install / pip route&lt;/a&gt; is tolerable, more or less, if you're coder, and you live in a *nixy everybody-is-a-coder and everybody-has-a-compiler environment. When you're busy experimenting with different frameworks and shiny new toys that show up on &lt;a href="https://pypi.python.org/pypi"&gt;the cheeseshop&lt;/a&gt;, it's great to get all that cool free stuff with just a a few keystrokes.  But this is "easy" only in the sense that hand editing config files to set up a web server is "easy": if you're technically confident, willing to debug anomalies, and have enough background knowledge to sort of the hiccups you'll be fine. But that's not "easy" for 99% of humanity, that's easy for hardcore nerds.   &lt;/p&gt;
&lt;p&gt;The Python distribution ecosystem just isn't... well... Pythonic.  It embarrassingly fails the &lt;a href="http://legacy.python.org/dev/peps/pep-0020/"&gt;pythonic principle&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    There should be one-- and preferably only one --obvious way to do it.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;since there are &lt;a href="http://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2"&gt;at least 4 big toolsets&lt;/a&gt; (setuptoools, distutils, distribute and distribute 2) and none of them is perfect. All rely on a mixture of static data and scripts that react to the state of your local machine, so installing stuff can provide different results from different orders of operation or different environment settings.  It also fails both  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Simple is better than complex.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Complex is better than complicated.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since the operations you need to perform are often obscure and obscurely interdependent.  Even on a mac, which (being *nixy) should be a much friendlier environment for the live-install approach, I've had serious nightmares -- &lt;a href="http://techartsurvival.blogspot.com/2013/12/and-i-thought-we-had-it-bad.html"&gt;trying to set up Django was like a &amp;amp;!*^#&amp;amp;^$ Kafka novel.&lt;/a&gt;  To some degree my bad luck there reflects failure to live up to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    In the face of ambiguity, refuse the temptation to guess.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because many of the problems come from a welter of competing installation scripts and tools that are constantly trying to make things "easy" for one application in ways that make them harder for others.  &lt;/p&gt;
&lt;p&gt;To be fair, the Python universe is so diverse that it's almost beyond the possibility of rational management : a big product like &lt;a href="http://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-4.2-to-4.3/updating-package-dependencies"&gt;Plone &lt;/a&gt;can involve literally hundreds of dependencies including a mix of python and compiled code that has to run on dozens of platforms.  Even if 99% of them install flawlessly, the remainders still add up to (at best ) a long, frustrating afternoon of  head-scratching, doc-reading forensics.  It's DLL hell all over again.  &lt;/p&gt;
&lt;p&gt;It's enough to make you long for a blankety-blank InstallShield wizard.   &lt;/p&gt;
&lt;p&gt;On the receiving end, things are just as confusing and intimidating.  Because Python is so multi-platform, lots of packages expect you to be able to compile your own binaries, which is rarely a trivial undertaking even for coders (at least, for people who don't do much non-python programming) and is petrifying for end users. More dangerous, though, is the fact that not everybody does a great job of tracking their own dependencies or knowing their own requirements.  If package X will works with version 2.1 of package Y, but not with 2.2  upgrading Y to 2.35 will break X.  And  of course Y 2.35 might have come along after the author of package X has moved on to other projects.  And Y 2.2 may be required by package Z, and get upgraded automatically when you grab Z to check it out.  &lt;/p&gt;
&lt;p&gt;All of this puts us in the rotten position where installing something new has the potential to break existing code. The user is the one who has to figure that out and work around it, and the fix is often "you can't do this and that in the same install unless you write a patch yourself."   &lt;/p&gt;
&lt;p&gt;&lt;a href="https://pip.readthedocs.org/en/1.0.1/"&gt;pip&lt;/a&gt; and &lt;a href="http://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2"&gt;buildout&lt;/a&gt; do a heroic job of trying to organize all this chaos. However the underlying problem is _extremely _hard, because the foundations are shaky. You've got decades' worth of code, full of shadowy, hard-to-track dependencies, made by hundreds of different hands with widely varying levels of care and forethought.  The  requirements for packages may not even be clear to their authors: do you know every nuance of the version differences in the packages you rely on? Do you always know when you're exploiting a behavior that the developers don't like and want to change?   &lt;/p&gt;
&lt;p&gt;Hell, I cannot honestly say that for my &lt;em&gt;own&lt;/em&gt; code all the time.  &lt;/p&gt;
&lt;p&gt;The short version of all this: being able to install stuff is not the same as maintaining a healthy environment.  Just ask all your older relatives whose machines sport seventeen different internet toolbars.  &lt;/p&gt;
&lt;h2&gt;Habitat Crisis!&lt;/h2&gt;
&lt;p&gt;If that all sounds bad... well, in the technical art / Maya context, it's &lt;em&gt;worse&lt;/em&gt;.  For a couple of reasons:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://rlv.zcache.com/habitat_for_two_manatees_bumper_sticker-r4dabf424d562476183df7d3644afd8f8_v9wht_8byvr_512.jpg"&gt;&lt;img alt="" src="http://rlv.zcache.com/habitat_for_two_manatees_bumper_sticker-r4dabf424d562476183df7d3644afd8f8_v9wht_8byvr_512.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, and most importantly, artist users are aren't going to accept a "real" command-line-and-text-file based system on their own, even if we had one. That means the TAs have to do it ~~automagically ~~remotely, which is a non-trivial tech challenge.  All too often 'remote installation' translates to 'send some poor sucker running around typing stuff for the artists while they everybody stands around waiting to get back to work.'   And wait till the next big update happens when somebody's on vacation; suddenly they're out of sync with the rest of the team and generating weird issues that are hard to debug. A first class ticket to 'It works on my machine' land!  &lt;/p&gt;
&lt;p&gt;All tech support is made more difficult by a diversity of environments: that's why console games are easier to make than PC games even though the underlying tech is the same.  Asking your artists to maintain their own Python ecosystem is like asking your teenage kids to clean their rooms: if they do it at all, it won't be done that well enough to justify the arguing you need to get it done at all. It's hard enough to get a big art team to stay in sync with simple stuff like 'always get latest in perforce' or 'set this environment variable'.   So... managing a complex programming environment?  &lt;/p&gt;
&lt;p&gt;In a shell window?  &lt;/p&gt;
&lt;p&gt;_Seriously? _  &lt;/p&gt;
&lt;p&gt;To some degree this is a moot point: no matter your preferences, you might not have the kind of access you need to use python's admin level tools anyway.  If you have to work with outsourcers, as I do,  you don't have the option of ~~forcing your users at gunpoint~~ empowering your users to manage their own setups. In a lot of places (China especially) you can't count on the end user having admin privileges (thus, no writing into the Maya directory) or always-on internet access (thus, no pip/easy_install).   &lt;/p&gt;
&lt;p&gt;Even if you have the rights, it might not be a good idea.  Outsource teams don't like having to reconfigure their whole workspace to accommodate a client who is here today and gone tomorrow. They want a clean, disposable, drop-in setup that they can turn on and off quickly.  A nice discrete footprint removes a lot of hassle from the relationship.  Done properly, it also saves a lot of remote support time and money.  Simplicity pays.  &lt;/p&gt;
&lt;p&gt;That's true even for pure in-house development: any company that supports multiple teams needs the same flexibility to swap out toolsets easily without going deep into machine- or user-level configuration. At work I have people hopping between two or three distinct toolsets during an ordinary day, and it's vital that they can do this without wasting time or thought on how things like setting setting all sorts of environment variables or remembering to launch Maya from the right command line.  &lt;/p&gt;
&lt;h2&gt;Save the Endangered Pythons!&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.kingsnake.com/blog/uploads/zombie.JPG"&gt;&lt;img alt="" src="http://www.kingsnake.com/blog/uploads/zombie.JPG" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All this adds up to a some pretty stark requirements for Maya python tools:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You want a Python environment that's uniform for all your users&lt;/li&gt;
&lt;li&gt;You want to be able to have more than one environment side by side&lt;/li&gt;
&lt;li&gt;You want your environments to be easy to distribute - and easy to delete &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the wider Python world, this would automatically make you think &lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt; is the most popular solution to the messy round-robin of versioning, dependency management, and distribution.  While it's all sorts of sophisticated under the hood (here's some &lt;a href="http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2011-reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv-4899496"&gt;details here&lt;/a&gt;) it's conceptually very simple: cut all the crap and just make a separate Python for every project, containing exactly what we need!  Throw in &lt;a href="http://www.dabapps.com/blog/introduction-to-pip-and-virtualenv-python/"&gt;pip &lt;/a&gt;- the best-of-a-bad-lot installer tool that makes installing new modules as good as it's likely to get - and you can quickly create and populate lots of clean environments and populate them. Or use &lt;a href="http://www.buildout.org/en/latest/"&gt;buildout &lt;/a&gt;to create precisely controlled setups that have exactly what you need this time.  It's brilliant, Gordian-knot-cutting solution that replaces the incredible complexity of package management tools --  albeit at the cost of lots of duplicated code on disk. Disk space, however, is far cheaper than debugging time and tech-support hand holding.  &lt;/p&gt;
&lt;p&gt;Unfortunately, I've never been able to figure out how to get a running Maya to use a virtualenv at runtime. The Maya application appears to be it's own python interpreter (you can verify this by checking _sys.executable _in your command window, or just by renaming mayapy.exe and noting that Maya still works fine).  Which means that virtualenv's main trick -- recursing up from the physical location of the python executable -- isn't going to work correctly.  We don't want to try copying Maya itself and all of it's zillions of dependencies  -- a hefty half-gigabyte or so --for every new project.  And even if we do, the licensing engine does actually care if you're running from the default install directory (at least, it's never let me get away with copying maya to a new location even on a licensed machine).  &lt;/p&gt;
&lt;p&gt;In a way, Maya already _is _it's own virtualenv . That's why you can have other versions of Maya running independently of other Pythons installed on your machine.  Which is nice and all  -- but no help for the problem of creating a cleanly isolated toolsets for your Maya users.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://rlv.zcache.com/our_product_use_sustainable_buzzwords_bumper_sticker-r2e739ef8d9874e7f90d354212bf488aa_v9wht_8byvr_324.jpg"&gt;&lt;img alt="" src="http://rlv.zcache.com/our_product_use_sustainable_buzzwords_bumper_sticker-r2e739ef8d9874e7f90d354212bf488aa_v9wht_8byvr_324.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After banging my head against this for a while - I'm &lt;a href="http://stackoverflow.com/questions/16678334/virtualenv-and-maya"&gt;not the only one who's tried it&lt;/a&gt; - I've switched to a tactic that has most of the same properties as the virtualenv but is more Maya-friendly.  I try to replicate the same level of isolation with a rather higher level of uniformity (OK, let's be honest here: I mean &lt;em&gt;fascistic control&lt;/em&gt;) over what my users get.  &lt;/p&gt;
&lt;p&gt;While I'm not convinced its the distribution system to end all systems, I'm fairly happy with it - it's definitely been the least troublesome, lowest maintenance setup I've administered over the years, and it's worked pretty reliably for me both in and out of house.  I'll describe it a soon-to-be-completed followup post.  &lt;/p&gt;
&lt;p&gt;In the meantime, allow me to say that looking at lots of bumper stickers while seeking funny graphics for your blog is a speedy way to dim your faith in humanity. &lt;em&gt;Not recommended.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://rlv.zcache.com/im_not_cynical_im_just_experienced_bumper_sticker-rf1ba55c5e6df4016859176f200d32d0f_v9wht_8byvr_324.jpg"&gt;&lt;img alt="" src="http://rlv.zcache.com/im_not_cynical_im_just_experienced_bumper_sticker-rf1ba55c5e6df4016859176f200d32d0f_v9wht_8byvr_324.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 03 Jun 2014 10:30:00 -0700</pubDate><guid>tag:,2014-06-03:Save-the-environment!.html</guid></item><item><title>Channeling Gerry Anderson</title><link>/Channeling-Gerry-Anderson.html</link><description>&lt;p&gt;Utterly off topic.  And brilliant.  This guy is totally channeling Gerry Anderson and Derek Meddings of Thunderbirds fame - not only is the home model animation work pretty cool, it's a pitch-perfect reproduction of the original aesthetic right down to the music choices and ponderous VO.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCXrNQKFtJYX63eJtUQz1jJA"&gt;Mr. Greg Martin&lt;/a&gt;, I salute you!  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 30 May 2014 10:00:00 -0700</pubDate><guid>tag:,2014-05-30:Channeling-Gerry-Anderson.html</guid></item><item><title>Your weekly moment of Python-is-awesome</title><link>/Your-weekly-moment-of-Python-is-awesome.html</link><description>&lt;p&gt;I stumbled across a cool little idea while working on a refactor of my python tools build system, and although it is not really ready for prime-time it's fun enough I had to share.  With a little bit of work you can &lt;em&gt;load Python modules directly over the web via http!&lt;/em&gt;  How cool is that?  &lt;/p&gt;
&lt;p&gt;Details  &amp;amp; code after the jump  &lt;/p&gt;
&lt;p&gt;In the past I've always gave users a userSetup.py which automatically downloads a zip file containing all the rest of my code from a net share. While this works quite well, the userSetup file itself is a bit of a weak link. Although it changed pretty rarely, it was a bit more complex than I liked. In an ideal world, the user setup would be just a couple of lines, highly resistant to breakage and easy to leave untouched for months or years.  All the changeable stuff should happen off in the ether, so users always get the latest hotness.  &lt;/p&gt;
&lt;p&gt;While pondering how to improve this, I was trolling Doug Hellman's invaluable &lt;a href="http://pymotw.com/2/"&gt;Python Module of the Week&lt;/a&gt; site and stumbled onto his discussion of &lt;a href="http://pymotw.com/2/sys/imports.html"&gt;custom Python module finders&lt;/a&gt;. Basically, a module finder is a class which you can register with python to tell it how to look for modules. The key word there is 'how', not where' -- a module finder can do anything it wants to find or create a module, as long as it has returns an object with a load_module method that python can use to actually pop the code into sys.modules. It's particularly cool because the process is &lt;em&gt;completely transparent&lt;/em&gt; to the calling code: if you call  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;import XXX&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;you'll get XXX, even if your custom finder/loader had to generate it by consulting the _I Ching _and waiting for the right phase of the moon.  &lt;/p&gt;
&lt;p&gt;That sounds like fun (jeez, my sense of fun has gotten pretty esoteric). So, I hacked up a highly experimental example of a module loader that will look on the web for a python module being served up via http and import it as if it were local.  &lt;/p&gt;
&lt;p&gt;Here's the first bit, the module finder which is in charge of looking for the code when somebody says 'import xxx':  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;web_shim.py&lt;/span&gt;

&lt;span class="sd"&gt;Exposes a custom module loader and importer which allow for download, cache and  &lt;/span&gt;
&lt;span class="sd"&gt;load of python modules stored on an HTTP server&lt;/span&gt;

&lt;span class="sd"&gt;To activate, add the class to sys.path_hooks:&lt;/span&gt;

&lt;span class="sd"&gt;    sys.path_hooks.append(WebFinder)  &lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;binascii&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    A custom module finder (background: http://pymotw.com/2/sys/imports.html)  &lt;/span&gt;
&lt;span class="sd"&gt;    that will find and load modules via http connections, as long as the  &lt;/span&gt;
&lt;span class="sd"&gt;    module file&amp;#39;s parent http path is on the system path&lt;/span&gt;

&lt;span class="sd"&gt;    The module file is downloaded to the users temp directory. When it changes, it  &lt;/span&gt;
&lt;span class="sd"&gt;    will be replaced with the latest version from the server. Returns a WebLoader  &lt;/span&gt;
&lt;span class="sd"&gt;    for the cached file.  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;CACHE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gettempdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path_entry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;path_entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path_entry&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CACHE_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;expanded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;target_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target_url&lt;/span&gt;  
            &lt;span class="n"&gt;dl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
            &lt;span class="n"&gt;crc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crc32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;  
            &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;  
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
                &lt;span class="n"&gt;disk_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
                &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
                &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crc32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;disk_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;  
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;crc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
                &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writelines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
                &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WebLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;  
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WebLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The module finder's job is to be pointed at a path (in this case, 'self.url') If the path is not something this finder knows how to handle, it raises an ImportError. Otherwise, it sticks around until Python calls find_module with a module name, at which point it will return a module loader object (see below) or None if it doesn't know what to do.  &lt;/p&gt;
&lt;p&gt;In this case, we do everything as simply as possible. The finder only works on a path with 'http' in it (note that's not really the right way to check for a url! It's enough for proof of concept, though). The finder just fills out the path with the name of the module (plus ".py") and tries to download it into the user's temp directory. The business with the hex numbers is just a crc check to make sure that the downloaded module is the latest version. If this is the first time you've grabbed the file -- or if the code on the server has changed  -- the cached copy will be refreshed.  &lt;/p&gt;
&lt;p&gt;The second half of the operation is the WebLoader, which loads the cached module:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# usess the same imports as WebFinder.py&lt;/span&gt;

&lt;span class="s s-Atom"&gt;class&lt;/span&gt; &lt;span class="nv"&gt;WebLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;  
    &lt;span class="s s-Atom"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;    Import loader (see http://pymotw.com/2/sys/imports.html for background)  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;    which loads modules cached by a WebFinder using imp.load_source  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="k"&gt;__&lt;/span&gt;&lt;span class="nf"&gt;init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;  
        &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;url&lt;/span&gt;  
        &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;name&lt;/span&gt;  
        &lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;filepath&lt;/span&gt;  
        &lt;span class="s s-Atom"&gt;return&lt;/span&gt;

    &lt;span class="s s-Atom"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s s-Atom"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s s-Atom"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="s s-Atom"&gt;:&lt;/span&gt;  
        &lt;span class="s s-Atom"&gt;if&lt;/span&gt; &lt;span class="s s-Atom"&gt;fullname&lt;/span&gt; &lt;span class="s s-Atom"&gt;in&lt;/span&gt; &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nn"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="o"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s s-Atom"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s s-Atom"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
            &lt;span class="s s-Atom"&gt;return&lt;/span&gt; &lt;span class="o"&gt;mod&lt;/span&gt;  
            &lt;span class="s s-Atom"&gt;#&lt;/span&gt; &lt;span class="s s-Atom"&gt;bail&lt;/span&gt; &lt;span class="s s-Atom"&gt;now&lt;/span&gt; &lt;span class="s s-Atom"&gt;so&lt;/span&gt; &lt;span class="s s-Atom"&gt;we&lt;/span&gt; &lt;span class="s s-Atom"&gt;don&amp;#39;t mislead users  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;            # if mod was found somewhere else!  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;        else:  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;            mod = sys.modules.setdefault(fullname, imp.load_source(fullname, self.file))  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;            mod.__file__ = self.file  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;            mod.__name__ = fullname  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;            mod.__path__ = [self.url]  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;            mod.__loader__ = self  &lt;/span&gt;
&lt;span class="s s-Atom"&gt;            mod.__package__ = &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s s-Atom"&gt;&amp;#39;.join(fullname.split(&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[:-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
            &lt;span class="s s-Atom"&gt;return&lt;/span&gt; &lt;span class="o"&gt;mod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A moduleloader can do all sorts of fancy things (the test code on PyMOTW, for example, loads a module from a python shelf database) but in this case I'm doing the simplest thing possible, which is to use imp.load_source on our cached python file. imp, if you're not familiar with it, is a super useful built-in module which provides access to most of the internals of python's import process). Actually using the code is the cool part. All you need to do is to register the finder with sys.path_hooks and then add the web server with your modules on in to your path:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_hooks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebFinder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.inference.phy.cam.ac.uk/mackay/python/compression/huffman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# with the url on the path, just use import  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Example&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__path__&lt;/span&gt;  
&lt;span class="c1"&gt;#[&amp;#39;http://www.inference.phy.cam.ac.uk/mackay/python/compression/huffman/Example.py&amp;#39;]&lt;/span&gt;

&lt;span class="c1"&gt;# the module&amp;#39;s __path__ will point at the url, but __file__ points at the cached  &lt;/span&gt;
&lt;span class="c1"&gt;# file on disk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This isn't really something I'd be comfortable using in production without more work.  There's no security and no authentication, so not only is your code up on the web for anybody to see, you're also executing code off the web with no idea what it will do. It would be OK for an intranet if you were pretty sure none of your coworkers fancies him/herself a master prankster, but I'd slather on the security before trying this over long distances!  &lt;/p&gt;
&lt;p&gt;Another obvious improvement would be to figure out a how to diff the local version of the file against the version on the http server without actually downloading the whole thing; that would be simple if the server could be asked for the CRC directly, but it would mean a tighter coupling between the finder and the server (which might be a good thing, security wise).  Another improvement might be to hack the loader so it force reloaded the module if the server version had changed, although that could have unintended side effects if the -- &lt;br /&gt;
 The point, however -- assuming there is one --  is how freaking awesome python's infrastructure is. Live loading of code over the net, transparent to all your other code, in about 50 lines?  Hat's off to Guido.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wired.com/wp-content/uploads/blogs/wiredenterprise/wp-content/uploads/2012/06/beard-programmers-final-two.png"&gt;&lt;img alt="" src="http://www.wired.com/wp-content/uploads/blogs/wiredenterprise/wp-content/uploads/2012/06/beard-programmers-final-two.png" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 27 May 2014 22:58:00 -0700</pubDate><guid>tag:,2014-05-27:Your-weekly-moment-of-Python-is-awesome.html</guid></item><item><title>Maya binaries list</title><link>/Maya-binaries-list.html</link><description>&lt;p&gt;&lt;a href="https://plus.google.com/112207898076601628221"&gt;+Rob Galanakis&lt;/a&gt;  just posted &lt;a href="http://www.robg3d.com/maya-windows-binaries/"&gt;a handy list of Maya binaries &lt;/a&gt;for people who need the correct version of QT or Perforce to go with their Maya versions.  Great one-stop shop for navigating this annoying maze....&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 25 May 2014 13:27:00 -0700</pubDate><guid>tag:,2014-05-25:Maya-binaries-list.html</guid></item><item><title>Tech Art Bookstore</title><link>/Tech-Art-Bookstore.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 18 May 2014 23:14:00 -0700</pubDate><guid>tag:,2014-05-18:Tech-Art-Bookstore.html</guid></item><item><title>TA Bookstore page</title><link>/TA-Bookstore-page.html</link><description>&lt;p&gt;I've started a &lt;a href="http://techartsurvival.blogspot.com/p/bookstore.html"&gt;page&lt;/a&gt; with links to books that TA's would find interesting or useful. Let me know if you've got recommendations - right now there's a glaring lack of Max related books. I've been skipping over "How to do X in Max 2011" type titles so far since they get dated so quickly (I've got probably 200 lbs of utterly useless reference on versions of Maya and Max that wouldn't even run on Windows 7 stuffed into my basement). But I'm always interested to hear about useful reference stuff.   &lt;/p&gt;
&lt;p&gt;The &lt;a href="http://techartsurvival.blogspot.com/p/bookstore.html"&gt;TA Bookstore page&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 18 May 2014 11:29:00 -0700</pubDate><guid>tag:,2014-05-18:TA-Bookstore-page.html</guid></item><item><title>Subjective truth</title><link>/Subjective-truth.html</link><description>&lt;p&gt;This video is proof that perceived reality is socially constructed. It will delight and inspire all the artists and designers on your team...  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://vimeo.com/94622661"&gt;Unified Particle Physics for Real-Time Applications - SIGGRAPH 2014&lt;/a&gt; from &lt;a href="http://vimeo.com/mmacklin"&gt;Miles Macklin&lt;/a&gt; on &lt;a href="https://vimeo.com/"&gt;Vimeo&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;... and make the engineers very, very nervous...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 16 May 2014 20:38:00 -0700</pubDate><guid>tag:,2014-05-16:Subjective-truth.html</guid></item><item><title>Rob G's book is up for preorder on amazon</title><link>/Rob-G's-book-is-up-for-preorder-on-amazon.html</link><description>&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;I just noticed that &lt;a href="http://www.amazon.com/gp/product/1849694729/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1849694729&amp;amp;linkCode=as2&amp;amp;tag=tecsurgui-20&amp;amp;linkId=Z2TRIATKVMUZBACZ"&gt;Rob G's upcoming book about Maya Python programming&lt;/a&gt;&lt;img alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=tecsurgui-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=1849694729" /&gt;is up for pre-order on Amazon! Looking forward to seeing it in "print"!&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PS. &lt;a href="http://www.amazon.com/gp/product/0415812291/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0415812291&amp;amp;linkCode=as2&amp;amp;tag=tecsurgui-20&amp;amp;linkId=U4W56JG5ISVGDJIB"&gt;Mine&lt;/a&gt;&lt;img alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=tecsurgui-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0415812291" /&gt; is still up there too!&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 15 May 2014 10:30:00 -0700</pubDate><guid>tag:,2014-05-15:Rob-G's-book-is-up-for-preorder-on-amazon.html</guid></item><item><title>Reference</title><link>/Reference.html</link><description>&lt;p&gt;Handy references for 3d math and graphics tech   &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.terathon.com/gdc07_lengyel.pdf"&gt;Eric Lengyel's camera matrices tricks&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 13 May 2014 22:33:00 -0700</pubDate><guid>tag:,2014-05-13:Reference.html</guid></item><item><title>No soup for you, userSetup.py</title><link>/No-soup-for-you,-userSetup.py.html</link><description>&lt;p&gt;When I start working on &lt;a href="http://techartsurvival.blogspot.com/2014/05/what-happens-at-startup.html"&gt;isolating maya environments,&lt;/a&gt; I came across a nice bit of trivia I didn't know about.  &lt;/p&gt;
&lt;p&gt;If you ever want to run a Maya without its &lt;em&gt;userSetup.py&lt;/em&gt; and without having to move or rename files, it turns out you can suppress userSetups by setting an environment variable called MAYA_SKIP_USERSETUP_PY to any value that evaluates as True.  This is handy for testing and isolating path management problems - if you've got a rogue path and you're not sure where it's coming from, this is an easy way to make sure it's not being added in by the userSetup.  &lt;/p&gt;
&lt;p&gt;PS: If you're using a &lt;a href="http://techartsurvival.blogspot.com/2014/05/what-happens-at-startup.html"&gt;MayaPyManager &lt;/a&gt;to run mayapy instances, you can set this variable like so:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mayaPyManager&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MayaPyManager&lt;/span&gt;  
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

    &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAYA_SKIP_USERSETUP_PY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;mgr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MayaPyManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path/to/mayapy.exe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path/to/maya/scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="c1"&gt;# this manager will use only the user provided path  &lt;/span&gt;
    &lt;span class="c1"&gt;# and won&amp;#39;t run the userSetup.py on startup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/_U3jHsmZuyeg/TLr6UM2AS-I/AAAAAAAADg0/1BFasu5yW70/s1600/obama_poster_soup_nazi.gif"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/_U3jHsmZuyeg/TLr6UM2AS-I/AAAAAAAADg0/1BFasu5yW70/s1600/obama_poster_soup_nazi.gif" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 13 May 2014 12:30:00 -0700</pubDate><guid>tag:,2014-05-13:No-soup-for-you,-userSetup.py.html</guid></item><item><title>Multiple MayaPy Management Mania</title><link>/Multiple-MayaPy-Management-Mania.html</link><description>&lt;p&gt;Lately I've been re-factoring the build system I use to distribute my python tools to users.  The things which has been driving me crazy is the need to start supporting multiple versions of Maya at the same time.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.opensrs.com/images/wordpress/uploads/2007/04/email-service-1/it-worked-on-my-machine.jpg"&gt;&lt;img alt="" src="http://www.opensrs.com/images/wordpress/uploads/2007/04/email-service-1/it-worked-on-my-machine.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Besides the general hassle involved, supporting multiple Maya versions and multiple projects at the same time is a nightmare for doing good testing and QA.  With so many different configurations it becomes increasingly easy for something to slip through the cracks.  You might have a bit of Python 2.7 syntax which you wrote in Maya 2014 sneaking into a tool used in Maya 2011. You might have tools that rely on an external dll that is correctly set up in your Maya 2011 tools but not in the outsourcer version of your 2012 setup.... The possibilities for shooting yourself in the foot are endless.  &lt;/p&gt;
&lt;p&gt;So, in an effort to clean this up, I've cooked up a simple module designed to create and run instances of MayaPy.exe with precise control over the paths and environment variables.  You can use it to run tests or automatic processes in isolation, knowing that only the paths and settings you're using will be live.  &lt;/p&gt;
&lt;p&gt;The actual code is not super complex -&lt;a href="https://gist.github.com/theodox/2c712a91155c7e1c4c15"&gt; it's up on gitHub&lt;/a&gt;, as usual free-to-use under the MIT license.  Comments / questions/ feedback and especially bug fixes all welcome! Code also here after the jump  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 11 May 2014 14:03:00 -0700</pubDate><guid>tag:,2014-05-11:Multiple-MayaPy-Management-Mania.html</guid></item><item><title>The only meme I will ever post</title><link>/The-only-meme-I-will-ever-post.html</link><description>&lt;p&gt;&lt;a href="https://lh5.googleusercontent.com/-3VltAqg2vaU/U2CQM7nRnsI/AAAAAAABIC4/JbGXg7-oy6U/s640/blogger-image--1968691607.jpg"&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/-3VltAqg2vaU/U2CQM7nRnsI/AAAAAAABIC4/JbGXg7-oy6U/s640/blogger-image--1968691607.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hate meme gifs.  But this one sort of sums it up &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 02 May 2014 22:55:00 -0700</pubDate><guid>tag:,2014-05-02:The-only-meme-I-will-ever-post.html</guid></item><item><title>untitled_160</title><link>/untitled_160.html</link><description>&lt;p&gt;Waf  &lt;/p&gt;
&lt;p&gt;- Unusual setup&lt;br /&gt;
- Expects unix shell (works in gitbash)&lt;br /&gt;
+ Pure python?&lt;br /&gt;
+ Installs on Windows  &lt;/p&gt;
&lt;p&gt;Buildbot&lt;br /&gt;
+ popular&lt;br /&gt;
+ used in book&lt;br /&gt;
- won't install on windows&lt;br /&gt;
- lots of virtualenv dependencies  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 01 May 2014 22:57:00 -0700</pubDate><guid>tag:,2014-05-01:untitled_160.html</guid></item><item><title>The Main Event - event oriented programming in Maya</title><link>/The-Main-Event---event-oriented-programming-in-Maya.html</link><description>&lt;p&gt;The &lt;a href="http://techartsurvival.blogspot.com/2014/04/maya-callbacks-cheat-sheet.html"&gt;Maya Callbacks Cheat Sheet&lt;/a&gt; post started out as an effort to explain the design the &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/events.py"&gt;event system&lt;/a&gt; in &lt;a href="https://github.com/theodox/mGui"&gt;mGui &lt;/a&gt;- but it quickly turned into it's own thing as I realized that the vanilla Maya system remains confusing to lots of people.  With that background out of the way, I want to return to events proper, both to explain why they work the way the do in mGui and also how they can be useful for other projects as well (I use them all over the place in non-GUI contexts).  &lt;/p&gt;
&lt;p&gt;...and, because it's got the word 'event' in it, I'm going to throw in a lot of irrelevant references as I can manage to &lt;strong&gt;&lt;em&gt;The Crushah!&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://hot-breakfast.com/wp-content/uploads/2014/01/GHG-WB-Crusher.jpg"&gt;&lt;img alt="" src="http://hot-breakfast.com/wp-content/uploads/2014/01/GHG-WB-Crusher.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Reining "Champeen"&lt;/h2&gt;
&lt;h2&gt;&lt;a href="http://i3.ytimg.com/vi/n0lzjNzql5Y/mqdefault.jpg"&gt;&lt;img alt="" src="http://i3.ytimg.com/vi/n0lzjNzql5Y/mqdefault.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It's a heavyweight programming paradigm!  &lt;/p&gt;
&lt;p&gt;The cheat sheet post showed that Maya callbacks are reasonably functional once you understand the underlying code scope rules. However they also shows some of the limitations of the default system:  &lt;/p&gt;
&lt;h4&gt;Awkward argument handling&lt;/h4&gt;
&lt;p&gt;In cases where you want to call a command with arguments or parameters, plain-old-Maya callbacks require you do fancy footwork with lambdas or partials to pass your arguments in correctly. It's not rocket science, but it is a pointless tax on what should be a trivial problem.  &lt;/p&gt;
&lt;h4&gt;Design time&lt;/h4&gt;
&lt;p&gt;GUI code is usually kind of fiddly to begin with, since you're often busy tweaking sizes, layouts and other graphical whatnots as you lay out the GUI (one of the big advantages of things like QT Designer is that they split this work out from the underlying code very neatly by turning all of that layout and presentation stuff into data).  You can see this particularly when you're trying to shoehorm all of the arguments and parameters for a command into the same line that also declares and styles a control: you get a long messy piece of junk with lots of nested parens that's hard to parse at a glance.   &lt;/p&gt;
&lt;p&gt;On a more strategic level, creating commands at the same time you create the visual layout for your controls tends to lock you into a monolithic style of coding. If you want to add new behaviors to a control contextually, you need to manage all of the state inside some other bit of code which not only knows how to do the new job,  it also needs to know enough about the original GUI layout that it can replace existing callback commands with new ones.   This means trivial tasks like highlighting a button when something is selected from a list get intertwined with complex code that does real work -- and, alas, that the two different sets of concerns get to share bugs.  &lt;/p&gt;
&lt;h4&gt;One shot&lt;/h4&gt;
&lt;p&gt;The last big drawback of the default Maya callback system is that each callback fires only one command.  This is not a big deal for things like buttons, but when you extend it to things like scriptJobs it can get messy very fast. Either you end up creating dozens of similar scriptJobs attached to the same trigger - in which case you  have to waste a lot of energy on managing them all -- or you have to create a complex uber-handler that jams a ton of (possibly unrelated) behaviors into a giant bucket-o-code.&lt;/p&gt;
&lt;h2&gt;And In Dis Corner..!&lt;/h2&gt;
&lt;h2&gt;&lt;a href="http://img.rp.vhd.me/3147118_l2.jpg"&gt;&lt;img alt="" src="http://img.rp.vhd.me/3147118_l2.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;our plucky challenger  &lt;/p&gt;
&lt;p&gt;The mGui event system is intended to fight these problems and to promote cleaner, less coupled and more general code.  &lt;/p&gt;
&lt;p&gt;The main ideas is to create objects --&lt;a href="https://github.com/theodox/mGui/blob/master/mGui/events.py"&gt; the Event class&lt;/a&gt;-- which store a list of functions (usually known as 'handlers') which they call when they are activated. Each Event can host any number of handlers, and the handlers can be added or removed from an event at any time.  The events can store information you know when they are created or pass information you only know when they fire, so you don't have to jump through hoops to provide relevant data to your handlers. Finally, the Events are smart enough not to complain when a handler disappears - if you're logging processed items to a window from a long running task and the user closes the window, the underlying code will still run without complaint.&lt;/p&gt;
&lt;p&gt;If you know your OOP history, this is obviously a shameless ripoff of the standard &lt;a href="http://www.philipuren.com/serendipity/index.php?/archives/4-Simple-Observer-Pattern-in-Python.html"&gt;Observer Pattern&lt;/a&gt;, -- although the implementation here owes more to &lt;a href="http://msdn.microsoft.com/en-us/library/aa645739(v=vs.71).aspx"&gt;the way events are handled in C#&lt;/a&gt;.   The main difference from the canonical implementation is that -- this being Python -- the handlers don't need to be classes, much less implementations of any particular base class; instead, the Event maintains a list of callables -- which can be functions, lambdas or callable classes -- and tries to fire them when it itself is triggered. Unlike the C# version of the same idea, there's no need for an elaborate menagerie of specially-typed handlers and data passing classes; instead, any function that accept &lt;a href="http://freepythontips.wordpress.com/2013/08/04/args-and-kwargs-in-python-explained/"&gt;the plain-python open-ended &lt;em&gt;args, &lt;/em&gt;*kwargs signature&lt;/a&gt; can be a handler.&lt;/p&gt;
&lt;p&gt;Here's the important bit of the core code (the full thing, as always, is &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/events.py"&gt;up on github&lt;/a&gt;) :&lt;/p&gt;
&lt;p&gt;As you can see, it's really quite simple: The handlers are maintained in set, so they can't accidentally be duplicated.  We override the &lt;code&gt;__iadd__&lt;/code&gt; and  &lt;code&gt;__isub__&lt;/code&gt; methods to provide a simple syntax for attaching and detaching handlers (shamelessly stolen from C#).  The core is the &lt;code&gt;__call__&lt;/code&gt; method. which makes the Event object callable as if it were a function.  When the event is called, it fires all of the handlers with whatever arguments and keywords were passed in.  &lt;em&gt;The only 'interesting' bit of code is the function WeakMethod in line 20 - it's not defined in this snippet; basically it's job is to make sure the Event object doesn't keep objects alive in memory when they should be de-referenced. &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/events.py"&gt;See the github&lt;/a&gt; for details if you're interested.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;While the description is a bit long winded, the use case is pretty straightforward:  &lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;test_event&lt;/code&gt;  is an Event object and &lt;code&gt;test_handler&lt;/code&gt; is a handler function. Handlers are callables of any kind: functions, object methods, lamdas, or callable objects. The only requirement is that they accept the &lt;code&gt;*args, **kwargs&lt;/code&gt; form of open-ended arguments -- you can do whatever you want with the args and kwargs inside a given handler, but they will be passed so you'll need to provide the right signature in your handler functions.  &lt;/p&gt;
&lt;p&gt;One of the trickiest bits of doing event-driven programming is providing the right context to your handler functions.  Different kinds of functional code will need different bits of information -- for example, you might fire an event when the user selects something in your scene.  One handler could highlight the selected item in a list, another could enable or disable some buttons, and a third could update present an appropriate dropdown list. Some of these operations will care about the selected objects, and some won't; some will care about other kinds of conditions (Is the window expanded? Is the user in 'advanced mode'?). To keep the code clean and provide handlers with the context they need to do their jobs, the Events need to be able to pass extra information; the &lt;em&gt;args, &lt;/em&gt;*kwargs form makes it easy to provide the data you think appropriate.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://img.youtube.com/vi/msp7rGJ5l7c/0.jpg"&gt;&lt;img alt="" src="http://img.youtube.com/vi/msp7rGJ5l7c/0.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Extra! Extra! Read All About It!&lt;/h2&gt;
&lt;p&gt;Most of the time, the info you want to pass with your event is dynamic - you don't know what it will be until the tool is actually running. In this case, you can just pass arguments or keywords at call time as I did in the previous example. This really helps to make the callback mechanism more flexible, since the same Event can be triggered many tines for different circumstances without new code. For example, say you've got a long running process that's looping over a bunch of objects and doing something.  &lt;/p&gt;
&lt;p&gt;Sometimes, though, the data is constant. In that case you can build it into the Event object directly - in that last snippet you can see that &lt;code&gt;test_event&lt;/code&gt;  has been set up with a name at creation time and that name is passed along to all invocations of the event. The ability to add unique data to an event ,makes it simple to write general handlers that can deal with several types of  Events at once - for example, you might auto-generate a set of buttons each of which was tied to a particular object in your Maya scene and then pass the object names through button's Events. Something like this mGui example (though as I said at the outset, you can just use the events module without mGui if you want):  &lt;/p&gt;
&lt;p&gt;Any keywords you provide when creating an Event object will be stored and then passed as keywords when the event goes off. (You'll might have noticed in the previous example that Events automatically includes a reference to themselves in their keyword arguments; this can be handy for things like one-shot handlers that want to remove themselves from an  event after they fire)  A common idiom is to add a reference to the owning GUI object, so that there's no extra work needed to figure out, say, which checkbox just toggled it's state. In this example I've added added a reference to the buttons as 'sender' manually, but if I hadn't manually created the event and had just attached a handler to the default one that comes with the mGui button I'd also have gotten that for free.  &lt;/p&gt;
&lt;p&gt;One thing to point out here is that the Events can mix both styles - predefined keywords and keywords or arguments that are defined at runtime. The Events will overwrite any pre-defined keywords that are duplicated, which is a behavior to remember - it can be useful but might also cause some surprises if you're not expecting it.,  &lt;/p&gt;
&lt;h2&gt;The Final Round&lt;/h2&gt;
&lt;h2&gt;&lt;a href="http://i.ytimg.com/vi/M50wHftQax8/0.jpg"&gt;&lt;img alt="" src="http://i.ytimg.com/vi/M50wHftQax8/0.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;that's gotta hurt  &lt;/p&gt;
&lt;p&gt;At the risk of repeating myself, I just want to show how the Event pattern makes it easier to achieve good, clean division between GUI code and functional code.  Here's the usual way you'd go about doing something like updating a GUI to reflect a long-running process:  &lt;/p&gt;
&lt;p&gt;Now, you could say that doesn't look _too _bad - the class is making it easy to find the text you want to update and it's only a couple  of lines each time you do the update. But this example is trivial; imagine this was real world code where some_complex_function really was complex and had lots of branches or possible failure points.  What if you needed to hit not two, but five or six different GUI elements?  What if you wanted to add logging or email?  The maintenance would add up fast.  &lt;/p&gt;
&lt;p&gt;Most of all, imagine how irritating it is to write code that simultaneously does some complex task - requiring you to mentally follow along with the ins and outs of the procedure as you write or debug it - and then adding a bunch of fiddly gui code in-line with the tool work. It only gets worse if you want to refactor or re-use parts of some_complex_function, since you'll have to work around or excise the parts specific to this GUI It's a classic violation of &lt;a href="http://effectivesoftwaredesign.com/2012/02/05/separation-of-concerns/"&gt;Separation of Concerns&lt;/a&gt;.  Here's the same code with events instead of inline GUI code:  &lt;/p&gt;
&lt;p&gt;As you can see the event-based version lets you cleanly separate out the functions from the UI. Moreover it would be a snap to make a headless version that ran with no GUI - and you could even add  logging to the console by attaching a simple handler function to the processor's ItemProcessed event. Abstracting  away the actual GUI code makes it easy to keep your code tidy and also lets you evolve your display mechanism without endangering your functional code. If you decide to swap in a messageLine for the the text widget -- or for that matter, if you print a line to the listener - it's all the same to the underlying code. This flexibility is exactly what &lt;a href="http://pynash.org/2013/03/07/logging-intro.html"&gt;makes the native Python logging module so powerful&lt;/a&gt;:  logging can write to text files, update databases, send emails or print console messages -- indeed, it can do all of those at once -- and the code that calls logging doesn't need to change one iota:  &lt;/p&gt;
&lt;h2&gt;TKO!&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/_4QlZmS5gO7s/SmaQEq6ewTI/AAAAAAAAARE/A5DKfeZ5Sz8/s320/BunnyHugged13.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/_4QlZmS5gO7s/SmaQEq6ewTI/AAAAAAAAARE/A5DKfeZ5Sz8/s320/BunnyHugged13.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, that's the basic rationale for the event system in mGui. If you &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/events.py"&gt;check out the file on github&lt;/a&gt; you'll see there's a bit more going under the hood - that's a matter for another time. Till then, keep those dukes up.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 29 Apr 2014 00:14:00 -0700</pubDate><guid>tag:,2014-04-29:The-Main-Event---event-oriented-programming-in-Maya.html</guid></item><item><title>Maya callbacks cheat sheet</title><link>/Maya-callbacks-cheat-sheet.html</link><description>&lt;p&gt;&lt;em&gt;Update 5/7/14: Added a note on closures and lambdas&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;In &lt;a href="http://techartsurvival.blogspot.com/2014/03/maya-gui-ii-all-your-base-classes-are.html"&gt;All Your Base Classes&lt;/a&gt;,  I suggested that we can do better than the standard callback mechanism for doing Maya event handling.  The limitations of the default method are something I've &lt;a href="http://techartsurvival.blogspot.com/2014/02/pity-for-outcast.html"&gt;complained about before&lt;/a&gt;, and if you follow these things on &lt;a href="http://tech-artists.org/forum/showthread.php?3292-maya-python-UI-acessing-controls-from-external-functions"&gt;TAO&lt;/a&gt; or CGTalk or &lt;a href="http://stackoverflow.com/questions/3435128/creating-a-ui-in-maya-using-python-scripting"&gt;StackOverflow&lt;/a&gt; it seems pretty clear that a lot of other people have problems with the standard Maya code flow too.  &lt;/p&gt;
&lt;p&gt;I was planning on devoting the next big post to the event mechanism in &lt;a href="https://github.com/theodox/mGui"&gt;mGui &lt;/a&gt;. However as I did the spadework for this post I decided it was better to split it up into two parts, since a lot of folks seem to be confused about the right way to manage basic Maya callbacks. Before moving fancy stuff, it's a good idea to make sure the basics are clear. Most vets will already know most of what I'm going over here, but I found the  time spent laying it out for myself a useful exercise  so I figured it would be worth sharing even if it's not revolutionary.  &lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Unsolved Mysteries of the Maya.&lt;/h3&gt;
&lt;p&gt;So, let's start by clearing up something that even a lot of old-school Maya coders find a bit mysterious when building GUIs.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://epguides.com/UnsolvedMysteries/cast.jpg"&gt;&lt;img alt="" src="http://epguides.com/UnsolvedMysteries/cast.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In vanilla Maya, GUI components fire callbacks - that is to say that when Maya recognizes a user action like a button press or a text entry, it calls a function you've provided. There are two ways you can set this up.  The old-school MEL way is to use a string:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;my_button = cmds.button(&amp;#39;hello&amp;#39;, command = &amp;#39;print &amp;quot;hello&amp;quot;&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the bad old days of MEL, this was usually fine since most procedures were declared as globals and so they were available everywhere.  &lt;/p&gt;
&lt;p&gt;Unfortunately, Python's stricter rules about scoping mean that you constantly run into problems with this strategy if you're not careful. For example, this straight python conversion of the Mel paradigm works fine:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def print_hello(_):  
        print &amp;quot;hello&amp;quot;

    my_w = cmds.window()  
    my_col = cmds.columnLayout()  
    my_button = cmds.button(&amp;#39;hello&amp;#39;, command = &amp;quot;print_hello()&amp;quot;)  
    cmds.showWindow(my_w)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But try this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def show_test_window():  
        def print_hello_again(_):  
            print &amp;quot;hello&amp;quot;

        my_w = cmds.window()  
        my_col = cmds.columnLayout()  
        my_button = cmds.button(&amp;#39;hello&amp;#39;, command = &amp;quot;print_hello_again()&amp;quot;)  
        cmds.showWindow(my_w)

    show_test_window()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you hit the button you'll be told  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;# Error: NameError: name 'print_hello_again' is not defined #&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That's because &lt;code&gt;print_hello_again&lt;/code&gt; is defined in the scope of the &lt;em&gt;function&lt;/em&gt;, not the scope of the Maya interpreter -- when the callback actually fires, the name is buried away inside of _show_test_window _and can't be found by Maya, at least not using the simple string name.&lt;/p&gt;
&lt;p&gt;That "_" in the functions, by the way, is the standard python symbol for "I have to have a variable here but I intend to ignore it" - it shows up in a lot of these GUI examples because many, though not all, Maya callbacks fire off an argument when they activate. &lt;/p&gt;
&lt;p&gt;This happens all the time to people trying to port old MEL code to Python - snippets that work in the interpreter don't work when converted to functions or split between modules because the string callbacks only execute in the global scope. Luckily, once you realize that the "where is my function" problem is just basic scoping, it's easy to fix. You can forcibly capture the functions you want by just passing them directly to your GUI callbacks instead of using strings, thanks to the magic of python's &lt;a href="http://python-history.blogspot.com/2009/02/first-class-everything.html"&gt;first class functions&lt;/a&gt;.  You just need to pass the function itself - not a quoted string that looks like the function - to the callback, Thus the previous example becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def show_test_window():  
        def print_hello_again(_):  
            print &amp;quot;hello&amp;quot;

        my_w = cmds.window()  
        my_col = cmds.columnLayout()  
        my_button = cmds.button(&amp;#39;hello&amp;#39;, command = print_hello_again)  
        # note: no quotes and no parens.


        # You&amp;#39;re passing the function as an object!  
        cmds.showWindow(my_w)

    show_test_window()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since you've got the callback in scope when you create the gui, you're certain to have it when you need it (if by some accident it was out of scope at creation time you'd get an obvious error that you'd have to fix before moving on).  &lt;/p&gt;
&lt;p&gt;Clear, predictable scoping is why it's almost always the right decision to wrap your GUIs in classes. The class defines a predictable scope so you don't  have to worry about what's loaded or try to cram import statements into your callback functions.   Plus, classes include data storage, so you can keep your data nicely independent of your code. Suppose, for example, you needed to display a different set of greetings beyond the standard "hello world."  With a class you can defer the problem up to the moment of the actual button press with no fancy footwork or complex lambda management:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Greeter&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;greeting&lt;/span&gt;):  
            &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;greeting&lt;/span&gt; = &lt;span class="n"&gt;greeting&lt;/span&gt;  
            &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;window&lt;/span&gt; = &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;window&lt;/span&gt;()  
            &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;columnLayout&lt;/span&gt;()  
            &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;button&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;, &lt;span class="n"&gt;command&lt;/span&gt; = &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;greet&lt;/span&gt;)

        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;show&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
            &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;showWindow&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;window&lt;/span&gt;)

        &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;greet&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;_&lt;/span&gt;):  
            &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;greeting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whatever is stuffed into the Greeter's &lt;em&gt;greeting&lt;/em&gt; field will be printed out when the button get's pressed.  &lt;/p&gt;
&lt;p&gt;Lambda Lambda Lambda  &lt;/p&gt;
&lt;p&gt;Of course, sometimes you don't need a full blown class for your callback functions; often you just want to do something simple that doesn't deserve a full function of it's own.  In cases like this, python provides a handy construct called a &lt;em&gt;lambda&lt;/em&gt;, which is basically a one-line function.  A lambda looks like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;multiply = lambda x, y : x * y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is exactly equivalent to:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def multiply (x, y):  
    return x * y
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example 'multiply' is just a plain old variable name. x and y are the input variables, and the expression to the right of the colon is what the lambda returns.  Lambdas can have any number of arguments, but they don't use the &lt;em&gt;args / &lt;/em&gt;*kwargs variable argument syntax.   &lt;/p&gt;
&lt;p&gt;The main difference between  lambdas and functions  is that the body of a lambda is a single expression : you can't put flow control (such as loops) or statements which are not evaluable (such as 'print' ) into a lambda.  You can, however, call functions - even functions that return None.  &lt;/p&gt;
&lt;p&gt;Lambdas are a great way to  cook up throwaway functions. For example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;w = cmds.window()  
cmds.columnLayout()  
cmd.button(&amp;#39;cube&amp;#39;, command = lambda x: cmds.polyCube(name = &amp;#39;new_cube&amp;#39;))  
cmds.showWindow(w)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;creates a window with a button which creates a cube when the button is pressed.  You'll probably note that in this case the argument to the lambda is ignored - that's because buttons always fire their callbacks with one argument so the lambda needs to accept one.&lt;em&gt; In other examples, you'll recall, I use  a python convention of a single underscore as the 'ignore me' argument.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;The one thing that makes lambdas interesting (sometimes the '&lt;em&gt;may you live in interesting times&lt;/em&gt;' sort of interesting) is that they are inside the scope of your functions - which means they can use &lt;a href="http://www.shutupandship.com/2012/01/python-closures-explained.html"&gt;closures&lt;/a&gt; to capture variables &lt;em&gt;before&lt;/em&gt; they fire.  This can be useful if you want to set up a simple relationship without building a full-on class. This example sets the text of a text widget based on a value you pass it at startup, showing the way closures capture names:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def closure_example_window(value)  
    w = cmds.window()  
    c = cmds.columnLayout()  
    t = cmds.text(label = &amp;#39;press the button&amp;#39;)  
    cmd.button(&amp;#39;cube&amp;#39;,  c= lambda _: cmds.text(t, e=True, label = value))  
    # captures the name of the text and the value passed in by the user  
    cmds.showWindow(w)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, closures are automatically created by Python when a given scope is closed up - in this example, that would be at the end of the function. The values that are 'closed over' are determined when the function finishes. Which is usually what you want -- unless you're in the habit of re-using variable names:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def closure_example_surprise(value)  
    w = cmds.window()  
    c = cmds.columnLayout()  
    t = cmds.text(label = &amp;#39;press the button&amp;#39;)  
    cmd.button(&amp;#39;cube&amp;#39;, c = lambda _: cmds.text(t, e=True, label = value))  
    value = &amp;#39;gotcha!&amp;#39;  
    cmds.showWindow(w)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you run this one, the button ignores your value and prints "gotcha" instead of whatever value you passed in! That's because the closure will get its value when the function finishes in line 7, NOT when you first assign it in line 5. This little gotcha is usually a curiosity, but it makes life difficult if you want to, say, assign commands inside a loop. In a case like that you should use functions or callable objects (see below) in preference to lambdas. &lt;/p&gt;
&lt;h3&gt;Arguments for the prosecution&lt;/h3&gt;
&lt;p&gt;So, the "where the hell is my function" problem which tends to plague beginners is easy to solve once you look at it the right way.   &lt;/p&gt;
&lt;p&gt;However, right after you're comfortable with passing functions directly, you immediately realize that's not enough.  It's very common to have multiple GUI controls that do more or less the same thing with different settings such a set of buttons which make different sized objects.    &lt;/p&gt;
&lt;p&gt;Alas, while this is easy to understand, it's also kinda ugly to code.  &lt;/p&gt;
&lt;p&gt;For starters, you might try making lots of little functions:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def Boxes():  
        def make_big_box(_):  
            cmds.polyCube(h = 10, d=10, w=10)

        def make_med_box(_):  
            cmds.polyCube(h = 5, d=5, w=5)

        def make_sm_box(_):  
            cmds.polyCube(h = 2, d=2, w=2)

        my_w = cmds.window()  
        cmds.columnLayout()  
        cmds.button(&amp;quot;small box&amp;quot;, c = make_sm_box)  
        cmds.button(&amp;quot;medium box&amp;quot;, c = make_med_box)  
        cmds.button(&amp;quot;large box&amp;quot;, c = make_big_box)  
        cmds.showWindow(my_w)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or you could do basically the same thing using lambdas to create temporary functions, which saves on the extra defs but tends to be illegible and tough to debug for complex commands :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def BoxLambdas():  
        my_w = cmds.window()  
        cmds.columnLayout()  
        cmds.button(&amp;quot;small box&amp;quot;, c = lambda _: cmds.polyCube(d =2, w= 2 , h=2) )  
        cmds.button(&amp;quot;medium box&amp;quot;,  c = lambda _: cmds.polyCube(d = 10 , w = 5 , h = 5) )  
        cmds.button(&amp;quot;large box&amp;quot;, c = lambda _: cmds.polyCube(d = 10 , w = 10 , h = 10) )  
        cmds.showWindow(my_w)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;BTW There's that underscore again, in the lambdas, doing the same job: ignoring the callback argument from the buttons&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A third method is to use the Python built-in module &lt;code&gt;functools&lt;/code&gt;. Functools offsers the &lt;a href="https://docs.python.org/2/library/functools.html#functools.partial"&gt;&lt;code&gt;partial&lt;/code&gt; object&lt;/a&gt;, which "freezes" a command and a set of arguments into a callable package.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FuncBoxes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

        &lt;span class="c1"&gt;# note the comma - the command is an argument to partial!   &lt;/span&gt;
        &lt;span class="n"&gt;small_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;med_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;big_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;my_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;small box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;small_box&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;medium box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;med_box&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;large box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;big_box&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Partials are handy for cleaning up the messes you'd get from trying to format a complex commands in-line in the middle of your gui code. This example is a sort of worst case scenario, since Maya buttons always fire with a single argument and cmds.polyCube doesn't like that.  Here I used lambdas   lambdas to swallow the arguments  - note the telltale underscores. More often you'll be calling your own functions and the syntax is much cleaner and easier to parse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FuncBoxesClean&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;



        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;


           &lt;span class="c1"&gt;# swallow the argument but keep the keywords...&lt;/span&gt;


           &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



        &lt;span class="n"&gt;small_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;make_box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;med_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;make_box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;big_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;make_box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;my_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;small box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;small_box&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;medium box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;med_box&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;large box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_box&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Final Summation&lt;/h3&gt;
&lt;p&gt;So, here's a cheatsheet of the rules for hooking maya event callbacks:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don't use strings for python calls. &lt;ol&gt;
&lt;li&gt;If you're calling MEL, OK: but don't use MEL anyway :)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Pass functions to your callback directly. No quotes, no parens.&lt;ol&gt;
&lt;li&gt;If you have a scope problem, you'll see it when you create the GUI; usually you can solve it with an import&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If you need to pass arguments to your function in the callback, you have options:&lt;ol&gt;
&lt;li&gt;custom mini-functions are clear, but extra work&lt;/li&gt;
&lt;li&gt;lambdas are ugly, but workable&lt;/li&gt;
&lt;li&gt;partials - especially on top of your own functions - are clean &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, even if you follow these rules,  its easy for your functional code and your GUI to get in each other's ways.  Creating a lot of throwaway functions is busywork, but formatting commands in-line inside GUI code is error prone and hard to read. Partials are nice for separating data from layout code, but usually come with annoying extra syntax to hide the callback arguments.  &lt;/p&gt;
&lt;h3&gt;Next Episode...&lt;/h3&gt;
&lt;p&gt;Of course if you've been following the &lt;a href="https://github.com/theodox/mGui"&gt;mGui &lt;/a&gt;series you'll know where I'm going. (If you haven't, you might want to check &lt;a href="http://techartsurvival.blogspot.com/2014/02/pity-for-outcast.html"&gt;here&lt;/a&gt;, &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;here &lt;/a&gt;and &lt;a href="http://techartsurvival.blogspot.com/2014/03/maya-gui-ii-all-your-base-classes-are.html"&gt;here&lt;/a&gt; before continuing).  Next time out I'lll take a look at how you could get to a cleaner separation of concerns like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mGui.gui&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;mg&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sender&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mGuiBoxes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;boxes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ColumnLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;col&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
                &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;small boxes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
                &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;med&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;medium boxes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
                &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lrg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;large boxes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;make_box&lt;/span&gt;  
        &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 23 Apr 2014 13:53:00 -0700</pubDate><guid>tag:,2014-04-23:Maya-callbacks-cheat-sheet.html</guid></item><item><title>Classic CG: La plus ca change</title><link>/Classic-CG:--La-plus-ca-change.html</link><description>&lt;p&gt;From SIGGRAPH 1992.  &lt;/p&gt;
&lt;p&gt;While I'd hesitate to call this a 'classic' it does prove one thing: tacky me-too crap is eternal  Hands up if you remember palette animations!  (For that matter, walkers and canes up if you remember the local-cable ads this thing was parodying!)  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 19 Apr 2014 08:50:00 -0700</pubDate><guid>tag:,2014-04-19:Classic-CG:--La-plus-ca-change.html</guid></item><item><title>Roger Roger</title><link>/Roger-Roger.html</link><description>&lt;p&gt;If you've been playing with the &lt;a href="http://techartsurvival.blogspot.com/2014/04/earth-calling-mayastandalone.html"&gt;stansdaloneRPC server&lt;/a&gt;, I've &lt;a href="https://github.com/theodox/standaloneRPC/tree/more-secure"&gt;added a new branch to the github&lt;/a&gt; project that includes a minimal level of password security. It's &lt;em&gt;still&lt;/em&gt; not the kind of security you want if this is to be exposed to the wicked world, but it should suffice to keep you free from teammates who want to prank you.  &lt;/p&gt;
&lt;p&gt;Comments / bug reports and pull request welcome!  If you use the github wiki to log an issue or ask a question, it's a good idea to put a comment here to make sure I see it.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 17 Apr 2014 22:17:00 -0700</pubDate><guid>tag:,2014-04-17:Roger-Roger.html</guid></item><item><title>Sweet Sumotori Dreams</title><link>/Sweet-Sumotori-Dreams.html</link><description>&lt;p&gt;I had no idea that the genius behind &lt;a href="http://www.gravitysensation.com/sumotori/"&gt;Sumotori Dreams &lt;/a&gt;is still making awesome procedural animation toys.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gravitysensation.com/sumotori/kezd.jpg"&gt;&lt;img alt="" src="http://www.gravitysensation.com/sumotori/kezd.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you're not familiar with Sumotori Dreams, it's the funniest thing that ever happened to procedual animation.  Proof here (loud cackling and some profanity in the audio track, could not find any that did not have lots of hilarity and shouting):  &lt;/p&gt;
&lt;p&gt;If you're at all interested in &lt;a href="http://techartsurvival.blogspot.com/p/interesting-graphics-and-animation.html"&gt;procedural animation&lt;/a&gt; - or have even a tiny sliver of a sense of humor - you should buy the &lt;a href="https://itunes.apple.com/us/app/sumotori-dreams/id838455884?ls=1&amp;amp;mt=8"&gt;iPhone app&lt;/a&gt; the &lt;a href="https://play.google.com/store/apps/details?id=com.gravitysensation.sumotori"&gt;android app&lt;/a&gt;, or the &lt;a href="http://www.gravitysensation.com/sumotori/Sumotori_Full___Setup.exe"&gt;PC version&lt;/a&gt;.  This guys deserves our support!  &lt;/p&gt;
&lt;p&gt;On a related note, if you like this you may find &lt;a href="http://aigamedev.com/open/access/overgrowth/"&gt;this talk from the developer of Overgrowth&lt;/a&gt; interesting as well.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 14 Apr 2014 14:23:00 -0700</pubDate><guid>tag:,2014-04-14:Sweet-Sumotori-Dreams.html</guid></item><item><title>Warning: Garish graphics ahead!</title><link>/Warning:-Garish-graphics-ahead!.html</link><description>&lt;p&gt;If you're tired of boring old light-grey-on-dark-grey text, you'l'l be pleased to know that the Maya text widget actually supports a surprising amount of HTML markup. Which means that instead of this:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-9X5_YoY6aCo/U0nRf9WRIXI/AAAAAAABICg/l_tl1f_kKd4/s1600/boring.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-9X5_YoY6aCo/U0nRf9WRIXI/AAAAAAABICg/l_tl1f_kKd4/s1600/boring.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You set peoples eyeballs on fire like this:  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://2.bp.blogspot.com/-Eb4ElNfethw/U0nQ3Ses5aI/AAAAAAABICY/THb9sHzqWZ0/s1600/maya+gui+text.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-Eb4ElNfethw/U0nQ3Ses5aI/AAAAAAABICY/THb9sHzqWZ0/s1600/maya+gui+text.png" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is a single cmds.text object  with it's  label property set to an HTML string.    &lt;/p&gt;
&lt;p&gt;It turns out that cmds.text is actually a fairly full-featured HTML4 renderer! That means that you can create pretty complex layouts using many -- though not all -- of the same tools you'd use for laying out a web page.  You can style your text with different &lt;a href="http://www.w3schools.com/css/css_font.asp"&gt;fonts&lt;/a&gt;, sizes, colors, alignments and so on - you can even us CSS style sheets for consistency and flexibility.  &lt;/p&gt;
&lt;p&gt;More than that you can also include images, tables and layout divisions, which are great for formatting complex information.  No more printing out reports into dull old textScrollFields!  &lt;/p&gt;
&lt;p&gt;Best of all, it's trivial to do.  &lt;/p&gt;
&lt;p&gt;All you need to do is set the _label _property of a cmds.text object to a striing of valid HTML. By default your object inherits the standard maya background and foreground colors but you can override these in your HTML  You can even just compose your text in an HTML editor like DreamWeaver or Expression Blend; that how I did the example in the graphic above..  &lt;/p&gt;
&lt;p&gt;There are some limitations you need to be aware of.  The big ones seem to be:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML/CSS controls for positioning text or divs don't seem to work. _Align _tags inside a span element do work, but &lt;a href="http://www.w3schools.com/cssref/pr_class_float.asp"&gt;float &lt;/a&gt;and &lt;a href="http://www.w3schools.com/css/css_positioning.asp"&gt;positions&lt;/a&gt; apparently do not.&lt;/li&gt;
&lt;li&gt;The renderer won't fetch images or other resources from a URL or relative paths.&lt;/li&gt;
&lt;li&gt;No JavaScripts - so no blinking texts or animated gifs.  I'm not sure that's a loss.&lt;/li&gt;
&lt;li&gt;No inputs such as buttons, checkboxes or text fields.&lt;/li&gt;
&lt;li&gt;Fonts seem to render smaller inside the Maya text than they do in a conventional browser. You can't specify text size in ems or percentages; pixel sizes seem to work fine, however.&lt;/li&gt;
&lt;li&gt;It looks like text is the only control that supports this styling right now ( tested in Maya 2014).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'd assume that these limitation reflect the behavior of underlying QWidgets inside of Maya - if anybody has the real dope to supplement my guesswork, please chime in.   &lt;/p&gt;
&lt;p&gt;In the mean time, here's to the inevitable avalanche of eye-ripping garishness that is sure to result from this revelation. As for me, I'm off to go convert my whole toolset to &lt;a href="http://bancomicsans.com/main/"&gt;Comic Sans!&lt;/a&gt; &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 12 Apr 2014 17:59:00 -0700</pubDate><guid>tag:,2014-04-12:Warning:-Garish-graphics-ahead!.html</guid></item><item><title>Mighty Morphin Module Manager Made Moreso</title><link>/Mighty-Morphin-Module-Manager-Made-Moreso.html</link><description>&lt;p&gt;I've added a &lt;a href="https://github.com/theodox/mhttps://github.com/theodox/mGui/blob/master/mGui/examples/modMgr.pyGui/blob/master/mGui/examples/modMgr.py"&gt;port &lt;/a&gt;of the &lt;a href="http://techartsurvival.blogspot.com/2014/01/mighty-morphin-maya-module-manager.html"&gt;Maya Module Manager I posted a while&lt;/a&gt; back to the examples included with the &lt;a href="https://github.com/theodox/mGui"&gt;mGui maya GUI library. &lt;/a&gt; This was an exercise to see how much the neater and more concise I could make it using the library.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-40t7CxBPtPo/Uz-BSayB96I/AAAAAAABICI/IW5w86cjuTA/s1600/modmgr.png"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-40t7CxBPtPo/Uz-BSayB96I/AAAAAAABICI/IW5w86cjuTA/s1600/modmgr.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here's some interesting stats:  &lt;/p&gt;
&lt;p&gt;The original version was &lt;strong&gt;237 &lt;/strong&gt;lines of code, not counting the header comments. The mGui version was &lt;strong&gt;178 &lt;/strong&gt;without the header, so about &lt;strong&gt;25% &lt;/strong&gt;shorter overall.  There are about 80 lines of unchanged, purely behind-the-scenes code which didn't change between versions, so the real savings is more like &lt;strong&gt;45%.   &lt;/strong&gt;Plus, the original sample included some functions for formLayout wrangling  so real savings might be a little higher for more old-fashioned code.  &lt;/p&gt;
&lt;p&gt;Like I said &lt;a href="http://techartsurvival.blogspot.com/2014/03/maya-gui-ii-all-your-base-classes-are.html"&gt;last time&lt;/a&gt;, the mGui package is still evolving so it's still very much in a "use at your own risk" state right now... That said, I'd love to get comments, feedback and suggestions.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 08 Apr 2014 09:11:00 -0700</pubDate><guid>tag:,2014-04-08:Mighty-Morphin-Module-Manager-Made-Moreso.html</guid></item><item><title>Earth calling maya.standalone!</title><link>/Earth-calling-maya.standalone!.html</link><description>&lt;p&gt;Somebody on Tech-artists.org was &lt;a href="http://tech-artists.org/forum/showthread.php?4642-Python-Maya-Open-commandPort-for-Mayapy&amp;amp;p=24225#post24225"&gt;asking about how to control a maya.standalone instance remotely&lt;/a&gt;.  In ordinary Maya you could use the commandPort, but the commandPort doesn't exist when running under standalone - apparently it's part of the GUI layer which is not present in batch mode.  &lt;/p&gt;
&lt;p&gt;So, I whipped up an uber-simple JSON-RPC-like server to run in a maya standalone and accept remote commands. In response to some queries I've polished it up and &lt;a href="https://github.com/theodox/standaloneRPC"&gt;put it onto GitHub&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;It's an ultra-simple setup. Running the module as a script form mayapy.exe starts a server:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    mayapy.exe   path/to/standaloneRPC.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To connect to it from another environment, you import the module, format the command you want to send, and shoot it across to the server. Commands return a JSON-encoded dictionary. When you make a successful command, the return object will include a field called 'results' containg a json-encoded version of the results:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        cmd = CMD(&amp;#39;cmds.ls&amp;#39;, type=&amp;#39;transform&amp;#39;)  
        print send_command(cmd)  
        &amp;gt;&amp;gt;&amp;gt; {success:True, result:[u&amp;#39;persp&amp;#39;, u&amp;#39;top&amp;#39;, u&amp;#39;side&amp;#39;, u&amp;#39;front&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For failed queries, the result includes the exception and a traceback string:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        cmd = CMD(&amp;#39;cmds.fred&amp;#39;)  # nonexistent command  
        print send_command(cmd)  
        &amp;gt;&amp;gt;&amp;gt; {&amp;quot;exception&amp;quot;: &amp;quot;&amp;quot;,   
             &amp;quot;traceback&amp;quot;: &amp;quot;Traceback (most recent call last)... #SNIP#&amp;quot;,  
             &amp;quot;success&amp;quot;: false,   
             &amp;quot;args&amp;quot;: &amp;quot;[]&amp;quot;,   
             &amp;quot;kwargs&amp;quot;: &amp;quot;{}&amp;quot;,   
             &amp;quot;cmd_name&amp;quot;: &amp;quot;cmds.fred&amp;quot;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's a single file for easy drop. Please, &lt;strong&gt;please&lt;/strong&gt; read the notes - the module includes no effort at authentication or security, so it exposes any machine running it to anyone who knows its there. Don't let a machine running this be visible to the internet! &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 05 Apr 2014 11:17:00 -0700</pubDate><guid>tag:,2014-04-05:Earth-calling-maya.standalone!.html</guid></item><item><title>Classic (?) CG: Bingo the Clown</title><link>/Classic-(?)-CG:-Bingo-the-Clown.html</link><description>&lt;p&gt;From the Classic CG files comes &lt;em&gt;Bingo the Clown&lt;/em&gt;. This was originally created to showcase the capabilities of Maya 1.0, back in 1998. It creeped me out then and it creeps me out now.  &lt;/p&gt;
&lt;p&gt;I've been told, I don't know how correctly, that &lt;a href="http://chrislandreth.com/"&gt;Chris Landreth&lt;/a&gt; - the animator who did this film - was the driving force between Maya's decision to use Euler angles for everything. I hope that's not true. Having this video and those goddamn Euler angles on your conscience is a lot to answer for.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 04 Apr 2014 10:00:00 -0700</pubDate><guid>tag:,2014-04-04:Classic-(</guid></item><item><title>@TODO: better undo system for python in unity</title><link>/@TODO:-better-undo-system-for-python-in-unity.html</link><description>&lt;p&gt;need to create a decorator that registers undo in a function  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 29 Mar 2014 12:37:00 -0700</pubDate><guid>tag:,2014-03-29:@TODO:-better-undo-system-for-python-in-unity.html</guid></item><item><title>New(-ish) Tools Watch: 3D Coat 4.1</title><link>/New(-ish)-Tools-Watch:-3D-Coat-4.1.html</link><description>&lt;p&gt;Version 4.1 of 3DCoat just came out - details in the video above or at &lt;a href="http://3d-coat.com/"&gt;3D-Coat.com&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;3DCoat is an interesting voxel-based alternative to Zbrush. It deserves a lot of credit for really pushing the retopology business forward, and also for early PTex support. The interface is less idiosyncratic than Zbrush's but less by-the-numbers than Mudbox.  &lt;/p&gt;
&lt;p&gt;Plus, it's made in Kiev - buy a copy and &lt;a href="http://www.artistssupportukraine.com/"&gt;stand up for Ukrainian independence&lt;/a&gt;!  &lt;/p&gt;
&lt;p&gt;Some cool feature videos if you're curious:  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=NjiIL81sjxA"&gt;UV tools&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.youtube.com/watch?v=x9TE6xg6Ss8&amp;amp;list=PL7D9A514EEC320105"&gt;Curve-constrained sculpts&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.youtube.com/watch?v=jX0t1b2b3_Y&amp;amp;list=UUkj0Q5hTgsyROJU4dlNu0Mg"&gt;Ptex texturing&lt;/a&gt;  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 28 Mar 2014 22:05:00 -0700</pubDate><guid>tag:,2014-03-28:New(-ish)-Tools-Watch:-3D-Coat-4.1.html</guid></item><item><title>Maya GUI II: All Your Base Classes Are Belong To Us</title><link>/Maya-GUI-II:-All-Your-Base-Classes-Are-Belong-To-Us.html</link><description>&lt;p&gt;&lt;strong&gt;Updated 4/11/2015: fixing code samples that had gone missing thanks to Blogger templates....&lt;/strong&gt;&lt;br /&gt;
In &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;Rescuing Maya GUI From Itself&lt;/a&gt; I talked in some detail about how to use descriptors and metaclasses to create a wrapper for the Maya GUI toolkit that, er, sucks less than the default implementation. I also strove mightily to include a lot of more or less irrelevant references to &lt;a href="http://www.youtube.com/watch?v=BfIAKj3Gl1E"&gt;Thunderbirds&lt;/a&gt;. This time out I want to detail what a working implementation of the ideas I sketched out there looks like.&lt;br /&gt;
&lt;img alt="" src="http://fc06.deviantart.net/fs70/f/2010/282/6/a/all_your_base_by_ultimathegod-d30fu0f.jpg" /&gt;&lt;br /&gt;
I think this time the irrelevant thematic gloss will come from &lt;a href="http://knowyourmeme.com/memes/all-your-base-are-belong-to-us"&gt;All Your Base Are Belong To Us&lt;/a&gt; jokes. Because (a), we’re talking about base classes, (b) what could be more retro and 90’s than Maya’s GUI system, and (c) &lt;strong&gt;For Great Justice, Make All Zig!&lt;/strong&gt;&lt;br /&gt;
I’ve put my current stab at a comprehensive implementation up on Github, in the form of the &lt;a href="https://github.com/theodox/mGui"&gt;mGui project&lt;/a&gt; , where you can poke at it to your heart’s content. The whole project is there, and it’s all free to use under the MIT, &lt;a href="http://opensource.org/licenses/MIT"&gt;&lt;em&gt;‘do-what-thou-wilt-but-keep-the-copyright-notice’&lt;/em&gt;&lt;/a&gt; license. Enjoy! I should warn you, though, that this is still W.I.P code, and is evolving all the time! Use it at your own risk – things may change a lot before its really ‘ready’.   &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#all-your-properties-are-belong-to-our-base-class"&gt;&lt;/a&gt;All Your Properties Are Belong To Our Base Class&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://fc00.deviantart.net/fs30/f/2008/064/8/0/All_your_base_are_belong_to_us_by_Sky_roxorz_815.png" /&gt;&lt;br /&gt;
What we’re shooting for is a library that provides all of Maya;’s GUI widgets in a clean, pythonic way without making anybody learn too much new stuff. If all goes well, the result is a cleaned up and more efficient version of things most of us already know. You can also treat this an template for how you might want to to wrap other aspects of Maya – say, rendering or rigging – in cleaner code.&lt;br /&gt;
From last time, we know we can wrap a Maya GUI component in a class which uses &lt;a href="http://nbviewer.ipython.org/urls/gist.github.com/ChrisBeaumont/5758381/raw/descriptor_writeup.ipynb"&gt;descriptors&lt;/a&gt; to make conventional property access work. The main thing we’re going to be delivering in this installment is a slew of classes that have the right property descriptors to replicate the Maya GUI toolkit. We’ll be using the metaclass system we showed earlier to populate the classes (if none of this makes sense, you probably want to &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;hop back to the previous blog entry&lt;/a&gt; before following along).&lt;br /&gt;
To keep things simple and minimize the boilerplate, we’ll want to derive all of our concrete classes – the widgets and layouts and so on – from a single base. This helps the code simple and ensure that the features we add work the same way for the whole library. We’ll add a second class later to handle some details specific to layouts, but that will derive from the base class.&lt;br /&gt;
Before we look at the details of the base class, we should think a little more about the properties. In the last installment, we treated all properties the same way - as generic wrappers around maya.cmds. In a production setting, though, we want to distinguish between 3 types of properties:  &lt;/p&gt;
&lt;p&gt;Regular properties
    These are just wrapped accesses to commands, like we demonstrated last week. They use the same ControlProperty class as we used last time to call commands on our GUI widgets.
Read-only properties
    A small number of Maya GUI commands are read-only. It would be nice and more pythonic to make sure that these behave appropriately. So, ControlProperty has been tweaked with a flag that allows it to operate as a read-only property; otherwise it’s just the same descriptor we talked about last time out. ]
Callbacks
    This one is a bit more involved. I’ve already complained about the weaknesses of the event model in Maya GUI. Cleaning it up starts with knowing which properties are callback properties and treating them accordingly. 
To differentiate between these three types of properties, we need to tweak our old metaclass so that it can distinguish between regular properties, read-only properties, and event properties. Luckily the necessary changes are super simple - basically, we’ll take out the hard-coded list of properties we used before and allow every incoming class to declare a list of properties, a list of read-onlies, and a list of callbacks. (if you want to compare, the version from last time is &lt;a href="https://gist.github.com/theodox/9106311"&gt;here&lt;/a&gt;):  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#somebody-set-us-up-the-bomb"&gt;&lt;/a&gt;Somebody Set Us Up The Bomb!&lt;/h1&gt;
&lt;p&gt;Before getting into the nitty-gritty of our overall widget class, I want to make a side noted about the special properties used for the callbacks. These CallbackProperty descriptors are slightly different from the familiar ControlProperty. Their job is to de-couple the maya GUI widget from the commands it fires. They create special delegate objects which will intercept callbacks fired by our GUI objects.&lt;br /&gt;
If you have experimented a little with last time’s code, you may already have seen that it works just as well for callbacks and commands as for other properties. So you may wonder why we should bother to treat callbacks differently. What’s the point?&lt;br /&gt;
There are two main reasons this is a useful complication.&lt;br /&gt;
First, and most usefully, event delegates make it easier to add your callbacks after you lay out your GUI, rather than forcing you to interleave your code logic with the process of building forms and layouts. De-coupling the functional code form the graphic display makes for more readable and more maintainable code. It also makes it possible for you to reuse fairly generic layouts with different back ends. In pseodo-code:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Layout  
   Layout  
     ButtonA  
     ButtonB  
   Layout  
     ButtonC  
     ListA

ButtonA deletes selected item from ListA  
ButtonB renames selected item from ListA  
ButtonC adds new item to ListA
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as opposed to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Layout  
   Layout   
     ButtonA.   
        I&amp;#39;m going to delete something from the list when it gets made  
     ButtonB  
        I&amp;#39;m going to rename something in the list when it gets made  
   Layout  
     ButtonC  
        I&amp;#39;m going to add something to the list when it gets made  
     ListA
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Keeping the functional bits separate makes it easy to, say, split the purely visual layout details into a separate file, but more importantly makes it clear whats an administrative detail and what’s actual functionality.&lt;br /&gt;
On a second, more tactical level the proxies also allow you to attach more than one function to a callback. It’s pretty common, for example, that you the act of want selecting an item in a list to select object in the Maya scene, but also to enable some relevant controls and maybe check with a database or talk to source control. Using an event proxy lets you handle those different tasks in three separate functions instead of one big monster that mixes up lots of UI feedback and other concerns.&lt;br /&gt;
&lt;img alt="" src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F3.bp.blogspot.com%2F-OFyQFgarV3I%2FUmU6BLY68jI%2FAAAAAAAAA6g%2FHSk55Z2R5Io%2Fs1600%2FPantallazo-1.png&amp;amp;container=blogger&amp;amp;gadget=a&amp;amp;rewriteMime=image%2F*" /&gt;&lt;br /&gt;
If you’re familiar with QT you’ll rexognize that event delegates are basically QT “Signals”&lt;br /&gt;
So that’s why the extra complexity is worth it.&lt;br /&gt;
The actual workings of the proxy class are documented in the &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/events.py"&gt;events.py file in the Github project&lt;/a&gt;; I’ll get back to how those work in a future post. Details aside, they key takeaway for right now is that this setup helps us move towards GUI code that’s more declarative. That’s the other reason why ‘button.label = “Reset”’ is better than cmds.Button(self.activeButton, e=True, l=’Reset’ – it’s not just less typing, it’s real value comes from treating the GUI layout as data rather than code,. That means you can concentrate on the actual work of your tools rather than the fiddly details of highlighting buttons or whatever.&lt;br /&gt;
Last but not least - by standardizing on the event mechanism we have an easy way to standardize the information that comes with the callback events for very little extra works. So, for example, all of the callbacks include a dictionary of keyword arguments when they fire - and the dictionary includes a reference to the widget that fired the event. That way it’s easy to write a generic event handler and not have to manually bind the firing control to a callback function.&lt;br /&gt;
&lt;strong&gt;While we’re on the topic of de-coupling: Wouldn’t it be nice to separate out the details of the visuals (“what color is that button?”) from the structure of the forms and layouts?. Spoiler alert! This is a topic for a future post – but the curious might want to check out &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/styles.py"&gt;styles.py in the GitHub&lt;/a&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#think-ahead"&gt;&lt;/a&gt;Think ahead&lt;/h1&gt;
&lt;h2&gt;&lt;img alt="" src="http://www.geekytattoos.com/wp-content/uploads/2009/04/all-your-base-tattoo.jpg" /&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;How the hell are you going to explain THAT to your grandchildren?&lt;br /&gt;
The obvious lession is THINK AHEAD&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;.&lt;/em&gt;&lt;br /&gt;
So, we’ve covered our improved property descriptors, and now it’s time to set up our base class.&lt;br /&gt;
This is a great opportunity to do some plumbing for more efficient coding. However it’s also a temptation – when the desire to sneak everything under the sun into your base classes is a recipe for monster code and untraceable bugs. This design should be as simple as we can make it.&lt;br /&gt;
Still, there are a couple of things that it would be nice to put into the base class - they are all very general (as befits base-class functions) and they are all common to any GUI tasks.  &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#tags"&gt;&lt;/a&gt;Tags&lt;/h3&gt;
&lt;p&gt;In most GUI systems, you can attach any arbitrary data you want to a widget. For example, you might want to have an array of buttons that all did the same thing with slightly different values, say moving an object by different amounts. In Maya you have to encapsulate the data into your command call:. With a tag attached to the buttons, on the other hand, you can write a script that just says ‘move the target by the amount in this button’s tag’, which is much easier to maintain and more flexible. And as we just pointed out, the event mechanism always sends a reference to the control which owns an event when it fires, so it’s easy to get to the right Tag when you want it.  &lt;/p&gt;
&lt;h3&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#a-real-name"&gt;&lt;/a&gt;A real name&lt;/h3&gt;
&lt;p&gt;Having explicit names for your pieces is very handy, particularly in large, deeply nested systems like a GUI..&lt;br /&gt;
In conventional maya coding the names are critical, since they are your only way of contacting the GUI after it’s built. They are also unpredictable, because of Maya’s habit of renaming items to give them unique path names. Luckily for us we don’t need to rely on the widget names from Maya, since we’re managing the GUI items under the hood inside our wrappers. This gets us off the hook for creating and managing variables to capture the results of every GUI command under the sun.&lt;br /&gt;
That said, names are still useful in a big complex system. So, to make it really clear how to find one of our wrappers inside a GUI layout it makes sense to ask for an explicit name passed in as the first argument - that way it’s totally clear what the control is intended to be. There are, of course, plenty of control you don’t really care about once they’re made: help text, spaces, separators and so on. To avoid making users have to invent names for those guys, we should let users pass in 0 or False or None as a succinct way of saying “I don’t care about the name of this thing”.&lt;br /&gt;
One minor note: I used Key as the name of the property so my IDE did not bug me for using in the Python reserved word ‘id’. Little things matter :)&lt;br /&gt;
Speaking of little things: there are some great tools in the Python language to make classes more efficient to work with. The so called ‘magic methods’ allow you to customize the behavior of your classes, both to make them feel more Pythonic and to express your intentions more clearly. Here are a couple of the things we can do with the magic methods in our base class:  &lt;/p&gt;
&lt;h3&gt;&lt;code&gt;__nonzero__&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Speaking of that pass-in-zero-to-skip-names gimmick, one simple but super-useful thing we can do is to implement the &lt;code&gt;__nonzero__&lt;/code&gt; method. That’s what Python calls when you try the familiar  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if something:  
    doSomething()
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;test. In our case, we know that all Maya GUI controls have the exist flag, and therefore all of our GUI classes will too. So, if our &lt;code&gt;__nonzero__&lt;/code&gt; just returns the exist property of our class instances, we can elegantly check for things like dead controls with a simple, pythonic if test.  &lt;/p&gt;
&lt;h3&gt;&lt;code&gt;__repr__&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;__repr__&lt;/code&gt; is what Python calls when you need a printable representation of an object. In our case, we can pass back our underlying Maya GUI object, which is just a GUI path string. This way, you can pass one of our wrapper classes to some other python code that works on GUI objects and it will ‘just work’ – This is more or less what PyMel does for nodes, and it’s a great help when integrating a new module into an existing codebase. Like PyMel’s version there will be some odd corner cases that don’t work but it’s a handy convenience most of the time.&lt;br /&gt;
As a minor tweak, the &lt;code&gt;__repr__&lt;/code&gt; is also tweaked to display differently when the GUI widget inside a wrapper class has been deleted. This won’t prevent errors if you try to use the widget, but it is a big help in parsing error messages or stack traces.  &lt;/p&gt;
&lt;h3&gt;&lt;code&gt;__iter__&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The next magic method we want to add is &lt;code&gt;__iter__&lt;/code&gt;. It is the what python calls when you try to loop over a list or a tuple.&lt;br /&gt;
Now, a single GUI object obviously is not iterable. A layout like columnLayout, on the other hand, can be iterated since it has child controls. By implementing &lt;code&gt;__iter__&lt;/code&gt; here and then over-riding it when we tackle layouts, we can iterate over both layouts and their children in a single call. This makes it easy to look for layout children :  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;for child in mainlayout:  
    if child.Key == &amp;#39;cancel&amp;#39;: #.... etc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So with all those methods added the base Control class looks like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Control&lt;/span&gt;(&lt;span class="n"&gt;Styled&lt;/span&gt;, &lt;span class="n"&gt;BindableObject&lt;/span&gt;):  
    &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;    Base class for all mGui controls.  Provides the necessary frameworks for  &lt;/span&gt;
&lt;span class="s"&gt;    CtlProperty and CallbackProperty access to the underlying widget.&lt;/span&gt;

&lt;span class="s"&gt;    NOTE this is not exactly identical to the code on github - more advanced stuff is removed to make the progression clearer  &lt;/span&gt;
&lt;span class="s"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;CMD&lt;/span&gt; = &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;control&lt;/span&gt;  
    &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;annotation&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;backgroundColor&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;defineTemplate&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;docTag&amp;#39;&lt;/span&gt;,  &lt;span class="s"&gt;&amp;#39;enable&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;enableBackground&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;fullPathName&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;,  &lt;span class="s"&gt;&amp;#39;manage&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;noBackground&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;preventOverride&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;useTemplate&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;visible&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;]  
    &lt;span class="n"&gt;_CALLBACKS&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;dragCallback&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;dropCallback&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;]  
    &lt;span class="n"&gt;_READ_ONLY&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;isObscured&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;]  
    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; = &lt;span class="n"&gt;ControlMeta&lt;/span&gt;


    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;key&lt;/span&gt;, *&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;):


        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Key&lt;/span&gt; = &lt;span class="nb"&gt;key&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Widget&lt;/span&gt; = &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;CMD&lt;/span&gt;(*&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;_style&lt;/span&gt;)  
        &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;        Widget is the gui element in the scene  &lt;/span&gt;
&lt;span class="s"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Callbacks&lt;/span&gt; = {}  
        &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;        A dictionary of Event objects  &lt;/span&gt;
&lt;span class="s"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="n"&gt;Layout&lt;/span&gt;.&lt;span class="n"&gt;add_current&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;)


    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;register_callback&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;callbackName&lt;/span&gt;, &lt;span class="n"&gt;event&lt;/span&gt;):  
        &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;        when a callback property is first accessed this creates an Event for the specified callback and hooks it to the gui widget&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;s&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="n"&gt;function&lt;/span&gt;  
        &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;        kwargs = {&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;e&amp;#39;:True&lt;/span&gt;, &lt;span class="n"&gt;callbackName:event&lt;/span&gt;}  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;CMD&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Widget&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;)



    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__nonzero__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="nb"&gt;exists&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__repr__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;self:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Widget&lt;/span&gt;  
        &lt;span class="n"&gt;else:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;deleted UI element %s&amp;gt;&amp;quot;&lt;/span&gt; % &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__class__&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__str__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Widget&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__iter__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You’ll notice that it is inheriting from two classes we have not touched on, &lt;code&gt;Styled&lt;/code&gt; and &lt;code&gt;BindableObject&lt;/code&gt;. Those don’t interact with what we’re doing here - they’ll come up in a later post. You can pretend it just says ‘object’. If you’re reading the code carefully you’ll probably spot a little bit of code I haven’t described. &lt;code&gt;register_callback&lt;/code&gt; is there to support event proxies – we’ll talk about the details when we get to &lt;a href="http://techartsurvival.blogspot.com/2014/04/the-main-event-event-oriented.html"&gt;event proxies&lt;/a&gt; in the future.&lt;br /&gt;
Despite my rather verbose way of describing it all, this is not a lot of code. Which is what exactly you want in a base class: simple, common functionality, not rocket science. Hopefully, though, adding those pythonic behaviors will save a lot of waste verbiage in production work.&lt;br /&gt;
&lt;img alt="" src="http://3.bp.blogspot.com/-9goyxbxMoA8/Uy5eUMQ1DxI/AAAAAAABIBI/McpZ1Vp2SIQ/s1600/yeoldeayb+(2" /&gt;  &lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Damn, the internet has a lot of time on its hands  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#all-your-children-are-belong-to-parent-layout"&gt;&lt;/a&gt;All Your Children Are Belong To Parent Layout&lt;/h1&gt;
&lt;p&gt;There’s one little bit of plumbing in Control that is worth calling out:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Layout.add_current(self)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That’s way of making sure that we can store references to our control wrappers in our layout wrappers - that is, when you create a wrapped button inside a wrapped columnLayout, the columnLayout has a handle to the wrapper class for the button. Which brings us around neatly to the wrapper class for layouts - called… wait for it… Layout.&lt;br /&gt;
To support nesting, we want our Layout wrapper class to be a context manager. The idea is that you when you start a Layout, it declares itself the active layer and all GUI controls that get created add themselves to it; when you’re done with it control is return to whatever Layout was active before. As Doctor Who says of bow ties, “Context Managers are cool.”&lt;br /&gt;
If you’ve done a lot of Maya GUI you know it’s also nice to have the same functionality for menus as well. So, to avoid repeating ourselves let’s start by creating a generic version of Control that works as a context manager so we can get identical functionality in windows, layouts and menus. Then we can inherit it into a wrapper class for layouts and another for windows and voila, they are all context managers without cutting and pasting. Here’s the abstract base class for all ‘nested’ classes: menus, windows, layouts etc:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Nested&lt;/span&gt;(&lt;span class="n"&gt;Control&lt;/span&gt;):  
    &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;    Base class for all the nested context-manager classes which automatically parent themselves  &lt;/span&gt;
&lt;span class="s"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;ACTIVE_LAYOUT&lt;/span&gt; = &lt;span class="n"&gt;None&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="nb"&gt;key&lt;/span&gt;, *&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Controls&lt;/span&gt; = []  
        &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;Nested&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;).&lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="nb"&gt;key&lt;/span&gt;, *&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;)

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__enter__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__cache_layout&lt;/span&gt; = &lt;span class="n"&gt;Nested&lt;/span&gt;.&lt;span class="n"&gt;ACTIVE_LAYOUT&lt;/span&gt;  
        &lt;span class="n"&gt;Nested&lt;/span&gt;.&lt;span class="n"&gt;ACTIVE_LAYOUT&lt;/span&gt; = &lt;span class="k"&gt;self&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__exit__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;typ&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;, &lt;span class="n"&gt;traceback&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;layout&lt;/span&gt;()  
        &lt;span class="n"&gt;Nested&lt;/span&gt;.&lt;span class="n"&gt;ACTIVE_LAYOUT&lt;/span&gt; = &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__cache_layout&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__cache_layout&lt;/span&gt; = &lt;span class="n"&gt;None&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;setParent&lt;/span&gt;(&lt;span class="s"&gt;&amp;quot;..&amp;quot;&lt;/span&gt;)

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;layout&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;        this is called at the end of a context, it can be used to (for example) perform attachments  &lt;/span&gt;
&lt;span class="s"&gt;        in a formLayout.  Override in derived classes for different behaviors.  &lt;/span&gt;
&lt;span class="s"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Controls&lt;/span&gt;)

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;control&lt;/span&gt;):  
        &lt;span class="n"&gt;path_difference&lt;/span&gt; = &lt;span class="n"&gt;control&lt;/span&gt;.&lt;span class="n"&gt;Widget&lt;/span&gt;[&lt;span class="n"&gt;len&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Widget&lt;/span&gt;):].&lt;span class="nb"&gt;count&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;) - &lt;span class="mi"&gt;1&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="n"&gt;path_difference:&lt;/span&gt;  
            &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Controls&lt;/span&gt;.&lt;span class="n"&gt;append&lt;/span&gt;(&lt;span class="n"&gt;control&lt;/span&gt;)

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;.&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="o"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;.&lt;span class="n"&gt;Key&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;] == &lt;span class="s"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;:  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;.&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__dict__:&lt;/span&gt;  
                &lt;span class="n"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;RuntimeError&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;Children of a layout must have unique IDs&amp;#39;&lt;/span&gt;)  
            &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__dict__&lt;/span&gt;[&lt;span class="n"&gt;control&lt;/span&gt;.&lt;span class="n"&gt;Key&lt;/span&gt;] = &lt;span class="n"&gt;control&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;control&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Controls&lt;/span&gt;.&lt;span class="n"&gt;remove&lt;/span&gt;(&lt;span class="n"&gt;control&lt;/span&gt;)  
        &lt;span class="n"&gt;k&lt;/span&gt; = [&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;, &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__dict__&lt;/span&gt;.&lt;span class="n"&gt;items&lt;/span&gt;() &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; == &lt;span class="n"&gt;control&lt;/span&gt;]  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k:&lt;/span&gt;  
            &lt;span class="n"&gt;del&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;__dict__&lt;/span&gt;[&lt;span class="n"&gt;k&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;]]

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__iter__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;):  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Controls:&lt;/span&gt;  
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="k"&gt;sub&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item:&lt;/span&gt;  
                &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;sub&lt;/span&gt;  
        &lt;span class="n"&gt;yield&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;

    &lt;span class="nv"&gt;@classmethod&lt;/span&gt;  
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add_current&lt;/span&gt;(&lt;span class="n"&gt;cls&lt;/span&gt;, &lt;span class="n"&gt;control&lt;/span&gt;):  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;.&lt;span class="n"&gt;ACTIVE_LAYOUT:&lt;/span&gt;  
            &lt;span class="n"&gt;Nested&lt;/span&gt;.&lt;span class="n"&gt;ACTIVE_LAYOUT&lt;/span&gt;.&lt;span class="n"&gt;add&lt;/span&gt;(&lt;span class="n"&gt;control&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All that really does is pop the current &lt;code&gt;Nested&lt;/code&gt; onto a stack and make it possible for other controls to add themselves to the instance on top of the stack.&lt;br /&gt;
Here’s the concrete implementation for actual Layout classes:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Layout&lt;/span&gt;(&lt;span class="n"&gt;Nested&lt;/span&gt;):

    &lt;span class="n"&gt;CMD&lt;/span&gt; = &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;layout&lt;/span&gt;  
    &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;annotation&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;backgroundColor&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;defineTemplate&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;docTag&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;dragCallback&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;dropCallback&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;enable&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;enableBackground&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;fullPathName&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;manage&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;noBackground&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;preventOverride&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;useTemplate&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;visible&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;]  
    &lt;span class="n"&gt;_CALLBACKS&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;dragCallback&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;dropCallback&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;]  
    &lt;span class="n"&gt;_READ_ONLY&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;isObscured&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;childArray&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;numberOfChildren&amp;#39;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is just a regular mGui class (it gets all of the metaclass behavior from &lt;code&gt;Control&lt;/code&gt;, via &lt;code&gt;Nested&lt;/code&gt;) with added properties for common layout properties like &lt;code&gt;numberOfChildren&lt;/code&gt;.&lt;br /&gt;
While we’re messing with contexts, this is also a great opportunity to do what PyMel already does and make all layouts automatically manage UI parenting. This gets rid of all those irritating calls to setParent(“..”), and lets us write GUI code that looks like real Python and not a plate of spaghetti. Compare this wordy cmds example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;win = window(&amp;#39;main window&amp;#39;, title=&amp;quot;Ugly version&amp;quot;)  
columnLayout(&amp;#39;gui&amp;#39;, width = 256)  
frameLayout(&amp;quot;t_buttons&amp;quot;, label = &amp;quot;buttons column&amp;quot;)  
columnLayout(&amp;quot;col&amp;quot;)  
sphere_1 = button(&amp;#39;mkSphere&amp;#39;, label = &amp;quot;Make Sphere&amp;quot;, c = make_sphere)  
cone_1 = button(&amp;#39;mkCone&amp;#39;, label =&amp;quot;Make Cone&amp;quot;, c = make_cone)  
cube_1 = button(&amp;#39;mkCube&amp;#39;, label =&amp;quot;Make Cube&amp;quot;, c = make_cube)  
setParen(&amp;quot;..&amp;quot;)  
setParent(&amp;quot;..&amp;quot;)  
frameLayout(&amp;quot;r_buttons&amp;quot;, label = &amp;quot;buttons row&amp;quot;)  
rowLayout (&amp;quot;row&amp;quot;, numberOfColumns=3)  
sphere_2 = button(&amp;#39;mkSphere&amp;#39;, label = &amp;quot;Make Sphere&amp;quot;, c = make_sphere)  
cone_2 = button(&amp;#39;mkCone&amp;#39;, label =&amp;quot;Make Cone&amp;quot;, c = make_cone)  
cube_2 = utton(&amp;#39;mkCube&amp;#39;, label =&amp;quot;Make Cube&amp;quot;, c = make_cube)  
setParen(&amp;quot;..&amp;quot;)  
setParent(&amp;quot;..&amp;quot;)  
frameLayout(&amp;quot;g_buttons&amp;quot;, label = &amp;quot;buttons grid&amp;quot;)  
gridLayout(&amp;quot;grid&amp;quot;, numberOfColumns = 2):  
sphere_3 = button(&amp;#39;mkSphere&amp;#39;, label = &amp;quot;Make Sphere&amp;quot;, c = make_sphere )  
cone_3 = button(&amp;#39;mkCone&amp;#39;, label =&amp;quot;Make Cone&amp;quot;, c = make_cone)  
cube_3 = button(&amp;#39;mkCube&amp;#39;, label =&amp;quot;Make Cube&amp;quot;, c = make_cube)  
circle_btn = button(&amp;#39;mkCircle&amp;#39;, label = &amp;quot;Make Circle&amp;quot;, c = make_circle)  
setParen(&amp;quot;..&amp;quot;)  
setParent(&amp;quot;..&amp;quot;)  
setParent(&amp;quot;..&amp;quot;)  
showWindow(win)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To this version using context manager layouts:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGui.gui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  
&lt;span class="c1"&gt;# note the caps: all of these are wrapper objects, not maya.cmds!&lt;/span&gt;

&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;How&amp;#39;s this&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ColumnLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;gui&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;FrameLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;t_buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;buttons column&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ColumnLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;col&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkSphere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Sphere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;FrameLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r_buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;buttons row&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;RowLayout&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numberOfColumns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkSphere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Sphere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;FrameLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g_buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;buttons grid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;GridLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numberOfColumns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkSphere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Sphere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCircle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Circle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That example also includes one other neat way to leverage contexts too. If you double check the &lt;code&gt;add&lt;/code&gt; method in &lt;code&gt;Nested&lt;/code&gt; you’ll see that it adds child wrapper objects to it’s own &lt;code&gt;__dict__&lt;/code&gt;. That makes them accessible without having to explicitly store them. In this example, you could get to the last sphere-making button in this example as &lt;code&gt;gui.g_buttons.grid.mk_sphere&lt;/code&gt; without having to manually capture the name of the underlying widgets they way the first example must. Since Maya GUI is always a single-rooted hierarchy, as long as you know the first parent of a window or panel you can always get to any of its the child layouts or controls. This saves a lot of the boring boilerplate you would otherwise need to do just keeping track of bits and pieces.&lt;br /&gt;
There’s one little extra bit of magic in there to let the add method discriminate between children you care about and those you don’t. If your child controls have no key set, they won’t be added to the &lt;code&gt;__dict__&lt;/code&gt;. On a related note, you can also be tricksy and add a control which is not a direct child of the layout - for example, if you had a layout with a list of widgets in a scrollLayout, you don’t usually don’t care about the scrollbar - it’s just along for the ride. So you can add the widgets directly to the ‘real’ parent layout and keep the paths nice and trim. The goal, after all, is to make the gui layout a logical tree you can work with efficiently. There’s a practical example of this trick in the &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/lists.py"&gt;lists.py&lt;/a&gt; file on Github&lt;br /&gt;
Here’s a snippet tacked on to the end of that last sample showing how you can use the iterability of the layouts to set properties in bulk. You can see how the work of turning command-style access into property style access, combined with the extra clarity we get from context managers, really pays off:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# using the iterability of the layout to set widths

for item in gui.t_buttons:  
    item.width = 256

for item in gui.r_buttons.row:  
    item.width = 85  
item.width = 256  # the last item is gui.r_buttons.row itself  
item.columnWidth3 = (85,85,85)  # ditto

for item in gui.g_buttons.grid:  
    item.width = 128  
item.width = 256  # now the last item is the grid  
item.cellWidth = 128

cmds.showWindow(window)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-YbhMcGSYTpg/Uy58bLV2nlI/AAAAAAABIBo/4q3TtCRPosI/s1600/example.png" /&gt;&lt;br /&gt;
I don’t even want to think about the equivalent code in &lt;code&gt;cmds&lt;/code&gt;!&lt;br /&gt;
One parting note about the naming scheme, It does have one, inevitable drawback: it means that the child wrappers have unique names inside a given context. Not much we can do about that. They can, however, have the same name under different parents - the example above has , gui.t_buttons.grid.mk_sphere, and gui.g_buttons.grid.mk_sphere Thats a useful thing to exploit if you want to, say, find all of the ‘Select’ buttons on a form and disable them or something off that sort.  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#make-all-zig"&gt;&lt;/a&gt;Make All Zig!&lt;/h1&gt;
&lt;p&gt;Hopefully, the combination of some syntax sugar in our wrappers and turning layouts into context managers will make Maya GUI layout less of a pain in the butt. However, we still need to actually crank out all the wrappers for all those scores of classes in the maya GUI library. Descriptors and metaclasses are powerful tools, but few of us have the intestinal fortitude to plow through the dozens of classes in the Maya GUI library getting every flag and command correct.&lt;br /&gt;
In an ideal world we’d have a way of reflecting over some kind of assembly information and extracting all of the maya GUI commands with their flags and options. Of course, in an ideal world we would not have to do this in the first place, since the native GUI system would not be the unfortunate SNES-era mishmash that it is.&lt;br /&gt;
&lt;img alt="" src="http://games.shizzle.be/wp-content/images/060419-all-your-base-are-belong-to-us.jpg" /&gt;&lt;br /&gt;
Mass production is a pain in the ass.&lt;br /&gt;
Luckily, the TA spirit cannot be kept down by adversity. In this case we don’t have a nice clean api but we do have MEL.... poor, neglected, wallflower MEL. Well, here’s a chance for the wallflower to save the party: MEL’s help command can list all of the commands and all of the flags in Maya. So, what we need to do is to run through all of the Mel commands in help, find the ones that look like GUI commands, and capture their command - flag combinations as raw material for our metaclass control factory.&lt;br /&gt;
See? This was getting all programmery, but now we’re back in familiar TA spit-and-bailing-wire territory. Comfier?&lt;br /&gt;
The actual code to build the wrappers isn’t particularly interesting (its &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/helpers/tools.py"&gt;here&lt;/a&gt; if you want to see it). In two sentences: Use the mel &lt;code&gt;help *&lt;/code&gt; command to find all of the commands in Maya which share flags with cmds.control or cmds.layout. Then collect their flags to make the list of class attributes that the metaclass uses to create property descriptors. The final output will be a big ol’ string of class definitions like this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;FloatSlider&lt;/span&gt;(&lt;span class="n"&gt;Control&lt;/span&gt;):  
    &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;sample output from mGui.helpers.tools.generate_commands()&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;CMD&lt;/span&gt; = &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;floatSlider&lt;/span&gt;  
    &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;horizontal&amp;#39;&lt;/span&gt;,&lt;span class="s"&gt;&amp;#39;step&amp;#39;&lt;/span&gt;,&lt;span class="s"&gt;&amp;#39;maxValue&amp;#39;&lt;/span&gt;,&lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;,&lt;span class="s"&gt;&amp;#39;minValue&amp;#39;&lt;/span&gt;]  
    &lt;span class="n"&gt;_CALLBACKS&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;changeCommand&amp;#39;&lt;/span&gt;,&lt;span class="s"&gt;&amp;#39;dragCommand&amp;#39;&lt;/span&gt;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We generate two files, one for controls and one for layouts (that’s an arbitrary design call on my part, you could of course have one file). Now they’re just sitting on disk as if we’d written them by hand. We can import our newly generated modules and away we go, with nice pythonic properties and our new functions.&lt;br /&gt;
There is one judgement call here that is worth mentioning in passing.&lt;br /&gt;
The logic in the helper modules which generate this is all deterministic, it doesn’t need human intervention so it could actually be run at module load time rather than being run and dumped out to a file. For what I want to do, I felt that physical files were a better choice, because they allow the option of hand tailoring the wrapper classes as the project evolves. Plus, the startup cost of trolling through every MEL command, while it’s not very big, is real and it seems good to avoid it. I’ve have heard enough grumbling over the years about PyMel’s startup speed that I thought it wisest to opt for speed and clarity over fewer files on disk.&lt;br /&gt;
One nice side effect of generating our wrappers this way: we’ve added some functionality through our base classes but fundamentally we’ve kept the same names and options we already know from plain old maya.cmds. The only changes are the mandatory names and the fact that I’ve capitalized the class names to make them more pep-8-friendly.&lt;br /&gt;
Hopefully, keeps the learning curve short for new user. Its hard enough to pick up a new style, making you memorize hundreds of new property names seem like a big tax on users.&lt;br /&gt;
In the version up on Github (and in this example) I opted to use only the long name for the properties. This is definitely a matter of taste; I’m sure that many TAs out there are sufficiently familiar with the old maya command flags that a howler like &lt;code&gt;cmds.rowLayout(nc=2, cw2=(50,100), ct2=('both', 5), bgc = (.8,.6,.6), cl2=("left", "right")&lt;/code&gt; makes its meaning clear. for my part, though, the long names clarify the intent of the code enormously if you make a fairly small upfront investment in typing. &lt;br /&gt;
If you are of the opposite opinion, though, you can call the &lt;code&gt;generate_helpers&lt;/code&gt; and &lt;code&gt;generate_controls&lt;/code&gt; functions in mGui.helpers.tools with &lt;code&gt;includeShortNames&lt;/code&gt; set to true make your own wrappers with the short flags too.  &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#what-you-say"&gt;&lt;/a&gt;What You Say!!!&lt;/h1&gt;
&lt;p&gt;Now we’ve got a complete library of all the widgets. You can see the results in &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/core/controls.py"&gt;controls.py&lt;/a&gt; and &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/core/layouts.py"&gt;layouts.py&lt;/a&gt; on GitHub. (The base classes are also up there for your perusal in &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/core/__init__.py"&gt;the root of the core module&lt;/a&gt;). If all you want is to stop writing long commands every time you touch a GUI item, you’re done. You can write crisper layout code, tweak your properties, and so on with what we’ve covered so far. If you’re interested in making practical use of this setup – remember that WIP warning! – you should read the docs in the events.py module to make sure you know how to hook up callback events. I’ll cover that in more detail in the future.&lt;br /&gt;
However… Simpler syntax is just scratching the surface of what we can get up to now that we have a proper class library for our widgets. Next time out we’ll look at the event mechanism in more detail and talk about how to cleanly separate your functional code, GUI layouts, and the display styles of your widgets.&lt;br /&gt;
&lt;a href="http://www.youtube.com/watch?v=8fvTxv46ano"&gt;Until next time....&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 28 Mar 2014 09:30:00 -0700</pubDate><guid>tag:,2014-03-28:Maya-GUI-II:-All-Your-Base-Classes-Are-Belong-To-Us.html</guid></item><item><title>Qixel</title><link>/Qixel.html</link><description>&lt;p&gt;TBD : a column about quixel, ndo, and maybe pbr  &lt;/p&gt;
&lt;p&gt;http://dev.quixel.se/ndo&lt;br /&gt;
https://www.youtube.com/watch?v=YyJJAp17K-Y&amp;amp;feature=youtu.be&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 26 Mar 2014 19:02:00 -0700</pubDate><guid>tag:,2014-03-26:Qixel.html</guid></item><item><title>(?:regex){1} (haterz)+</title><link>/(?:regex)%7B1%7D-(haterz)+.html</link><description>&lt;p&gt;If you hate regexes as much as I do - which, honestly, seems scarcely possible - you should check out these regex preview sites which make like a little easier when you're trying to work out a particularly nasty one:  &lt;/p&gt;
&lt;h3&gt;Python: &lt;a href="https://pythex.org/"&gt;Pythex&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;C# / dotnet : &lt;a href="http://regexstorm.net/tester"&gt;Regex Storm&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Both of these offer big productivity boost over the usual tweak-run-check cycle &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 26 Mar 2014 17:10:00 -0700</pubDate><guid>tag:,2014-03-26:(</guid></item><item><title>New tools watch: MARI</title><link>/New-tools-watch:-MARI.html</link><description>&lt;p&gt;Lately - particularly since the demise of the &lt;a href="http://techartsurvival.blogspot.com/2014/03/sigh.html"&gt;late, lamented XSI&lt;/a&gt;, I've been increasingly worried about getting too locked in to any one vendor for my tools.  I go way back with Photoshop - I once emailed a bug report directly to &lt;a href="http://en.wikipedia.org/wiki/John_Knoll"&gt;John Knoll&lt;/a&gt; on my &lt;a href="http://arstechnica.com/tech-policy/2009/07/goodbye-compuserve-we-thought-you-had-already-died/"&gt;Compuserve &lt;/a&gt;(!!) account.  I was in the audience for the Maya launch at SIGGRAPH in, I think it was 1997.   &lt;/p&gt;
&lt;p&gt;Jeez, I'm really fricking &lt;em&gt;old.&lt;/em&gt; But I digress.  &lt;/p&gt;
&lt;p&gt;The point is, I love those tools. They've been part of my life for a long time. But I don't like being too beholden to anybody, especially not an anybody who's a big public company that has to answer to shareholders and analysts and is not particularly worried about competition.  &lt;/p&gt;
&lt;p&gt;For that reason I'm actively looking for alternatives to supplement or even supplant the old standbys.  And this GDC gave me some up-close and personal time with a very promising one: &lt;a href="http://www.thefoundry.co.uk/products/mari/"&gt;Mari&lt;/a&gt;, the 3-d painting app from &lt;a href="http://www.thefoundry.co.uk/"&gt;the Foundry&lt;/a&gt;.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://www.cgsociety.org/stories/2010_05/mari/banner01.jpg"&gt;&lt;img alt="" src="http://www.cgsociety.org/stories/2010_05/mari/banner01.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lots of Mari work on &lt;em&gt;Avatar&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;More after the jump.  &lt;/p&gt;
&lt;p&gt;Caveat: this is &lt;em&gt;not&lt;/em&gt; a real review; it's a quick rundown of what I learned from a demo and some conversations with the devs.  If I write a real review, I'll mark it as such. This is more of a scouting report.  &lt;/p&gt;
&lt;p&gt;Mari is a 3d paint package.  A very cool one.  &lt;/p&gt;
&lt;p&gt;There have been 3d paint packages for a long time, since the SGI days, but they've never been a highly competitive area outside of the film business. The best software used to be confined to high-end workstations.  The most popular PC 3d painter, &lt;a href="http://www.maxon.net/products/new-in-cinema-4d-r15/overview.html"&gt;Body Paint&lt;/a&gt;, has never become a mainstream tool (at least in the US), perhaps since it's most closely aligned with &lt;a href="http://www.maxon.net/products/cinema-4d-prime/who-should-use-it.html"&gt;Cinema4D&lt;/a&gt;, which remains an outsider choice over here.  Although it does a pretty good job, it hasn't gotten a huge fan base -- it may be that the overlap with the free, built-in &lt;a href="http://download.autodesk.com/global/docs/maya2014/en_us/index.html?url=files/3D_Paint_Tool_Paint_Textures_on_3D_objects.htm,topicNumber=d30e383981"&gt;PaintFX/Artisan&lt;/a&gt; tools in Maya kept it from gaining a lot of momentum.  PaintFX itself is -- well, it's free, it works OK if you have basic needs and good UVs, and I don't know a lot of folks who rely on it for much more than basic masks or blocking in broad strokes to be filled out in Photoshop.  The lack of layering, oddball texture handling, and finicky paint projection have all made it a feel like an afterthought: the MS paint of 3d paintng. Sure, it works... but, you know...  &lt;/p&gt;
&lt;p&gt;So against this background I was a little skeptical when I went for my demo. I've run trial versions of Mari before, and the older version I have played with suffered from a somewhat idiosyncratic interface.  Mari originated at WETA Digital as an in-house tool and its roots in a very particular pipeline used to be very apparent.  The newest version (I believe I was shown 2.6, the website touts 2.5 as the latest) has a much more comprehensible feel.  &lt;/p&gt;
&lt;p&gt;Like BodyPaint, but unlike PaintFX/Artisan, Mari supports layers. However it takes the concept of layering and runs with it way past where, say, Photoshop has to stop and catch it's breath.  Its has more in common with a node-graph based compositing tool (say, &lt;a href="http://www.autodesk.com/products/autodesk-flame-family/features/flame-premium-products/all/gallery-view"&gt;Flame &lt;/a&gt;or &lt;a href="https://www.thefoundry.co.uk/products/nuke-product-family/nuke/features/"&gt;Nuke&lt;/a&gt;)  than a joe-blow paint layer system. You can re-route channels from one map to another non-destructively. For example you could use a crisped up, high-contrast version of your diffuse texture as a spec mask - and be able to flow changes forward from the diffuse texture as you kept woirking while also adding new detail on top of the spec channel : each map gets its own stack of layers. Here's a video from the 2.0 version which touches on the concept:  &lt;/p&gt;
&lt;p&gt;You can even put layers &lt;em&gt;on your layer masks&lt;/em&gt;, which is extremely powerful and should be picked up by everybody else in painting soon. Plus you can make procedural layers (which can themselves be layer masks...). Even without the 3-d ness this would be a pretty compelling painting technology. Combined with the ability to paint specular or ambient occlusion masks directly in real time, its extra cool. Add in a nifty filter that lets you paint onto normal maps (again, real-time) while keeping your normals normalized and it's really, really cool.  &lt;/p&gt;
&lt;p&gt;The 3D painting itself looked really smooth, with a good brush engine and pretty impressive performance (the demo was running on a Macbook Retina 15 laptop, so a very good but not firebreathing machine).  The most surprising bit was the resolutions that were possible: painting on multiple 4-k textures at once did not seem to faze the program (caveat: it's a demo. I'd assume they are pretty careful to pick subject matter that makes them look good).   &lt;/p&gt;
&lt;p&gt;The extra high resolution is handy because the program also does a really nice job transferring textures to meshes with different UVs. Evidently they do it using a very dense color point cloud, rather than the more common raycast solutions that you see in, eg, Maya's transfer maps toolset.  The results looked pretty good even on pretty crummy auto-generated UV sets; this makes it easy to imagine painting big textures on high res models and transferring them to game-res as a final step, instead of committing to the low-res model and textures early on -- a workflow I've been championing for a long time.  &lt;/p&gt;
&lt;p&gt;The last big plus for me was a built-in Python interpreter (looked like a 2.6 series). This should make it a much better citizen of the pipeline than some other painting programs I could mention, which require you to &lt;a href="http://techartsurvival.blogspot.com/2014/01/talking-to-photoshop-via-tcp.html"&gt;reinvent network communications&lt;/a&gt; if you want to get anything done script-wise.  &lt;/p&gt;
&lt;p&gt;Other good things:&lt;br /&gt;
&lt;em&gt; &lt;a href="http://www.digitaltutors.com/tutorial/743-Creating-Ptex-Textures-in-MARI"&gt;Support for PTex, the no-uv texturing system&lt;/a&gt;. I'm not clear, though, on how to convert a PTex painted object to UVs.&lt;br /&gt;
&lt;/em&gt; Linear color workflow&lt;br /&gt;
&lt;em&gt; A nice image-based lighting / physically based renderer preview (think &lt;a href="http://www.marmoset.co/"&gt;SkyShop or Toolbag&lt;/a&gt;)&lt;br /&gt;
&lt;/em&gt; Programmable shaders for the viewport, so you could paint directly into your game shaders  &lt;/p&gt;
&lt;p&gt;All in all, this was a great first impression. As I said, it was a demo not a hands on, so I'm reporting what I saw which I expect was chosen well. However I'll write more when I've had a chance to grab a demo and actually use it myself.  In the meantime here's &lt;a href="http://www.youtube.com/playlist?list=PLi2GhhsPL-RqCYZy6THx-nveDPadoeORB"&gt;a link to the Foundry's YouTube Channel &lt;/a&gt;if you want to see more.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 25 Mar 2014 09:30:00 -0700</pubDate><guid>tag:,2014-03-25:New-tools-watch:-MARI.html</guid></item><item><title>Back from GDC</title><link>/Back-from-GDC.html</link><description>&lt;p&gt;Well, another year, another &lt;a href="http://www.gdconf.com/"&gt;GDC&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;An upbeat show - the combination of the indie/mobile tidal wave and a new console generation has breathed some much needed life into the old beast - the business center was bigger than I've seen it in years, and full of people hustling.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://2.bp.blogspot.com/-FbM1i70bco8/Uy51CRDoDiI/AAAAAAABIBY/8_SGnjlJxeM/s1600/GDC.jpg"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-FbM1i70bco8/Uy51CRDoDiI/AAAAAAABIBY/8_SGnjlJxeM/s1600/GDC.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The floor was buzzing!  &lt;/p&gt;
&lt;p&gt;The absence of many familiar AAA names was still pretty striking - no lines around the block for the Activision/EA meat markets, no scores of kids waiting to show their portfolios to someone from Blizzard or whatnot.  &lt;/p&gt;
&lt;p&gt;There was, however, a booth from &lt;a href="http://www.spacex.com/"&gt;SpaceX&lt;/a&gt;. Someboedy told me they are &lt;em&gt;hiring tech artists&lt;/em&gt;.  See, we're conquering the world... from above!  &lt;/p&gt;
&lt;p&gt;And, there was an amazing bustle of activity from the indie-casual-mobile side. Tons and tons of booths, more than I remember ever seeing before. Most of them will probably be gone in two years, but it's still great to see people hustling around, coming up with plans, and trying to make something big after all the gloom of the last few years.  Here's hoping the many friends and former colleagues who've been battered by business can make up some lost ground in this new gold rush.  It's probably another bubble - remember when everybody wanted to hire a teal of 800 to talk on WOW? - but it's still better than sitting around moping.   &lt;/p&gt;
&lt;p&gt;All the movement has a lot to do with all the changes in the business that have broken the stifling rut of AAA juggernauts, sequel-itis, and me-too design that was hanging over us like a fog a few years back. All sorts of fun and interesting stuff happening.   &lt;/p&gt;
&lt;p&gt;Saw some cool tech too, which I'll talk about later in the week. In the meantime: so long SF!  &lt;/p&gt;
&lt;p&gt;Update: I did not see this talk, but &lt;a href="http://www.gamasutra.com/blogs/GregCostikyan/20140324/213784/2014_GDC_Rant_We_Had_a_Good_10_Years_But_the_Walls_are_Closing_In.php"&gt;this rant from Greg Costikyan&lt;/a&gt; does summarize neatly some things I am worrying about over the long haul...  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 22 Mar 2014 23:02:00 -0700</pubDate><guid>tag:,2014-03-22:Back-from-GDC.html</guid></item><item><title>Worst. CG. EVAR.</title><link>/Worst.-CG.-EVAR..html</link><description>&lt;p&gt;Anybody who has ever had to suffer through demo reel reviews will appreciate this:  This guy's &lt;a href="https://www.youtube.com/user/Really3D"&gt;Youtube channel&lt;/a&gt; is the Louvre of bad CG. And yes, he is in on the joke. But he is &lt;a href="http://www.patreon.com/Really3D"&gt;looking for donations&lt;/a&gt; so he can raise enough money for a PC which can render shadows. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 19 Mar 2014 12:15:00 -0700</pubDate><guid>tag:,2014-03-19:Worst.-CG.-EVAR..html</guid></item><item><title>Unity 5 announced</title><link>/Unity-5-announced.html</link><description>&lt;p&gt;So it looks like Unity &lt;a href="http://unity3d.com/5"&gt;is announcing Unity 5 a bit early&lt;/a&gt;.   It's a bit premature, since they are not done with the much anticipated 4.6 release (I've been wrestling with the existing, awful Unitry GUI system for months and I &lt;strong&gt;can't freaking wait &lt;/strong&gt;to push it over the gunwale!)   &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://unity3d.com/profiles/unity3d/themes/unity/images/pages/unity5/slider/doll2.jpg"&gt;&lt;img alt="" src="http://unity3d.com/profiles/unity3d/themes/unity/images/pages/unity5/slider/doll2.jpg" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Realtime GI... On my phone?!?!?&lt;br /&gt;
Tech notes after the jump  &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;Key points of interest:&lt;/p&gt;
&lt;h4&gt;They are integrating the realtime GI middleware &lt;a href="http://www.geomerics.com/"&gt;Enlighten &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is an interesting choice on a couple of levels; for one thing, I'm not sure most platforms out there are quite ready for realtime GI yet -- while you can _do _it, as Crytek has been doing for a couple of years, it's hard to do it in a real production environment with real assets and (more importantly) real performance constraints.  I wonder how many current Unity users really need this?  Given that Unity perf generally lags more traditional engines thanks to the C# layer switch costs and managed memory, I'm a bit surprised they took on something so high end.   They advertise this as 'mobile ready' - I'll believe it when I see it. &lt;a href="https://www.marmoset.co/skyshop"&gt;SkyShop &lt;/a&gt;makes gorgeous pictures on an iPad  - at around 20 fps for one object on screen. &lt;/p&gt;
&lt;p&gt;That said, it does make really pretty demos.&lt;/p&gt;
&lt;h4&gt;Physically based shaders.&lt;/h4&gt;
&lt;p&gt;This is very interesting, but the devil is in the details;  physically correct rendering is a very appealing idea, and is hard to beat when done right; but the mental and artistic adjustment costs can be pretty significant if you've been doing traditional anything-goes rendering for a decade or more.  Will be very interested to see if they manage to popularize this approach.&lt;/p&gt;
&lt;h4&gt;A 64 bit version of the editor.&lt;/h4&gt;
&lt;p&gt;How will this play out with the notoriously flaky GUID system in unity? And honestly, I'd take a 32 bit version that &lt;a href="http://tech-artists.org/forum/showthread.php?4584-Studio-Switching-to-Perforce-need-good-introduction-ramp-up"&gt;integrated better with source control&lt;/a&gt; and was better adapted to collaborative work environments.  And '&lt;a href="http://forum.unity3d.com/threads/48088-Prefab-saving-question"&gt;save my goddam prefab&lt;/a&gt;' would also be nice.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the other hand it looks like they're also making the editor more multi-core friendly, which gives me another reason to buy that &lt;a href="https://www.apple.com/mac-pro/"&gt;Mac Pro&lt;/a&gt; I've been dreaming of. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;More direct control over blend weights in Mecanim.&lt;/h4&gt;
&lt;p&gt;The recent addition of CrossFade() and Play() is already a big step forward, but this seems like \even more belated recognition that the original was too doctrinaire. Who, exactly, thought that an animation system that &lt;em&gt;didn't let you tell it what animations to play&lt;/em&gt; was a good idea?  &lt;/p&gt;
&lt;p&gt;The most exciting bullet on animation though is a real headsmacking 'Oh of course' things: the ability to add behavior scripts directly to animation states. This should go a &lt;em&gt;long&lt;/em&gt; way to enabling much more interesting -- and comprehensible -- procedural animation code. I'm &lt;em&gt;very excited.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Forking the web player between the old plugin and WebGL&lt;/h4&gt;
&lt;p&gt;you'll be able to publish to the traditional web player plugin, or to WebGL. Interesting to see how that plays out - I wonder if it will affect security sandbox issues with the web player. I'm still wishing it was easier to write real 3-d tools that could be published on the web, ala &lt;a href="http://clara.o/"&gt;clara.o&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Of course, once you get into _interesting _stuff, like shader work, "write once run anywhere" gets a little more difficult (I've been battling stencil shader difference between PC, IOS and Android for a while now, so I'm prejudiced).  Will this make it even dicier?  &lt;/p&gt;
&lt;h4&gt;A new audio system.&lt;/h4&gt;
&lt;p&gt;Not my area, but given the complaints I've heard from audio guys any change is probably for the good.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 18 Mar 2014 11:14:00 -0700</pubDate><guid>tag:,2014-03-18:Unity-5-announced.html</guid></item><item><title>If your Maya Python API is crashing</title><link>/If-your-Maya-Python-API-is-crashing.html</link><description>&lt;p&gt;Check out &lt;a href="http://around-the-corner.typepad.com/adn/2013/03/possible-misuse-of-mscriptutil-in-maya.html#"&gt;this useful post from Cyril Fauvelle&lt;/a&gt; on the ins and outs of the dreaded &lt;strong&gt;MScriptUtil&lt;/strong&gt;.  &lt;/p&gt;
&lt;p&gt;This kind of stuff is why I reserve API programming for only the knottiest of tasks.  maya.cmds won't clean-exit your Maya session if you reverse two lines by accident.  However, sometimes there's no alternative...  Here's hoping API 2.0 matures quickly and we can all forget all of this pointless distraction.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 18 Mar 2014 00:38:00 -0700</pubDate><guid>tag:,2014-03-18:If-your-Maya-Python-API-is-crashing.html</guid></item><item><title>Sliders!</title><link>/Sliders!.html</link><description>&lt;p&gt;Although GDMag is no more, I still occasionally get interesting press releases from PR flacks who haven't gotten the bad news. This morning,  one from &lt;a href="http://www.makehuman.org/"&gt;MakeHuman&lt;/a&gt; caught my eye.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://www.makehuman.org/sites/makehuman.org/files/images/3/img003_001.png"&gt;&lt;img alt="" src="http://www.makehuman.org/sites/makehuman.org/files/images/3/img003_001.png" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now with realistic back flab!  &lt;/p&gt;
&lt;p&gt;MakeHuman is a new open sourced parametric modeling / body morphing program written in Python.  The overall use case is similar to &lt;a href="http://poser.smithmicro.com/gallery.html"&gt;Poser&lt;/a&gt; or &lt;a href="http://www.daz3d.com/"&gt;Daz3d&lt;/a&gt;.  It seems like it also incorporates some of the underlying ideas from the venerable &lt;a href="http://www.facegen.com/"&gt;FaceGen&lt;/a&gt; - particularly having a few high level sliders that correlate changes across many different aspects of a model.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-MDesUhTFBYM/UyXbys3vv1I/AAAAAAABH9o/PEIhdil6obE/s1600/makeh.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-MDesUhTFBYM/UyXbys3vv1I/AAAAAAABH9o/PEIhdil6obE/s1600/makeh.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Prognathism += .05&lt;/h3&gt;
&lt;p&gt;The slider set that comes with MakeHuman is pretty good. I didn't do a count but I'd guess there are several hundred.  Unlike many similar programs you can get a decent variety of body types outside the Burne Hogarth / superhero range, with decent control over the high level feel of the model. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-OcSmU55zGkk/UyXt2tCPLvI/AAAAAAABH-Q/OQ70pbYgcwc/s1600/bodytypes.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-OcSmU55zGkk/UyXt2tCPLvI/AAAAAAABH-Q/OQ70pbYgcwc/s1600/bodytypes.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The high frequency details that you really wouild need to sell the model are still up to you, however - fat rolls, wrinkles, scars and so on are going to have to be painted on or hand modelled in a later step.&lt;/p&gt;
&lt;p&gt;Like most slider-modeler programs it's easy to create really disturbing imagery, but the underlying slider set is pretty good, with a decent amount of anatomically based sliders for facial and body proportions.  Like all slider-modellers it suffers from the tension between local control and overall believability - it's easy to start noodling on a detail only to discover you've undermined the whole product.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-um2YWid2fNk/UyXm310LhaI/AAAAAAABH94/bmzSUhs80SY/s1600/lotsasliders.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-um2YWid2fNk/UyXm310LhaI/AAAAAAABH94/bmzSUhs80SY/s1600/lotsasliders.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As always with these kinds of things , you are teleported right to the bottom of the &lt;a href="http://www.arts.rpi.edu/~ruiz/EGDFall08/postmortemreadings/Theodore%20Uncanny%20Valley.pdf"&gt;Uncanny Valley&lt;/a&gt; when you first start to twiddle things; the vacant stare can really get to you as you creep those sliders along (I will not speculate on which sliders &lt;em&gt;you _spend the most time creeping, but if you've looked at &lt;a href="https://www.google.com/search?q=poser+models&amp;amp;safe=active&amp;amp;espv=210&amp;amp;es_sm=122&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ei=Vt8lU7LwGoqDogS7q4CgBA&amp;amp;ved=0CAoQ_AUoAg&amp;amp;biw=1180&amp;amp;bih=974"&gt;Poser (NSFW) &lt;/a&gt;I bet you can guess which one gets the most over-use. Makes you think:: _What a missed microtransaction opportunity!&lt;/em&gt;).   &lt;/p&gt;
&lt;h3&gt;Use Case&lt;/h3&gt;
&lt;p&gt;If you go into any slider-modeller expecting shippable characters with strong personalities to pop out the other end, you'll be disappointed.  That's not where these tools shine.  &lt;/p&gt;
&lt;p&gt;One-button art is not really the point with these kinds of tools.  They are, however,  a fabulous way to kick off a ZBrush sculpt or play with ideas quickly.  The topology  on the base meshes that come with the package seems pretty good to me, although I'm sure plenty of artists will have their own preferences. However MakeHuman  allows you to provide alternate base meshes (another trick pioneered by FaceGen back in the day) so you could provide your own body meshes before hitting the sliders if you so desire.   &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://3.bp.blogspot.com/-6Ju73PA4gS8/UyXnRjYcyII/AAAAAAABH-A/maJd8o1mGy0/s1600/hai.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-6Ju73PA4gS8/UyXnRjYcyII/AAAAAAABH-A/maJd8o1mGy0/s1600/hai.png" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The base topo and skinning aren't bad  &lt;/p&gt;
&lt;p&gt;The program can also output ready-riigged characters witth a variety of skeletons to FBX and other intermediate formats.  As with the models, go in expecting to have to tweak the results - but again, its a huge accelerator for progress. The selection of hair, clothing and accessories is pretty small compared to what you'd get with the commercial alternatives, but adding your own is not too tough (an &lt;a href="http://www.aversionofreality.com/blog/2014/1/30/project-maiko-creating-the-base-bodysuit"&gt;example tutorial here&lt;/a&gt;)  &lt;/p&gt;
&lt;p&gt;For TA's one of the most interesting aspects of the program is the fact that it's mostly written in Python, and that the source code is freely available. If you're interested in adding your own sliders, or new deformation algorithms, or more body data the way is open.  One thing that I'd liove to see more of in the program is a mode based on real world body scan data - one of the ways FaceGen was ahead of its time was its use of statistical models rather than the more obvious 'make bigger butt cheeks' sliders, which meant that randomly generated characters usually started from a more plausible place than the familiar monstrosities of, say, Oblivion:  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://cloud-4.steampowered.com/ugc/542932685069387623/92E24D6F77E61891EFC6A2FC9A077BB70E4C31A5/1024x768.resizedimage"&gt;&lt;img alt="" src="http://cloud-4.steampowered.com/ugc/542932685069387623/92E24D6F77E61891EFC6A2FC9A077BB70E4C31A5/1024x768.resizedimage" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;yes, Oblivion, I'm talking about you.&lt;br /&gt;
All in all, not bad for free-as-in-beer!   &lt;a href="http://www.makehuman.org/content/download.html"&gt;Download it from here&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 16 Mar 2014 11:08:00 -0700</pubDate><guid>tag:,2014-03-16:Sliders!.html</guid></item><item><title>Morph targets revisited</title><link>/Morph-targets-revisited.html</link><description>&lt;p&gt;Here's an interesting demo vid from NewTek, spotlighting a new time-based sculpting workflow: in essence, an animatable Zbrush that let you retouch big simulation cache files.  It's easy to see how this could spark a renaissance in vertex animation.....  &lt;/p&gt;
&lt;p&gt;More details &lt;a href="https://www.lightwave3d.com/chronosculpt/"&gt;on the NewTek website&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 14 Mar 2014 22:16:00 -0700</pubDate><guid>tag:,2014-03-14:Morph-targets-revisited.html</guid></item><item><title>Descriptors and pythonic Maya properties</title><link>/Descriptors-and-pythonic-Maya-properties.html</link><description>&lt;p&gt;&lt;strong&gt;Updated 4/11/2015: fixing the embedded code that was busted by Blogger. &lt;/strong&gt;&lt;br /&gt;
I'm still working on the followup to &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;Rescuing Maya GUI From Itself&lt;/a&gt;, but while I was at it this &lt;a href="http://stackoverflow.com/questions/22291337/python-re-implementing-setattr-with-super"&gt;StackOverflow question&lt;/a&gt; made me realize that the same trick works for pyMel-style property access to things like position or rotation. If you're a member of the anti-pyMel brigade you might find this a useful trick for things like &lt;code&gt;pCube1.translation = (0,10,0)&lt;/code&gt;. Personally I use pyMel most of the time, but this is a good supplement or alternative for haterz or for special circumstance where pymel is too heavy. &lt;/p&gt;
&lt;p&gt;The goal is to be able to write something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xform&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Xform&lt;/span&gt;  
&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pCube1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translation&lt;/span&gt;  
&lt;span class="c1"&gt;# [0,0,0]  &lt;/span&gt;
&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The process s about as simple as it can get thanks to the magic of &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;descriptors&lt;/a&gt;. This example spotlights one advantage of descriptors over getter/setter property functions: by inheriting the two classes (&lt;code&gt;BBoxProperty&lt;/code&gt; and &lt;code&gt;WorldXformProperty&lt;/code&gt;) I can get 4 distinct behaviors (world and local, read-write and read-only) with very little code and no if-checks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;xform.py&lt;/span&gt;

&lt;span class="sd"&gt;Exposes the xform class: a simple way to set maya position, rotation and similar properties with point notation.&lt;/span&gt;

&lt;span class="sd"&gt;(c) 2014 Steve Theodore.  Distributed under the MIT License (http://opensource.org/licenses/MIT)  &lt;/span&gt;
&lt;span class="sd"&gt;TLDR: Use, change and share, please retain this copyright notice.  &lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.cmds&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cmds&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Descriptor that allows for get-set access of transform properties  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_q_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_e_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objtype&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_q_args&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_e_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_e_args&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WorldXformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Get-set property in world space  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_q_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ws&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_e_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ws&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BBoxProperty&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Read only property for bounding boxes  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bounding box is a read-only property!&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WorldBBoxProperty&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;WorldXformProperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BBoxProperty&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Read only property for bounding boxes  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Thin wrapper providing point-notation access to transform attributes&lt;/span&gt;

&lt;span class="sd"&gt;       example = Xform(&amp;#39;pCube1&amp;#39;)  &lt;/span&gt;
&lt;span class="sd"&gt;       # |pCube1  &lt;/span&gt;
&lt;span class="sd"&gt;       example.translation   &lt;/span&gt;
&lt;span class="sd"&gt;       # [0,0,0]  &lt;/span&gt;
&lt;span class="sd"&gt;       example.translation = [0,10,0]&lt;/span&gt;

&lt;span class="sd"&gt;    For most purposes Xforms are just Maya unicode object names.  Note this does  &lt;/span&gt;
&lt;span class="sd"&gt;    NOT track name changes automatically. You can, however, use &amp;#39;rename&amp;#39;:  &lt;/span&gt;
&lt;span class="sd"&gt;       example = Xform(&amp;#39;pCube1&amp;#39;)  &lt;/span&gt;
&lt;span class="sd"&gt;       example.rename(&amp;#39;fred&amp;#39;)  &lt;/span&gt;
&lt;span class="sd"&gt;       print example.Object  &lt;/span&gt;
&lt;span class="sd"&gt;       # |fred&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# so that the command will work on the string name of the object&lt;/span&gt;

    &lt;span class="c1"&gt;# property descriptors  These are descriptors so they live at the class level,  &lt;/span&gt;
    &lt;span class="c1"&gt;# not inside __init__!&lt;/span&gt;

    &lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;translation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rotation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;scale&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;pivots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pivots&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;world_translation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WorldXformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;translation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;world_rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WorldXformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rotation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;world_pivots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WorldXformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pivots&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="c1"&gt;# maya does not allow &amp;#39;world scale&amp;#39; - it&amp;#39;s dependent on the parent scale&lt;/span&gt;

    &lt;span class="c1"&gt;# always local  &lt;/span&gt;
    &lt;span class="n"&gt;scaleTranslation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;scaleTranslation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;rotateTranslation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rotateTranslation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;boundingBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BBoxProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;boundingBox&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;world_boundingBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WorldBBoxProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;boundingBox&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_name&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_name&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;        Returns a list of Xforms, using the same arguments and flags as the default ls command  &lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Xform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may note the absence of a &lt;code&gt;__metaclass__&lt;/code&gt;. In this case, with only a single class, a meta would be an unnecessary complication. Meanwhile the &lt;a href="https://github.com/theodox/mGui"&gt;code for MayaGUI itself is up on GitHub&lt;/a&gt;. Comments and/or contributions welcome!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 11 Mar 2014 15:15:00 -0700</pubDate><guid>tag:,2014-03-11:Descriptors-and-pythonic-Maya-properties.html</guid></item><item><title>A little bit of innovation</title><link>/A-little-bit-of-innovation.html</link><description>&lt;p&gt;If &lt;a href="http://techartsurvival.blogspot.com/2014/03/sigh.html"&gt;recent demise of XSI&lt;/a&gt; has you all depressed about the state of 3d software, here's a little preview of a new Modo feature that will make some modelers very happy  &lt;/p&gt;
&lt;p&gt;http://community.thefoundry.co.uk/store/plugins/meshfusion/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 11 Mar 2014 07:00:00 -0700</pubDate><guid>tag:,2014-03-11:A-little-bit-of-innovation.html</guid></item><item><title>*Sigh*</title><link>/*Sigh*.html</link><description>&lt;p&gt;It's bad enough we just lost &lt;a href="http://www.nytimes.com/2014/02/25/movies/harold-ramis-who-helped-redefine-what-makes-us-laugh-on-screen-dies-at-69.html?_r=0"&gt;Harold Ramis&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Now we've also lost &lt;a href="http://www.autodesk.com/products/autodesk-softimage/overview"&gt;SoftImage&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;Although I've never used XSI professionally, I was incredibly impressed by the people who made it, and I've always felt that XSI was a superior product to Max or Maya: making better use of modern hardware and showing off really innovative concepts in an industry that's gotten pretty damn stale for something that's sounds so high tech and is occasionally so magical.  &lt;/p&gt;
&lt;p&gt;In honor of the passing of this great piece of software, I'm going to reprint an article I wrote for &lt;em&gt;&lt;a href="http://www.gamasutra.com/topic/game-developer"&gt;Game Developer&lt;/a&gt;&lt;/em&gt; back in 2008 when the sale of XSI to Autodesk was first announced.  I'm afraid I may have been a little too optimistic. However I do think that the basic idea of the piece - that we let ourselves in for this kind of treatment by not being more informed and flexible consumers - is still true.   &lt;/p&gt;
&lt;p&gt;In the mean time, I'm going to go have an Irish wake for a poor old XSI.  (BTW, if you're waiting on the follow-up to &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;Rescuing Maya GUI From Itself, &lt;/a&gt;I'm cleaning up the code and writing tests before I go blabbing...)  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: Came upon &lt;a href="http://gfxspeak.com/2014/02/27/autodesk-revenue-transition/"&gt;this interesting set of charts&lt;/a&gt; (espceially the next to the last one at the bottom) which explains a lot of what's going on on here. Doesn't make it hurt less, though.&lt;/em&gt;&lt;br /&gt;
_&lt;br /&gt;
__Equally relevant: &lt;a href="http://forums.cgsociety.org/showthread.php?f=59&amp;amp;t=1159665"&gt;Autodesk's upgrade lockdown&lt;/a&gt;. _  &lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;strong&gt;The M-Word&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://atariage.com/forums/uploads/monthly_01_2014/post-4620-0-46419700-1389142399.jpg"&gt;&lt;img alt="" src="http://atariage.com/forums/uploads/monthly_01_2014/post-4620-0-46419700-1389142399.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you’ve been in a crunch-time media blackout for the past month, or shut down your internet connection to avoid election news,  or are the only games artist on the planet who’s never received a youtube link via email you may have missed an interesting little tidbit of news. On October 23 we learned that Avid is going to sell SoftImage, the Montreal-based developer or SoftImage|XSI to Autodesk.  If and when the deal goes through, all three of the biggest 3d modeling and animation packages will all belong to a single company.  &lt;/p&gt;
&lt;p&gt;Even if you managed to miss the announcement, you can probably predict the immediate reactions anyway.   In the XSI community, the dominant mode was shell-shock.  The “Resistance is Futile” jokes and Borg-themed Photoshop jobs could not disguise the level of emotion in the air -- the poster on the XSI forums who simply said “I think I’ll cry” wasn’t kidding.  There was a smattering of optimists suggesting the deal would give more people access to some of XSI’s best tech.  A few pragmatists found consolation in the idea that the conglomeration would give cross-package data transfer the attention it deserves.  But the most common reactions were shock and anxiety.    &lt;/p&gt;
&lt;p&gt;It’s hardly surprising that the possibility of being forced to abandon the comfort and security of a familiar environment would give XSI users the heebie-jeebies.  The official Pixel Pusher line has always been that any professional game artist should be competent in at least two packages. But even traditional artists are famous for being emotionally attached to their tools (never, ever venture an opinion about Kolinsky sable brushes in mixed company!) For us, who spend so much of our lives poking at one particular set of dialogs or buttons, the thought of being forced to swap them for a different, unfamiliar set of dialogs and buttons is deeply disturbing.  The fact that some XSI fans were so distraught they’d consider switching to Blender out of pique is an index of how emotional this issue can be.  &lt;/p&gt;
&lt;p&gt;What’s surprising, though, is that a similar miasma could be seen in the Max and Maya forums after the buyout announcement. Emotions ran high even for those not affected directly. Hardcore Maya fans suffered flashbacks as they relived the 2006 buyout of Alias.  More commonly, though, users were grimly pondering the future of graphics software in general, rather than the fate of any particular package.  Some naysayers worried that technology would stagnate without the underdogs like XSI striving to gain an advantage through innovation. Others fretted that consolidation in the industry means the exciting, Wild-West days of graphics are really over.  And many users of all three packages speculated that the lack of competition will lead to price gouging.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;You Are Elected Chairman of the Board&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://adena.com/adena/mo/chpay50.jpg"&gt;&lt;img alt="" src="http://adena.com/adena/mo/chpay50.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before we pronounce the graphics software business dead, we ought to look at this deal in its historical context.  These kinds of corporate dramas are unsettling for artists because they are an unsubtle reminder that we creative types are dependent on huge, impersonal corporations to get anything done. Masters-of-the-Universe style MBA analysis isn’t part of our job descriptions, so it’s hard for use mere users to figure out how to respond. A little bit of history, however, is often a good way to get some perspective; so here’s a very abbreviated walk through the life and times of SoftImage to help you understand today’s news.&lt;/p&gt;
&lt;p&gt;XSI may be the youngest of the big three graphics packages, but SoftImage the company is one of the oldest firms in 3d graphics software.  The original “SoftImage Creative Environment” debuted in 1988, but in an economic environment very different from todays.  3D graphics was very closely akin to rocket science – for one thing, it was mysterious new high-tech discipline and for another you needed an exotic workstation that cost upwards of $50,000&lt;a href="file:///E:/Users/Stephen%20Theodore/Documents/My%20Dropbox/Dropbox/Columns/2008/1108/1108%20-%20M%20Word.docx#_ftn1"&gt;[1]&lt;/a&gt; to do either one.  It was a very esoteric, very pricey business.  &lt;/p&gt;
&lt;p&gt;SoftImage|3D  was the first commercial application to offer artist-friendly IK (1991) and it quickly became the gold standard for computer animation.  Many seminal CGI films of the early ‘90’s were animated in SoftImage, most famously &lt;strong&gt;Jurassic Park.  &lt;/strong&gt;Those early days of the CG revolution were heady times. Hollywood stood ready to firehose money onto anybody who could render a good looking triangle  -- SIGGRAPH veterans still murmur nostalgically about the heydays of studio parties – and the boom times were good for the company. In 1992, the Montreal firm went public to much acclaim. ****&lt;/p&gt;
&lt;p&gt;Success also changed the way the industry worked.   By the mid ‘90s, the explosion of 3d game development shifted the industry dynamic: the ranks of 3d artists and animators expanded enormously, but few games companies could afford to put the equivalent of a luxury sports car under every animator’s desk.  Affordable PCs with primitive graphics cards started stealing business from workstations and PC based packages like Autodesk’s 3d Studio started making inroads against pricey workstation software.  &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;From Sale Of Stock You Get $45  &lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://adena.com/adena/mo/ccstock.jpg"&gt;&lt;img alt="" src="http://adena.com/adena/mo/ccstock.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Microsoft, naturally, wanted to see the PC forces prevail . In 1994 they bought SoftImage for $130 million – a pretty high price given that the whole 3D software market was only around $60 million a year back then. But box sales weren’t the real goal: Microsoft needed to port a top-end workstation graphics package to Windows and legitimize the market for high end graphics on Windows. &lt;/p&gt;
&lt;p&gt;For many SoftImage vets, the events of last month may have an eerily familiar ring, right down to the “you will be assimilated” jokes (although,  in 1994 the reference was forgivably fresh).  &lt;/p&gt;
&lt;p&gt;The MS acquisition was not a very pleasant experience for SoftImage users. Not only were many Unix devotees forcibly converted to a new OS, but the demands of porting and cross-platform development shunted innovation to the sidelines.  It took almost 7 years for SoftImage|3D to get from version 3.0 to version 4.0 , and the package lost a lot of its technological edge to newer platforms like 3dStudio Max and Maya.  It’s not surprising that the survivors of that first buyout react suspiciously to the latest.&lt;/p&gt;
&lt;p&gt;By 1998, Microsoft had achieved its strategic objective: Windows had triumphed and graphics workstations were headed for the history books.  SoftImage became superfluous.  Microsoft sought out a buyer and found Avid, a rising power in the digital video editing business which coveted the company’s VFX and compositing tech.  Even if the core 3d business was losing steam, the deal still ran a cool $285 million – a price that might have been inflated by internet bubble, but it’s still pretty impressive.  &lt;/p&gt;
&lt;p&gt;Avid’s stewardship was a lot healthier for SoftImage as a tech company. SoftImage XSI, the long overdue gut-rehab of the aging SoftImage|3D, was released in 2000.  The product started out a bit slow – version 1.0 had no poly modeling tools! – but gained steam with impressive tech and clean new architecture. Many artists have lusted after XSI’s GATOR system for mapping one mesh onto another (supporting everything from texture transfers to skin weight matching) , its non-linear animation mixer, Face Robot facial animation technology, and most recently the high-perfomance ICE system for node-based custom object creation.    &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Second Prize in a Beauty Contest, Collect $11&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, the eningeering success of the product did not translate into success for SoftImage’s owners.  Avid’s core business has been hit hard by the proliferation of lower-cost video editing software like Apple’s Final Cut Pro.  Even though the SoftImage was profitable, it wasn’t profitable enough: to get a sense of the scale, you might note that the $35 million sale price for the company won’t even cover Avid’s losses for the 3rdquarter of this year.  As times got leaner, Avid needed to focus on protecting its core video editing business, so it started hunting for a buyer early this year.  Autodesk, as home to both of XSI’s a main rivals, was not the first buyer who was approached… but it was the final one, which is the one that counts.  &lt;/p&gt;
&lt;p&gt;What lessons can you learn from this little history?   &lt;/p&gt;
&lt;p&gt;First, it doesn’t provide a lot of evidence for conspiracy theories about monopoly power.  The fact is, supplying 3d software is pretty small potatoes in the grand scheme of capitalism.  It’s been said that there are only about half a million seats of full 3d packages in the world – sounds like a lot, but that’s smaller than the number of people in the &lt;em&gt;beta program&lt;/em&gt; alone for Photoshop.  It’s not a market where achieving dominance is a huge financial win.  All three turnovers at SofImage  have been driven by strategic concerns that didn’t have to do with monopoly power or market domination.  Microsoft bought SoftImage to catalyze the switch from workstations to PCs. Avid bought it to solidify its FX and compositing business and saw modeling and animation through that prism.  The most recent sale didn’t originate with a sinister plot from inside of Autodesk, it originated with Avid’s accountants.    &lt;/p&gt;
&lt;p&gt;The more interesting – but also more depressing – aspect of this story, though, isn’t concerned with money. You could read the whole thing as a stirring tale of steadfast devotion. It was user loyalty that sustained SoftImage during the drift of the Microsoft years, when technical sluggishness might have let Max and Maya completely marginalize the original SoftImage.  The emotional reaction to the news is proof of how viscerally loyal users are to their favorite tools.  &lt;/p&gt;
&lt;p&gt;Unfortunately, that loyalty is a two edged sword.  The last few version of XSI were consistently excellent -- but no combination of cool features and good design managed to seduce away enough users from other packages to secure SoftImage’s future.  They competed on tech and features and did a great job – but it wasn’t enough to overcome the entrenched loyalties of Max and Maya fans. Individual artists might admire this feature or that bit of UI, but collectively we’re reactionaries: we stick with what we know. On top of that, most studios have tools and processes are designed around a particular package and aren’t eager to chuck those investments for the sake of sexy icons or a cleaner interface.  &lt;/p&gt;
&lt;p&gt;The fact is, we don’t really reward tools companies for pushing the envelope.  Even when something new does break into the scene, we try to shoehorn it into our existing workflows rather than embracing the new. We’re the last people to start denouncing monopolies and phoning up the Federal Trade Commission. Most of us have already folded our hands by letting ourselves become emotionally attached or technically beholden to particular bits of software.  If you’re in the same camp as the XSI user who posted “they’ll have to pry my license from my cold dead fingers,” you live in a virtual monopoly already.   &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Get Out Of Jail Free?&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://adena.com/adena/mo/chjail.jpg"&gt;&lt;img alt="" src="http://adena.com/adena/mo/chjail.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;br /&gt;
&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That’s not to say that things aren’t going to change. The absence of major-league alternatives will definitely give Autodesk a much freer hand in choosing both its price points and research directions. T fact that their track record to date is pretty benign is comforting, but the knowledge that we’re dependent on their altruism from here on out should give us pause.  Autodesk has put some genuine effort into trying to explain the deal to users (there’s an interesting interview featuring the GMs of Autodesk and SoftImage up on the Autodesk website, with more info promised as the deal solidifies) but apart from reassurances that XSI isn’t going to go away overnight, the magic 8-ball is pretty cloudy.  &lt;/p&gt;
&lt;p&gt;The uncertainty is tough, particularly for anxious XSI users but for all of us. We all know the mantra, “it’s the artist not the tools” – but in practice it’s sometimes hard to say where the artist leaves off and the tool begins. The feeling that such an important part of our lives is out of our control is unnerving. &lt;/p&gt;
&lt;p&gt;What can we do about it? As individuals, that means being open to new software and new ways of working, so that we make an environment where companies have a real incentive to give us new and better tools. As studios we should invest in in-house tools rather than relying too faithfully on any single vendor.  As an industry we should push harder for more consistent, open standards in data formats and for open source tools so we can make our pipelines less dependent on the ups and downs of individual companies.  None of these steps will magically unwind the clock but they will give us a little more input into this critical part of our lives.   &lt;/p&gt;
&lt;p&gt;Or, we could all switch to Blender… But man, I hate the way they do their menus. It’s not like Max. You couldn’t pay me enough to switch.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thesleuthjournal.com/wp-content/uploads/2013/10/monopoly-go-to-jail-card12.jpg"&gt;&lt;img alt="" src="http://www.thesleuthjournal.com/wp-content/uploads/2013/10/monopoly-go-to-jail-card12.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="file:///E:/Users/Stephen%20Theodore/Documents/My%20Dropbox/Dropbox/Columns/2008/1108/1108%20-%20M%20Word.docx#_ftnref1"&gt;[1]&lt;/a&gt;That’s $65,000 in today’s dollars.  For a machine less powerful than an iPhone.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 04 Mar 2014 21:12:00 -0800</pubDate><guid>tag:,2014-03-04:*Sigh*.html</guid></item><item><title>Rescuing Maya GUI from itself</title><link>/Rescuing-Maya-GUI-from-itself.html</link><description>&lt;p&gt;&lt;strong&gt;Update 4/11/2015: Fixed the code examples which were blown away in the current Blogger template, and also dead image links&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://techartsurvival.blogspot.com/2014/02/pity-for-outcast.htm"&gt;Last time out&lt;/a&gt; was devoted to a subject most TA's already know: the shortcomings of Maya's native GUI. This time we're going to start looking at ways to rescue Maya from itself.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.fanderson.org.uk/news/images3/darlingpuppet.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;And if you don't know what that picture is there, &lt;a href="http://youtu.be/9XNWA_yZvWo&amp;quot;"&gt;go here first&lt;/a&gt; - this tech-art stuff is not as important as a good understanding of &lt;a href="&amp;quot;http://en.wikipedia.org/wiki/Thunderbirds_(TV_series)"&gt;Thunderbirds!&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;With that out of the way:&lt;/p&gt;
&lt;p&gt;Any good rescue mission starts with objectives. The three main drawbacks to coding in Maya GUI natively are &lt;strong&gt;nasty syntax&lt;/strong&gt;, clunky &lt;strong&gt;event handling&lt;/strong&gt;, and difficult &lt;strong&gt;management&lt;/strong&gt;. In today's thrill-packed episode, we're going lay some foundations for tackling that old-school syntax and dragging Maya GUI kicking and screaming into the 21st century.&lt;/p&gt;
&lt;h1&gt;Under the surface&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://www.foundation3d.com/forums/attachment.php?attachmentid=74848&amp;amp;d=1410941489" /&gt;&lt;/p&gt;
&lt;p&gt;Composing a Maya GUI in code is annoying because the only way to access the properties of a Maya GUI node is via a command - there's no way to get at the properties directly without a lot of command mongering.&lt;/p&gt;
&lt;p&gt;Sure, the purist might say that alternatives are just &lt;a href="http://www.javakey.net/1-java/92b15b2251bd8f85.htm"&gt;syntax sugar&lt;/a&gt; - but Maya GUI's drawbacks are are (a) an obstacle to readability (and hence maintenance) and (b) such a big turn off that people don't bother to learn what native GUI can do. This is particularly true for formLayouts, which are the most useful and powerful - and also the least handy and least user-friendly - way of layout of controls in Maya. All the power is no use if you just stick with columnLayouts and hand-typed pixel offsets because setting things up takes a whole paragraph's worth of typing.&lt;/p&gt;
&lt;p&gt;So, the first thing I'd like to ponder is how to cut out some of the crap. Not only will a decent wrapper be more pleasant to read and write - at some point in the future when we get to talk about styling controls, real property access will be a big help in keeping things tidy. Plus, by putting a wrapper around property access we'll have a built in hook for management and cleaning up event handling as well, even though that's a topic for a future post.&lt;/p&gt;
&lt;p&gt;The upshot of it all: we're stuck with the under-the-hood mechanism, but there's no reason we can't wrap it in something prettier. Consider this simple example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.cmds&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cmds&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExampleButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;  
&lt;span class="c1"&gt;# hello world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is &lt;a href="http://nbviewer.ipython.org/urls/gist.github.com/ChrisBeaumont/5758381/raw/descriptor_writeup.ipynb"&gt;plain-vanilla Python properties&lt;/a&gt; in action. It's easy to extend it so you can set 'Label' also:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    @Label.setter  
    def Label(self, val):  
        return self.CMD(self.Widget, e=True, label=val)

# add this to the example above:  
btn.Label = &amp;quot;Goodbye cruel world&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-AOcq5Y6WCSA/UwLm4_AUSoI/AAAAAAABH7s/3FL8iI1r9TU/s1600/gbcw.png" /&gt;&lt;/p&gt;
&lt;h1&gt;Rescuing the rescuers&lt;/h1&gt;
&lt;p&gt;While this is a nice trick, it doesn't take long to figure out that replacing the whole Maya GUI library with this will take a lot of annoying, repetitive, and typo-prone code. &lt;code&gt;cmds.button&lt;/code&gt; alone has 34(!) properties to manage, and real offenders like &lt;code&gt;rowLayout&lt;/code&gt; have a lot more. Writing wrappers for all of these is a huge waste of valuable human brainpower&lt;/p&gt;
&lt;p&gt;Luckily, that's not the end. Property objects are really instances of &lt;a href="http://docs.python.org/2/howto/descriptor.html"&gt;Python descriptors&lt;/a&gt;, which means they are classes. And since they are classes, we have some more options for creating them.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/2/howto/descriptor.html"&gt;The official docs&lt;/a&gt; on descriptors are kind of opaque, but the link I shared above to &lt;a href="http://nbviewer.ipython.org/urls/gist.github.com/ChrisBeaumont/5758381/raw/descriptor_writeup.ipynb"&gt;Chris Beaumont's article on properties and descriptors&lt;/a&gt; does a great job of explaining what they do: which is, in a nutshell, to provide property like services in the form of class-level objects. (Update: here's &lt;a href="http://nedbatchelder.com/blog/201306/explaining_descriptors.html"&gt;great five minute video&lt;/a&gt; too). Instead of defining methods and decorating them as we did above, you create a class which handles the function-to-property behavior (both getting and setting) and stick it directly into your own class namespace, the same way you would place a def or a constant (as an aside, this placement is why the CMD field in the example is a class field rather than a hard code or an instance property - it makes it easy for the descriptor to call the right cmds function and flags. We could make a separate class for &lt;code&gt;cmds.floatField&lt;/code&gt;, for example, swapping out only the class level CMD parameter, and it would 'just work' the same way).&lt;/p&gt;
&lt;p&gt;The gotcha to bear in mind with descriptors is that they are separate objects that live in the class, &lt;em&gt;not&lt;/em&gt; instance members You don't create them inside your &lt;code&gt;__init__&lt;/code&gt;, you declare them in the class namespace. They don't belong to individual instances - that's why in the example below you'll notice that &lt;em&gt;self&lt;/em&gt; refers to the descriptor itself, and not to the ExampleButton class (this is how each descriptor in the example below remembers how to format it's own call to the maya command under the hood). &lt;/p&gt;
&lt;p&gt;The "bad" part of that is that you the descriptor is ignorant of the class instance to which it is attached when you call it. Pyhton will pass the instance in to the descriptor, as you'll see in the example below. The good part, on the other hand, is that the descriptor itself can (if need be) have a memory of its own - that's why the descriptors in the next example can remember which flags to use when they call the underlying Maya GUI commands.&lt;/p&gt;
&lt;p&gt;While this sounds scary, it's mostly a minor mental adjustment - once you do a couple times it will be routine. And all the oddness is concentrated in the definition of the descriptor objects themselves - once the descriptor is actually declared, you access it just as if it were a conventional instance property and all is plain-jane &lt;code&gt;foo.bar = baz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's the button example re-written with a couple of descriptors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;CtlProperty&lt;/span&gt; (&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;    Property descriptor.  When applied to a Control-derived class, invokes the correct Maya command under the hood to get or set values  &lt;/span&gt;
&lt;span class="s"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;flag&lt;/span&gt;, &lt;span class="n"&gt;cmd&lt;/span&gt;):  
        &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;callable&lt;/span&gt;(&lt;span class="n"&gt;cmd&lt;/span&gt;), &lt;span class="s"&gt;&amp;quot;cmd flag must be a maya command for editing gui objects&amp;quot;&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Flag&lt;/span&gt; = &lt;span class="n"&gt;flag&lt;/span&gt;  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Command&lt;/span&gt; = &lt;span class="n"&gt;cmd&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__get__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;obj&lt;/span&gt;, &lt;span class="n"&gt;objtype&lt;/span&gt;):  
        &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;        Class instance &amp;lt;obj&amp;gt; and its type &amp;lt;objtype&amp;gt; are passed in automatically.   &lt;/span&gt;
&lt;span class="s"&gt;        &amp;lt;self&amp;gt; is this descriptor object, NOT an owning class instance!  &lt;/span&gt;
&lt;span class="s"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="n"&gt;ctrl&lt;/span&gt; = &lt;span class="n"&gt;obj&lt;/span&gt;.&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hasattr&lt;/span&gt;(&lt;span class="n"&gt;obj&lt;/span&gt;, &lt;span class="s"&gt;&amp;quot;Widget&amp;quot;&lt;/span&gt;) &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;(&lt;span class="n"&gt;obj&lt;/span&gt;)  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Command&lt;/span&gt;(&lt;span class="n"&gt;ctrl&lt;/span&gt;, **{&lt;span class="s"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;:&lt;span class="n"&gt;True&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Flag:True&lt;/span&gt;})

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__set__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, &lt;span class="n"&gt;obj&lt;/span&gt;, &lt;span class="nb"&gt;value&lt;/span&gt;):  
        &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;        Again, the owning instance is passed in as &amp;lt;obj&amp;gt; automatically  &lt;/span&gt;
&lt;span class="s"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="n"&gt;ctrl&lt;/span&gt; = &lt;span class="n"&gt;obj&lt;/span&gt;.&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hasattr&lt;/span&gt;(&lt;span class="n"&gt;obj&lt;/span&gt;, &lt;span class="s"&gt;&amp;quot;Widget&amp;quot;&lt;/span&gt;) &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;(&lt;span class="n"&gt;obj&lt;/span&gt;)  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Command&lt;/span&gt;(&lt;span class="n"&gt;ctrl&lt;/span&gt;, **{&lt;span class="s"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;:&lt;span class="n"&gt;True&lt;/span&gt;, &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Flag:value&lt;/span&gt;})

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ExampleButton&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;CMD&lt;/span&gt; = &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;button&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, *&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Widget&lt;/span&gt; = &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;CMD&lt;/span&gt; (*&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;)

    &lt;span class="n"&gt;Label&lt;/span&gt; = &lt;span class="n"&gt;CtlProperty&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;, &lt;span class="n"&gt;CMD&lt;/span&gt;)  
    &lt;span class="n"&gt;BackgroundColor&lt;/span&gt; = &lt;span class="n"&gt;CtlProperty&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;bgc&amp;#39;&lt;/span&gt;, &lt;span class="n"&gt;CMD&lt;/span&gt;)

&lt;span class="c c-Singleline"&gt;# same example as before      &lt;/span&gt;
&lt;span class="n"&gt;example&lt;/span&gt; = &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;window&lt;/span&gt;()  
&lt;span class="n"&gt;col&lt;/span&gt; = &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;columnLayout&lt;/span&gt;()  
&lt;span class="n"&gt;btn&lt;/span&gt; = &lt;span class="n"&gt;ExampleButton&lt;/span&gt;(&lt;span class="s"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;)  
&lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;showWindow&lt;/span&gt;(&lt;span class="n"&gt;example&lt;/span&gt;)  
&lt;span class="n"&gt;btn&lt;/span&gt;.&lt;span class="n"&gt;Label&lt;/span&gt; = &lt;span class="s"&gt;&amp;quot;Thunderbirds are GO!&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;btn&lt;/span&gt;.&lt;span class="n"&gt;BackgroundColor&lt;/span&gt; = (&lt;span class="mf"&gt;.25&lt;/span&gt;, &lt;span class="mi"&gt;1&lt;/span&gt;, &lt;span class="mf"&gt;.25&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-nCT8aEzquIE/UwLr8_Ct6wI/AAAAAAABH78/wVp86oOdf24/s1600/t+are+g.png" /&gt;&lt;/p&gt;
&lt;p&gt;That's more like it - only two lines of data-driven code where we used to have six (well, not counting CtlProperty - but thats a one time cost to be spread out over scads of different GUI classes later). It's a lot easier to read and understand as well, and contains far fewer opportunities for typos.&lt;/p&gt;
&lt;p&gt;But… we're still talking 34 lines like that for &lt;code&gt;cmds.button&lt;/code&gt;, and God knows how many for &lt;code&gt;cmds.rowColumLayout&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sigh.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Act III&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://www.clevescene.com/imager/thunderbirds-stiff-acting-all-around/b/original/1504418/2808/1875857.t.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;No rescue drama is complete without a false climax, and this is ours. Despite the ominous music just before the commercial,. the situation is not really that bad. The last example shows that the problem is not really one of &lt;em&gt;code&lt;/em&gt; any more, it's just &lt;em&gt;data&lt;/em&gt;. Since descriptors are objects, you can crank them out like any other object: provide a list of the appropriate flags for a given class and you can crank out the correct descriptors, as they say, "&lt;a href="https://www.youtube.com/watch?v=Z3qK8gT5LLg"&gt;automagically&lt;/a&gt;."&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;As long as you promise not to use that stupid word around me.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fortunately for our rescue team, Python treats classes the same way it treats anything else: as objects that can be created and maniuplated.&lt;/p&gt;
&lt;p&gt;If you use the Python builtin &lt;code&gt;type&lt;/code&gt; on any Python class, you'll get back &lt;br /&gt;
&lt;code&gt;type 'type'&lt;/code&gt;. In other words, a Python class definition is itself an instance of the class 'type'. How… &lt;em&gt;meta.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The reason this matters to us is that we can fabricate classes the same way fabricate other kinds of Python things. You would not hesitate to crank out a list of strings assembled in code: there's no reason you can't do the same thing for descriptors! You could do this by hand, creating type instances and filling them out yourself: types take three arguments: a string name, a list of parent types, and dictionary of named fields and propertis. Thus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def constructor(self, name):  
    self.Name = name

example = type(&amp;#39;Example&amp;#39;, (), {&amp;#39;__init__&amp;#39;:constructor } )

Test = example(&amp;quot;Hello world&amp;quot;)  
# &amp;lt;__main__.Example object at 0x00000000022D6198&amp;gt;  
Test.Name  
# Hello world
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However this would send you down a possible rabbit hole, since the idea we're really chasing is a way to mass produce classes to make UI coding easier and it would not be very easy if all of the classes had to be coded up in this clunky way. Luckily Python has an obscure but extremely powerful mechanism designed for just this sort of problem. Because, you know, it's the language of geniuses.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://shapersofthe80s.files.wordpress.com/2011/01/thunderstampbrains.jpg" /&gt;&lt;/p&gt;
&lt;h1&gt;"Brains, Activate the Metaclass"&lt;/h1&gt;
&lt;p&gt;The helpful MacGuffin in this case it the &lt;em&gt;&lt;a href="http://docs.python.org/2/reference/datamodel.html#customizing-class-creation"&gt;Metaclass&lt;/a&gt;. _Metaclasses have a reputation - not _entirely&lt;/em&gt; undeserved - as deep voodoo. The most commonly circulated quote about them is that "If you can solve the problem without a metaclass, you should."&lt;/p&gt;
&lt;p&gt;However, in our case we really can't solve the problem without some form of class factory. In particular, we need a way to bang out classes with the right collection of Descriptors to cover all of the zillions of flags in the Maya GUI system. So just this once we can put on the big blue glasses and lab coats and venture into the super secret lair of the mad metaclass scientists.&lt;/p&gt;
&lt;p&gt;The job of a metaclass is to customize the act of class creation. When a class is first defined, python will pass the type it creates (that same object we played with in the last example) to the metaclass for further manipulation. The &lt;code&gt;__new__&lt;/code&gt; function of the metaclass will be called on the just-defined type, taking it name, parents and internal dictionary as arguments. The &lt;code&gt;__new__&lt;/code&gt; can fiddle with any of these as it sees fit before passing it along for actual use.&lt;/p&gt;
&lt;p&gt;As you can imagine, this is a good time for PythonMan's Uncle Ben to remind us that 'with great power comes great responsibility' - it's easy to shoot yourself in the foot with a metaclass, since you can make changes to the runtime versions of your classes that will not be represented in your source files. Don't just run off and meta all over everything in sight. A minimalist approach is the best way to stay sane.&lt;/p&gt;
&lt;p&gt;But you'd probably like to see what this really looks like in practice. Here's an example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ControlMeta&lt;/span&gt;(&lt;span class="n"&gt;type&lt;/span&gt;):  
    &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;    Metaclass which creates CtlProperty  objects for maya gui proxies  &lt;/span&gt;
&lt;span class="s"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;CONTROL_ATTRIBS&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;annotation&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;backgroundColor&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;defineTemplate&amp;#39;&lt;/span&gt;,   
                &lt;span class="s"&gt;&amp;#39;docTag&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;dragCallback&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;dropCallback&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;enable&amp;#39;&lt;/span&gt;,   
                &lt;span class="s"&gt;&amp;#39;enableBackground&amp;#39;&lt;/span&gt;,  &lt;span class="s"&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;fullPathName&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;,    
                &lt;span class="s"&gt;&amp;#39;manage&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;noBackground&amp;#39;&lt;/span&gt;,  &lt;span class="s"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;,   
                &lt;span class="s"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;preventOverride&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;useTemplate&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;visible&amp;#39;&lt;/span&gt;,   
                &lt;span class="s"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;]

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__new__&lt;/span&gt;(&lt;span class="n"&gt;cls&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;parents&lt;/span&gt;, &lt;span class="n"&gt;kwargs&lt;/span&gt;):  
        &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;        __new__ is called then classes using this meta are defined.  It will add   &lt;/span&gt;
&lt;span class="s"&gt;        all of the items in CONTROL_ATTRIBS to the new class definition as   &lt;/span&gt;
&lt;span class="s"&gt;        CtlProperty descriptor objects using the CMD field (a maya.cmds command)   &lt;/span&gt;
&lt;span class="s"&gt;        provied in the outer class.  &lt;/span&gt;
&lt;span class="s"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;CMD&lt;/span&gt; = &lt;span class="n"&gt;kwargs&lt;/span&gt;.&lt;span class="n"&gt;get&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;CMD&amp;#39;&lt;/span&gt;, &lt;span class="n"&gt;None&lt;/span&gt;)

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;.&lt;span class="n"&gt;get&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;CMD&amp;#39;&lt;/span&gt;):  
            &lt;span class="n"&gt;CMD&lt;/span&gt; = &lt;span class="n"&gt;parents&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;].&lt;span class="n"&gt;CMD&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ControlMeta&lt;/span&gt;.&lt;span class="n"&gt;CONTROL_ATTRIBS:&lt;/span&gt;  
            &lt;span class="n"&gt;kwargs&lt;/span&gt;[&lt;span class="n"&gt;item&lt;/span&gt;] = &lt;span class="n"&gt;CtlProperty&lt;/span&gt;(&lt;span class="n"&gt;item&lt;/span&gt;, &lt;span class="n"&gt;CMD&lt;/span&gt;)

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;ControlMeta&lt;/span&gt;, &lt;span class="n"&gt;cls&lt;/span&gt;).&lt;span class="n"&gt;__new__&lt;/span&gt;(&lt;span class="n"&gt;cls&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;parents&lt;/span&gt;, &lt;span class="n"&gt;kwargs&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The actual code is pretty simple. It takes the type object created by the 'real' class and grabs the contents of the CMD class field (remember that from the earlier examples?). Then it loops through its own list of command names and inserts them all into the new class as descriptors with the correct commands and the maya command that was stored in the command object. So our earlier button example becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://gist.githubusercontent.com/theodox/9106403/raw/60a06cba76748d7b157a5219349888f7b0bf0214/ButtonWithMeta.py  
class MetaButton(object):  
    CMD = cmds.button  
    __metaclass__ = ControlMeta

    def __init__(self, *args, **kwargs):  
        self.Widget = self.CMD (*args, **kwargs)


w = cmds.window()  
c = cmds.columnLayout()  
mb = MetaButton(&amp;quot;button1&amp;quot;)  
cmds.showWindow(w)

print mb.exists  # We never had to add this one!  
# True  
print mb.visible  # or this  
# True
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is a minor problem with this very truncated example, however: there's no label or command in the the metaclass, so the MetaButton has no button specific properties - only the generic ones in our list (which I made by trolling the flags for &lt;code&gt;cmds.control&lt;/code&gt;, the 'base class' of all Maya control commands).&lt;/p&gt;
&lt;p&gt;This is easily fixed by adding properties that are specific to buttons to a class field, and tweaking the metaclass to read and use them the same way it already uses the CMD class field. Like CMD, these are good class-level attributes since the collection of flags is shared by all buttons, fields or whatever.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ControlMeta&lt;/span&gt;(&lt;span class="n"&gt;type&lt;/span&gt;):  
    &lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="s"&gt;    Metaclass which creates CtlProperty  objects for Control classes  &lt;/span&gt;
&lt;span class="s"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;CONTROL_ATTRIBS&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;annotation&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;backgroundColor&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;defineTemplate&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;docTag&amp;#39;&lt;/span&gt;,   
                        &lt;span class="s"&gt;&amp;#39;dragCallback&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;dropCallback&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;enable&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;enableBackground&amp;#39;&lt;/span&gt;,   
                        &lt;span class="s"&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;fullPathName&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;,  &lt;span class="s"&gt;&amp;#39;manage&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;noBackground&amp;#39;&lt;/span&gt;,   
                        &lt;span class="s"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;preventOverride&amp;#39;&lt;/span&gt;,   
                        &lt;span class="s"&gt;&amp;#39;useTemplate&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;visible&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;]


    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__new__&lt;/span&gt;(&lt;span class="n"&gt;cls&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;parents&lt;/span&gt;, &lt;span class="n"&gt;kwargs&lt;/span&gt;):

        &lt;span class="n"&gt;CMD&lt;/span&gt; = &lt;span class="n"&gt;kwargs&lt;/span&gt;.&lt;span class="n"&gt;get&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;CMD&amp;#39;&lt;/span&gt;, &lt;span class="n"&gt;None&lt;/span&gt;)  
        &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; = &lt;span class="n"&gt;kwargs&lt;/span&gt;.&lt;span class="n"&gt;get&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;_ATTRIBS&amp;#39;&lt;/span&gt;,[])  &lt;span class="c c-Singleline"&gt;# unique props from outer class&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;not&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;.&lt;span class="n"&gt;get&lt;/span&gt;(&lt;span class="s"&gt;&amp;#39;CMD&amp;#39;&lt;/span&gt;):  
            &lt;span class="n"&gt;CMD&lt;/span&gt; = &lt;span class="n"&gt;parents&lt;/span&gt;[&lt;span class="mi"&gt;0&lt;/span&gt;].&lt;span class="n"&gt;CMD&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ControlMeta&lt;/span&gt;.&lt;span class="n"&gt;CONTROL_ATTRIBS:&lt;/span&gt;  
            &lt;span class="n"&gt;kwargs&lt;/span&gt;[&lt;span class="n"&gt;item&lt;/span&gt;] = &lt;span class="n"&gt;CtlProperty&lt;/span&gt;(&lt;span class="n"&gt;item&lt;/span&gt;, &lt;span class="n"&gt;CMD&lt;/span&gt;)

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_ATTRIBS:&lt;/span&gt;   &lt;span class="c c-Singleline"&gt;# now add in the outer class&amp;#39;s unique props too  &lt;/span&gt;
            &lt;span class="n"&gt;kwargs&lt;/span&gt;[&lt;span class="n"&gt;item&lt;/span&gt;] = &lt;span class="n"&gt;CtlProperty&lt;/span&gt;(&lt;span class="n"&gt;item&lt;/span&gt;, &lt;span class="n"&gt;CMD&lt;/span&gt;)

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;super&lt;/span&gt;(&lt;span class="n"&gt;ControlMeta&lt;/span&gt;, &lt;span class="n"&gt;cls&lt;/span&gt;).&lt;span class="n"&gt;__new__&lt;/span&gt;(&lt;span class="n"&gt;cls&lt;/span&gt;, &lt;span class="nb"&gt;name&lt;/span&gt;, &lt;span class="n"&gt;parents&lt;/span&gt;, &lt;span class="n"&gt;kwargs&lt;/span&gt;)


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MetaButton&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;CMD&lt;/span&gt; = &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;button&lt;/span&gt;  
    &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;command&amp;#39;&lt;/span&gt;]  &lt;span class="c c-Singleline"&gt;# button specific props  &lt;/span&gt;
    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; = &lt;span class="n"&gt;ControlMeta&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, *&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Widget&lt;/span&gt; = &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;CMD&lt;/span&gt; (*&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;)

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;MetaFloatField&lt;/span&gt;(&lt;span class="n"&gt;object&lt;/span&gt;):  
    &lt;span class="n"&gt;CMD&lt;/span&gt; = &lt;span class="n"&gt;cmds&lt;/span&gt;.&lt;span class="n"&gt;floatField&lt;/span&gt;  
    &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; = [&lt;span class="s"&gt;&amp;#39;editable&amp;#39;&lt;/span&gt;,&lt;span class="s"&gt;&amp;#39;precision&amp;#39;&lt;/span&gt;,&lt;span class="s"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;,&lt;span class="s"&gt;&amp;#39;maxValue&amp;#39;&lt;/span&gt;,&lt;span class="s"&gt;&amp;#39;step&amp;#39;&lt;/span&gt;,  
                &lt;span class="s"&gt;&amp;#39;minValue&amp;#39;&lt;/span&gt;, &lt;span class="s"&gt;&amp;#39;changeCommand&amp;#39;&lt;/span&gt;,&lt;span class="s"&gt;&amp;#39;dragCommand&amp;#39;&lt;/span&gt;,&lt;span class="s"&gt;&amp;#39;enterCommand&amp;#39;&lt;/span&gt;,  
                &lt;span class="s"&gt;&amp;#39;receiveFocusCommand&amp;#39;&lt;/span&gt;]  &lt;span class="c c-Singleline"&gt;# this one has a lot of properties&lt;/span&gt;

    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; = &lt;span class="n"&gt;ControlMeta&lt;/span&gt;

    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;__init__&lt;/span&gt;(&lt;span class="k"&gt;self&lt;/span&gt;, *&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;):  
        &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;Widget&lt;/span&gt; = &lt;span class="k"&gt;self&lt;/span&gt;.&lt;span class="n"&gt;CMD&lt;/span&gt; (*&lt;span class="n"&gt;args&lt;/span&gt;, **&lt;span class="n"&gt;kwargs&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, extending the automatic analysis is easy now that we know the basic trick. Just add a semi-private class field with the class specific attributes, and away we go!&lt;/p&gt;
&lt;h1&gt;In our next exciting episode…&lt;/h1&gt;
&lt;p&gt;I think this pretty much demonstrates that overhauling the Maya GUI toolkit is possible. However, in its current state it's just a down-payment. &lt;/p&gt;
&lt;p&gt;The combination of descriptors and metaclasses is an incredibly powerful tool and it's not hard to see what comes next (it's also easy to imagine similar setups for other problems which suffer from ugly imperative syntax). Now that we have a method for cranking out control widget classes by the bucketload, filling out the class library itself is pretty simple. There are, though, a few tricks we can use to make it better and less manual, as well as making sure it is complete. So, in a future outing, we'll tackle a method for replicating the whole Maya command hierarchy in a more or less automatic way. &lt;/p&gt;
&lt;p&gt;If you want to roll your own lightwieght properties library, this should give you enough tools to work with. If you're more interested in actually doing GUI work without all the &lt;code&gt;cmds&lt;/code&gt; crap, you should check out &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt;, which is a library based on exactly this metaclass strategy to make GUI code more declarative and less ugly.&lt;/p&gt;
&lt;p&gt;In the mean time,as we say at International Rescue Headquarters: &lt;a href="http://www.funtrivia.com/askft/Question54024.html"&gt;F.A.B!&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 23 Feb 2014 10:22:00 -0800</pubDate><guid>tag:,2014-02-23:Rescuing-Maya-GUI-from-itself.html</guid></item><item><title>Some new research in the academic page</title><link>/Some-new-research-in-the-academic-page.html</link><description>&lt;p&gt;Still cleaning up after the long blog silence (teaching that Unity class was fun -- but six games in five weeks plus a day job is _murder!). _So I should point out a couple of additions to the &lt;a href="http://techartsurvival.blogspot.com/p/interesting-graphics-and-animation.html"&gt;Interesting Research &lt;/a&gt;page.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 20 Feb 2014 08:00:00 -0800</pubDate><guid>tag:,2014-02-20:Some-new-research-in-the-academic-page.html</guid></item><item><title>Pity for the outcast</title><link>/Pity-for-the-outcast.html</link><description>&lt;p&gt;I don't think it's too far over the top to say that everybody hates Maya's internal GUI system. It combines a very 1990's selection of widgets with a very 1970's coding style: it's a  1970's/1990's Frankenstein monster as horrifying as Ashton Kutcher in &lt;em&gt;That 70's Show.&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;&lt;br /&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="http://www.mediabistro.com/prnewser/files/2013/11/cmKUTCHER_ARTICLE_narrowweb__300x3532.jpg"&gt;&lt;img alt="" src="http://www.mediabistro.com/prnewser/files/2013/11/cmKUTCHER_ARTICLE_narrowweb__300x3532.jpg" /&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;_&lt;br /&gt;
_Not surprisingly a lot of TA's feel like they have to turn to PyQT if they want to deliver polished tools with a modern UI.  Unfortunately this is also less than ideal - while PyQT is a very powerful framework, it's got a very distinctive idiom of its own to learn, and moreover its hard to distribute since it depends on C++ dlls.  If you want to share a tool across studios or with outsourcers on a variety of boxes, OS'es and Maya versions it can become a Dantesque journey into DLL hell.  &lt;/p&gt;
&lt;p&gt;Because we do a lot of work with outsourcers, I've been looking into ways to render native Maya GUI a little less irritating. A quick review of my own pain-points in Maya GUI development showed me three main problems with the existing system  &lt;/p&gt;
&lt;h2&gt;Icky syntax&lt;/h2&gt;
&lt;p&gt;Default Maya GUI is purely imperative; while Maya creates an in-memory object for every widget you create, you can only interact through it with via commands: In the typical idiom you create a button:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmds.button(&amp;quot;big button&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but your can only interact with it by calling more commands:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mybutton = cmds.button(&amp;quot;big button&amp;quot;)  
cmds.button(mybutton, e=True, w=128)  
cmds.button(mybutton, e=True, label = &amp;#39;Red button&amp;#39;))  
cmds.button(mybutton, e=True, bgc = (1,.5, .5))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gets old pretty fast.  It's particularly bad for GUI components like &lt;em&gt;formLayout&lt;/em&gt;, which can easily require whopping big arguments like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmds.formLayout( form, edit=True, attachForm=[(b1, &amp;#39;top&amp;#39;, 5), (b1, &amp;#39;left&amp;#39;, 5), (b2, &amp;#39;left&amp;#39;, 5), (b2, &amp;#39;bottom&amp;#39;, 5), (b2, &amp;#39;right&amp;#39;, 5), (column, &amp;#39;top&amp;#39;, 5), (column, &amp;#39;right&amp;#39;, 5) ], attachControl=[(b1, &amp;#39;bottom&amp;#39;, 5, b2), (column, &amp;#39;bottom&amp;#39;, 5, b2)], attachPosition=[(b1, &amp;#39;right&amp;#39;, 5, 75), (column, &amp;#39;left&amp;#39;, 0, 75)], attachNone=(b2, &amp;#39;top&amp;#39;) )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is, frankly, stupid.  &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;Lousy event handling&lt;/h2&gt;
&lt;p&gt;Another big knock on Maya's native gui is it's lousy callback system. The python version is bolted on to the original, string based MEL version and confuses a lot of people with uncertain scoping and unclear syntax (Check out these threads on &lt;a href="http://tech-artists.org/forum/showthread.php?3205-why-scriptJob-doesnt-work-in-case-of-attrControlGrp&amp;amp;highlight=callback"&gt;Tech Artists.Org &lt;/a&gt;and  &lt;a href="http://stackoverflow.com/questions/21036620/executing-different-functions-based-on-options-selected"&gt;StackOverflow &lt;/a&gt;for some examples of how people get lost) .  &lt;/p&gt;
&lt;p&gt;Even when default Maya GUI callbacks do fire, they don't usually indicated who fired them off. This means you need to capture any relevant information ahead of time and encode it into the callback. In lots of GUI systems, you could handle a raft of similar functions like this pseudocode:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;button_codes = [&amp;#39;red&amp;#39;, &amp;#39;green&amp;#39;, &amp;#39;blue&amp;#39;]  
for code in button_codes:  
    button(code, tag = code, handler = apply_color)

def apply_color(button):  
   target.color = constants[button.tag]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Maya, on the other hand, you need to compose the callbacks with the right context when you create them using a &lt;code&gt;[functools.partial](http://docs.python.org/2/library/functools.html)&lt;/code&gt; or a closure.  This makes coding up anything like dynamic model-view-controller UI into a real chore, and forces you to interleave your layout architecture and your data model in clumsy ways.  &lt;/p&gt;
&lt;p&gt;Moreover, Maya GUI callbacks are single-function calls. Its common in other frameworks -- for example in C#  - to have &lt;a href="http://msdn.microsoft.com/en-us/library/ms173175.aspx"&gt;multicast delegates&lt;/a&gt; which can trigger multiple actions from a single callback. This makes for cleaner, more general code since you can split UI-only functionality ('highlight this button') from important stuff ('delete this model').  &lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;No Hierarchy&lt;/h2&gt;
&lt;p&gt;It might not be strictly fair to say that Maya GUI has 'no hierarchy'; anybody who has ever mucked around with &lt;code&gt;cmds.setParent&lt;/code&gt; or &lt;code&gt;cmds.lsUI&lt;/code&gt; knows that the actual widgets are composed in a strict hierarchical tree; hence UI objects with names like&lt;br /&gt;
&lt;code&gt;window1|formLayout57|formLayout58|frameLayout38|columnLayout5|button5&lt;/code&gt;&lt;br /&gt;
The problem is that Maya doesn't manage this for you - you are responsible for capturing the pathname of every UI widget you create if you ever want to access it again, which imposes a useless maintenance tax on otherwise simple code. Moreover the names aren't determninistic, thanks to Maya's rule against identical paths: that means you may want a button called 'Button', but it may decide to call itself 'Button1' or 'Button99' and there's nothing you can do about it. As if that weren't bad enough, the strongly imperative style of the Maya GUI code also requires manual management. If you declare a layout and start filling it up with widgets, you're also responsible deciding when a particular container is full. A missed &lt;code&gt;cmds.setParent&lt;/code&gt; can easily screw up your visual layout or the ordering of a menus and it's possible to shoot yourself in the foot without any corresponding gain in power, productivity or even prettiness. This limitation is why Maya has to offer all those redundant command sets for multiple-column rows and grids. When a monstrosity like &lt;code&gt;cmds.rowLayout(nc=5, cw5=(100,100,50,50,80), ct5 =("left", "left", "both","both","right"))&lt;/code&gt; is a &lt;em&gt;win&lt;/em&gt; for code cleanliness and legibility you know something has gone horribly wrong. &lt;/p&gt;
&lt;h2&gt;So What?&lt;/h2&gt;
&lt;p&gt;All of that amounts to a long-winded way of restating the obvious: nobody likes coding in standard Maya GUI.  The question is, can something be done about it?&lt;/p&gt;
&lt;p&gt;Actually, quite a bit..  Next time out I'll talk about some practical ways to make Maya GUI coding... well, let's not say &lt;em&gt;"fun"&lt;/em&gt;, lets run with another 90's retread:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.kraigbrockschmidt.com/mm/images/Win95_Sucks_Less_T-Shirt.jpg"&gt;&lt;img alt="" src="http://www.kraigbrockschmidt.com/mm/images/Win95_Sucks_Less_T-Shirt.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For 'Windows 95' substitute 'Maya GUI' and you've got the idea (For the origins of this authentic 2400-baud era meme, &lt;a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/08/24/10053386.aspx"&gt;click here&lt;/a&gt;.) &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 16 Feb 2014 18:30:00 -0800</pubDate><guid>tag:,2014-02-16:Pity-for-the-outcast.html</guid></item><item><title>Shameless plug time</title><link>/Shameless-plug-time.html</link><description>&lt;p&gt;The &lt;a href="http://www.amazon.com/Production-Pipeline-Fundamentals-Film-Games-ebook/dp/B00I9AUQQQ/ref=sr_1_1?ie=UTF8&amp;amp;qid=1392580929&amp;amp;sr=8-1&amp;amp;keywords=pipeline+fundamentals"&gt;book I worked on &lt;/a&gt;is finally available for ordering on Amazon!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://ecx.images-amazon.com/images/I/613n4-o3+kL.jpg"&gt;&lt;img alt="" src="http://ecx.images-amazon.com/images/I/613n4-o3+kL.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I'm pleased and of course also nervous.  If you like it, please be sure to leave a positive review on Amazon - I'm told it makes a big difference.  I don't actually make any money from this one (such is modern publishing, alas) but I do have another book under way and it'll be much easier to get that published if this one does well and is well reviewed.   &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 16 Feb 2014 12:08:00 -0800</pubDate><guid>tag:,2014-02-16:Shameless-plug-time.html</guid></item><item><title>Kind of surprised you needed to recompile, would h...</title><link>/Kind-of-surprised-you-needed-to-recompile,-would-h....html</link><description>&lt;p&gt;Kind of surprised you needed to recompile, would have expect the binaries to work. Maybe an old version of .net lying around or polluting your GAC? Or possibly an earlier installation of IPY left something behind?   &lt;/p&gt;
&lt;p&gt;In any case, glad it worked for you  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 30 Jan 2014 18:22:35 -0800</pubDate><guid>tag:,2014-01-30:Kind-of-surprised-you-needed-to-recompile,-would-h....html</guid></item><item><title>Hm - sorry for jumping the gun. I downloaded the 2...</title><link>/Hm---sorry-for-jumping-the-gun.-I-downloaded-the-2....html</link><description>&lt;p&gt;Hm - sorry for jumping the gun. I downloaded the 2.6.2 source and manually compiled it myself and everything worked just fine.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 29 Jan 2014 19:05:51 -0800</pubDate><guid>tag:,2014-01-29:Hm---sorry-for-jumping-the-gun.-I-downloaded-the-2....html</guid></item><item><title>Following your steps resulted in the following exc...</title><link>/Following-your-steps-resulted-in-the-following-exc....html</link><description>&lt;p&gt;Following your steps resulted in the following exception: TypeLoadException: Could not load type 'IronPython.Runtime.PythonContext' from assembly 'IronPython' during the CreateEngine() call.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 29 Jan 2014 17:09:58 -0800</pubDate><guid>tag:,2014-01-29:Following-your-steps-resulted-in-the-following-exc....html</guid></item><item><title>Tested it on Photoshop CS3 and worked!</title><link>/Tested-it-on-Photoshop-CS3-and-worked!.html</link><description>&lt;p&gt;Tested it on Photoshop CS3 and worked!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 29 Jan 2014 06:29:33 -0800</pubDate><guid>tag:,2014-01-29:Tested-it-on-Photoshop-CS3-and-worked!.html</guid></item><item><title>For future reference, it might be a good idea to t...</title><link>/For-future-reference,-it-might-be-a-good-idea-to-t....html</link><description>&lt;p&gt;For future reference, it might be a good idea to try something like this as a higher quality method of passing data over tthe wirre:&lt;br /&gt;
http://mimic-xmlrpc.sourceforge.net/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 29 Jan 2014 02:09:09 -0800</pubDate><guid>tag:,2014-01-29:For-future-reference,-it-might-be-a-good-idea-to-t....html</guid></item><item><title>Talking to Photoshop via TCP</title><link>/Talking-to-Photoshop-via-TCP.html</link><description>&lt;p&gt;A recent &lt;a href="http://tech-artists.org/forum/showthread.php?4481-Communicating-between-Photoshop-and-Maya-(Python)"&gt;thread on TAO&lt;/a&gt; got me thinking about communicating with Photoshop from Python. In the past I've done this &lt;a href="http://techarttiki.blogspot.com/2008/08/photoshop-scripting-with-python.html"&gt;Adam Plechter-style&lt;/a&gt; using COM ( from both C# and Python) and it's worked for me, but I know some people have problems with COM for a variety of reasons relating to windows versions and DLL hell.  &lt;/p&gt;
&lt;p&gt;Using COM always makes me feel like Mr. Yuk.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.calebsimpson.com/wp-content/uploads/2013/11/YuckFace.gif"&gt;&lt;img alt="" src="http://www.calebsimpson.com/wp-content/uploads/2013/11/YuckFace.gif" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since I had to learn a few JavaScript tricks back when I started &lt;a href="http://techartsurvival.blogspot.com/2013/12/and-i-thought-we-had-it-bad.html"&gt;looking into Python web development&lt;/a&gt;, I thought it might be worth investigating what could be done to cut out COM.  It turns out that ExtendScript - the JavaScript flavor that comes with Adobe products (at least since CS 5, and I think earlier) includes a socket object which allows for TCP communication.  That's not kosher in 'real' browser based JS - but ExtendScript cheats a little (that's also why it allows you to do things like hit the local file system, another JS no-no).&lt;/p&gt;
&lt;p&gt;The&lt;a href="https://wwwimages2.adobe.com/content/dam/Adobe/en/products/indesign/pdfs/JavaScriptToolsGuide_CS5.pdf"&gt; Adobe docs&lt;/a&gt; have an example (around page 196) which shows how you can implement a chat server or a web server running inside Photoshop. That might not be practical but it provides a simple framework you can hijack to turn Photoshop into a remote procedure call server.  Here's an example of a super-simple server that can be run inside Photoshop:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: You'll need to save the file as a .JSX (not .JS!) for Photoshop to allow the ExtendScript functionality which makes the socket objects work.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;This example is very bare bones, but it is easy to extend - just create function objects and add them to &lt;strong&gt;known_commands &lt;/strong&gt;dictionary and then send them over the socket. The way it's written here the commands and arguments are split on spaces (similar to the way a shell command works) -- if you need to get at them in your JS functions you can &lt;a href="http://stackoverflow.com/a/2141530/1936075"&gt;get at them using the arguments() keyword:&lt;/a&gt;.  For serious work I'd probably use the ExtendScript XML object and send the commands and responses as xml since that gets you out of having to worry about stuff like 'what if I want to send an argument with a space in it' -- however this purpose of this excersize is just to demonstrate what's possible.  &lt;/p&gt;
&lt;p&gt;I should note that while the server is running, Photoshop is locked into the wait loop so it will not be accessible interactively -- like a Maya running a long script, the main thread is just waiting for the script to continue. For the typical 'remote control' application that's what you'd expect, but it may not answer for all purposes - so be warned.  &lt;/p&gt;
&lt;p&gt;If you're trying to talk to Photoshop from Python, it's incredibly simple:  &lt;/p&gt;
&lt;p&gt;That's all there is to it - of course, the _real _problem is getting useful work done in the clunky Photoshop API -- but that's going to be the same no matter whether you talk to PS via COM or TCP/IP.  Anecdotally, I've heard the PS scripts are faster in JavaScript than when using COM or AppleTalk or VB, so perhaps this method will be competitive on speed as well.  For small tasks it's certainly a simpler and less irritating way to send a squirt to and from PS &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 29 Jan 2014 02:04:00 -0800</pubDate><guid>tag:,2014-01-29:Talking-to-Photoshop-via-TCP.html</guid></item><item><title>Maya Module Mongering Madness!</title><link>/Maya-Module-Mongering-Madness!.html</link><description>&lt;p&gt;When I covered Maya modules a while back, I pointed out that Maya modules are not, by themselves, a complete one-step way to distribute tools.  They stick some extra paths onto your Mel, Python and plugin search paths but they don't actually load tools or set up your environment is any other way.  &lt;/p&gt;
&lt;p&gt;This time out I want to talk a bit about some of the ways you can do startups cleanly and reliably with mininal fuss.  &lt;/p&gt;
&lt;h3&gt;Boots on the ground&lt;/h3&gt;
&lt;p&gt;Booting up your environment should not be a huge deal - but it frequently is.  Lots of studios - particularly ones where the toolset has evolved over long stretches of time and passed through many sets of hands - start their Maya the ways bees fly: in defiance of the laws of physics or even of common sense.  One company I consulted for had a very messy set of imports and initializations that was causing problems. Trying to make sense out of it all I wrote some code to analyze the way modules were imported by other modules dump it out to a big graph using GraphViz.  The resulting graphs were so huge and complex that we could only see them at wall chart size. It was cool in a 1964 NASA engineer sort of way, this huge paper thing -- but the underlying reality was nasty, error prone and generally crazy-making.   &lt;/p&gt;
&lt;p&gt;And, of course, even when things are relatively sane - when the modules are laid out logically and imported sanely - things still go wrong.  Missing resources, dlls and mlls all over the place,  and most pernicious of all leftover .pyc files that execute the wrong code can all get in the way of the &lt;em&gt;real&lt;/em&gt; work - in other words, these things are distractions from  debugging your own stupid mistakes.  &lt;/p&gt;
&lt;p&gt;The weird part is that this is not really a hard problem.  If your maya toolset is laid out in a simple, logical way these problems generally don't arise, and when they do they are fairly easy to fix.  The nice side benefit is that a well laid out set of modules also makes your life easier when it comes time to distribute your tools to the team.  &lt;/p&gt;
&lt;h2&gt;Tough as an old boot. Not.&lt;/h2&gt;
&lt;p&gt;You don't need to do a ton of studying to get to a happy place. Good module layout follows the same rules as good code layout: Modules should  do one thing well, inside clear boundaries. They should be grouped into namespaces (for clarity and easier finding things) and have as few cross links as possible.  It's pretty common for code to grow as the problem set it works on fhanv  &lt;/p&gt;
&lt;p&gt;It's simpler if you mentally divide your modules into three  categories:  &lt;/p&gt;
&lt;h3&gt;Libraries&lt;/h3&gt;
&lt;p&gt;Libraries makeup the bulk of your code. Ideally they are more or less orthogonal to each other, because you want to minimize the length of import chains.  A good library module relies primarily on the python standard library and as few other modules as possible.  &lt;/p&gt;
&lt;p&gt;Simple libraries can be individual modules. For example, a module that you use whenever you need to save debug information to a specially formatted text file might be a library module, with functions and classes for formatting the data and writing out the text files.  One important note, though :  good library makes the fewest possible assumptions about context. So, for example, you don't want  your _debugText.py _module to pop up a dialog box prompting for a file location - you don't want it to fail if you run it in a headless Maya batch session!   Library code is UI-less, or at the very least its UI is easily avoided.  &lt;/p&gt;
&lt;p&gt;Since your problem set is probably very large, you'll eventually want your libraries to have some hierarchy.  Luckily python packages map neatly onto hierarchical folder arrangements....  &lt;/p&gt;
&lt;p&gt;The problem really should not be that hard. Python's module importing mechanism is elegant and simple (if you don't believe it, try writing solid, modular, reusable code in MaxScript!).  Importing the same module into lots of different places imposes little cost. If the module is well designed -- in particular, if it's done properly so that importing causes no unexpected side effects -- reimporting is a great way to keep code nicely organized and maintainable.  It cuts down on cut-and-pasted code reuse, encourages predictability (it's a lot nicer if when all the code for working with file paths or  &lt;/p&gt;
&lt;p&gt;For people trying to maintain a big codebase is manag  &lt;/p&gt;
&lt;p&gt;Big sources of problems:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leftover pycs.  These get read in preference to the py files, and you can easily get the wrong code.  Fix: zip files!  &lt;/li&gt;
&lt;li&gt;Version conflicts.  Hard to avoid if you don't lock down the user's env.  Fix: for artists? Zip files. For devs? VirtualEnv  &lt;/li&gt;
&lt;li&gt;name conflicts: http://programmingrealizations.blogspot.com/2010/10/python-import-search-orderprecedence.html   fix: more relative imports, and more explict imports. No star imports! No&lt;br /&gt;
&amp;lt;&amp;gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:  &lt;/p&gt;
&lt;p&gt;Create a module hierarchy like this.  Add a print statement to the &lt;strong&gt;init&lt;/strong&gt;.py's that print's their path, such as "foo", "foo-bar", and "foo-bar-foo"  &lt;/p&gt;
&lt;p&gt;highlevel.py and lowlevel.py each start with "import foo"  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-cOARgT1x_X8/Ut4UxvDjqlI/AAAAAAABH6U/_0tHG8lAZRg/s1600/files.png"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-cOARgT1x_X8/Ut4UxvDjqlI/AAAAAAABH6U/_0tHG8lAZRg/s1600/files.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;now, try importing the modules!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-IzAkmzrw0L8/Ut4UxWT0r5I/AAAAAAABH6Y/-xLV905QtSI/s1600/results.png"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-IzAkmzrw0L8/Ut4UxWT0r5I/AAAAAAABH6Y/-xLV905QtSI/s1600/results.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is an expected behavior, if an annoying one in this case. The main lesson here is to be careful about reusing names in a hierarchy. It's also another reason why modules should be groomed!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/2/tutorial/modules.html#the-module-search-path"&gt;Python docs about import order&lt;/a&gt;&lt;br /&gt;
Nick Coghlan's detailed notes at the &lt;a href="http://python-notes.boredomandlaziness.org/en/latest/python_concepts/import_traps.html"&gt;I-wish-I-had-that-domain-named boredomAndLaziness.org&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 21 Jan 2014 19:48:00 -0800</pubDate><guid>tag:,2014-01-21:Maya-Module-Mongering-Madness!.html</guid></item><item><title>No Humans Involved (Classic CG)</title><link>/No-Humans-Involved-(Classic-CG).html</link><description>&lt;p&gt;Saw a &lt;a href="http://www.staff.science.uu.nl/~geijt101/papers/SA2013/"&gt;great paper&lt;/a&gt; in &lt;a href="https://plus.google.com/116275833090172173559"&gt;+Robert Butterworth&lt;/a&gt; 's feed which reminded me of this classic SIGGRAPH presentation from 1994 - one of the all time greats in procedural animation.  None of the motion in this was animated by hand :)   &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 17 Jan 2014 10:00:00 -0800</pubDate><guid>tag:,2014-01-17:No-Humans-Involved-(Classic-CG).html</guid></item><item><title>Mighty Morphin Maya Module Manager</title><link>/Mighty-Morphin-Maya-Module-Manager.html</link><description>&lt;p&gt;For folks who are interested in &lt;a href="http://techartsurvival.blogspot.com/2014/01/mayas-mildy-magical-modules.html"&gt;fiddling with Maya modules&lt;/a&gt; as per the last post, I've tossed &lt;a href="https://gist.github.com/theodox/8414494"&gt;a quickie class to manage Maya modules &lt;/a&gt;onto &lt;a href="https://gist.github.com/theodox"&gt;my Gist account&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;This is a bare bones bit of code. The main class is the _ModuleManager _which can find any .mod files on the MAYA_MODULE_PATH of the current Maya environment. It's primary use is to find and list all the modules; secondarily it can be used to toggle them on and off (by changing the leading + which Maya uses to id a module to a -, or vice-versa). It's pretty dumb (no accounting for file permissions, incorrectly formatted .mod files, etc) but it's handy for quickly testing out configs.  &lt;/p&gt;
&lt;p&gt;Also included is a GUI class, &lt;em&gt;ModuleManagerDialog&lt;/em&gt;, which finds provides a simple GUI for listing, enabling, and disabling .mod files. Again, pretty simple stuff, but people may find it useful.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-WyKmQOSze2g/Uted0a8FJFI/AAAAAAAA_xo/4pP_U9LJPJ8/s1600/modmgr.png"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-WyKmQOSze2g/Uted0a8FJFI/AAAAAAAA_xo/4pP_U9LJPJ8/s400/modmgr.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As will all code I put up here, it's BSD licensed. Use away with attribution - and if you have any bug fixes, let me know and we'll fix the Gist version.  &lt;/p&gt;
&lt;p&gt;PS, hat tip to the gang at &lt;a href="http://tech-artists.org/"&gt;TAO &lt;/a&gt; for the idea of using a context manager to get out of all those stupid &lt;em&gt;setParent("..")&lt;/em&gt; calls in Maya GUI work. I could not find the original post where somebody mentioned it - but whoever you are, sir or madam, thank you ever so much.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 16 Jan 2014 01:17:00 -0800</pubDate><guid>tag:,2014-01-16:Mighty-Morphin-Maya-Module-Manager.html</guid></item><item><title>Love all these ideas. The start of a pipeline is a...</title><link>/Love-all-these-ideas.-The-start-of-a-pipeline-is-a....html</link><description>&lt;p&gt;Love all these ideas. The start of a pipeline is always one of the hardest bits. It's such a chicken/egg conundrum. Eventually, though, you have to have an "installer" that hacks the userSetup.py/.mel to kick off tools. Then it's all about adding the proper python paths in the proper order. Looking forward to the next post.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 12 Jan 2014 20:27:37 -0800</pubDate><guid>tag:,2014-01-12:Love-all-these-ideas.-The-start-of-a-pipeline-is-a....html</guid></item><item><title>Maya's (mildy) Magical Modules</title><link>/Maya's-(mildy)-Magical-Modules.html</link><description>&lt;p&gt;If you're doing tools work in Maya, you've probably seen a lot of ways of distributing scripts and tools. The most common, alas, is also the wonkiest - dumping a bunch of scripts into the users's script folder or maybe fiddling with Maya.env to point at a shared drive on the local network.     &lt;/p&gt;
&lt;p&gt;Eventually, you'll rum into situations where you can't just litter files all over your user's machine. Maybe you're supporting multiple projects in the studio and you need to have users hopping back and forth between toolsets. Maybe you're dealing with multiple versions of maya and your tools have been forked into different environments. Maybe you're dealing with outsources who don't want to permanently alter their own environment just to get your tools for one project. Whatever the reason, someday you'll run into a situation where you want to be able to drop in a whole maya toolset as a unit and to remove or disable it the same way.   &lt;/p&gt;
&lt;p&gt;Maya has always a had a facility called 'modules', can be useful for this purpose. It used to be used for things like  cloth sim or hair that were tacked on to the main package (back when hair was a $9,000 add-on!) .  Since then it's largely fallen out of favor, but it's never gone away -- and it has some useful properties that are great for tools distribution.  &lt;/p&gt;
&lt;p&gt;A module is really a sort of virtual file system.  Maya's most important folders are those for scripts, plugins, icons, and presets -- the same ones you typically see in your maya user directory.  If you place a special text file in your module path, you can add to extra paths for maya to search for scripts, plugins, icons and presets.   &lt;/p&gt;
&lt;p&gt;The big advantage of modules is the ability to manage complete set of files at once - scripts, plugins and so on can all be included (or excluded) from your Maya in a single place (Hint to Autodesk - it would be very nice to give users a UI for this.  The 'Modules' setting in the preferences, confusingly, does not refer to _these _modules.).  Parts of a module can be kept independent of the user's private stock of scripts and tools. For outsourcers and contractors, in particular, the ability to completely uninstall a toolset you don't need anymore is a godsend.   &lt;/p&gt;
&lt;p&gt;Another handy feature of modules is that they can point Maya at shared network paths as well as paths on disk. This makes it far easier to keep a whole team on a common tool set by pointing a module script directory at a shared drive.  I'm not personally a big fan of the shared drive as a distribution method (more on that some other time) but it's fairly common and this makes it easy to establish and manage.  &lt;/p&gt;
&lt;p&gt;Finally modules do a little bit of automatic versioning. A module can specify different paths for different Maya versions, OS'es and processors.  This means a tool author can produce a single distribution for all customers and give them identical installation instructions without worrying too much about the details of the individual workstations on the receiving end.  You can pack up all of your distributions into a single zip file, and users merely unzip it into the modules folder of their local settings and the installation is done .  &lt;/p&gt;
&lt;h3&gt;Basic Setup&lt;/h3&gt;
&lt;p&gt;Modules are defined by a simple text file with a ".mod" extension.  Maya will look for module files in all the directories in the MAYA_MODULE_PATH environment variable if you have it set, or in the modules directory of your maya user directory (for example, in My Documents\maya\modules). Here are the default locations where modules can be placed:  &lt;/p&gt;
&lt;h4&gt;Default for Windows&lt;/h4&gt;
&lt;p&gt;/My Documents/maya//modules&lt;br /&gt;
/My Documents/maya/modules&lt;br /&gt;
C:/Program Files/Common Files/Autodesk Shared/Modules/maya/&lt;br /&gt;
C:/Program Files/Common Files/Autodesk Shared/Modules/maya/modules/   &lt;/p&gt;
&lt;h4&gt;Default for Mac OS X, Linux&lt;/h4&gt;
&lt;p&gt;$MAYA_APP_DIR/maya//modules&lt;br /&gt;
$MAYA_APP_DIR/maya/modules&lt;br /&gt;
/usr/autodesk/modules/maya/&lt;br /&gt;
/usr &lt;br /&gt;
A module file is a plain text file. The official documentation for the format is &lt;a href="http://docs.autodesk.com/MAYAUL/2013/ENU/Maya-API-Documentation/index.html?url=files/GUID-9E096E39-AD0D-4E40-9B2A-9127A2CAD54B.htm,topicNumber=d30e30995"&gt;here&lt;/a&gt; (the 2012 version is &lt;a href="http://download.autodesk.com/global/docs/mayasdk2012/en_us/index.html"&gt;here&lt;/a&gt; - there are some pretty significant differences between 2012 and 2013+), but for the simple case it looks like this  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 c:\path\to\moduleName
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The module name is what shows up in the Maya UI, the 1.0 is a version number, and the path points Maya to the location of the module folder.  This example would point to a folder called "ModuleName". If that's all that goes in there, then maya will look for scripts in&lt;br /&gt;
&lt;code&gt;``c:\path\to\moduleName\scripts&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;icons in  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;c:\path\to\moduleName\icons&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&lt;/code&gt;and plugins in  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;c:\path\to\moduleName\plug-ins&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;You can test this out by making the folder c:\path\to\moduleName\scripts and popping a userSetup.py ( or a userSetup.mel, if you're feeling old school) into it with a print("hello world")  in it. When you restart your maya you should see it printout in the maya output window as Maya loads. It's the output window for python because the script will execute &lt;em&gt;before&lt;/em&gt; the Maya UI has loaded (something to keep in mind in your startup scripts!).  &lt;/p&gt;
&lt;p&gt;You can avoid hard coding the paths by using an alternate syntax in the mode file.  You have a can, for example, include an environment variable using ${variable} in place of an absolute path. For example  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_LOC&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;\mayatools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will point look for your module folder in the location defined by the environment variable named &lt;strong&gt;project_loc&lt;/strong&gt;.  One side effect of this is that uou can put your modules into the modules folder (alongside your mod files) without having to hard-code paths:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;MAYA_MODULE_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;\moduleName
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;&lt;/code&gt; You can even point your modules at a network share:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 \\net\shared\modules\moduleName
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Fancy stuff in 2013+&lt;/h3&gt;
&lt;p&gt;Sometimes setup requirements are more complex than dropping in a single folder (not a good idea if you can avoid it - but you know how it is...). In &lt;strong&gt;2013 and later,&lt;/strong&gt;  you can use the module file to override particular paths and do some more flexible setup.  &lt;/p&gt;
&lt;p&gt;For example, in 2013+, you can also define the path relative to the module file location:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 ..\moduleName
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;should point at a folder &lt;em&gt;above _the directory where the module file is located. Just remmber: &lt;strong&gt;2013+ only...&lt;/strong&gt;&lt;/em&gt;  _If you've looked at, for example, &lt;a href="http://around-the-corner.typepad.com/adn/2012/07/distributing-files-on-maya-maya-modules.html"&gt;Cyrille Fauvel's post on modules&lt;/a&gt; you'll see a bunch of advice that only works for 2013+.  Be aware :)&lt;/p&gt;
&lt;p&gt;The other neat addition in 2013 is the ability to override specific sub-paths of the module. Thus  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;MAYA_MODULE_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;\moduleName


scripts: //network/share/scripts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;would point the scripts at the shared network scripts  drive, while leaving the plugins and icons folders in the module location.  &lt;/p&gt;
&lt;p&gt;2013+ also offers the ability to set environment variables from inside a module  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;MAYA_MODULE_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;\moduleName


HAS_FANCY_2013_FEATURES=YES
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Will set the environment variable HAS_FANCY_2013_FEATURES to 'yes' inside your maya session. 2013 even has some funky syntax allowing you to append to existing variables and so on . There's no point in recapitulating it here, the &lt;a href="http://docs.autodesk.com/MAYAUL/2013/ENU/Maya-API-Documentation/index.html?url=files/GUID-9E096E39-AD0D-4E40-9B2A-9127A2CAD54B.htm,topicNumber=d30e30995"&gt;description in the docs&lt;/a&gt; is a concise as I could do - my only commentary would be: _seriously, people? It's 2014 and still with the funky syntax crap?  I'm supposed to recognize that  _PATH += and PATH +:= bin _are different? _  &lt;/p&gt;
&lt;p&gt;Adding to paths can be extremely handy for some things, but unfortunately this won't solve a particularly thorny problem for tools teams, which is making sure that the OS can find binary dlls: if you have dll dependencies in a binary plugin, its 'too late' to fix it by appending the dll locatins to the system path once Maya has loaded. Which stinks -- and is another reason to avoid binary plugins like the plague they are if at all possible.&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;One stop tool distribution... or not&lt;/p&gt;
&lt;p&gt;For any busy TA, the business of distributing and maintaining toolsets on lots of other people's computers is a constant headache.  Modules can offer some significant assistance with this, since they allow you some control over Maya's search paths without requiring your to write code. It's a simple solution to the chicken-and-egg problem of getting Maya to do what you want before you've got tools loaded up to tell Maya what to do.  &lt;/p&gt;
&lt;p&gt;Modules, on their own, are not a complete solution to that problem.  But they are a help.  &lt;/p&gt;
&lt;p&gt;Modules basically just tell maya to look in a few extra places for things like scripts or plugins - they don't automatically run startup code or do initialization, and they don't have much in the way of smarts -- they can't for example, allow you to quickly switch between two project-specific versions of your maya tool set. You can install modules for toolsetA and toolsetB, but something smarter than a module file has to decide which one to pick on a given occasion (I'm going to talk about that problem in another post, but for now  However they do allow you to mix and match install locations, which is a big start; they also allow you to install outside the user's script folders, which is a key element in the good-fences-make-good-neighbors relationship between TA tools and the user's private maya preferences.  Plus, they are explicit: you can look at the file and tell what its trying to do, which beats any number of magic naming and location rules.  &lt;/p&gt;
&lt;p&gt;At some point in the near future I'll try to post something on the second half of the distribution puzzle: running startup code cleanly and intelligently.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 12 Jan 2014 17:45:00 -0800</pubDate><guid>tag:,2014-01-12:Maya's-(mildy)-Magical-Modules.html</guid></item><item><title>Schadenfreude alert!</title><link>/Schadenfreude-alert!.html</link><description>&lt;p&gt;What does it say when a book titled &lt;a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742"&gt;Javascript:The Good Parts&lt;/a&gt; has a final chapter, "Beautiful Features", that's 3 pages long.  &lt;/p&gt;
&lt;p&gt;And is followed by a 7 page appendix titled "Awful Parts".  &lt;/p&gt;
&lt;p&gt;And another 7 page appendix titled "Bad Parts".  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 10 Jan 2014 16:11:00 -0800</pubDate><guid>tag:,2014-01-10:Schadenfreude-alert!.html</guid></item><item><title>Unity crash course coming up...</title><link>/Unity-crash-course-coming-up....html</link><description>&lt;p&gt;Just a reminder - if you know anybody who want's to learn Unity in a hurry, there's still time to sign up for  &lt;a href="http://www.makerhaus.com/classes/"&gt;Introduction to Game Development With Unity @ Makerhaus&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 10 Jan 2014 09:21:00 -0800</pubDate><guid>tag:,2014-01-10:Unity-crash-course-coming-up....html</guid></item><item><title>State of Decay moment of zen (and lighting)</title><link>/State-of-Decay-moment-of-zen--(and-lighting).html</link><description>&lt;h2&gt;&lt;a href="http://1.bp.blogspot.com/-Y1CcBO5iyig/UsujMjcxTRI/AAAAAAAAPCc/dIyL6T-pZQY/s1600/home_07.png"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-Y1CcBO5iyig/UsujMjcxTRI/AAAAAAAAPCc/dIyL6T-pZQY/s1600/home_07.png" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pastor Will found the Super Fudge Chunk.  &lt;br /&gt;
The whole scene (except for that one spot of sunlight and the window) is lit entirely by ambient lighting with some vertex lighting and (small) point lights in the windows. What a nightmare - whatever we do in the next game, it won't be this!  &lt;/p&gt;
&lt;p&gt;There's no lightmapping, thanks to a 24 hour continuous time of day cycle.  The houses could also be placed at any orientation, so the vertex lighting has to be pretty gentle - we shot basically ran a very smoothed out hemsipherical dome light outside the house, once with Final Gather and once with a dome of stochastically placed Maya point lights to create the illusion of darker interiors and lighter areas near windows). The final gather provided some bounce light look and the point lights provided a smooth gradient; blending the two helped eliminate hard artifacts and cut down on the frequency since we didn't want real shadows which would be wrong as the sun moved.   We also ran a similar omnidirectional vert light pass on all the props to add depth to things like cabinets and shelving. I also did a little tool to try to do some vertex decimation on the lit meshes -- we tended to subdivide the big planar areas heavily before lighting and then trim down verts which didn't hold much light or shading information (again, the smoother interior gradients helped a lot on memory here).   &lt;/p&gt;
&lt;p&gt;A handy trick - thanks to a suggestion from &lt;a href="https://plus.google.com/113049613359148049737"&gt;+Wolfgang Engel&lt;/a&gt;  - was small point lights in the windows and doors to add a boost to exterior areas and to make it look as if the characters move from light to shadow, which isn't really true.  These had to be very small - much smaller than I wanted - to keep the overdraw costs low in the Crytek deferred renderer. Every house had a handful of somewhat larger lights right near the floor. They watched the sun direction and lit up when the room was facing the sun to provide the illusion of bounce lighting (this wasn't really checking the sun, it was checking the orientation of the light (and the house) against a precalculated table of sun positions and elevations so you could figure out how bright a given vector should be at a given time. Would have been much nicer to really sample the sun , but the perf environment was brutal  &lt;/p&gt;
&lt;p&gt;The ambient lighting comes from an HDR cube map -  only one per building, alas, and they didn't orient with the placement.  In the end I hand painted abstract ones.  The 'faces' of the cube are color biased to help pick out the planes of the architecture so it doesn't all collapse into mono-color mush.   &lt;/p&gt;
&lt;p&gt;Thank God for screen space ambient occlusion, which adds a lot of edge definition.   &lt;/p&gt;
&lt;p&gt;And for Super Fudge Chunk.  &lt;/p&gt;
&lt;p&gt;PS: Who has seen the bug where Pastor Will flips out on somebody back at base and threatens to "Cut you like a prison bitch"?  We heard about it from a tester and unanimously voted it "Won't Fix".  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Tue, 07 Jan 2014 10:00:00 -0800</pubDate><guid>tag:,2014-01-07:State-of-Decay-moment-of-zen--(and-lighting).html</guid></item><item><title>Omg yes! I need to dig up my early 90s VHS copy fr...</title><link>/Omg-yes!-I-need-to-dig-up-my-early-90s-VHS-copy-fr....html</link><description>&lt;p&gt;Omg yes! I need to dig up my early 90s VHS copy from an ancient Macworld... Fight the memory (mammary?) hole!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 06 Jan 2014 19:02:44 -0800</pubDate><guid>tag:,2014-01-06:Omg-yes!-I-need-to-dig-up-my-early-90s-VHS-copy-fr....html</guid></item><item><title>But the real question is, who remembers the ladies...</title><link>/But-the-real-question-is,-who-remembers-the-ladies....html</link><description>&lt;p&gt;But the real question is, who remembers the ladies having a bigger cup size in this short? :p &lt;br /&gt;
http://www.pixartalk.com/wp-content/uploads/2009/06/miami.jpg  &lt;/p&gt;
&lt;p&gt;more about the decision to alter it here: http://www.pixartalk.com/shorts/knick-knack/&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 06 Jan 2014 10:02:38 -0800</pubDate><guid>tag:,2014-01-06:But-the-real-question-is,-who-remembers-the-ladies....html</guid></item><item><title>Future Watch: Graphics &amp; Animation Research</title><link>/Future-Watch:-Graphics-&amp;-Animation-Research.html</link><description>&lt;p&gt;I've added a permanent &lt;a href="http://techartsurvival.blogspot.com/p/interesting-graphics-and-animation.html"&gt;page to keep track of interesting academic research&lt;/a&gt;. It's over in the sidebar.  If you're at all into animation, download the videos or the ppt of the &lt;a href="http://grail.cs.washington.edu/projects/animal-morphology/s2009/"&gt;paper on gait optimization&lt;/a&gt;. It's fun -- unless you're an animator, in which case it's a bit scary.   &lt;/p&gt;
&lt;p&gt;The list is a bit skimpy atm, I'll post updates as it expands.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 05 Jan 2014 10:33:00 -0800</pubDate><guid>tag:,2014-01-05:Future-Watch:-Graphics-&amp;-Animation-Research.html</guid></item><item><title>Unity class coming up at MakerHaus</title><link>/Unity-class-coming-up-at-MakerHaus.html</link><description>&lt;p&gt;I'll be teaching a Unity class at &lt;a href="http://www.makerhaus.com/classes/#discipline-digital-media"&gt;MakerHaus&lt;/a&gt; in Fremont starting January 13th.  This is an intro class but should be useful for anybody who has heard about Unity but doesn't use it professionally and would like to jumpstart the learning process.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.makerhaus.com/wp-content/themes/makerHaus/_media/images/community-workshop-studio-makerhaus-logo-color.png"&gt;&lt;img alt="" src="http://www.makerhaus.com/wp-content/themes/makerHaus/_media/images/community-workshop-studio-makerhaus-logo-color.png" /&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 03 Jan 2014 22:37:00 -0800</pubDate><guid>tag:,2014-01-03:Unity-class-coming-up-at-MakerHaus.html</guid></item><item><title>First find of 2014: A Scriptable DCC app in the browser?!?!</title><link>/First-find-of-2014:-A-Scriptable-DCC-app-in-the-browser?!?!.html</link><description>&lt;p&gt;Just stumbled across this link to &lt;a href="http://clara.io/"&gt;clara.io&lt;/a&gt;, which is an in-browser 3D editor from Ecocortex, one of the vendors behind the &lt;a href="https://code.google.com/p/alembic/"&gt;Alembic file format&lt;/a&gt;. It's a 3d modeler that runs in a browser.  And it's free.  &lt;/p&gt;
&lt;p&gt;Sheesh.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://3.bp.blogspot.com/-YigSyxvbhNw/Usbzp7a29GI/AAAAAAAABYc/M06nOJapj_Q/s1600/claraio.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-YigSyxvbhNw/Usbzp7a29GI/AAAAAAAABYc/M06nOJapj_Q/s1600/claraio.png" /&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;And look at the bottom - a script console!  &lt;/p&gt;
&lt;p&gt;I'm not entirely sure what to make of this, beyond _&lt;a href="http://www.youtube.com/watch?v=acYDNlMYAaI"&gt;totally wicked&lt;/a&gt;. _I'm not going to try to review clara here - I just found it today, after all, but it's such an interesting find that I can't help but comment.  &lt;/p&gt;
&lt;p&gt;The UI is a riff on familiar ideas, so it's easy to pick up for any TA, or for that matter anybody with more than a passing familiarity with the usual suspects. It doesn't break any new ground in productivity or ease of use - but that doesn't bother me in this context. Like the dog that walks on it's hind legs, it's not done perfectly but one is surprised to see it_ &lt;em&gt;done at all.  This is, after all running _in a browser.&lt;/em&gt; Yikes.  &lt;/p&gt;
&lt;p&gt;The app is still kind of wet behind the ears - it feels a trifle slow (some kinds of UI operations seem to trigger a perceptible refresh in all of the 3d views, for example). There are host of poly modeling tools -- notably booleans -- that Max/Maya users will miss pretty quickly.  All that said - the idea of running a zero-configuration, instantly deployable app from anywhere -- a tool you could be sure was the same for your outsources in Bangkok and on your own desktop &lt;em&gt;right now&lt;/em&gt; -- along with inherent cloud data management?  The ability to run remote commands via web push commands, so you could set up a That is beyond just a curiosity. This app doesn't suddenly obsolete Max or Maya or XSI, but it might be the first rumblings of a big change in how things get done.  As a side benefit, it's got a several different file IO options and could perhaps make as decent waystation for people crossing product boundaries.  &lt;/p&gt;
&lt;p&gt;The TA who immediately asks "what scripting language" will be pleased to note that there's a script console down at the bottom; unsurprisingly for a web app the scripting language is JavaScript.  JS may not be my favorite language -- by a long shot-- but it's the natural language of the web. Most importantly, the scripting system makes it fairly easy to extend the application by writing your own plugins: this example on their website shows &lt;a href="http://clara.io/learn/sdk/creating-commands"&gt;how to make an OBJ importer&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;Most important of all, though -- did I mention this? -- it's a browser app. Which means you can so things like this:   &lt;/p&gt;
&lt;p&gt;Which, you must admit, scores pretty well on the Gee-Whiz scale. &lt;br /&gt;
Overall, this is a really excellent developmnt. The 3d market has been painfully sluggish for a decade now - we've got better bells and whistles but on the whole we still work in 2014 more or less the away we worked in 2004.  We need new companies with fresh ideas to shake up this market.  We also need to &lt;a href="http://techartsurvival.blogspot.com/2013/12/and-i-thought-we-had-it-bad.html"&gt;embrace web development as a part of how we build tools&lt;/a&gt;.  This is a big step in the right direction and we should do what we can to help it along.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 03 Jan 2014 22:04:00 -0800</pubDate><guid>tag:,2014-01-03:First-find-of-2014:-A-Scriptable-DCC-app-in-the-browser</guid></item><item><title>Thanks Steve. Gonna give this one a try. It would ...</title><link>/Thanks-Steve.-Gonna-give-this-one-a-try.-It-would-....html</link><description>&lt;p&gt;Thanks Steve. Gonna give this one a try. It would be great to have a simple UI to enter into and execute from.  &lt;/p&gt;
&lt;p&gt;I'm hoping this will help me learn the Unity functions and methods faster as this is the way I'm used to learning an apps SDK.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 03 Jan 2014 14:41:21 -0800</pubDate><guid>tag:,2014-01-03:Thanks-Steve.-Gonna-give-this-one-a-try.-It-would-....html</guid></item><item><title>Remember seeing most of these early Pixar shorts a...</title><link>/Remember-seeing-most-of-these-early-Pixar-shorts-a....html</link><description>&lt;p&gt;Remember seeing most of these early Pixar shorts at Siggy.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 03 Jan 2014 09:28:42 -0800</pubDate><guid>tag:,2014-01-03:Remember-seeing-most-of-these-early-Pixar-shorts-a....html</guid></item><item><title>The sounds of (Python) Silence</title><link>/The-sounds-of-(Python)-Silence.html</link><description>&lt;p&gt;After a long vacation with my children, I've been meditating on the virtues of silence.  &lt;/p&gt;
&lt;p&gt;Python is a glorious toybox bursting with fun gadgets to delight TA's near and far.  You can easily use it to stuff anything from database access to a serial port controller into your copy of Maya, which is a always fun (and occasionally useful).  However the &lt;a href="http://www.youtube.com/watch?v=-mTUmczVdik"&gt;plethora&lt;/a&gt; of Python libraries out there does bring with it a minor annoyance - if you grab something cool off &lt;a href="https://pypi.python.org/pypi"&gt;the cheeseshop&lt;/a&gt; you don't know exactly how the author wants to communicate with users.  All too often you incorporate something useful into your Maya and suddenly your users have endless reams of debug printouts in their script listener -- info that might make sense to a coder or a sysadmin but which is just noise (or worse, slightly scary) for your artists.  &lt;/p&gt;
&lt;p&gt;If you're suffering from overly verbose external modules, you can get a little peace and quiet with this little snippet. The Silencer class is just a simple &lt;a href="http://docs.python.org/2.7/reference/datamodel.html#context-managers"&gt;context manager&lt;/a&gt; that hijacks &lt;em&gt;sys.stdout&lt;/em&gt; and &lt;em&gt;sys.stderr&lt;/em&gt; into a pair of StringIO's that will just silently swallow any printouts that would otherwise go to the listener.   &lt;/p&gt;
&lt;p&gt;If you actually need to look at the spew you can just look at the contents of the &lt;em&gt;out&lt;/em&gt; and &lt;em&gt;error&lt;/em&gt; fields of the Silencer.   More commonly though you'll just want to wrap a particularly verbose bit of code in a &lt;em&gt;with... as&lt;/em&gt; block to shut it up.  You'll also get the standard context manager behavior: an automatic restore in the event of an exception, etc.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 02 Jan 2014 10:45:00 -0800</pubDate><guid>tag:,2014-01-02:The-sounds-of-(Python)-Silence.html</guid></item><item><title>RFC: how to do a 'community' book</title><link>/RFC:-how-to-do-a-'community'-book.html</link><description>&lt;p&gt;As I mentioned a while ago, the book I &lt;a href="http://www.amazon.com/gp/product/0415812291/ref=s9_simh_gw_p14_d6_i1?pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=center-2&amp;amp;pf_rd_r=0PR9CNMVMXW53TJDCGKP&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=1688200382&amp;amp;pf_rd_i=507846"&gt;worked on last year is almost out&lt;/a&gt;.  That one was group project - there were about a dozen of contributing sections and data, and then Renee came in and cleaned it up into plain English.  I think that works well for overview books, but I'd like to do another one with a stronger point of view and narrower focus -- there are things you can say effectively in your own voice that are hard to pull off in the third person.  &lt;/p&gt;
&lt;p&gt;On the other hand, in any technical field like this there's also a big range of options - no matter how much you've been around, there are always weird corner cases and oddball gotchas that other people have to live with even though you've never even heard of them.  I'd love to figure out a way to get the whole TA crowd involved in making the next book better and more comprehensive.   &lt;/p&gt;
&lt;p&gt;Has anybody got a good model for how to involve a big internet community into the evolution of a book?  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 02 Jan 2014 09:41:00 -0800</pubDate><guid>tag:,2014-01-02:RFC:-how-to-do-a-'community'-book.html</guid></item><item><title>untitled_202</title><link>/untitled_202.html</link><description>&lt;p&gt;Still on holiday blogging wise, as we ponder the year gone by, give a thought to these ancient nuggets from &lt;a href="http://design.osu.edu/carlson/history/tree/abel.html"&gt;Robert Abel&lt;/a&gt;, back from when I was still in high school :)  Back when being a 'technical artist' probably meant 'being the guy who can hand adjust the laser in the slide-rendering machine that produces our graphics on film'  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 29 Dec 2013 14:17:00 -0800</pubDate><guid>tag:,2013-12-29:untitled_202.html</guid></item><item><title>untitled_203</title><link>/untitled_203.html</link><description>&lt;p&gt;Who else remembers when this was cutting edge graphics?  Happy Holidays!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 23 Dec 2013 19:11:00 -0800</pubDate><guid>tag:,2013-12-23:untitled_203.html</guid></item><item><title>I'm curious about the issues you had with Iron...</title><link>/I&amp;#39;m-curious-about-the-issues-you-had-with-Iron....html</link><description>&lt;p&gt;I'm curious about the issues you had with IronPython 2.7. Would you mind emailing me at jdhardy@gmail.com with some details?&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Mon, 23 Dec 2013 09:03:09 -0800</pubDate><guid>tag:,2013-12-23:I&amp;</guid></item><item><title>untitled_204</title><link>/untitled_204.html</link><description>&lt;p&gt;The book I worked on last year is up for pre-order on Amazon! It was a long haul - congrats to Renee and all the other authors who helped get this giant zeppelin filled with hot air! &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Production-Pipeline-Fundamentals-Film-Games/dp/0415812291/ref=sr_1_1?ie=UTF8&amp;amp;qid=1387519305"&gt;&lt;img alt="" src="http://ecx.images-amazon.com/images/I/517mfQSVsqL._SX258_BO1,204,203,200_.jpg" /&gt;&lt;/a&gt;&lt;a href="http://www.blogger.com/"&gt;&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 22 Dec 2013 14:50:00 -0800</pubDate><guid>tag:,2013-12-22:untitled_204.html</guid></item><item><title>Techartists doin' it for themselves: A Python REPL in Unity</title><link>/Techartists-doin'-it-for-themselves:-A-Python-REPL-in-Unity.html</link><description>&lt;p&gt;Last time, I sketched out the basics of &lt;a href="http://techartsurvival.blogspot.com/2013/12/embedding-ironpython-in-unity-tech-art.html"&gt;embedding a Python intepreter into Unity.&lt;/a&gt;   That's cool emough -- but unless you're so desperate for Python that you're willing to script your whole application inside of triple quotes it doesn't have a ton of immediate applications.  &lt;/p&gt;
&lt;p&gt;So, this time out I'll sketch out how to build a simple script editor inside of Unity (at the risk of repeating myself, I'll just say again that the extensibility of the Unity editor is an incredible aid to game developers of all stripes, and to tech artists in particular -- it's pretty amazing you can hack in something this complex without source code access or esoteric C++ chops.  &lt;/p&gt;
&lt;h2&gt;Prologomena&lt;/h2&gt;
&lt;p&gt;The basic strategy for this excersize is simply to create a Unity window with two panes - a 'history' pane  and a  'script' pane -- and before you ask, yes, it's just a ripoff of the Maya listener.   &lt;/p&gt;
&lt;p&gt;Before setting up the GUI, we need to cover the framework - the code that will keep the GUI stat and also set up the Python intepreter. In this example, you'll see a bunch of properties declared for the use of the GUI - notably __historyText_ and __scriptText_, which hold the actual contents of the listener and the history pane.  The other notable feature is the same duo of __ScriptEngine, &lt;em&gt;and __ScriptScope&lt;/em&gt; which we went over in the &lt;a href="http://techartsurvival.blogspot.com/2013/12/embedding-ironpython-in-unity-tech-art.html"&gt;last post&lt;/a&gt;_. _If those terms don't mean anything to you you might want to follow that link before proceeding).  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; using UnityEngine;    
 using UnityEditor;    
 using IronPython;    
 using IronPython.Modules;    
 using System.Text;    
 using System.Collections.Generic;    
 using Microsoft.Scripting.Hosting;    
 // derive from EditorWindow for convenience, but this is just a fire-n-forget script    
 public class ScriptExample : EditorWindow    
 {    
     // class member properties  
     Vector2 _historyScroll;    
     Vector2 _scriptScroll;    
     bool _showHistory = true;    
     int _historyPaneHeight = 192;    
     string _historyText = &amp;quot;history&amp;quot;;    
     string _scriptText = &amp;quot;script&amp;quot;;    
     string _lastResult = &amp;quot;&amp;quot;;    
     TextEditor _TEditor;    
     GUIStyle consoleStyle = new GUIStyle ();    
     GUIStyle historyStyle = new GUIStyle ();    
     Microsoft.Scripting.Hosting.ScriptEngine _ScriptEngine;    
     Microsoft.Scripting.Hosting.ScriptScope _ScriptScope;

     // initialization logic (it&amp;#39;s Unity, so we don&amp;#39;t do this in the constructor!  
     public void OnEnable ()    
     {       
         // pure gui stuff  
         consoleStyle.normal.textColor = Color.yellow;    
         consoleStyle.margin = new RectOffset (20, 10, 10, 10);    
         historyStyle.normal.textColor = Color.white;    
         historyStyle.margin = new RectOffset (20, 10, 10, 10);

         // load up the hosting environment    
         _ScriptEngine = IronPython.Hosting.Python.CreateEngine ();    
         _ScriptScope = _ScriptEngine.CreateScope ();

         // load the assemblies for unity, using types    
         // to resolve assemblies so we don&amp;#39;t need to hard code paths    
         _ScriptEngine.Runtime.LoadAssembly (typeof(PythonFileIOModule).Assembly);    
         _ScriptEngine.Runtime.LoadAssembly (typeof(GameObject).Assembly);    
         _ScriptEngine.Runtime.LoadAssembly (typeof(Editor).Assembly);    
         string dllpath = System.IO.Path.GetDirectoryName (    
             (typeof(ScriptEngine)).Assembly.Location).Replace (    
             &amp;quot;\\&amp;quot;, &amp;quot;/&amp;quot;);    
         // load needed modules and paths    
         StringBuilder init = new StringBuilder ();    
         init.AppendLine (&amp;quot;import sys&amp;quot;);    
         init.AppendFormat (&amp;quot;sys.path.append(\&amp;quot;{0}\&amp;quot;)\n&amp;quot;, dllpath + &amp;quot;/Lib&amp;quot;);    
         init.AppendFormat (&amp;quot;sys.path.append(\&amp;quot;{0}\&amp;quot;)\n&amp;quot;, dllpath + &amp;quot;/DLLs&amp;quot;);    
         init.AppendLine (&amp;quot;import UnityEngine as unity&amp;quot;);    
         init.AppendLine (&amp;quot;import UnityEditor as editor&amp;quot;);    
         init.AppendLine (&amp;quot;import StringIO&amp;quot;);    
         init.AppendLine (&amp;quot;unity.Debug.Log(\&amp;quot;Python console initialized\&amp;quot;)&amp;quot;);    
         init.AppendLine (&amp;quot;__print_buffer = sys.stdout = StringIO.StringIO()&amp;quot;);    
         var ScriptSource = _ScriptEngine.CreateScriptSourceFromString (init.ToString ());    
         ScriptSource.Execute (_ScriptScope);    
     }

    public  void OnGUI (){} // see next code snippet  
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As in the last example you'll also not that we're manually setting up sys.path to point at the directory where IronPython is installed, with a little extra code to make it portable  (dotNet assemblies can tell you where they live on disk, so it's a cheap shortcut to find your install directory).   &lt;/p&gt;
&lt;p&gt;The only thing in here that is really 'architecturally' important its this line:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;         init.AppendLine (&amp;quot;__print_buffer = sys.stdout = StringIO.StringIO()&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What's going on there is that we're replacing sys.stdout - which in ordinary Python points at the user's console - with a &lt;a href="http://docs.python.org/2/library/stringio.html"&gt;StringIO &lt;/a&gt;object.  StringIO mimicks a file -- and so does sys.stdout. By stuffing __print_buffer in there we are hijacking any calls to print that you might make in a script so we can print them out in our UI.  This is trick should be familiar to tech artists who need &lt;a href="http://www.drakeguan.org/blog/2009/02/How-to-make-Maya-output-all-messages-into-console-terminal/"&gt;to grab the Maya console for nefarious purposes.&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Unity GUI - the ~~good, ~~the bad, and the ugly&lt;/h2&gt;
&lt;p&gt;Unity's GUI toolkit is notoriously wonky, and you'll see as we go along that much of the energy here is devoted to working around it's limitations.  While we can go pretty far just using the basics, the is a certain &lt;a href="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4155_photo_1695691461_lr.jpg"&gt;Rube Goldberg&lt;/a&gt; quality to what follows. You've been warned.  &lt;/p&gt;
&lt;p&gt;First let's just layout out the actual drawing call - the OnGUI method of our window:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; using UnityEngine;    
 using UnityEditor;    
 using IronPython;    
 using IronPython.Modules;    
 using System.Text;    
 using System.Collections.Generic;    
 using Microsoft.Scripting.Hosting;    
 // derive from EditorWindow for convenience, but this is just a fire-n-forget script    
 public class ScriptExample : EditorWindow    
 {    
    /* snip... see previous example for the setup code... */

     public void OnGUI ()    
     {    
         HackyTabSubstitute ();  // this is explained below...

         // top pane with history    
         _showHistory = EditorGUILayout.Foldout (_showHistory, &amp;quot;History&amp;quot;);    
         if (_showHistory) {    
             EditorGUILayout.BeginVertical (GUILayout.ExpandWidth (true),     
             GUILayout.Height (_historyPaneHeight));    
             if (GUILayout.Button (&amp;quot;Clear history&amp;quot;)) {    
                 _historyText = &amp;quot;&amp;quot;;    
             }    
             _historyScroll = EditorGUILayout.BeginScrollView (_historyScroll);    
             EditorGUILayout.TextArea (_historyText,     
                 historyStyle,     
                 GUILayout.ExpandWidth (true),     
                 GUILayout.ExpandHeight (true));            
             EditorGUILayout.EndScrollView ();    
             EditorGUILayout.EndVertical ();    
         }    
         // draggable splitter    
         GUILayout.Box (&amp;quot;&amp;quot;, GUILayout.Height (8), GUILayout.ExpandWidth (true));    
         //Lower pane for script editing    
         EditorGUILayout.BeginVertical (GUILayout.ExpandWidth (true),     
             GUILayout.ExpandHeight (true));    
         _scriptScroll = EditorGUILayout.BeginScrollView (_scriptScroll);    
         GUI.SetNextControlName (&amp;quot;script_pane&amp;quot;);    
         // note use of GUILayout NOT EditorGUILayout.    
         // TextEditor is not accessible for EditorGUILayout!    
         _scriptText = GUILayout.TextArea (_scriptText,     
             consoleStyle,    
             GUILayout.ExpandWidth (true),     
             GUILayout.ExpandHeight (true));            
         _TEditor = (TextEditor)GUIUtility.GetStateObject (typeof(TextEditor), GUIUtility.keyboardControl);    
         EditorGUILayout.EndScrollView ();    
         EditorGUILayout.BeginHorizontal ();    
         if (GUILayout.Button(&amp;quot;Clear&amp;quot;, GUILayout.ExpandWidth(true)))    
         {    
             _scriptText = &amp;quot;&amp;quot;;    
             GUI.FocusControl(&amp;quot;script_pane&amp;quot;);    
         }    
         if (GUILayout.Button (&amp;quot;Execute and clear&amp;quot;, GUILayout.ExpandWidth (true))) {    
             Intepret (_scriptText);    
             _scriptText = &amp;quot;&amp;quot;;    
             GUI.FocusControl(&amp;quot;script_pane&amp;quot;);    
         }    
         if (GUILayout.Button (&amp;quot;Execute&amp;quot;, GUILayout.ExpandWidth (true))) {    
             Intepret (_scriptText);    
         }    
         EditorGUILayout.EndHorizontal ();    
         EditorGUILayout.EndVertical ();        
         // mimic maya Ctrl+enter = execute    
         if (Event.current.isKey &amp;amp;&amp;amp;    
             Event.current.keyCode == KeyCode.Return &amp;amp;&amp;amp;    
             Event.current.type == EventType.KeyUp &amp;amp;&amp;amp;    
             Event.current.control) {    
             Intepret (_scriptText);    
         }    
         // drag the splitter    
         if (Event.current.isMouse &amp;amp; Event.current.type == EventType.mouseDrag)    
         {_historyPaneHeight = (int) Event.current.mousePosition.y - 28;    
             Repaint();    
         }    
     }

 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're familiar with the dark arts of Unity GUI programming this should be pretty straight forward. If you're not, the key to understanding it is to remember that Unity uses what old-schooler's call &lt;em&gt;&lt;a href="http://lambda-the-ultimate.org/node/4561"&gt;Immediate mode GUI&lt;/a&gt;&lt;/em&gt; , in which each control gets evaluated as it is declared .  There's a &lt;a href="http://mollyrocket.com/forums/viewtopic.php?t=134"&gt;case to be made &lt;/a&gt;that immediate mode is better for performance sensitive applications, but if you're used to the more typical (aka 'retained') mode GUIs in, for example, QT it's kind of an oddball way to write.   &lt;/p&gt;
&lt;p&gt;As each GUI element is drawn it reflects and then possibly updates the data that it relies on -- so, for example, we pass the string __scriptText _ to the GUI.TextArea that draws the script listener pane - and the results of any changes are immediately passed back into __scriptText_ without the courtesy of a callback. This makes it tricky to manage complex state - as you run down the GUI draw, it's possible to hit a condition which changes a state and sends you back to the start! This makes it important to keep your state management code very clean and simple.  &lt;/p&gt;
&lt;p&gt;The one bit that may surprise people who do have some Unity experience its the line  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;_TEditor = (TextEditor)GUIUtility.GetStateObject (typeof(TextEditor),   
                                                  GUIUtility.keyboardControl);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;TextEditor&lt;/em&gt; class is an undocumented bit of Unity arcana - it is a wrapper on the code that actually handles things like typing, selecting or cutting and pasting into a Unity text field.  It has methods for things like setting the cursor location and executing copy-paste operations. Unfortunately, being undocumented, it's tricky to figure out what to do with it -- in this example I'm only using it to preserve the selection position when I do something crazy - as you'll see in a moment.  &lt;/p&gt;
&lt;h2&gt;Hacktastic&lt;/h2&gt;
&lt;p&gt;You probably noticed the enigmatic line  &lt;/p&gt;
&lt;p&gt;HackyTabSubstitute()    &lt;/p&gt;
&lt;p&gt;which leads up to the tricky bit of this example  -- and the reason for my earlier hack disclaimer.  &lt;/p&gt;
&lt;p&gt;Tabs of course are the _&lt;a href="http://www.wisegeek.com/what-is-sine-qua-non.htm#didyouknowout"&gt;sine qua non&lt;/a&gt; _for Pythonistas.  Unfortunately Unity catches the tab key before you can grab it, so it's impossible to 'type' a tab into a Unity text field.  After banging my head against this for a while, I settled on a pathetic workaround: _just cheat and use the tilde key, _which is above the tab key on most keyboards and doesn't have semantic importance in Python. Our new friend HackyTabSubsitute() makes sure that each time the GUI is drawn we replace and  backtick characters with indents and any tildes (shift-backtick) with dedents.  You can see how we also preserve the cursor position  by use of the _TextEditor.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;         / // use ` and ~ as substitutes for tab and un-tab
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;private void HackyTabSubstitute () { string _t = _scriptText; string[] lines = _scriptText.Split ('\n'); for (int i = 0; i&amp;lt; lines.Length; i++) { if (lines [i].IndexOf ('&lt;code&gt;') &amp;amp;gt;= 0) { lines [i] = " " + lines [i]; _TEditor.selectPos = _TEditor.pos = _TEditor.pos + 3; } if (lines [i].IndexOf (" ") &amp;amp;gt;= 0 &amp;amp;amp;&amp;amp;amp; lines [i].IndexOf ("~") &amp;amp;gt;= 0) { if (lines [i].StartsWith (" ")) lines [i] = lines [i].Substring (4); _TEditor.selectPos = _TEditor.pos = _TEditor.pos - 4; } lines [i] = lines [i].Replace ("~", ""); lines [i] = lines [i].Replace ("&lt;/code&gt;", ""); } _scriptText = string.Join ("\n", lines); if (_scriptText != _t) Repaint (); } `&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Assuming you can discipline yourself to use tilde instead of tab, this works like you'd expect, and it supports indents and dedents in any part of the line, which is handy for python edits.  &lt;/p&gt;
&lt;h2&gt;Running the script&lt;/h2&gt;
&lt;p&gt;As so often happens, it's the damn GUI which takes all the work. The actual point of this whole excersize is to let you type in some python and execute it. If you trigger an evaluation - with the buttons or with command + enter, you'll fire the Interpret function:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     // Pass the script text to the interpreter and display results    
     private void Intepret (string text_to_interpret)    
     {    
         object result = null;    
         try {    
             Undo.RegisterSceneUndo (&amp;quot;script&amp;quot;);    
             var scriptSrc = _ScriptEngine.CreateScriptSourceFromString (text_to_interpret);    
             _historyText += &amp;quot;\n&amp;quot;;    
             _historyText += text_to_interpret;    
             _historyText += &amp;quot;\n&amp;quot;;    
             result = scriptSrc.Execute (_ScriptScope);    
         }     
         // Log exceptions to the console too    
         catch (System.Exception e) {    
             Debug.LogException (e);    
             _historyText += &amp;quot;\n&amp;quot;;    
             _historyText += &amp;quot;#  &amp;quot; + e.Message + &amp;quot;\n&amp;quot;;    
         }     
         finally {    
             // grab the __print_buffer stringIO and get its contents    
             var print_buffer = _ScriptScope.GetVariable (&amp;quot;__print_buffer&amp;quot;);    
             var gv = _ScriptEngine.Operations.GetMember (print_buffer, &amp;quot;getvalue&amp;quot;);    
             var st = _ScriptEngine.Operations.Invoke (gv);    
             var src = _ScriptEngine.CreateScriptSourceFromString (&amp;quot;__print_buffer = sys.stdout = StringIO.StringIO()&amp;quot;);    
             src.Execute (_ScriptScope);    
             if (st.ToString ().Length &amp;gt; 0) {    
                 _historyText += &amp;quot;&amp;quot;;    
                 foreach (string l in st.ToString().Split(&amp;#39;\n&amp;#39;))    
                 {    
                     _historyText += &amp;quot;  &amp;quot; + l + &amp;quot;\n&amp;quot;;    
                 }    
                 _historyText += &amp;quot;\n&amp;quot;;    
             }    
             // and print the last value for single-statement evals    
             if (result != null) {    
                 _historyText += &amp;quot;#  **&amp;quot; + result.ToString () + &amp;quot;**\n&amp;quot;;    
             }    
             int lines = _historyText.Split (&amp;#39;\n&amp;#39;).Length;    
             _historyScroll.y += (lines * 19);                    
             Repaint ();    
         }    
     }    
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The heart of the whole business is just  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;result = scriptSrc.Execute (_ScriptScope);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which actually executes the contents of your script window.  As in Maya, we'll copy the evaluated text up to the history pane  (&lt;em&gt;historyText += ,etc).  If the event of an exception, we print out the exception into the history window as well, and also push a Unity debug message in case you aren't looking at your console window when the problem arises.  Finally, we check to see if the ___print_buffer&lt;/em&gt; StringIO object has been written to duing the script execution  and copy it's contents to the history window too.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-DRvP1YjaeZg/UrcrG6xumEI/AAAAAAAABP0/XwuthQ55-iA/s1600/example.png"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-DRvP1YjaeZg/UrcrG6xumEI/AAAAAAAABP0/XwuthQ55-iA/s1600/example.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;v. 0.1&lt;/h2&gt;
&lt;p&gt;Before starting the first of this pair of posts I was mostly just musing on how TA-friendly Unity is.   Building out a complete script editor is a perfect example of TA feature creep in action.  &lt;/p&gt;
&lt;p&gt;If you implement a script editor using the hints here you'll quickly see what's not there things like cut and paste, syntax highlighting, execution of selected text only and support for external files, just to name a few things that would be worth having.  And I should mention that this is demo code, it's not the sort of thing I'd want to turn into a critical path tool without further work.   &lt;/p&gt;
&lt;p&gt;Even so, it's been a useful little project.  In this holiday season it's taught me to appreciate my blessings - like how many nice little touches you get with a modern text editor. I'm even feeling more charitable towards the Max and Maya script listeners, since I've walked a mile in their sad patheric old worn out shoes.   &lt;/p&gt;
&lt;p&gt;All that said though, it really is &lt;em&gt;pretty fricking neat&lt;/em&gt; that you can add a completely new scripting language to the Unity editor in a couple of hours -- and save your self tons of future time by adding cheapo scripts to automate tedious tasks that aren't worth 200 lines of C# curly brackets.  &lt;/p&gt;
&lt;p&gt;At some point I'll address the most obvious failings - lack of cut-n-paste is the clear winner! - but first I want to see about implementing the console in a more flexible GUI - for example, I could pop up a WPF window, or maybe even something truly funky like an &lt;a href="http://techartsurvival.blogspot.com/2013/12/python-in-browsers.html"&gt;in-browser python console.&lt;/a&gt;.  In the mean time, if anybody takes this further I'd love to hear about it.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 22 Dec 2013 10:10:00 -0800</pubDate><guid>tag:,2013-12-22:Techartists-doin'-it-for-themselves:-A-Python-REPL-in-Unity.html</guid></item><item><title>Python in Unity - minor correction</title><link>/Python-in-Unity----minor-correction.html</link><description>&lt;p&gt;Going over the last post about &lt;a href="http://techartsurvival.blogspot.com/2013/12/embedding-ironpython-in-unity-tech-art.html"&gt;Python + Unity&lt;/a&gt;, I did a clean install to make sure the steps I was describing were working correctly and it reminded me about an inportant bit I've left out: how to get the Python stdlib into your Unity IronPython  &lt;/p&gt;
&lt;p&gt;Because Microsoft was the sponsor of the original IronPython project, versions that Microsoft released (including the 2.6.2 that i linked to in the last post) &lt;strong&gt;don't include the stdlib&lt;/strong&gt;, which comes with it's own license that clashes in some mysterious way with MS's licensing terms (even though both MS and the Python Foundation are giving the stuff away for free... _&lt;em&gt;_sigh&lt;/em&gt;). So to dance around that, they did not include the stdlib  -- the 'batteries included' -- with base install.  &lt;/p&gt;
&lt;p&gt;The remedy is simple - grab a copy of the regular python stdlib from a python 2.6 series install and copy it into the /Lib folder next to the location of your IronPython DLL.  I found it simplest to grab the Python26.zip folder from my Maya install and to expand that into the folder.  I did leave the 3 or 4 files that IPy had installed there on its own intact, I believe -- on pure intuition -- that they are different from the corresponding files in the standard python lib.  &lt;/p&gt;
&lt;h2&gt;Caveat emptor&lt;/h2&gt;
&lt;p&gt;FWIW, this is a good place to point out that some small percentage of stdlib modules don't work under IronPython (an unfortunate example being the handy &lt;em&gt;csv&lt;/em&gt; module for reading comma-delimited data files).  AFAIK there is no authoritative list of which modules do and don't work under Ipy. The good news is that, for this application , there is almost always a dotnet native solution to use as an alternative without having to install anything else.  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sun, 22 Dec 2013 09:53:00 -0800</pubDate><guid>tag:,2013-12-22:Python-in-Unity----minor-correction.html</guid></item><item><title>Embedding IronPython in Unity = Tech-art hog heaven</title><link>/Embedding-IronPython-in-Unity-=-Tech-art-hog-heaven.html</link><description>&lt;p&gt;&lt;em&gt;Update 6/2/2015&lt;/em&gt; If you are relatively new to Unity, and you're here because you're looking for ways to work in Python rather than C#, you may also want to check out &lt;a href="http://techartsurvival.blogspot.com/2015/05/boo-who.html"&gt;this 2015 post&lt;/a&gt; about Boo - the very obscure, but very Python like language in Mono that lets you write Unity games with fast, compiled code by almost-Python syntax. You don't work long in games without griping about your engine, and I've got my share of complaints about Unity. But I have to admit that it's the best toy in the world for a classic tech-art geek personality. Unlike bigger, more powerful AAA engines, Unity lets you get in under the hood really quickly. The editor environment is extremely extensible - you can add not just dialogs and buttons but 3d widgets and &lt;a href="http://www.thewanderlust.net/blog/2010/03/29/user-interface-design-in-video-games/"&gt;diegetic UI &lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;When I first got my hands on Unity I was a bit disappointed to note that, unlike Maya, it doesn't include a built in interactive console environment. The console is a wonderful thing for a TA - it's great for printing out data, lightweight automation of the "find everything in the scene named 'foo' and rename it to 'bar'" variety. So, I thought, is there some way to get this into Unity?  The fact that one could even ask it is a tribute to how flexible Unity is - and as it turned out it was not only possible, it wasn't too hard.  &lt;/p&gt;
&lt;h2&gt;You got Python in my Unity!&lt;/h2&gt;
&lt;p&gt;To start with a console needs some kind of scripting language. Not surprisingly, I wanted to see I could do it in python. Fortunately, this is ridiculously easy thanks to &lt;a href="http://ironpython.codeplex.com/"&gt;IronPython&lt;/a&gt;, the dotnet flavor of Python.  IronPython  runs on dotnet, and so does Unity - so it's not tough to plug IronPython into Unity directly.  Here's how:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You need a verstion of IronPython that will run on Unity's version of &lt;a href="http://www.mono-project.com/Main_Page"&gt;Mono &lt;/a&gt;, which as of this writing (Unity 4.22 , late 2013) is version 2.6.  By a happy coincidence of naming, that points you at &lt;a href="http://ironpython.codeplex.com/downloads/get/159511"&gt;IronPython 2.6.2&lt;/a&gt;.  (I've tried later versions but without much luck).&lt;/li&gt;
&lt;li&gt;Locate the IronPython dlls and the IronPython stdlib in the zip file. You will need&lt;br /&gt;
_&lt;ul&gt;
&lt;li&gt;IronPython.dll&lt;/li&gt;
&lt;li&gt;IronPython.Modules.dll&lt;/li&gt;
&lt;li&gt;Microsoft.Scripting.Core.dll&lt;/li&gt;
&lt;li&gt;Microsoft.Scripting.dll&lt;/li&gt;
&lt;li&gt;Microsoft.Scripting.Debugging.dll&lt;/li&gt;
&lt;li&gt;Microsoft.Scripting.ExtensionAttribute.dll&lt;/li&gt;
&lt;li&gt;Microsoft.Dynamic.dll
_&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CORRECTION : 12-22-2013 If you want access to the Python stdlib, you'll also need to grab a copy of the python 2.6 /Lib folder -- this is &lt;a href="http://techartsurvival.blogspot.com/2013/12/python-in-unity-minor-correction.html"&gt;not distributed with IronPython 2.6&lt;/a&gt;.  I unzipped the Python26.zip file from my Maya bin directory into the /Lib folder, taking care to leave the handful of IronPython files already there&lt;/li&gt;
&lt;li&gt;Copy all of the above into an Editor/Plugins/Resources folder in Unity. If you're not sure what that means:&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Naming a folder &lt;em&gt;Editor&lt;/em&gt; tells Unity it only runs in the editor, not at runtime (IronPython &lt;em&gt;won't&lt;/em&gt; run inside Unity on IOS devices, since those never run editor code)&lt;/li&gt;
&lt;li&gt;Naming it a folder _Plugins _tells Unity to load dlls from it&lt;/li&gt;
&lt;li&gt;Naming a folder &lt;em&gt;Resources&lt;/em&gt; makes sure it loads before scripts are compiled
For our application we need all three, hence "Editor/Plugins/Resources/..."  You can stick that whole thing into a top level folder for cleanliness if you want. Note the path names in this example:  &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-uHVdPvrDduM/Uq_uSf5ZxNI/AAAAAAAABO0/H0PMXUJlFso/s1600/layout.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-uHVdPvrDduM/Uq_uSf5ZxNI/AAAAAAAABO0/H0PMXUJlFso/s640/layout.png" /&gt;&lt;/a&gt;
  6. Restart Unity and open up MonoDevelop. If you check the Assembly-CSharp Editor info in the Solution panel you should see all of your IronPython DLL's are referenced therein:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-A_kG1rnuiuY/Uq_vrq1bXhI/AAAAAAAABPA/b9v7p3wxpfw/s1600/assembl.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-A_kG1rnuiuY/Uq_vrq1bXhI/AAAAAAAABPA/b9v7p3wxpfw/s400/assembl.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you've verified that the DLL's are in place, its time to test them.  Hosting an IronPython session in another app is much simpler than it sounds. The best resource for how it works is &lt;a href="http://www.voidspace.org.uk/ironpython/embedding.shtml"&gt;Michael Foord's Voidspace site&lt;/a&gt; (his &lt;a href="http://www.manning.com/foord/"&gt;book on IronPython&lt;/a&gt; is a great resource if you plan on going far with this , btw) . However in overview the process is pretty simple (  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a ScriptEngine. This is the actual Python interpreter.&lt;/li&gt;
&lt;li&gt;Create a ScriptScope ( &lt;a href="https://github.com/IronLanguages/main/blob/master/Runtime/Microsoft.Scripting/Hosting/ScriptScope.cs"&gt;Microsoft.Hosting.ScriptScope&lt;/a&gt;&lt;a href="http://www.blogger.com/"&gt;&lt;/a&gt;) This corresponds to the global namespace of your interpreter - much like the interpeter namespace in Maya&lt;/li&gt;
&lt;li&gt;Create  a ScriptSource ( &lt;a href="https://github.com/IronLanguages/main/blob/master/Runtime/Microsoft.Scripting/Hosting/ScriptSource.cs"&gt;Microsoft.Hosting.ScriptSource&lt;/a&gt;) using some text you've entered or composed.&lt;/li&gt;
&lt;li&gt;Execute the script&lt;/li&gt;
&lt;li&gt;Rinse &amp;amp; Repeat. You are in business.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Script hosting in practice&lt;/h2&gt;
&lt;p&gt;Here's an example .cs script that demostrates the process. Put it in an editor folder so that it can access the Unity Editor assembly (it's probably a good idea to keep it in the editor folder where you have your plugins/resources folder for cleanliness).   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; using UnityEngine;    
 using UnityEditor;    
 using IronPython;    
 using IronPython.Modules;    
 using System.Text;    
 // derive from EditorWindow for convenience, but this is just a fire-n-forget script    
 public class ScriptExample : EditorWindow {    
     [MenuItem(&amp;quot;Python/HelloWorld&amp;quot;)]    
     public static void ScriptTest()    
     {    
         // create the engine    
         var ScriptEngine = IronPython.Hosting.Python.CreateEngine();    
         // and the scope (ie, the python namespace)    
         var ScriptScope = ScriptEngine.CreateScope();    
         // execute a string in the interpreter and grab the variable    
         string example = &amp;quot;output = &amp;#39;hello world&amp;#39;&amp;quot;;    
         var ScriptSource = ScriptEngine.CreateScriptSourceFromString(example);    
         ScriptSource.Execute(ScriptScope);    
         string came_from_script = ScriptScope.GetVariable&amp;lt;string&amp;gt;(&amp;quot;output&amp;quot;);    
         // Should be what we put into &amp;#39;output&amp;#39; in the script.    
         Debug.Log(came_from_script);                
     }    
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When it compiles you'll get a menu items that activates the script.  When you hit it you should get a debug printout in your console like so.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-OHCa77GIxGA/UrEnF442YzI/AAAAAAAABPQ/nYBOKL4W1ZI/s1600/hello+world.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-OHCa77GIxGA/UrEnF442YzI/AAAAAAAABPQ/nYBOKL4W1ZI/s1600/hello+world.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Like the Maya python interpreter, you need to import the appropriate names so that you can get to them in scripts (it's always rather boggled my mind that Maya's own interpreter requires you to import cmds or pymel &lt;em&gt;every single freakin' time&lt;/em&gt;.  IronPython lets you import dotnet assemblies as if they were python modules, and since Unity and the Unity Editor are dotnet assemblies you can get access to the entire Unity environment just by importing them into your interpreter.   &lt;/p&gt;
&lt;p&gt;First, we need to load the assemblies to make them available to the intpereter itself.  In dotnet land that's done by loading an assembly.  Once an assembly is loaded, it can be imported using typical Python syntax  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python/HelloWorldRuntime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;    
 &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;UnityScriptTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    
 &lt;span class="p"&gt;{&lt;/span&gt;    
     &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;    
     &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IronPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hosting&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateEngine&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    
     &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ScriptScope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateScope&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    
     &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;assemblies&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;unity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;GameObject&lt;/span&gt;    
     &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Editor&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;don&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t have to hardcoded paths    &lt;/span&gt;
     &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadAssembly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GameObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadAssembly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Editor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    
     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import UnityEngine as unity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import UnityEditor as editor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unity.Debug.Log(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;hello from inside the editor&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ScriptSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateScriptSourceFromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;    
     &lt;span class="n"&gt;ScriptSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScriptScope&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running that one generates another console message - but this time from inside the script!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-S6g8MqlQ4gg/UrEub33XuBI/AAAAAAAABPg/kJmAVPdZtAI/s1600/hello+2.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-S6g8MqlQ4gg/UrEub33XuBI/AAAAAAAABPg/kJmAVPdZtAI/s1600/hello+2.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Next time: building a console&lt;/h2&gt;
&lt;p&gt;That may not seem like much, but in reality it's a big deal. You've got a working script interpreter running in Unity now, with all the power of Python and access to the innards of the Unity environment.  What remains is to build a decent interactive environment. If you're content with something barebones, you can whip up a simple UI to allow you to type code into a text field and see the results in another text block.  That may be enough for some purposes (hell, half the 3d packages on the market do little more than that).  However a more featured editor is a little tougher and involves a  little hacking to work around the limitations of Unity's GUI text handling, which makes it a bit involved for a single post. I'll save that one for next time  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Sat, 21 Dec 2013 11:14:00 -0800</pubDate><guid>tag:,2013-12-21:Embedding-IronPython-in-Unity-=-Tech-art-hog-heaven.html</guid></item><item><title>Enter, the Chimaera</title><link>/Enter,-the-Chimaera.html</link><description>&lt;p&gt;In addition to grinding my way through the innards of Maya, I spent a large part of my (sadly wasted) youth in graduate school studying ancient history with a sideline in the Italian Renaissance.   Even though  I don't get to use much of this information on a regular basis, I do occasionally get nostalgic for the random bits of weird and wonderful information you can only find in the dim recesses of a big research university library.  &lt;/p&gt;
&lt;p&gt;One of the greatest treasures in my personal museum of useless information is the genre of &lt;em&gt;Wunderzeichenbücher&lt;/em&gt;. The German means "wonder sign books," and it refers to 16th and 17th century genre of illustrated guide to fantastic creatures and strange occurrences. The Wonder Books are a fascinating mix of early scientific investigations, second hand traveller's tales, and just plain wacky stuff that is hard to explain as anything other than as the Renaissance equivalent of a&lt;a href="http://www.somethingawful.com/photoshop-phriday/2013/"&gt; SomethingAwful Photoshop Friday&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-zwUK0t-L-mQ/Tp0qaWbmRYI/AAAAAAAAAHY/lEMSFM2qNmw/s1600/blemmyes.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-zwUK0t-L-mQ/Tp0qaWbmRYI/AAAAAAAAAHY/lEMSFM2qNmw/s1600/blemmyes.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My particular favorite is the _&lt;a href="http://bibliodyssey.blogspot.com/2011/07/monstrorum-historia.html"&gt;Monstrorum Historia&lt;/a&gt; _ (1642) of &lt;a href="http://www.strangescience.net/aldrovandi.htm"&gt;Aldovandrus&lt;/a&gt;, which is chock full of amazing woodcut drawings of every kind of crazy hybrid creature the Renaissance could dream up, from chimaeras to &lt;a href="http://4.bp.blogspot.com/_GirmG839K7I/TSxxTE_lu0I/AAAAAAAAAG0/plmT3p6rMkQ/s320/Opinicus.gif"&gt;hippogriffs&lt;/a&gt; to &lt;a href="http://upload.wikimedia.org/wikipedia/commons/c/c8/Nuremberg_chronicles_-_Strange_People_-_Umbrella_Foot_(XIIr).jpg"&gt;monopods&lt;/a&gt; and &lt;a href="https://www.google.com/search?q=blemmyes"&gt;blemmyes&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Besides the awesome graphics (how's &lt;em&gt;that&lt;/em&gt; for retro, pixel kiddies!)  I've always found these images compelling because Tech Art is the domain of crazy hybrids.  We're artist/programmers, animator/logicians,  scultpor/scripters and graphics-nerd/visionaries. So adding dogs heads or chicken feet to our other attributes doesn't seem like too big a stretch.  &lt;/p&gt;
&lt;p&gt;So, with that an excuse I give you the Chimaera, my personal totem animal  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://farm7.staticflickr.com/6007/5929662311_1a53d72f4b.jpg"&gt;&lt;img alt="" src="http://farm7.staticflickr.com/6007/5929662311_1a53d72f4b.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As an aside I will point out that this one is not exactly pulled out of some Renaissance dude's _posteriore.  _ The artist must have seen this amazing Etruscan bronze:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://media-2.web.britannica.com/eb-media/90/28190-004-6970B6F6.jpg"&gt;&lt;img alt="" src="http://media-2.web.britannica.com/eb-media/90/28190-004-6970B6F6.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can even see how the woodcut artist included the stump of the tail. When the 2000 year original was dug up in 1553 the tail was missing.  It was restored in the 1800s.  Bug fix! &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Fri, 13 Dec 2013 21:11:00 -0800</pubDate><guid>tag:,2013-12-13:Enter,-the-Chimaera.html</guid></item><item><title>Python in browsers</title><link>/Python-in-browsers.html</link><description>&lt;p&gt;In case folks are wondering about the tantalizing prospect of running python in browser (as an alternative to or escape from JavaScript) &lt;a href="http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html"&gt;this is a great roundup &lt;/a&gt;of where things sit as of now (late 2013)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 12 Dec 2013 21:05:00 -0800</pubDate><guid>tag:,2013-12-12:Python-in-browsers.html</guid></item><item><title>...And I thought we had it bad...</title><link>/...And-I-thought-we-had-it-bad....html</link><description>&lt;p&gt;Bitching about all the random stuff you have to wire together is the key rituals of the tech-art faith.  You inherit all sorts of crazy decisions from Max, Maya, plugin authors, game engine teams, and random tools you find lying around and then some how have to lash it all together into a &lt;a href="http://www.rubegoldberg.com/gallery#"&gt;Rube Goldberg contraption&lt;/a&gt; that (hopefully) hides the wackiness from your users  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_2001285523_lr.jpg"&gt;&lt;img alt="" src="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_2001285523_lr.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course, this is a huge pain in the butt  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_1673126806_lr.jpg"&gt;&lt;img alt="" src="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_1673126806_lr.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But I never realized that we have it _easy. _Until I sat down to write a web app.  &lt;/p&gt;
&lt;p&gt;After lots of fruitless searching for commercial asset management system that would help us manage versions, review status and so on for our assets I finally broke down and decided to write my own. While &lt;a href="http://www.shotgunsoftware.com/"&gt;Shotgun&lt;/a&gt; has gotten much slicker over the last year and &lt;a href="http://www.southpawtech.com/"&gt;Tactic&lt;/a&gt; is both open-source and Python-based, neither works well with Perforce (Tactic has been promising P4 integration for over a year, with no public release that I've been able to find) and both are very heavy on the kind of features you need to handle a huge Hollywood-style team with hundreds of Anonymous Drones.  Our tiny team doesn't need pretty gantt charts and time-stamped hourly activity reports.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_2039295957_lr.jpg"&gt;&lt;img alt="" src="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_2039295957_lr.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Web Dev 0.1B&lt;/h3&gt;
&lt;p&gt;The basic plan of attack is quite simple. Luckily the problem that usually damns these kinds of setups -- making sure that the database and the game are actually in sync on things like, say, texture size or polycount -- isn't a big problem since all of that is, blessedly, available in Unity with minimal work. The real goal of this system is to make sure people know what's placeholder art, what's work in progress, what has bugs, and so on..  To that, I've got a MySQL database sitting in our data center and some tools in the Unity editor that can collect and forward info to the database.  In Unity I've also hacked the editor so that the current status of the asset is displayed over the asset thumbnail in the project view so the users can see where they stand without going out to another tool.  &lt;/p&gt;
&lt;p&gt;I love Unity to death, but even I can't convince myself to like Unity's built in procedural GUI language; it's clunky and formulaic -- and because it's orientation is so procedural it is extremely slow for anything with lots of controls.  Big Data -- spreadsheets, long lists, or fancy MVVM views are just not happening in the Unity Editor UI layer.  So -- to return at long last to the original seed of this post - I decided to write a web app to provide the producers and artists with the kind of overview data they'd need to see how things were progressing all across the project, rather than just the status of individual assets.  &lt;/p&gt;
&lt;h3&gt;The Devil You Know&lt;/h3&gt;
&lt;p&gt;I did a bunch of research trying to figure out how to do this without having to start a whole new career as a web developer. In all honesty I was mostly hoping to avoid having to escape from the comfy confines of Python and C# (I can't really call SQL 'comfy' but at least it's &lt;em&gt;familiar&lt;/em&gt;).  In particular my limited experiments with JavaScript (the real kind, not the beefed up Unity version) have been so uniformly unpleasant that I was desperate to avoid tangling with it at all costs.  I played with browser Pythons such as &lt;a href="http://www.brython.info/"&gt;Brython&lt;/a&gt; , &lt;a href="http://www.skulpt.org/"&gt;Skulpt&lt;/a&gt;, and the &lt;a href="http://jimmy.schementi.com/2010/03/pycon-2010-python-in-browser.html"&gt;IronPython DLR host&lt;/a&gt;.  There's also projects like &lt;a href="http://pyjs.org/"&gt;PyJS &lt;/a&gt;and &lt;a href="https://bitbucket.org/pyjeon/rapydscript"&gt;RapydScript&lt;/a&gt;, which compile Python (or in the case of RapydScript a 'pythonalike') to Javascript.   &lt;/p&gt;
&lt;p&gt;All of which are really cool - but none of which are tightly integrated into the bewildering complexity of modern web development. If all I wanted to do was &lt;em&gt;program_in the browser, I could stick with Python, take the speed hit and be done.  After more obsessive reading, however, I sadly concluded that the HTML-verse too crazy a place for any tacked-on, ex-post-facto solution -- even one as fricking cool as a complete Python interpreter written in Javascript.  The real hard part is not the programming, which is mostly UI level stuff -- hide this! highlight that! -- it's controlling the infinite number of stylistic choices that are involved in designing a functional and attractive layout in HTML.  The more I looked at it the more I felt like I needed to follow the herd and do what the 'real' web developers do -- which means not only learning HTML itself, but also CSS -- the language that defines style sheets for different graphic elements -- a language which is not the same as HTML - or the same as Javascript. ( Remember I said tech artists have it pretty good compared to web programmers? Imagine having to learn Mel, Python and Maxscript _all at the same time&lt;/em&gt; just to get started as a TA.  There but for the grace...)  &lt;/p&gt;
&lt;p&gt;This could be worse. Thank heavens a friend at work pointed me at &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, which is Twitter's clean and relatively simple to learn web gui framework. It lets you create nicely formatted modern looking pages without knowing too much about what really goes on in the tangled jungle of curly braces that define your CSS.  It still takes some doing to handle the GUI glue "do this when I push the button" stuff but its less annoying than, say, QT or WPF.  &lt;/p&gt;
&lt;p&gt;It's still incredibly annoying to write scads of parentheses and curlies for even the most trivial task  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;evens = [x for x in numbers if x % 2 == 0]&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Is aesthetically and morally superior to&lt;br /&gt;
&lt;code&gt;``numbers=[1,2,3,4,5,6,7,8,9,10];  
evens=new Array;  
var _$tmp1_data=_$pyva_iter(numbers);&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;var _$tmp2_len=_$tmp1_data.length;&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;for(var _$tmp3_index=0;_$tmp3_index&amp;lt;_$tmp2_len;_$tmp3_index++)&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;{&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;x=_$tmp1_data[_$tmp3_index];  
    if((_.isEqual((x % 2),0)))&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;{  
        evens.append(x);&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;}  
     }&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;&lt;/code&gt;But on the other hand you get lots of nice graphical goodies to soften the pain. I'm experimenting with &lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt;, which has Pythonic brevity and clarity -- but it's not Python and if you go in thinking it is (as I have on a few occasions) you'll get your knickers in a twist.   &lt;/p&gt;
&lt;h3&gt;The backside&lt;/h3&gt;
&lt;p&gt;Fortunately, the server side code is actually much less of a hassle than I had feared. Given the nature of the problem -- selecting and filtering data from a database and then spitting it out to users -- the natural choice for me was &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, which has several advantages:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A great object-relational mapper (ie, you get to program with nice objects instead of gnarly SQL queries, cursors, and rows&lt;/li&gt;
&lt;li&gt;A decent templating language. When I wrote the first Python build server for &lt;a href="http://undeadlabs.com/"&gt;the lab&lt;/a&gt; I did this all by myself with string.Template, and it was a pain in the pants.&lt;/li&gt;
&lt;li&gt;Hardly a curly bracket in sight&lt;/li&gt;
&lt;li&gt;Lots of documentation and tutorials on the web, which is comforting for the terrified novice (= me).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After all of the consternation I went to researching web client stuff, this was a snap choice. And then the fun began.  &lt;/p&gt;
&lt;p&gt;The server is going to be running on a Mac (the tech art mac that we use for builds) so it will be ready to migrate to a Linux host later.  No problem, I use a mac laptop and do a fair amount of python on the mac already.,  So we want to install Django on the mac.  &lt;/p&gt;
&lt;p&gt;We need to install easy-setup (not sure why that doesn't come with the default mac python install)&lt;br /&gt;
....So we can install pip&lt;br /&gt;
.......So we can install Django&lt;br /&gt;
...... which needs MySQLdb&lt;br /&gt;
.......... which needs MySQL&lt;br /&gt;
..............which &lt;a href="http://stackoverflow.com/questions/1448429/how-to-install-mysqldb-python-data-access-library-to-mysql-on-mac-os-x"&gt;doesn;t install correctly on OSX the way it is supposed to&lt;/a&gt;&lt;br /&gt;
.................so we need to install a Ruby package manager that can install MySql and MysqlDb&lt;br /&gt;
....................so we install &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt;&lt;br /&gt;
.........................which needs Xcode&lt;br /&gt;
............................which requires you to accept the Xcode license after updates&lt;br /&gt;
..............................and then to install the Xcode commmand line tools&lt;br /&gt;
...........................so we can properly rebuild and install MySQL&lt;br /&gt;
........................so we can install MySQLdb&lt;br /&gt;
.....................so we can point Django at MySQL  &lt;/p&gt;
&lt;p&gt;_Eh voila! _We're done!  It's a good thing Mac's are the elegant operating system for people who don't go in for all that techie stuff.  &lt;/p&gt;
&lt;p&gt;Evidently. though,  this sort of thing is just business as usual for the real web developers. I guess I'll stop bitching about Autodesk's lousy license manager from now on.  The theme of this project is learning to appreciate just how good we've got it :)  &lt;/p&gt;
&lt;p&gt;So, with all that done, I grabbed a trial of &lt;a href="http://www.jetbrains.com/pycharm/"&gt;PyCharm &lt;/a&gt;. As an IDE I find it a bit clunky, but it's got good Django integration. Off to the races  &lt;/p&gt;
&lt;h3&gt;SQLitis&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;In this next bit I'm going to touch lightly on how Django does and doesn't make it easy to work with a database using familiar python techniques. The TL;DR is that it works pretty well, with gotchas. If you're unfamiliar with SQL terminology, databases, etc, you may want skim (and if you're an expert, you'll probably roll your eyes).  This isn't a how-to or tutorial - there are &lt;a href="http://gettingstartedwithdjango.com/"&gt;great ones&lt;/a&gt; out there.  It's just a quick glance at something that many TA's may find useful in coming years.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;The nice part of the Django workflow is that you can get Django to generate your data models for you by analysing your existing database.  Running  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;python django-admin.py inspectdb&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;On your database will spit out the Python class definitions for your data models to stdout, where you can cut and paste them into your code.  I already had a decent database schema (I took most of my n00b lumps with that sort of thing building a bug tracking database for &lt;a href="http://undeadlabs.com/about-state-of-decay/"&gt;SOD&lt;/a&gt;) and getting the object models built took about half an hour from 'starting to look at the docs' to 'done'. The little GUI that PyCharm gives you for django-admin is particularly helpful here.  &lt;/p&gt;
&lt;p&gt;There are a couple of hitches.   &lt;/p&gt;
&lt;p&gt;Django could be smarter about tables which don't use numerical ID columns as their primary keys -- which bugs my inner &lt;a href="https://www.simple-talk.com/sql/t-sql-programming/a-tale-of-identifiers/"&gt;Joe Celko&lt;/a&gt; -- and I ended up having to add numeric ID columns to some of my tables in order to placate Django. Evidently there are ways to get in under the hood an tweak the actual sql that is emitted from your models to get around this but I've got other things to worry about.   &lt;/p&gt;
&lt;p&gt;It's also a bit tricky to get exactly the info you want.  For simple queries of the _get everything in this table named 'foo' _ variety Django works fine.  You can even do &lt;a href="http://www.w3resource.com/sql/joins/using-a-where-cluase-to-join-two-tables-related-by-a-single-column-primary-key-or-foriegn-key-pair.php"&gt;SQL joins&lt;/a&gt;, where you create a new pseudo table by picking entries from a set of tables with common keys - in Django you can trace back through a chain or table to table relationships just by following a  set of properties on your data objects.  In my case I have a table of assets (which describes the assets' names, location, and so on) and another table of asset types which is basically an Enum describing all the asset types - models, textures, animations and whatnot.  In SQL you'd connect them up using a &lt;a href="http://www.w3schools.com/sql/sql_foreignkey.asp"&gt;foreign key &lt;/a&gt;  to make sure that all the links were valid, and then use a JOIN statement to produce a combined result.  For example I have two tables somewhat like this:  &lt;/p&gt;
&lt;p&gt;Assets table&lt;br /&gt;
| Asset| String&lt;br /&gt;
---|---&lt;br /&gt;
Thumbnail| Image&lt;br /&gt;
Path| String&lt;br /&gt;
Type| Int&lt;br /&gt;
Asset type table &lt;br /&gt;
| ID| Int&lt;br /&gt;
---|---&lt;br /&gt;
Description| String&lt;br /&gt;
Name| String  &lt;/p&gt;
&lt;p&gt;And if I want to grab a combined view that shows the assets along with their types I might do something like  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT assets.asset, assets.path, asset_types.name  
FROM assets  
INNER JOIN asset_types  
ON asset_types.id = assets.type&lt;/code&gt;&lt;br /&gt;
``Which seems kind of funky and 1970's to read, but it's a very powerful technique - this would give back all of the assets and their types without any tedious loop writing on the receiving end.  Django handles this for you nicely in its object model: as long as I made sure to let Django know that the 'type' I want comes from the asset types table and the 'asset' comes from the assets table, I can just grab it with  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;asset_list = Assets.objects.all()  # collect all the assets  
for each_asset in asset_list:  
    print asset.type.name&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;This is fine and dandy for many cases, but it does have some pitfalls. One of the great things about joins is that you can use them to substitute for conventional if-then logic. For example, in my case the I have a table of 'history' entries, which record changes in status (say from 'ready for review' to 'approved') along with times, dates and comments so we can see when things were OK'd for use in the game.  To get the current status of the object  I join the history table to itself:  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;SELECT  
h1.idhistory, h1.asset, h1.changed  
FROM (history h1 left join history h2  
        ON  
       (h1.asset = h2.asset and  h2.changed &amp;gt; h1.changed)  
       )  
        WHERE isnull(h2.asset)  
ORDER BY h1.asset&lt;/code&gt;The LEFT JOIN tries to run all combinations of dates in h2 against matching assets/date combinations in h1.  In all but one cases these will succeed (since the last date will be larger than all but the latest date). By looking for the failed join (with "isnull (h2.assets)") we can grab the latest entry.  This seems like a lot of work but it's way faster than a conventional loop-through-them-all-and-pick-the-latest-one approach; plus it is done in the server, in highly optimized C code, instead of on the client in (slow) Python.  &lt;/p&gt;
&lt;p&gt;Unfortunately this is a tricky one to get right with Django - at least, in my current (4 days and counting) aquaintance with Django.  I ended up having to work around it by creating a SQL view - basically a stored query - and grabbing just the id's of the history entries I wanted from their, and then doing a separate query to get the 'real' assets using the object technique I outlined earlier. Works fine but it is two server hits where one would do. C'est la vie.  &lt;/p&gt;
&lt;h3&gt;Last words&lt;/h3&gt;
&lt;p&gt;So, it's been a mixed bag getting this thing off the ground.  Django is pretty cool - one of the nice things about working with web tech is that itt has several orders of magnitude more users than typical TA tech - the  speed with which things evolve in this space is pretty dizzying if you're used to the typical lackadaisical pace of tech advances from ADSK.  Web tools are clearly going to be a Big Thing in the coming years - the ease of distribution and graphical panache you can get makes the old school batch-file and script world seem pretty pokey.  On the other hand, web tech  really is a Rube Goldberg machine - it's made up of technologies that have vastly outgrown their original purposes, and is plagued by competing vendors and developer faddism.  Javascript is icky, and the idea of having to learn at least 3 different languages ( JS, CSS, and HTML) just to get anything done is pretty irritating.  &lt;/p&gt;
&lt;p&gt;Fortunately the core of the TA personality is pure stubbornness.  We have our jobs because we don't like to rest until we figure out what the hell is going on. It's a very, very valuable trait to have if you're getting into web tools :)  &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Thu, 12 Dec 2013 20:37:00 -0800</pubDate><guid>tag:,2013-12-12:...And-I-thought-we-had-it-bad....html</guid></item><item><title>Late for the revolution</title><link>/Late-for-the-revolution.html</link><description>&lt;p&gt;Since the demise of the late, lamented &lt;a href="http://www.gdcvault.com/gdmag"&gt;Game Developer Magazine&lt;/a&gt;, I've been wondering if it's time to find some other writing outlet. Most of my spare writing energy for last year was consumed by shipping &lt;a href="http://undeadlabs.com/about-state-of-decay/"&gt;State Of Decay&lt;/a&gt; and working on a book project for Focal Press.  &lt;/p&gt;
&lt;p&gt;Now that both of those are safely in the past I'm going to spend a few weeks noodling on this to see if it's congenial.  I'm working on another book outline at the moment, and as topics of interest come up - or as I need to think out loud about them - i'll try floating them here to see how they look in print.  I also plan on ruminating on knotty tech-art questions, programming problems, and maybe throwing in the occasional classical allusion to make myself look smart.  &lt;/p&gt;
&lt;p&gt;No cat pictures though.  Not my bag.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 22:02:00 -0800</pubDate><guid>tag:,2013-12-11:Late-for-the-revolution.html</guid></item><item><title>A description of the blog</title><link>/A-description-of-the-blog.html</link><description>&lt;p&gt;A blog about technical art, particularly Maya, Python, and Unity. With lots of obscurantist references &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:A-description-of-the-blog.html</guid></item><item><title>Blog's Google Analytics account number</title><link>/Blog's-Google-Analytics-account-number.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Blog's-Google-Analytics-account-number.html</guid></item><item><title>Blog comment form location</title><link>/Blog-comment-form-location.html</link><description>&lt;p&gt;EMBEDDED_IFRAME&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Blog-comment-form-location.html</guid></item><item><title>Blog comment message</title><link>/Blog-comment-message.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Blog-comment-message.html</guid></item><item><title>Comma separated list of emails to send new blog posts to</title><link>/Comma-separated-list-of-emails-to-send-new-blog-posts-to.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Comma-separated-list-of-emails-to-send-new-blog-posts-to.html</guid></item><item><title>Comment time stamp format number</title><link>/Comment-time-stamp-format-number.html</link><description>&lt;p&gt;29&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Comment-time-stamp-format-number.html</guid></item><item><title>Default backlinks mode for posts</title><link>/Default-backlinks-mode-for-posts.html</link><description>&lt;p&gt;DEFAULT_HAVE_BACKLINKS&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Default-backlinks-mode-for-posts.html</guid></item><item><title>Default comment mode for posts</title><link>/Default-comment-mode-for-posts.html</link><description>&lt;p&gt;DEFAULT_HAVE_COMMENTS&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Default-comment-mode-for-posts.html</guid></item><item><title>Email address to send notifications of new comments needing moderation to</title><link>/Email-address-to-send-notifications-of-new-comments-needing-moderation-to.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Email-address-to-send-notifications-of-new-comments-needing-moderation-to.html</guid></item><item><title>Footer to append to the end of each entry in the post feed</title><link>/Footer-to-append-to-the-end-of-each-entry-in-the-post-feed.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Footer-to-append-to-the-end-of-each-entry-in-the-post-feed.html</guid></item><item><title>How frequently this blog should be archived</title><link>/How-frequently-this-blog-should-be-archived.html</link><description>&lt;p&gt;MONTHLY&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:How-frequently-this-blog-should-be-archived.html</guid></item><item><title>Language for this blog</title><link>/Language-for-this-blog.html</link><description>&lt;p&gt;en&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Language-for-this-blog.html</guid></item><item><title>List of e-mail addresses to send notifications of new comments to</title><link>/List-of-e-mail-addresses-to-send-notifications-of-new-comments-to.html</link><description>&lt;p&gt;theodox@gmail.com&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:List-of-e-mail-addresses-to-send-notifications-of-new-comments-to.html</guid></item><item><title>List of email addresses that can post to the blog via email.</title><link>/List-of-email-addresses-that-can-post-to-the-blog-via-email..html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:List-of-email-addresses-that-can-post-to-the-blog-via-email..html</guid></item><item><title>Maximum number of things to show on the main page"</title><link>/Maximum-number-of-things-to-show-on-the-main-page%22.html</link><description>&lt;p&gt;7&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Maximum-number-of-things-to-show-on-the-main-page".html</guid></item><item><title>Number of days after which new comments are subject to moderation</title><link>/Number-of-days-after-which-new-comments-are-subject-to-moderation.html</link><description>&lt;p&gt;14&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Number-of-days-after-which-new-comments-are-subject-to-moderation.html</guid></item><item><title>Template: Tech Art Survival Guide</title><link>/Template:-Tech-Art-Survival-Guide.html</link><description>&lt;p&gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class="date-outer"&amp;gt;&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;&amp;lt;div class="date-posts"&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="//www.blogger.com/img/icon_delete13.gif" /&gt;&lt;/p&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;h4&gt;&lt;a href="javascript:void(0)"&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;h4&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img alt="" src="//www.blogger.com/img/icon_delete13.gif" /&gt; : &lt;/p&gt;
&lt;h4&gt;:&lt;/h4&gt;
&lt;p&gt;()&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;&amp;amp;rsaquo;&lt;/p&gt;
&lt;p&gt;&amp;amp;lsaquo;&lt;/p&gt;
&lt;p&gt;&amp;amp;rsaquo;&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href="javascript:void(0);"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="" src="http://img1.blogblog.com/img/icon18_email.gif" /&gt;&lt;/p&gt;
&lt;p&gt;,&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="//img2.blogblog.com/img/icon18_edit_allbkg.gif" /&gt;&lt;/p&gt;
&lt;h4&gt;:&lt;/h4&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;()&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;() &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="javascript:void(0)"&gt; ▼  ◄  ►  &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;p&gt;&amp;amp;#9660;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;lt;script type="text/javascript"&amp;gt; function setAttributeOnload(object, attribute, val) { if(window.addEventListener) { window.addEventListener('load', function(){ object[attribute] = val; }, false); } else { window.attachEvent('onload', function(){ object[attribute] = val; }); } } &amp;lt;/script&amp;gt; &amp;lt;div id="navbar-iframe-container"&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;script type="text/javascript" src="https://apis.google.com/js/plusone.js"&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script type="text/javascript"&amp;gt; gapi.load("gapi.iframes:gapi.iframes.style.bubble", function() { if (gapi.iframes &amp;amp;&amp;amp; gapi.iframes.getContext) { gapi.iframes.getContext().openChild({ url: 'https://www.blogger.com/navbar.g?targetBlogID\0753596910715538761404\46blogName\75Tech+Art+Survival+Guide\46publishMode\75PUBLISH_MODE_BLOGSPOT\46navbarType\75LIGHT\46layoutType\75LAYOUTS\46searchRoot\75http://techartsurvival.blogspot.com/search\46blogLocale\75en\46v\0752\46homepageUrl\75http://techartsurvival.blogspot.com/\46vt\75-911492113776567634', where: document.getElementById("navbar-iframe-container"), id: "navbar-iframe" }); } }); &amp;lt;/script&amp;gt;&amp;lt;script type="text/javascript"&amp;gt; (function() { var script = document.createElement('script'); script.type = 'text/javascript'; script.src = '//pagead2.googlesyndication.com/pagead/js/google_top_exp.js'; var head = document.getElementsByTagName('head')[0]; if (head) { head.appendChild(script); }})(); &amp;lt;/script&amp;gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Template:-Tech-Art-Survival-Guide.html</guid></item><item><title>The BlogSpot subdomain under which to publish your blog</title><link>/The-BlogSpot-subdomain-under-which-to-publish-your-blog.html</link><description>&lt;p&gt;techartsurvival&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-BlogSpot-subdomain-under-which-to-publish-your-blog.html</guid></item><item><title>The access type for the readers of the blog.</title><link>/The-access-type-for-the-readers-of-the-blog..html</link><description>&lt;p&gt;PUBLIC&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-access-type-for-the-readers-of-the-blog..html</guid></item><item><title>The content served when the requested post or page is not found.</title><link>/The-content-served-when-the-requested-post-or-page-is-not-found..html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-content-served-when-the-requested-post-or-page-is-not-found..html</guid></item><item><title>The custom robots.txt content of the blog served to search engines.</title><link>/The-custom-robots.txt-content-of-the-blog-served-to-search-engines..html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-custom-robots.txt-content-of-the-blog-served-to-search-engines..html</guid></item><item><title>The list of administrators' emails for the blog.</title><link>/The-list-of-administrators'-emails-for-the-blog..html</link><description>&lt;p&gt;theodox@gmail.com&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-list-of-administrators'-emails-for-the-blog..html</guid></item><item><title>The list of authors' emails who have permission to publish.</title><link>/The-list-of-authors'-emails-who-have-permission-to-publish..html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-list-of-authors'-emails-who-have-permission-to-publish..html</guid></item><item><title>The list of emails for users who have permission to read the blog.</title><link>/The-list-of-emails-for-users-who-have-permission-to-read-the-blog..html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-list-of-emails-for-users-who-have-permission-to-read-the-blog..html</guid></item><item><title>The meta description of the blog served to search engines.</title><link>/The-meta-description-of-the-blog-served-to-search-engines..html</link><description>&lt;p&gt;A blog about technical art, python, game development and geekery.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-meta-description-of-the-blog-served-to-search-engines..html</guid></item><item><title>The name of the blog</title><link>/The-name-of-the-blog.html</link><description>&lt;p&gt;Tech Art Survival Guide&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-name-of-the-blog.html</guid></item><item><title>The number of the archive index date format</title><link>/The-number-of-the-archive-index-date-format.html</link><description>&lt;p&gt;9&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-number-of-the-archive-index-date-format.html</guid></item><item><title>The number of the date header format</title><link>/The-number-of-the-date-header-format.html</link><description>&lt;p&gt;26&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-number-of-the-date-header-format.html</guid></item><item><title>The number of the time stamp format</title><link>/The-number-of-the-time-stamp-format.html</link><description>&lt;p&gt;27&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-number-of-the-time-stamp-format.html</guid></item><item><title>The template for blog posts</title><link>/The-template-for-blog-posts.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-template-for-blog-posts.html</guid></item><item><title>The time zone for this blog</title><link>/The-time-zone-for-this-blog.html</link><description>&lt;p&gt;America/Los_Angeles&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-time-zone-for-this-blog.html</guid></item><item><title>The type of feed to provide for blog comments</title><link>/The-type-of-feed-to-provide-for-blog-comments.html</link><description>&lt;p&gt;FULL&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-type-of-feed-to-provide-for-blog-comments.html</guid></item><item><title>The type of feed to provide for blog posts</title><link>/The-type-of-feed-to-provide-for-blog-posts.html</link><description>&lt;p&gt;FULL&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-type-of-feed-to-provide-for-blog-posts.html</guid></item><item><title>The type of feed to provide for per-post comments</title><link>/The-type-of-feed-to-provide-for-per-post-comments.html</link><description>&lt;p&gt;FULL&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-type-of-feed-to-provide-for-per-post-comments.html</guid></item><item><title>The type of publishing done for this blog.</title><link>/The-type-of-publishing-done-for-this-blog..html</link><description>&lt;p&gt;PUBLISH_MODE_BLOGSPOT&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:The-type-of-publishing-done-for-this-blog..html</guid></item><item><title>URL to redirect post feed requests to</title><link>/URL-to-redirect-post-feed-requests-to.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:URL-to-redirect-post-feed-requests-to.html</guid></item><item><title>Unit of things to show on the main page</title><link>/Unit-of-things-to-show-on-the-main-page.html</link><description>&lt;p&gt;POSTS&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Unit-of-things-to-show-on-the-main-page.html</guid></item><item><title>Whether Quick Editing is enabled</title><link>/Whether-Quick-Editing-is-enabled.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-Quick-Editing-is-enabled.html</guid></item><item><title>Whether alternate JS renderings are allowed</title><link>/Whether-alternate-JS-renderings-are-allowed.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-alternate-JS-renderings-are-allowed.html</guid></item><item><title>Whether float alignment is enabled for the blog</title><link>/Whether-float-alignment-is-enabled-for-the-blog.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-float-alignment-is-enabled-for-the-blog.html</guid></item><item><title>Whether this blog can be promoted on Blogger</title><link>/Whether-this-blog-can-be-promoted-on-Blogger.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-this-blog-can-be-promoted-on-Blogger.html</guid></item><item><title>Whether this blog contains adult content</title><link>/Whether-this-blog-contains-adult-content.html</link><description>&lt;p&gt;false&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-this-blog-contains-adult-content.html</guid></item><item><title>Whether this blog is served with meta descriptions.</title><link>/Whether-this-blog-is-served-with-meta-descriptions..html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-this-blog-is-served-with-meta-descriptions..html</guid></item><item><title>Whether this blog serves custom robots.txt content to search engines.</title><link>/Whether-this-blog-serves-custom-robots.txt-content-to-search-engines..html</link><description>&lt;p&gt;false&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-this-blog-serves-custom-robots.txt-content-to-search-engines..html</guid></item><item><title>Whether this blog should be indexed by search engines</title><link>/Whether-this-blog-should-be-indexed-by-search-engines.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-this-blog-should-be-indexed-by-search-engines.html</guid></item><item><title>Whether to convert line breaks into tags in post editor</title><link>/Whether-to-convert-line-breaks-into--tags-in-post-editor.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-to-convert-line-breaks-into--tags-in-post-editor.html</guid></item><item><title>Whether to enable comment moderation</title><link>/Whether-to-enable-comment-moderation.html</link><description>&lt;p&gt;DISABLED&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-to-enable-comment-moderation.html</guid></item><item><title>Whether to provide an archive page for each post</title><link>/Whether-to-provide-an-archive-page-for-each-post.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-to-provide-an-archive-page-for-each-post.html</guid></item><item><title>Whether to require commenters to complete a Captcha</title><link>/Whether-to-require-commenters-to-complete-a-Captcha.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-to-require-commenters-to-complete-a-Captcha.html</guid></item><item><title>Whether to show a link for users to e-mail posts</title><link>/Whether-to-show-a-link-for-users-to-e-mail-posts.html</link><description>&lt;p&gt;false&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-to-show-a-link-for-users-to-e-mail-posts.html</guid></item><item><title>Whether to show a related link box in the post composer</title><link>/Whether-to-show-a-related-link-box-in-the-post-composer.html</link><description>&lt;p&gt;false&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-to-show-a-related-link-box-in-the-post-composer.html</guid></item><item><title>Whether to show comment backlinks on the blog</title><link>/Whether-to-show-comment-backlinks-on-the-blog.html</link><description>&lt;p&gt;false&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-to-show-comment-backlinks-on-the-blog.html</guid></item><item><title>Whether to show comments</title><link>/Whether-to-show-comments.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-to-show-comments.html</guid></item><item><title>Whether to show images in the Lightbox when clicked</title><link>/Whether-to-show-images-in-the-Lightbox-when-clicked.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-to-show-images-in-the-Lightbox-when-clicked.html</guid></item><item><title>Whether to show profile images in comments</title><link>/Whether-to-show-profile-images-in-comments.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-to-show-profile-images-in-comments.html</guid></item><item><title>Whether to show the title field</title><link>/Whether-to-show-the-title-field.html</link><description>&lt;p&gt;true&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Whether-to-show-the-title-field.html</guid></item><item><title>Who can comment</title><link>/Who-can-comment.html</link><description>&lt;p&gt;REGISTERED&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Theodore</dc:creator><pubDate>Wed, 11 Dec 2013 21:46:27 -0800</pubDate><guid>tag:,2013-12-11:Who-can-comment.html</guid></item></channel></rss>