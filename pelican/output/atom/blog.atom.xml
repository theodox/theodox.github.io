<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>static_site_test</title><link href="/" rel="alternate"></link><link href="/atom/blog.atom.xml" rel="self"></link><id>/</id><updated>2015-03-25T00:00:00-07:00</updated><entry><title>gdc_2016</title><link href="/gdc_2016.html" rel="alternate"></link><updated>2015-03-25T00:00:00-07:00</updated><author><name>stevet</name></author><id>tag:,2015-03-25:gdc_2016.html</id><summary type="html">&lt;p&gt;It doesn't take much super-secret industry-insider special knowledge to know that the big story this year was VR, VR and more VR -- if the you had somehow managed to miss out on the pre-show hype the giant black Oculus booth looming like the Death Star right over the entrance to the expo floor told pretty much the whole story in one glance.  &lt;/p&gt;
&lt;p&gt;It is, however, interesting to note how cynical we've become as an industry about tech bubbles:  from MMOs to Facebook games to In-app purchases and 3-D TVs, we've all lived through so many Next Big Things that we habitually reserve judgement -- even on things like the latest crop of VR gear which sets our little nerdly hearts afluttering.  I had a lot of conversations with people on the general theme of &lt;em&gt;"wow, that's cool. In three years most of them will be out of business, though."&lt;/em&gt;   -- even with people in the VR business itself.  &lt;/p&gt;
&lt;p&gt;Personally, I think VR is going to survive but I don't think it'll be the kind of world-changing, ubiquitous tech that the broadband internet and handhelds have turned out to be.  It's an awesome geek toy and the gateway to many interestng and novel experiences.  I see it sort of like that kayak in the garage: a cool thing that gets dusted off a few times a year but not a regular part of daily life, and never going to buffed up to the high consumerist gloss of an iPhone.   Maybe in another decade, but for now it's a really cool niche product.  I hope all that crazy money sloshing around in VR land fuels some general purpose innovation : in particular, I hope that VR's need  for screaming framerates in two renders at once may make hardware that is more performant overall and also for split-screen friendly deferred rendering.&lt;/p&gt;
&lt;p&gt;In the actual, as opposed to the virtual, world the highlight of the show for me is always the TA roundtables.  It's such a great resource for the community, and a chance for folks who often live a bit outside the main stream of their development teams to get together with people who share their unique and esoteric pain.  Those three roundtables are the only room full of people who will chuckle at jokes about MaxScript and who truly appreciate the hopeless pathos of sending emails about proper check-in procedures to a team of artists.  As always, hats off to +Jeff Hanna for running the roundtables and also the TA Bootcamp, which I had to miss this year but sounded really good. I'm anxiously awaiting the release of the talks I missed on the &lt;a href="http://www.gdcvault.com/play/1021806/Art-Direction-Bootcamp-Technical-Art"&gt;GDC Vault&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In these annual roundups I usually try to note the size and intensity of the job market.  This year was kind of difficult to gauge.  The big mega-booths from mega-teams were largely absent this year: I didn't see many of the long lines of students queuing up to show their portfolios to Blizzard, Bungie, or 343.  On the other hand the general commercial tempo seemed pretty up beat.  I think this reflects the general trend away from big, highly institutionalized teams and toward smaller, more agile (but also more fragile) groupings: the job market is more fragmented but not necessarily smaller than in years gone by.  I could be wrong about that one, though -- this might just be a mid-console-cycle lull.&lt;/p&gt;
&lt;p&gt;To all the folks I saw down at the show -- it was awesome! To those who didn't make it this year -- don't miss it next time!&lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>memory</title><link href="/memory.html" rel="alternate"></link><updated>2015-03-15T00:00:00-07:00</updated><author><name>stevet</name></author><id>tag:,2015-03-15:memory.html</id><summary type="html">&lt;p&gt;We tend to be the kind of people who throw themselves into things -- we live for the joy of problem solving. So when we're really grappling with the intricacies of todays disaster, we immerse ourselves in it.  We tear it apart and inspect all the little moving pieces till we understand it well enought to duct-tape it back together again. &lt;/p&gt;
&lt;p&gt;Along the way, that attention to detail and mastery of nuance tends to make us think we know it all.  But -- a shock, I know -- we don't.  More to the point, we might now it all &lt;em&gt;for the moment&lt;/em&gt;.  But we'll dump that knowledge to make sure we have room for our encyclopedic knowledge of tomorrow's problem. And next week's. And next months.&lt;/p&gt;
&lt;p&gt;In short, we're constantly flushing our caches.  Unless you're stuck in a rut, doing the same thing every day, you're constantly learning new little things for your current problem and silently shelving the knowledge you aquired for your last.&lt;/p&gt;
&lt;p&gt;This is one reason why good code comments are so important. Sure, comments rot just like code.  But a couple of well-placed notes about how and why the code looks the way it does can save future you a lot of time when many layers of memory recycling have left you completeley oblivious about what the hell past you was up to.  I can easily think of a couple of embarrassing occasions where I've literally chased my own tail -- done something non-obvious because of a wierd maya bug, then come back six month later to 'clean up' my 'ugly code' and of course hit the exact same bug again.  &lt;/p&gt;
&lt;p&gt;Of course, good comments don't have to have high literary quality, they don't need to cover every variable and for loop, and they certainly don't need to be overwhelming: what they should be is notes to future-self that will help him or her revive all the fading memories which seem so obvious today but which will be utterly erased before the next season of &lt;em&gt;Silicon Valley&lt;/em&gt; is released.&lt;/p&gt;
&lt;p&gt;Which brings me, by a &lt;em&gt;very&lt;/em&gt; roundabout route, to what I actually set out to talk about: a perfect case in point.  I was noodling around with a system that needed to fire events for maya attribute changes: basically, a way to make &lt;code&gt;attributeChanged&lt;/code&gt; scriptJobs that were easy to start, stop and restart.  So I did a little googling and... &lt;/p&gt;
&lt;p&gt;Yep. I'd already written it. I'd even &lt;a href="https://github.com/theodox/attributeEvents"&gt;put it up on Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In my defense, I realized in retrospect that I had cancelled the project at work that made it necessary the first time: I did the work on the system, got it ready to go, and then decided that there was a simpler way to solve the problem without all those attribute-change scripts anyway. Nonetheless it's a perfect illustration of how thoroughly one's short-term memory cache gets flushed -- and of the importance of leaving good comments. At least when I found the damn thing the readme that Github makes you put up reminded me how it was supposed to work (as an aside, it's a great reason for putting your stuff up on GitHub or similar forums: knowing that other people will be looking at it forces you to clean up and document more than you would if you just decided to shelve a project).&lt;/p&gt;
&lt;p&gt;So there you have it: an object lesson in the importance of clarity in tools development &lt;em&gt;and&lt;/em&gt; a free module for messing around with AttributeChange scriptJobs!&lt;/p&gt;</summary><category term="blog"></category><category term="ta"></category><category term="programming"></category></entry><entry><title>little things</title><link href="/little-things.html" rel="alternate"></link><updated>2015-02-26T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2015-02-26:little-things.html</id><summary type="html">&lt;p&gt;If you've ever spent any time wrestling with Maya distribution, you've probably noticed that &lt;code&gt;userSetup.py&lt;/code&gt; executes in an odd fashion: it's not a module that gets imported, it's basically a series of statements that get executed when Maya fires up. Unfortunately that also means that most of the usual strategies you'd use in python to find out &lt;em&gt;where&lt;/em&gt;, exactly, you are running from is problematic.  The usual python tricks like &lt;code&gt;__file__&lt;/code&gt; don't work; and most of the time asking for &lt;code&gt;os.getcwd()&lt;/code&gt; will point at your Maya program directory.  Usually you end up running around looking at all the directories where Maya might be stashing a &lt;code&gt;userSetup&lt;/code&gt; and trying to figure out which one is the one you are in`.  It's ugly.&lt;/p&gt;
&lt;p&gt;However today, I &lt;em&gt;actually found one which works&lt;/em&gt;.  At least, I haven't figured out how to break it yet.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;
&lt;span class="n"&gt;USER_SETUP_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentframe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since I've tried to figure this one out on at least a hundred previous occasions, I am feeling unduly smug about this one.  &lt;/p&gt;
&lt;p&gt;PS, if you're wondering why I care: this makes it really easy to do a simple install/uninstall of a &lt;code&gt;userSetup.py&lt;/code&gt; / &lt;code&gt;userSetup.zip&lt;/code&gt; combo with no environment variables or special rules.  &lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>boocheck</title><link href="/boocheck.html" rel="alternate"></link><updated>2015-01-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2015-01-01:boocheck.html</id><summary type="html">&lt;p&gt;If &lt;a href="http://techartsurvival.blogspot.com/2015/05/boo-who.html"&gt;my last post about Boo&lt;/a&gt; piqued your interest, but you haven't had time to do a deep dive into the language to see for yourself, I've posted a version of the &lt;a href="https://github.com/theodox/spelchek"&gt;Spelchek&lt;/a&gt; Python spell checker module converted to Boo so you can see the similarities and differences between the two languages.  &lt;/p&gt;
&lt;p&gt;The original Python version is &lt;a href="https://github.com/theodox/spelchek/issues"&gt;here&lt;/a&gt; and the Boo port is &lt;a href="https://github.com/theodox/BooSpell"&gt;here&lt;/a&gt;.  As a good indication of what I've been saying about the economy of Boo syntax, the Boo version comes in at almost the same size as the Python original (5.05 kb for Boo and 4.95kb for Python) and pretty much the same number of lines -- I haven't done the excersize of converting it to C# for comparison but I'd guess the C# version would come in at about half again as much typing.&lt;/p&gt;
&lt;p&gt;Looking at the code, significant chunks are almost identical: the logic is pretty much the same and the type annotations are the only real difference.  &lt;/p&gt;
&lt;p&gt;Thus&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def add(word as string, pri as int):
    &amp;quot;&amp;quot;&amp;quot;
    Adds &amp;lt;word&amp;gt; to the dictionary with the specified priority. 
    &amp;quot;&amp;quot;&amp;quot;
    _DICTIONARY[word.ToLower()] = pri
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;becomes &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def add(word, priority=4):
&amp;quot;&amp;quot;&amp;quot;
Adds &amp;lt;word&amp;gt; to the dictionary with the specified priority (default is 4)
&amp;quot;&amp;quot;&amp;quot;
    _DICTIONARY[word.lower().strip()] = priority
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is pretty much identical.&lt;/p&gt;
&lt;p&gt;The tricky bit of the conversion was the routine which generates possible variants of the word - it generates variants of a word by transposition and deletions. In Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def first_order_variants(word):
    &amp;quot;&amp;quot;&amp;quot;
    return the obvious spelling variants of &amp;lt;word&amp;gt; with missing words, transpositions, or misplaced characters
    &amp;quot;&amp;quot;&amp;quot;
    splits = [(word[:i], word[i:]) for i in range(len(word) + 1)]
    deletes = [a + b[1:] for a, b in splits if b]
    transposes = [a + b[1] + b[0] + b[2:] for a, b in splits if len(b) &amp;gt; 1]
    replaces = [a + c + b[1:] for a, b in splits for c in _ALPHABET if b]
    inserts = [a + c + b for a, b in splits for c in _ALPHABET]
    return set(deletes + transposes + replaces + inserts)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the first list comprehension, &lt;code&gt;splits&lt;/code&gt;, generates a lists of pairs representing places where the word could be broken up, so that 'cat' produces &lt;code&gt;[("c","at"), ("ca", "t")]&lt;/code&gt;.  The other comprehensions use that list to try inserting, deleting or transposing letters to guess what the user might have really been typing.&lt;/p&gt;
&lt;p&gt;In Boo, the tricky bit was getting the compiler to recognize that the &lt;code&gt;splits&lt;/code&gt; list contained a pair of strings and that all the lists produced by it would also be lists of strings.  Porting the python code directly wouldn't work because Boo would see &lt;code&gt;splits&lt;/code&gt; as a list of type &lt;code&gt;object&lt;/code&gt; instead of deducing that it was a set of string pairs.  &lt;/p&gt;
&lt;p&gt;Here's the Boo version, which as you can see is recognizably the same but is clunkier than the Python, due to the need for typing, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;first_order_variants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;obvious&lt;/span&gt; &lt;span class="n"&gt;spelling&lt;/span&gt; &lt;span class="n"&gt;variants&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transpositions&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;misplaced&lt;/span&gt; &lt;span class="n"&gt;characters&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;_stringList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Boo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;_strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Boo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nl"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="n"&gt;cast&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
    &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_stringList&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="n"&gt;deletes&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;transposes&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;replaces&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_ALPHABET&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;inserts&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_ALPHABET&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HashSet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deletes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transposes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replaces&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inserts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnionWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To clean it up I added two 'aliases' up at the top, since the Boo syntax for declaring typed containers is hard to read ('List[of string]'): so &lt;code&gt;_stringList&lt;/code&gt; is a shortcut for 'list of string arrays'  and &lt;code&gt;_strings&lt;/code&gt; is a shortcut for 'list of strings'.&lt;/p&gt;
&lt;p&gt;The variable &lt;code&gt;pair&lt;/code&gt; contains a lambda (ie, an inline function) using Boo's idiosyncratic syntax:  you could mentally rewrite it as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def pair(w as string, i as int) of (string):
    return (w[:i], w(i:))
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or in other words "give me a string and an integer, I'll return a pair of strings split at the index you gave me."  &lt;/p&gt;
&lt;p&gt;With those helpers in place the logic is identical, but it is harder to follow because of all the type-mongering. I'm pretty sure there are more elegant ways to do this withgout being so wordy, but I'm not an expert. &lt;/p&gt;
&lt;h1&gt;So...&lt;/h1&gt;
&lt;p&gt;The point of the experiment was to see how hard the Python &amp;gt; Boo translation would be.  This is an application where types actually matter a good deal, since all my values are strings and I need to be able to do string operations like joins on them -- if all I was doing as asking questions of them things would have been more Pythonic (though probably slower as well: one of the reasons we need those types is to get the compiler to help us speed the code up).  &lt;/p&gt;
&lt;p&gt;While this is hardly a demanding application, it is at least a proof-of-concept for the idea of prototyping in Python and then selectively porting to Boo isn't completely nuts.&lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>code wars</title><link href="/code-wars.html" rel="alternate"></link><updated>2015-01-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2015-01-01:code-wars.html</id><summary type="html">&lt;p&gt;By a certain stroke of cosmic irony, it was just after I finished shoe-horning lame &lt;em&gt;Star Wars&lt;/em&gt; jokes into my last post that I started to get obsessed with &lt;a href="http://www.codewars.com"&gt;CodeWars&lt;/a&gt;, one of the plethora of competitive coding sites that have sprung up in the last few years.  &lt;/p&gt;
&lt;p&gt;Mostly I find that sort of thing pretty annoying -- it's a genre that all too easily degenerates into macho brogrammer chest-thumping. 90 percent of the code I see on those sites is so tightly knotted -- in hopes of scoring fewest-number-of-lines bragging rights -- that it's useless for learning. I'm impressed as hell by this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;next&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but I never want to have to &lt;em&gt;interact&lt;/em&gt; with it (Bonus points if you can tell  what it does! Post your answer in the comments....)&lt;/p&gt;
&lt;p&gt;The nice thing about Codewars is that the experience tends to push you into thinking about how to solve the problems, rather than how to maximize your score. I particularly like two things: first, the site includes a built-in test framework so you can do The Right Thing&lt;sup&gt;tm&lt;/sup&gt; and write the tests before you write the code -- not only is it a helpful touch for would-be problem solvers its very effective 'propaganda of the deed' for encouranging people to take tests seriours.   Second, the site doesn't just show you the 'best' solutions, it shows you all of them -- and it allows you to vote both for solutions you think are clever and ones you think embody "best practices."  That snippet I posted above is extremely &lt;em&gt;clever&lt;/em&gt; but not a best practice -- I wouldn't let something like that into my codebase if I could avoid it!  I'm not smart enough to unriddle such things, though I'm glad they exist.&lt;/p&gt;
&lt;p&gt;The other nice thing is that most of the problems are bite-sized, the sort of thing you can chew on while waiting for a longish perforce sync to complete.  It's a great way to practice you coding chops outside all the gnarly things that come with working in a particular problems set for work.  I've had a work task which involved me in a lot of 5-minute wait times this week and I found CodeWars to be a nice chance to do keep my brains warm while waiting for Perforce.&lt;/p&gt;
&lt;p&gt;So, if you're looking to sharpen up your coding skills you should definitely check out &lt;a href="http://www.codewars.com"&gt;CodeWars&lt;/a&gt;.  My username is &lt;em&gt;Theodox&lt;/em&gt; and in the goofy ninja-academy language of Codewars we can form an 'alliance' by following one another. We can make technical art a power in the land!&lt;/p&gt;
&lt;p&gt;On the practical side: codewars supports Python, Javascript, and several other languages -- they just added C#.  It's great way to get familiar with new syntaxes and to see how folks who know what they are doing tackle problems natively, it's a great tool to pick up a new language on your own.  Give it a shot!&lt;/p&gt;</summary><category term="blog"></category><category term="programming"></category></entry><entry><title>distributing_command_line_tools</title><link href="/distributing_command_line_tools.html" rel="alternate"></link><updated>2015-01-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2015-01-01:distributing_command_line_tools.html</id><summary type="html">&lt;p&gt;It's pretty common for TA's to want some specialty command-line tools that for their own use, or to share with a select number of power users who aren't afraid of typing.  While python is great at making tools for this kind of one-off use, distributing and maintaing these kinds of scripts  requires jumping even more hoops than sending out artist tools (something covered in more detail &lt;a href="http://techartsurvival.blogspot.com/2014/06/save-environment.html"&gt;here&lt;/a&gt; and &lt;a href="http://techartsurvival.blogspot.com/2014/07/save-environment-2-i-am-egg-man.html"&gt;here&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;It's much easier for folders full of loose scripts to diverge among coders, who are likely to be tinkering with their contents, than it is among artists.  My usual answer to keeping the artists on the same page is to &lt;a href="http://techartsurvival.blogspot.com/2014/07/save-environment-2-i-am-egg-man.html"&gt;distribute a complete environment in a single .zip file&lt;/a&gt;, which has definitely cut my distribution headaches by an order of magnitude and simplified my management a great deal.&lt;/p&gt;
&lt;p&gt;Lately one of my colleagues has been working on some command line tools and we realized that we can get many of the same benefits by using the same zip file as part of our command line arsenal.  This means we can write scipts that use our up-to-date in-house libraries (and also all of the path manipulation that gets done for our artist tools) without modification.&lt;/p&gt;
&lt;h1&gt;HED&lt;/h1&gt;
&lt;p&gt;The trick is really pretty simple. All you need to do is include a &lt;code&gt;__main__.py&lt;/code&gt; in the zip file.  Any python zip with a &lt;code&gt;__main__.py&lt;/code&gt; is treated by python as an executable script.  Here's a trivial example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;# I was called with&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you zip that file, you can execute it like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;span class="c1"&gt;# I was called with hello world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you understand that, you can build a flexible command-line toolkit that uses your library quite simply.  You'll need to collect all of your path mongering into a single place, but that's a good idea in any case -- things get crazy pretty quick if every module can mess with &lt;code&gt;sys.path&lt;/code&gt; on a whim.  I use a module that mimics &lt;code&gt;site&lt;/code&gt; but works for zips as well as loose files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;zipsite&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zipfile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_pth_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# this gets overridden in derived classes&lt;/span&gt;
        &lt;span class="c1"&gt;# so that zips and loose files worh the same&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_pth_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;new_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{0}/{1}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;new_path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FolderSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.pth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;clean_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roots&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ZipSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ZipFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;all_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namelist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;all_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pth_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_names&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.pth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pthfile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pth_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;local_pth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pthfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pthfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;U&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;local_pth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addsitedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    for every .pth file in or under each root, process the pth file&lt;/span&gt;
&lt;span class="sd"&gt;    in the same way as site.addsitedir()&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_root&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_zipfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;ZipSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;FolderSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As long as that's in my distribution zip, my &lt;code&gt;__main__&lt;/code&gt; cam setup all the paths with a couple of lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zipsite&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;zipsite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addsitedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the real work is delegated to the .pth files, which is a much simpler and less error prone method than letting the individual modules run rampant.&lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>inflexible</title><link href="/inflexible.html" rel="alternate"></link><updated>2015-01-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2015-01-01:inflexible.html</id><summary type="html">&lt;p&gt;"Inflexbility" might be the right concept - but the time scale is rather different.  The Senate's fatal failure was not in 69, or 49, but in 133.&lt;/p&gt;
&lt;h1&gt;Caesar and the Senate&lt;/h1&gt;
&lt;p&gt;It's true that the final crisis of the Republic was deliberately provoked by the conservative (or, if you prefer, &lt;em&gt;reactionary&lt;/em&gt;) faction in the Senate, particularly by Cato and his allies.  Caesar's recall from Gaul was not just a routine Senatorial decree -- it was intended to force Caesar out of political life (or out of life altogether -- though the most likely precedent was the comfortable exile of other overly ambitious politicians like &lt;a href="https://en.wikipedia.org/wiki/Verres"&gt;Verres&lt;/a&gt;  and &lt;a href="https://en.wikipedia.org/wiki/Publius_Cornelius_Sulla"&gt;Publius Cornelius Sulla&lt;/a&gt;). The reactionaries knew full well that they were risking a civil war by removing Caesar's official immunity and summoning home to face a highly politicized trial, and during the months leading up to the final rupture the majority of Senators pleaded in vain for some kind of deal to avoid the final reckoning.&lt;/p&gt;
&lt;p&gt;However that was not inflexibility: it was desperation.  The struggle to save the Republic was already lost before Caesar marched off to Gaul.  The plot against Caesar was not an effort to &lt;em&gt;save&lt;/em&gt; the Republic: it was a last-ditch gamble to &lt;em&gt;restore&lt;/em&gt; it. The Roman constitution -- such as it was -- had been basically abrogated for a decade at that point.  From 59 to 49 the &lt;a href="https://en.wikipedia.org/wiki/First_Triumvirate"&gt;first triumivirate&lt;/a&gt; owned Roman politics.  This was not just an informal power-sharing deal between Caesar, Pompey and Crassus: it involved organized political violence and the threat of worse:  Here, for example, in Plutarch's description of the aftermath of the &lt;a href="https://en.wikipedia.org/wiki/Lucca_Conference"&gt;Lucca Conference&lt;/a&gt; in 56 BC where Caesar, Crassus and Pompey reorganized their racket:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When, Pompey and Crassus openly announced their candidature, the rest [of the candidates] took fright and withdrew from the contest; but Cato encouraged Domitius, who was a kinsman and friend of his, to proceed, urging and inciting him to cling to his hopes, assured that he would do battle for the common freedom. For it was not the consulate, he said, which Crassus and Pompey wanted, but a tyranny, nor did their course of action mean simply a canvass for office, but rather a seizure of provinces and armies.
With such words and such sentiments Cato all but forced Domitius to go down into the forum as a candidate, and many joined their party. Many, too, voiced their amazement thus: "Why, pray, should these men want a second consulship? And why once more together? Why not have other colleagues? Surely there are many men among us who are not unworthy to be colleagues of Pompey and Crassus!"
Alarmed at this, the partizans of Crassus and Pompey abstained from no disorder or violence, however extreme, and capped the climax by waylaying Domitius, as he was coming down into the forum before day-break with his followers, killing his torch-bearer, and wounding many, among whom was Cato.
After routing their opponents and shutting them up at home, they had themselves proclaimed consuls and a short time afterwards they once more surrounded the rostra with armed men, cast Cato out of the forum, slew several who made resistance, and then had another five years added to the proconsulship of Caesar in Gaul, and the provinces of Syria and both Spains voted to themselves. When the lot was cast, Syria fell to Crassus, and the Spains to Pompey.
Plutarch &lt;em&gt;Crassus&lt;/em&gt;, 15.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The triumvirs also allowed &lt;a href="https://en.wikipedia.org/wiki/Publius_Clodius_Pulcher"&gt;Clodius&lt;/a&gt; to organize routine political violence against their opponents in the city, up to and including murder.  &lt;/p&gt;
&lt;p&gt;The key levers of power were effectively monopolized by the triumvirs and their armed supporters. While elections continued and the Senate debated, nothing of consequence could happen without the say-so of the triumvirs.  It wasn't exactly a police-state or dictatorship -- it was perhaps more like classic Chicago-style machine politics where the forms of representative government swirled peripherally around a solid core of insider deals, topped off with a mob violence when needed.&lt;/p&gt;
&lt;p&gt;The view that Caesar was an FDR-style progressive who wanted to save the Republic from itself is pretty hard to maintain when one recalls that for more than a decade he and his allies could do &lt;em&gt;anything they wanted&lt;/em&gt;, stomping on precedent and the tradition without hesitation. What the record shows is that what they wanted was lucrative military commands for themselves and payoffs -- in the form of land grants and money -- for their soldiers.  He was a 'reformer' in the &lt;a href="https://en.wikipedia.org/wiki/Richard_J._Daley"&gt;Richard J. Daley&lt;/a&gt; mold at best: reform for me and my friends.  &lt;/p&gt;
&lt;p&gt;The final crisis of 49 BC was precipitated by  Crassus' death at &lt;a href="https://en.wikipedia.org/wiki/Battle_of_Carrhae"&gt;Carrhae&lt;/a&gt; in 53, which turned a relatively stable triumvirate into an unstable duo. Caesar's outsize success in Gaul was clearly threatening Pompey's pre-eminence, so  Cato and his allies in the Senate hoped to manipulate Pompey (who they otherwise despised as another military adventurer) into breaking the alliance which had basically privatized the Republic for 15 years. Their hope -- forlorn, as it turned out -- was that the two dynasts would weaken each other and allow the traditional elites to reassert their power. This was more or less the same strategy that many of the survivors of this civil war would try again in the 30's, when Octavian turned up to challenge Marc Anthony's stranglehold over the (briefly) restored Republic.  &lt;/p&gt;
&lt;p&gt;It didn't work in 49 against Caesar or in 43 against Antony. The traditional elites were helpless in the face of military dynasts. &lt;/p&gt;
&lt;p&gt;This was a fact which had been looming larger and larger since the days of Marius.  The &lt;em&gt;auctoritas&lt;/em&gt; of the Senate, the majesty of the law, and even the money of the upper classes meant nothing in the face of professional armies who cared more for their generals than for existing Roman state. &lt;/p&gt;
&lt;h1&gt;FDR? Mussolini? Daley?&lt;/h1&gt;
&lt;p&gt;The 'progressive Caesar' and the 'reactionary Senate' are characters from one very particular reading of this period. The problem is, it's very difficult (particularly at two millenia's remove) to tell the difference between a historical struggle and a faction fight.  Politicians lie about their real motives all the time -- but at the same time they are bound by their public positions; a pair of facts which confound both the ideologues and the cynic. Politics is venal and idealistic at the same time.  Judging by his words Caesar was a reformist moderate -- but judging by his words alone, so were most of the &lt;em&gt;optimates&lt;/em&gt;: Cicero, Pompey and even Cato can sound reasonable.  &lt;/p&gt;
&lt;p&gt;Caesar definitely cloaked himself in the &lt;em&gt;&lt;a href="https://en.wikipedia.org/wiki/Populares"&gt;popularis&lt;/a&gt;&lt;/em&gt; tradition of Marius (and before him, of the Gracchi).  But what that means in practice is hard to pin down. Much of the most 'social' legislation of the period really belongs not to Caesar but to Clodius -- whom Caesar often had When Caesar or Pompey (or, for that matter, Marius and Sulla) want land for their veterans are they 'really' trying to protect the dispossessed against the plutocrats? Or are they 'really'  paying off the armed forces that will guarantee their own power and position? One thing is certain: loyal armed supporters were the most precious commodity of late Republican politics. Ultimately Augustus outlasted all his rivals because he could build on the inherited loyalty of Caesar's veterans, who followed him even when he was a obscure relative suddenly made heir to Caesar's name.   The same question mark hangs over the soldiers themselves -- were they loyal clients of the house of Julius? Mercenaries with an eye for the biggest payout? Or a political faction in their own right who seized on a convenient figure-head to advance their own agenda?&lt;/p&gt;
&lt;p&gt;To a very important degree it really is the attitudes of the soldiers -- and the calculations of the politician/generals who relied on them -- that is &lt;em&gt;the only&lt;/em&gt; issue here: the last war of the Republic was also the  war in which private armies came to replace Rome's civilian government forever.&lt;/p&gt;
&lt;h1&gt;Inflexiblity&lt;/h1&gt;
&lt;p&gt;The rise of the private armies does, in fact, have a lot to do with reactionary inflexibility: not Cato's but &lt;a href="https://en.wikipedia.org/wiki/Publius_Cornelius_Scipio_Nasica_Serapio_(consul_138_BC)"&gt;Scipio Nasica's&lt;/a&gt;.  The historical challenge that the Senate failed to meet wasn't the challenge of Caesar: it was the challenge of &lt;a href="https://en.wikipedia.org/wiki/Gracchi"&gt;the Gracchi&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Roman victory in the second Punic War, followed by the conquest of the Po valley and the rapid assertion of Roman hegemony throughout the Mediterranean in the generation after &lt;a href="https://en.wikipedia.org/wiki/Battle_of_Zama"&gt;Zama&lt;/a&gt; upended the social basis of Italy. Untold wealth poured into Rome (and Italy as a whole) but it wasn't shared out equally.  The small farmers who formed the backbone of the Roman army and state in the third century BC were increasingly dispossessed in the second: some were war refugees forced into cities; some could not keep up their farms as they campaigned for longer and longer durations outside of Italy; and many lost out to &lt;em&gt;latifundia&lt;/em&gt;, industrial scale farms bought with the profits of war and staffed by the massive number of slaves that the wars created.&lt;/p&gt;
&lt;p&gt;The net result was, to a significant degree, the loss of the center: the Roman 'middle class' of smallholders shrank and the urban proletariat -- poorer and only loosely connected to the institutions and traditions of the state -- grew. &lt;a href="https://en.wikipedia.org/wiki/Gaius_Gracchus"&gt;Gaius Gracchus&lt;/a&gt; and his brother &lt;a href="https://en.wikipedia.org/wiki/Tiberius_Gracchus"&gt;Tiberius&lt;/a&gt; tried, int the 130's BC, to stem this development with a populist programme of land reform, intended to reverse the drift away from Rome's agrarian roots. &lt;/p&gt;
&lt;p&gt;They were murdered for it.  &lt;/p&gt;
&lt;p&gt;Their opponents claimed they were using populist proposals to make themselves tyrants; their supporters pointed out that their murderers had huge financial stakes in the land which the Gracci proposed to redistribute. In this case it doesn't matter if the Gracchi were sincere reformers or populist rabble-rousers aiming at tyranny (which was, of course, what their opponents believed).  The problem they articulated was real, and the Senate failed to address it constructively while they were alive or after their deaths.  &lt;/p&gt;
&lt;p&gt;The murder of Gaius Grachus in 133 -- by a mob of Senators led by the sitting &lt;em&gt;pontifex maximus&lt;/em&gt;, no less --  was a double tragedy. It was the first open political murder in Rome for centuries.  And, it  guaranteed that nothing would be done to stop the proletarianization of Italy and the rise of the military dynasts. With fewer and fewer opportunities in civilian life, more and more Romans drifted into the professional military where your general was your patron -- the source of your wealth and the guarantor of your retirement.  The Roman state was just an abstraction. Marius and Sulla, Caeasar, Pompey, Antony,  Octavian, and everyone ever plopped onto the throne by the Praetorians all owe their careers to the Nasica the reactionary: the man who killed both Gaius Gracchus and the Roman Republic.&lt;/p&gt;</summary><category term="blog"></category><category term="history"></category></entry><entry><title>Meta-meta</title><link href="/meta-meta.html" rel="alternate"></link><updated>2015-01-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2015-01-01:meta-meta.html</id><summary type="html">&lt;p&gt;Long time readers will know that I have an obsession with &lt;a href="back link"&gt;Python metaclasses&lt;/a&gt; I just found an &lt;a href="http://python-3-patterns-idioms-test.readthedocs.org/en/latest/Metaprogramming.html"&gt;excellent article&lt;/a&gt; which lays out many of the interesting, subtle possiblitities and potential pitfalls of working with metaclasses, and it also has an excellent set of extra links for further reading.  Although the owning site is about Python 3, this article is mostly 2.X and always calls out the differences between version 2 and version 3 syntax.  Recommended for fellow metaclass maniacs!&lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>mGui2</title><link href="/mgui2.html" rel="alternate"></link><updated>2015-01-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2015-01-01:mgui2.html</id><summary type="html">&lt;p&gt;For those of you who've been using &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt; to speed up and simplify your Maya gui coding, there are some interesting changes on the horizon.  Although I'm not entirely ready to release the changes I have in mind they are mostly sitting in &lt;a href="https://github.com/theodox/mGui/tree/remove_keys"&gt;their own branch in the Github repo&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;The upcoming version introduces some new idioms - in particular, it gets rid of the need for explicitly setting keys on new controls to get access to nested properties. In the first version of mGui you'd write something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;example_window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;VerticalForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Items without vertex colors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerticalList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lister&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Collection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;  
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;HorizontalStretchForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buttons&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the new refactor that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;example_window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;VerticalForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Items without vertex colors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;lister&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerticalList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;lister&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;  
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;HorizontalStretchForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;button_row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The big advantage here is that those local variables are not scoped exclusively to the layout context managers where they live, which makes it easy to control when and where you hook up your event handlers:  In the above example you could defer all the bindings and event handlers to the end of the script like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;example_window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;VerticalForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Items without vertex colors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;lister&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerticalList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;HorizontalStretchForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;button_row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;lister&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;
    &lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;refresh_def&lt;/span&gt;
    &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;close_def&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far I'm really liking the new idiom, particularly eliminating the extra quotes and redundant &lt;code&gt;None&lt;/code&gt; keys.   However this is a minorly breaking change: in some cases, old code which relied on the key value to name and also label a control at the same time will when the keys become redundant.  Moreover I bit the bullet and started to refactor the entire mGui module to use correct pep-8 naming conventions -- in particular, member variables are &lt;em&gt;no longer capitalized&lt;/em&gt;.  So if you have code outside of mGui this will introduce some issues. When I converted my own code, most of the changes could be done with a regular expression but there were a few danglers.&lt;/p&gt;
&lt;p&gt;I think the changes are worth the effort, but I'd be really interested in hearing from users before trying to bring the new mGui branch back into the main line.  It should actually be possible to write a script that fixes most existing code automatically, that's something we could refine collaboratively.Please let me know in the comments or by opening an issue on the GitHub site if you have comments or plans.  As always, bug fixes and pull requests always entertained!&lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>minq</title><link href="/minq.html" rel="alternate"></link><updated>2015-01-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2015-01-01:minq.html</id><summary type="html">&lt;p&gt;If you're a long-time reader, you may recall that i'm very ambivalent about &lt;a href="http://techartsurvival.blogspot.com/2015/07/blockquote-background-f9f9f9-border.html"&gt;wrapper code&lt;/a&gt;.  I'm just as prone to adding my own little spoonful of syntax sugar on top of my daily tasks, but I've also been around long enough to be a bit cynical about my own various faddisms and dubious style choices over the years.  Sure, extra typing is annoying -- but nowadays I tend to set a pretty high bar for actually writing wrapper code instead of just, ya know, doing my actual &lt;em&gt;job&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, it's with a little bit of trepidation that I'm sharing my latest library.  &lt;strong&gt;&lt;a href="https://github.com/theodox/minq"&gt;Minq&lt;/a&gt;&lt;/strong&gt; bills itself as 'a query language for Maya scenes.'  The goal is to simplify a very common task for Maya coders: finding things in a scene.&lt;/p&gt;
&lt;p&gt;Now, that isn't a particularly interesting job most of the time, but it's one we do a &lt;em&gt;lot&lt;/em&gt;:  a quick grep of my own codebase shows over 600 calls to &lt;code&gt;cmds.ls()&lt;/code&gt;, &lt;code&gt;cmds.listRelatives()&lt;/code&gt;, &lt;code&gt;cmds.listHistory&lt;/code&gt;  and &lt;code&gt;cmds.nodeType()&lt;/code&gt; in various combinations: as far as I can tell, &lt;code&gt;ls()&lt;/code&gt; is actually the single most common call I make.  &lt;/p&gt;
&lt;p&gt;Moreover, I'm reasonably certain (though I didn't do the grepping to bear this out) that those hundreds of &lt;code&gt;ls()&lt;/code&gt; calls are accompanied by hundreds of little snippets of code to deal with Maya's quirks.  How often have you run into little gems like this?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;something_thats_not_transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# [u&amp;#39;top&amp;#39;]&lt;/span&gt;

    &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# [u&amp;#39;front&amp;#39;, u&amp;#39;persp&amp;#39;, u&amp;#39;side&amp;#39;, u&amp;#39;top&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or this?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_meshes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;
    &lt;span class="c1"&gt;# Error: &amp;#39;NoneType&amp;#39; object is not iterable&lt;/span&gt;
    &lt;span class="c1"&gt;# Traceback (most recent call last):&lt;/span&gt;
    &lt;span class="c1"&gt;#   File &amp;quot;&amp;lt;maya console&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;
    &lt;span class="c1"&gt;# TypeError: &amp;#39;NoneType&amp;#39; object is not iterable # &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are of course ways around these little gotchas - but given the number of times you have to interact with them it's hard to be sure you've really nailed them all. In my case a 99% correct handlong of my &lt;code&gt;ls()&lt;/code&gt; calls alone will produce at least 5 bugs.&lt;/p&gt;
&lt;p&gt;More importantly -- and, frankly, the whole reason for this project -- dealing with these little gotchas is not an &lt;em&gt;interesting&lt;/em&gt; job.  Finding, filter and sorting stuff in your Maya scene is not am opportunity for you to display your brilliant algorithms or clever strategies for bending Maya to your will: it's just a bunch of stuff you have to on your way to fixing the problems your users really want fixed.&lt;/p&gt;
&lt;h2&gt;Minq in action&lt;/h2&gt;
&lt;p&gt;Hence, &lt;a href="https://github.com/theodox/minq"&gt;minq&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The goal of minq is to provide a more concise and more readable way to find things in your maya scenes.  Here's an example to give you the idea of how the project is supposed to work.&lt;/p&gt;
&lt;p&gt;Suppose you need to find all of your character skeletons and distinguish them from other things lying around in the scene.  The easy way to do that is usually to look for assemblies (top level nodes) which have children who drive skinClusters.  Here's an example of how you could find all the root nodes in the scene which drive skins using conventional means:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_assemblies_that_drive_skins&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;skinned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;asm&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;assemblies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;
        &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listRelatives&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ad&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;skinCluster&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;skinned&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;skinned&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll notice the littering of &lt;code&gt;or []&lt;/code&gt; to make sure we don't get errors for failed queries, and also the.  We have to create two temporary variables (&lt;code&gt;childen&lt;/code&gt; and &lt;code&gt;history&lt;/code&gt;)  in order to store the intermediate results.  And we're 3 layers deep when we get to  the actual work item. &lt;/p&gt;
&lt;p&gt;Above all, though, you need to remember two little bits of Maya trivia to make sense of this code: that &lt;code&gt;cmds.ls(asm=True)&lt;/code&gt; means 'give me the assemblies' and that &lt;code&gt;listRelatives(ad=True)&lt;/code&gt; gives you the children of an object. These are, of course, very clear to Maya vets -- but there are over 50 flags in &lt;code&gt;ls()&lt;/code&gt; and more than a dozen in &lt;code&gt;listRelatives()&lt;/code&gt; .  I've been working in Maya for 20 years and I still need to look up most of them.  You pass those flags to Maya as strings which won't get evaluated until runtime -- and it's possible to mistype them and not even know because &lt;code&gt;ls()&lt;/code&gt;, in particular, makes wierd tweaky decisions about how to interpret conflicting flags.&lt;/p&gt;
&lt;p&gt;Here's the minq equivalent to the previous function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;drives_skin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AllChildren&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;skin_clusters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SkinClusters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skin_clusters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;unskinned_assemblies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Assemblies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drives_skin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It's shorter, obviously, but the real goal here is readability first. Here's what happens, which should be pretty clear from the names:
1.  &lt;code&gt;drives_skin()&lt;/code&gt; takes a maya object
2.  It gets all of that object's children
3.  It gets all of the future history of those children
4.  It it filters down to only the skin clusters in that future history
5.  it returns true if any skin clusters are present&lt;/p&gt;
&lt;p&gt;The rest of it pretty self evident: &lt;code&gt;unskinned_assemblies&lt;/code&gt; just collects all of the assemblies which pass &lt;code&gt;drives_skin()&lt;/code&gt;.  The &lt;em&gt;algorithm&lt;/em&gt; is exactly the same as the first version -- but, at least to me, that algorithm is actually expressed much more clearly in the minq version. &lt;/p&gt;
&lt;p&gt;A purist will probably point out that there are important under-the-hood details in the first one that are hidden in the second, and s/he'd be right.  However after doing a lot of this kind of code down the years I'm fairly certain that those important details have almost always been important because screwing them up causes problems -- not because they provide an opportunity for a wizardly optimization or better approach to the problem.  I'm interested in finding unskinned meshes, not in remembering to pass the correct flags to &lt;code&gt;ls&lt;/code&gt;  and &lt;code&gt;listRelatives&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's a couple of other examples to give you the flavor of what a minq query looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# get all mesh transforms in a scene&lt;/span&gt;
&lt;span class="n"&gt;mesh_transforms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;Meshes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# find stub joints&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_stub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;stubs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Joints&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_stub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# filtering by type, by name, and with functions&lt;/span&gt;
&lt;span class="n"&gt;cube_creator_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PolyCreators&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;polyCube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;used_to_be_cubes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cube_creator_nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Meshes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;has_8_verts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyEvaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;
&lt;span class="n"&gt;still_are_cubes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;used_to_be_cubes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_8_verts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# adding, subtracting or intersecting queries&lt;/span&gt;

&lt;span class="n"&gt;too_high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ty&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;too_low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ty&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;middle_xforms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;too_high&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;too_low&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, that's the basic idea:  to replace a lot of tedious boilerplate with something a little cleaner, more predictable and easier to maintain.  The code for the whole thing is up on &lt;a href="https://github.com/theodox/minq"&gt;up on Github&lt;/a&gt; under the usual MIT, 'use it as you like but keep the copyright header' license. It's still very much a work-in-progress and I'd love feedback, particularly on issues of syntax and style.  &lt;/p&gt;</summary><category term="blog"></category><category term="maya"></category><category term="programming"></category><category term="python"></category></entry><entry><title>covenant</title><link href="/covenant.html" rel="alternate"></link><updated>2014-05-01T00:00:00-07:00</updated><author><name>stevet</name></author><id>tag:,2014-05-01:covenant.html</id><summary type="html">&lt;p&gt;While an interesting tactical proposition, this question misses an important point.  The Covenant has already met the Empire; indeed, the whole of Covenant culture is nothing but a kind of cargo-cult effort to reconstitute the Empire.&lt;/p&gt;
&lt;p&gt;Because the Empire is just what the Covenant know as the Forerunners.  If the two cultures met in person, it would be via &lt;em&gt;time-travel&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;We already know that the Forerunners are the ancestors of modern humans -- that's why John-117 can access the Halo devices. And we know that the empire is, as the saying has it, a powerful galactic civilization from "A long time ago" which spread itself across uncounted lightyears: precisely the sort of thing which, millennia later, would become basis for the Covenant's superstitious worship of the Empire's remnants. Let's consider the xeno-archaeological evidence, by comparing our Imperial legends and records with those of the Covenant's extensive, multi-system search for Forerunner... that is, Imperial... relics.&lt;/p&gt;
&lt;p&gt;Go Big Or Go Home&lt;/p&gt;
&lt;p&gt;Perhaps the most striking aspect of Forerunner aesthetics, which finds its obvious match in the Empire's notorious fondness for expensive public works mega-projects, is &lt;em&gt;gigantism&lt;/em&gt;.  Both the Empire and Forerunners alike possess incredibly advanced technologies; but rather than devoting their considerable talents to things like hand-held personal communications devices or nano-technology both cultures prefer to indulge in projects on a superhuman scale, from mile-high megacities to entire artificial planetoids and ringworlds.  &lt;/p&gt;
&lt;p&gt;http://img3.wikia.nocookie.net/__cb20130215044513/starwars/images/c/c7/Senate_District_ROTS.png&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Coruscant&lt;/em&gt; (above) and &lt;em&gt;The Library&lt;/em&gt; (below) both demonstrate the same taste for architectural bombast - and for avoiding effecient, inexpensive rectinilear shapes.&lt;/p&gt;
&lt;p&gt;http://images2.wikia.nocookie.net/__cb20091210085932/halo/images/9/99/Delta_library.png&lt;/p&gt;
&lt;p&gt;When cultures with force-fields and tractor beams remain committed to building enormous mechanical doors, some non-engineering factor is clearly at work. This has led some students to conclude that the Fore-Imperials evolved on a high gravity planet where massive over-engineering was a survival trait. In our records they clearly inhabit Earth-like worlds but their atavistic obsession with size may reflect a more Jovian origin.  &lt;/p&gt;
&lt;p&gt;Or, they may just be, you know,  &lt;em&gt;overcompensating&lt;/em&gt; for something.  Both Imperial and Forerunner sites display an fondness for unsupported, cantilevered platforms rather than sane, well buttresed structures: a &lt;em&gt;jeu d'esprit&lt;/em&gt; of a heavy-world culture that enjoys flaunting its victories over mere gravity in a somewhat tactless (and expensive) fashion:&lt;/p&gt;
&lt;p&gt;http://3.bp.blogspot.com/-h1I5-ETnEoA/T0zIT7u8JSI/AAAAAAAAGN4/Igu7rU3SOsc/s1600/forerunner-structure-halo-4-concept-art.png&lt;/p&gt;
&lt;p&gt;http://www.niubniubsuniverse.com/References/PicsE1/Coruscant/LandPlatform/Platform_RefDVD_Pics/RefLanding_WideView.jpg&lt;/p&gt;
&lt;p&gt;You don't build like that unless you're trying to make a point.&lt;/p&gt;
&lt;p&gt;Angles, Angles everywhere&lt;/p&gt;
&lt;p&gt;On a related note, it's clear that both the empire and the Forerruners display an equally irrational aversion to right angles: doorways and windowsills in both cultures are almost always trapezoidal or hexagonal, where most cultures would be content with a plain old rectangle:&lt;/p&gt;
&lt;p&gt;http://img3.wikia.nocookie.net/__cb20120110005354/starwars/images/d/da/Executorbridge.jpg&lt;/p&gt;
&lt;p&gt;http://www.bosoldworld.net/M40_12.jpg&lt;/p&gt;
&lt;p&gt;This supports the theory that the Imperial humanoids originated on a high gravity planet where the extra support was useful. However it might also support the overcompensation theory as well, reflecting as it does an exaggerated form of 'manspreading.'  In either case, however, this is another strong parallel demonstrating that the Empire was, in fact, the Forerunner culture.&lt;/p&gt;
&lt;p&gt;Blue Horizon&lt;/p&gt;
&lt;p&gt;Another important clue is the fact that known Forerunner sites -- and most recorded instances of Imperial interiors -- share the same color palette. The monochromatic interiors combined with cool blue-tinged lighting can hardly be a coincidence.  Most known species see better at the red end of the visible light spectrum, but the Forerunners and the Imperials both seem to prefer their work environments heavily shifted towards the blue - perhaps a reflection of a gravitational blueshift on their massive planet of origin.&lt;/p&gt;
&lt;p&gt;https://s-media-cache-ak0.pinimg.com/736x/19/87/c7/1987c7091cc42c88418abe9a9707dc6a.jpg&lt;/p&gt;
&lt;p&gt;http://www.videogamesartwork.com/sites/default/files/styles/image_node/public/images/image/1377112768/halo_4_scifair_02_by_john_liberto.jpg?itok=eaHZQURT&lt;/p&gt;
&lt;p&gt;This may also accout for the puzzling lack of signage in both sets of installations:  where most military and transportation infrastructure is crawling with text ("NO STEP", "HARD HATS MUST BE WORK AT ALL TIMES", "300 DAYS SINCE LAST DEATH STAR WAS OBLITERATED") both Forerunner and Imperial sites seem strangely bare to us: acres and acres of gigantic walls with nary a name-plate or directions to the nearest restroom. However it's possible that their signage is shifted farther into the blue end of the spectrum than we can easily see: this may be a military readiness technique similar to the use of red lighting on submarines.&lt;/p&gt;
&lt;p&gt;But Wait! There's More!&lt;/p&gt;
&lt;p&gt;And here's a grab-bag of other Forerunner/Imperial traits:&lt;/p&gt;
&lt;p&gt;Floating ball-shaped robots of dubious moral character:&lt;/p&gt;
&lt;p&gt;http://www.halopedia.org/images/thumb/2/2d/343_Guilty_Spark_John_117_Meet-up.jpg/300px-343_Guilty_Spark_John_117_Meet-up.jpg&lt;/p&gt;
&lt;p&gt;http://www.collectht.com/wp-content/uploads/2015/01/Hot-Toys-Star-Wars-EP-IV-A-New-Hope-Darth-Vader-Collectible-Figure_Update_PR2.jpg&lt;/p&gt;
&lt;p&gt;Improbable walking fortresses (the Scarab, of course, being scavenged technology):&lt;/p&gt;
&lt;p&gt;http://img4.wikia.nocookie.net/__cb20120308032358/halofanon/images/9/9b/Halo-scarab-halo-art.jpg&lt;/p&gt;
&lt;p&gt;http://www.theforce.net/swtc/Pix/laserdisk/hoth/hoth1024.jpg&lt;/p&gt;
&lt;p&gt;Float-in-goo based medical technology:&lt;/p&gt;
&lt;p&gt;http://images.wikia.com/halo/images/4/4d/Coldstorage1_inline.jpg&lt;/p&gt;
&lt;p&gt;http://www.starwars7news.com/wp-content/uploads/2015/01/bacta_window_large.jpg&lt;/p&gt;
&lt;p&gt;laser swords:&lt;/p&gt;
&lt;p&gt;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQfMUMozkrpruFiC2ypqHu0oTE4o1ixQ8s8m3jXui6FbTMOQoni&lt;/p&gt;
&lt;p&gt;http://www.listoid.com/image/66/list_2_66_20101210_080518_559.jpg&lt;/p&gt;
&lt;p&gt;and of course Greco-romanesque muscled armor:&lt;/p&gt;
&lt;p&gt;http://static1.squarespace.com/static/54a9af0ce4b04f5956feed4f/t/54f30b52e4b01c0a8498291b/1425214292316/&lt;/p&gt;
&lt;p&gt;http://www.sowhowins.com//Character%20Pictures/Jango%20Fett.jpg&lt;/p&gt;
&lt;p&gt;Finally, the clincher: the Empire and the Forerrunners share a remarkable -- indeed, a nearly &lt;em&gt;unique&lt;/em&gt; cultural trait.  Alone among starfaring civilizations these two galaxy-spanning civilizations manage to conquer space without ever inventing the &lt;em&gt;handrail&lt;/em&gt;, an elementary technology known to every other sentient species.  &lt;/p&gt;
&lt;p&gt;Opinion among xeno-archeologists is divided as to the reasons.  It may be some kind of primitives superstition (perhaps the Gods are expected simply seize anyone unwary enought to linger by the side of 5,000 meter deep airshaft) or it may represent a quirk of evolutionary biology.  It's possible the Forerunner/Imperials race possessed the same sort of inner ears as lemurs, rendering a 50 story drop so unthinkable that they felt no more need to guard against it than we feel the need to put up signs reminding people to breathe.  In any event, this is an evolutionarily unusual trait which strongly supports the Empire &amp;gt; Forerunner hypothesis.&lt;/p&gt;
&lt;p&gt;However:&lt;/p&gt;
&lt;p&gt;The most potent objection to the Empire / Forerunner hypothesis is the somewhat non-human appearance of the Didact, the only living representative of the Forerunners:&lt;/p&gt;
&lt;p&gt;http://41.media.tumblr.com/fefed899f4ecf09464096a76148beefc/tumblr_mg9z82kGpn1ruuqu6o1_1280.jpg&lt;/p&gt;
&lt;p&gt;However there are two things to keep in mind. First, there is a considerable time elapsed between our knowledge of the Empire and the creation of the Halo's: millenia may intervene between the paltry planet-killing power of the Death Star and the ultimate Doomsday weapon, the Halos.  So it's possible that the race continued to evolve. However its equally likely that Didact's appearance owes more to the vicissitudes of life as a warrior.  Terrible things happen in space:&lt;/p&gt;
&lt;p&gt;http://www.starwars7news.com/wp-content/uploads/2013/08/Sebastian-Shaw-anakin-21-300x1281.jpg&lt;/p&gt;
&lt;p&gt;In conclusion, and to answer (at last) the original poster's question:
the Covenant -- whose entire culture, after all, is based on the veneration of Forerunner relics -- would be able to put these clues together as easily as I have. The realization would of course come as a terrible shock (as did the realization that the Forerunner technoologies of the Halos responded to human DNA but not to their own).  The difference is that the vision of living, functionioning Forerruner tech -- such as the appearance of a Super Star Destroyer in all its ineffable majesty, rather than crude little boxes like the &lt;em&gt;Pillar of Autumn&lt;/em&gt; -- would force them to confront the truth far more quickly than they did in the Halo series. &lt;/p&gt;
&lt;p&gt;http://orig12.deviantart.net/8ef7/f/2013/053/2/8/prince_xizor_2011_by_thecloneemperor-d5vtt2i.jpg&lt;/p&gt;
&lt;p&gt;http://blogtarkin.files.wordpress.com/2012/09/thrawn_stragetizes_using_alien_art.jpg&lt;/p&gt;</summary><category term="blog"></category><category term="scifi"></category><category term="quora"></category></entry><entry><title>sfx</title><link href="/sfx.html" rel="alternate"></link><updated>2014-04-01T00:00:00-07:00</updated><author><name>stevet</name></author><id>tag:,2014-04-01:sfx.html</id><summary type="html">&lt;p&gt;All of shaderfx in maya is organized by a single, undocumented command. Which is pretty lame. &lt;/p&gt;
&lt;p&gt;However, it's not as bad as it seems once you figure out the standard command form, which is always some variant of this form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    shaderfx -sfxnode &amp;lt;shader node&amp;gt; -command &amp;lt;command&amp;gt; &amp;lt;node id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;sfxnode&lt;/code&gt; argument tells maya which sfx shader to work on.  The &lt;code&gt;command&lt;/code&gt; flag indiciates an action and the &lt;code&gt;node id&lt;/code&gt; specifies an node in the network.  Nodes are assigned an id in order of creation, with the firstnode after the root ordinarily being number 2 and so on -- however the ids are not recycled so a network which has been edited extensively can have what look like random ids and there is no guarantee that the nodes will form a neat, continuous order.  &lt;/p&gt;
&lt;p&gt;Many commands take additional arguments as well.  Those extra always follow the main command; thus &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    shaderfx -n &amp;quot;StingrayPBS1&amp;quot; -edit_int 19 &amp;quot;uiorder&amp;quot; 1;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sets the value of the &lt;code&gt;uiorder&lt;/code&gt; field on node 19 to a value of 1.  &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;shaderfx&lt;/code&gt; command can also return a value: to query the &lt;code&gt;uiorder&lt;/code&gt; field in the example above you'd issue &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    shaderfx -n &amp;quot;StingrayPBS1&amp;quot; -getPropertyValue 19 &amp;quot;uiorder&amp;quot;;
    // Result: 1 // 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the good news is that the &lt;code&gt;shaderfx&lt;/code&gt; command is actually pretty capable: so far, at least, I have not found anything I really needed to do that the command did not support. For some reason the help documentation on the mel command is pretty sparse but the python version of the help text is actually quite verbose and useful.&lt;/p&gt;
&lt;p&gt;Still, it's kind of a wonky API: a single command for everything, and no way to really reason over a network as a whole.  Worse, the different types of nodes are identified only by cryptic (and undocumented) numeric codes: for example a &lt;code&gt;Cosine&lt;/code&gt; node is 20205 -- but the only way to find that out is to use the &lt;code&gt;getNodeTypeByClassName&lt;/code&gt; command (and, by the way, the node type names are case and space sensitive).&lt;/p&gt;
&lt;h1&gt;Cleanup crew&lt;/h1&gt;
&lt;p&gt;With all that baggage I was pretty discouraged about actually getting any work done using shaderfx programmatically. However a little poking around produced what I hope is a somewhat more logical API, which I'm &lt;a href="https://github.com/theodox/sfx"&gt;sharing on github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;sfx&lt;/code&gt; module is a plain python module - you can drop it into whatever location you use to story your Maya python scripts. It exposes two main classes:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SFXNetwork&lt;/em&gt; represents a single shader network -- it is a wrapper around the Maya shader ball.  The &lt;code&gt;SFXNetwork&lt;/code&gt; contains an indexed list of all the nodes in the network and also exposes methods for adding, deleting, finding and connecting the nodes in the network.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;SFXNode&lt;/em&gt; represets a single node inside the network.  It exposes the properties of the node so they can be accessed and edited using python dot-style syntax.  &lt;/p&gt;
&lt;p&gt;The module also includes to submodules, &lt;code&gt;sfxnodes&lt;/code&gt; and &lt;code&gt;pbsnodes&lt;/code&gt;.  These make it easier to work with the zillions of custom node ids: Instead of remembering that a &lt;code&gt;Cosine&lt;/code&gt; node is type 20205, you reference &lt;code&gt;sfxnodes.Cosine&lt;/code&gt;.  I'll be using the &lt;code&gt;StingrayPBSNetwork&lt;/code&gt; class  and the &lt;code&gt;pbsnodes&lt;/code&gt; submodule in my examples, since most of my actual use-case involves the Stingray PBS shader.   The syntax and usage, however, are the same for the vanilla &lt;code&gt;SFXNetwork&lt;/code&gt; and &lt;code&gt;sfxnodes&lt;/code&gt; -- only the array of node types and their properties.&lt;/p&gt;
&lt;p&gt;Here's a bit of the basic network functionality.  &lt;/p&gt;
&lt;h1&gt;Create a network&lt;/h1&gt;
&lt;p&gt;To create a new shaderfx network, use the &lt;code&gt;create&lt;/code&gt; classmethod:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sfx&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StingrayPBSNetwork&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sfx.pbsnodes&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pbsnodes&lt;/span&gt;

&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StingrayPBSNetwork&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new_shader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That creates a new shaderball (note that it won't be connected to a shadingEngine by default -- that's up to you).&lt;/p&gt;
&lt;h1&gt;Listing nodes&lt;/h1&gt;
&lt;p&gt;An SFXNetwork contains a dictionary of id and nodes in the field &lt;code&gt;nodes&lt;/code&gt;.  This represents all of the graph nodes in the network.  &lt;em&gt;Note I've used a different shader than the default one in this example to make things easier to read.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;
&lt;span class="c1"&gt;# { 1 : &amp;lt;sfxNode UnlitBase (1)&amp;gt;, 2: &amp;lt;sfxNode &amp;#39;MaterialVariable&amp;#39; (2)&amp;gt; }&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
&lt;span class="c1"&gt;# &amp;lt;sfxNode &amp;#39;MaterialVariable&amp;#39; (2)&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The keys of the dictionary are the node ids. As already noted, these are not guaranteed to be in a continuous order depending on what you do to the network - however they are stable and they will always match the id numbers shown in the shaderfx ui when you activate the &lt;code&gt;show node IDs&lt;/code&gt; toggle in the ShaderFX window.&lt;/p&gt;
&lt;p&gt;The values of the node dictionary are &lt;code&gt;SFXNode&lt;/code&gt; objects.&lt;/p&gt;
&lt;h1&gt;Adding new nodes&lt;/h1&gt;
&lt;p&gt;To add a node to the network use its &lt;code&gt;add()&lt;/code&gt; method and pass a class from either the &lt;code&gt;sfxnodes&lt;/code&gt; or &lt;code&gt;pbsnodes&lt;/code&gt; submodule to indicate the type. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;if_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pbsnodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# creates an If node and adds it to the network&lt;/span&gt;

&lt;span class="n"&gt;var_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pbsnodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MaterialVariable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# creates a MaterialVariable node and adds it to the network&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Connecting nodes&lt;/h1&gt;
&lt;p&gt;Connecting nodes in shaderfx requires specifying the source node the source plug, the target node and the target plug. Unforunately the plugs are indentifited by zero-based index numbers: the only way to know them by default is to count the slots in the actual shaderfx UI.  Output plugs are usually (not always) going to be index zero but the target plugs can be all over the map.&lt;/p&gt;
&lt;p&gt;To make this cleaner, each &lt;code&gt;SFXNode&lt;/code&gt; object exposes two fields called &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt;, which have named members for the available plugs.  So to connect the 'result' output of the &lt;code&gt;var_node&lt;/code&gt; object to the input named 'B' on the &lt;code&gt;if_node&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;if_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;if_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the connection can't be made for some reason, a &lt;code&gt;MayaCommandError&lt;/code&gt; will be raised.&lt;/p&gt;
&lt;p&gt;It's common to have to 'swizzle' the connections: to connect the x and z channels of a 3-pronged output to channels of an input, for example.  Mismatched swizzles are a common cause of those &lt;code&gt;MayaCommandErrores&lt;/code&gt;.  You can set the swizzle along with the connection by passing the swizzle you need as a string&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;var_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;if_node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;if_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# connects the &amp;#39;x&amp;#39; output of var_node  to the b channel of the input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Setting node properties&lt;/h1&gt;
&lt;p&gt;Nodes often have editable properties.  There are a lot of different ones so it is often necessary to inspect a node and find out what properties it has and what type of values those properties accept.  Every &lt;code&gt;SFXNode&lt;/code&gt; object has a read-only member &lt;code&gt;properties&lt;/code&gt;, which is a dictionary of names and property types.  Using the same example objects as above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;if_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;
&lt;span class="c1"&gt;### BLah blah example here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you know that a property exists on an object you can query it or set it using typical python dot syntax:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="c1"&gt;# get the node at index 5 in this network&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="c1"&gt;# { &amp;#39;min&amp;#39;: &amp;#39;float&amp;#39;, &amp;#39;max&amp;#39;: &amp;#39;float&amp;#39;, &amp;#39;method&amp;#39;: &amp;#39;stringlist&amp;#39; }&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;
&lt;span class="c1"&gt;# 1.0&lt;/span&gt;
&lt;span class="c1"&gt;# getting a named property returns its value.&lt;/span&gt;

&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;span class="c1"&gt;# sets the node value&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;
&lt;span class="c1"&gt;# 2.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you try to access a property that doesnt exist, an error will be raised:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_dont_exist&lt;/span&gt;
&lt;span class="c1"&gt;# AttributeError: no attribute named i_dont_exist&lt;/span&gt;

&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_dont_exist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;
&lt;span class="c1"&gt;# MayaCommandError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Help wanted!&lt;/h1&gt;
&lt;p&gt;So, there's the basics. This module is pretty simople but I've found it extremely helpful in workign with SFX nodes.  It will be much easier to work with, of course, if you already know your way around ShaderFX.  Please let me know how it works for you -- and as always bug reports and pull requests are very welcome!&lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>ScriptCtx is your frenemy</title><link href="/scriptctx-is-your-frenemy.html" rel="alternate"></link><updated>2014-03-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2014-03-01:scriptctx-is-your-frenemy.html</id><summary type="html">&lt;p&gt;You may have noticed the little poll I ran in the sidebar during   February and March: the question about &lt;code&gt;scriptCtx&lt;/code&gt; in Maya.  &lt;/p&gt;
&lt;p&gt;The poll was hardly scientific: with a sample size of 31 hardy souls it has even less statistical validity than the average re-tweeted infographic.  Still, it certainly jibes with what I’ve gotten in conversation, namely, &lt;em&gt;nobody knows what the damn thing does. &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Actually, &lt;em&gt;what&lt;/em&gt; it does is really simple. ScriptCtx is just a wrapper that allows you to collect sets of selections in series and then run a script on them.  It’s hardly rocket science… conceptually.  "Select 3 nurbs curves, then do this to them" or "select one polyFacet and one curve to do an extrusion."  We’ve all done it, just usually with buttons:  the job of &lt;code&gt;scriptCtx&lt;/code&gt; is to make those sequences button-free.&lt;/p&gt;
&lt;p&gt;Unfortunately this command is a  grand-prix champion in the incomprehensible design sweepstakes.  One look at the manual page is enough to scare away most TA’s: the fact that 86% of "survey" responsdents either have never heard of the command or don't use it.  &lt;/p&gt;
&lt;p&gt;I’m not going to say folks are wrong to be turned off, because I  am morally (or at least aesthetically) outraged every time I sit down to look at the stupid thing.  However it does have its uses, and working through the giant mess one piece at a time is a good excersize in using Python to arm-wrestle Maya into submission.&lt;/p&gt;
&lt;h2&gt;Basics&lt;/h2&gt;
&lt;p&gt;Here’s the example that comes straight from the Maya docs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scriptCtx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Attach Curve&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    
        &lt;span class="n"&gt;totalSelectionSets&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fcs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;select -r $Selection1; performAttachCrv 0 &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;cumulativeLists&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;expandSelectionList&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;setNoSelectionPrompt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Select two curves close to the attachment points&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;setSelectionPrompt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Select a second curve close to the attachment point&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;setDoneSelectionPrompt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Never used because setAutoComplete is set&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;setAutoToggleSelection&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;setSelectionCount&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;setAutoComplete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
        &lt;span class="n"&gt;curveParameterPoint&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's a lot of verbiage for&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# prompts the user to select two curves to attach.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But that's all it does.&lt;/p&gt;
&lt;p&gt;Here's what really happens: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;totalSelectionSets=1&lt;/code&gt; tells the command we're going to pass only one selection group to the final command.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fcs="select -r $Selection1; performAttachCrv 0 \"\""&lt;/code&gt;  sets up a mel command to run when the selection is done&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cumulativeLists=True, expandSelectionList=True&lt;/code&gt; tells the command to &lt;/li&gt;
&lt;li&gt;the &lt;code&gt;setSelectionPrompt&lt;/code&gt; and &lt;code&gt;setNoSelectionPrompt&lt;/code&gt; tell maya a message to print in the help line to nudge you in the right direction&lt;/li&gt;
&lt;li&gt;The other flags tweak the behavior so that, in this case, the tool will complete itself once you select two ro more curves.&lt;/li&gt;
&lt;/ol&gt;</summary><category term="blog"></category><category term="maya"></category><category term="python"></category></entry><entry><title>return values</title><link href="/return-values.html" rel="alternate"></link><updated>2014-02-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2014-02-01:return-values.html</id><summary type="html">&lt;p&gt;I'm sure you've read or written code that looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here &lt;code&gt;some_function&lt;/code&gt; must be using one of Python's handiest features, the ability to return lists or tuples of different types in a single function.  Python's ability to return 'whatever' - a list, a tuple, or a single object -- makes it easy to assemble a stream of data in one place and consume it in others wihout worrying about type declarations or creating a custom class to hold the results.  Trying to create a similarly flexible system in, say, C# involves a lot of type-mongering.  So it's nice.&lt;/p&gt;
&lt;p&gt;At least, it's nice &lt;em&gt;at first&lt;/em&gt;.  Unfortunately it's got some serious drawbacks that will become apparent after a while -- outside the context of a single script or function, relying entirely on indices to keep things straight is dangerous. As so often in Pythonia, freedom and flexibility can come at the cost of chaos downstream if you're not careful.&lt;/p&gt;
&lt;h1&gt;I have a bad feeling about this...&lt;/h1&gt;
&lt;p&gt;Everything will be hunky-dory as long as &lt;code&gt;some_function&lt;/code&gt; continues to pack its output the same way. In this example &lt;code&gt;some_function&lt;/code&gt;  is probably doing something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# imagine some actual code here ...&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;object_list&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;attrib_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;settable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_attrib_settable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict_of_defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
           &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inevitably, though, something will come along that causes the order of the results to change.  In a Maya example like this, for example, the likely cause would be some other user of this function finding out that the code needs to set defaults on an unusual value type. &lt;code&gt;setAttr&lt;/code&gt; needs to be told what type of data to expect if things are unusual.  &lt;/p&gt;
&lt;p&gt;That being the case, your teammate extends &lt;code&gt;some_function&lt;/code&gt; to output the data type needed.  If you're lucky, the results look like &lt;code&gt;[node, attribute, value, type]&lt;/code&gt; and your existing code works fine.  But if it changes to &lt;code&gt;[node, attribute, type, value]&lt;/code&gt;  your existing code will break in wierd ways.  Moreover if you haven't written a lot of comments, the person fixing the bugs will have to sit down and deduce what &lt;code&gt;item[0]&lt;/code&gt;, &lt;code&gt;item[1]&lt;/code&gt; and &lt;code&gt;item[2]&lt;/code&gt; were supposed to be.  &lt;/p&gt;
&lt;p&gt;This example is a perfect illustration unit tests are such a nice thing to have in Python-land: a unit test would probably catch the change in signature right away, alerting your helpful co-worker to the can of worms they have opened up by changing the output of the function. But the real moral of the story is how dangerous it is to rely on implicit knowledge of structures -- like the ordering of a list -- instead of on explicit instructions. When somebody fails to understand the implications of that ordering, bad things will happen.  When the knowledge you need to debug the problem is hidden,  things will be even worse.&lt;/p&gt;
&lt;h1&gt;Return classes strike back&lt;/h1&gt;
&lt;p&gt;In most languages the way around this is to create a class that holds the results of something like &lt;code&gt;some_function&lt;/code&gt;.  A result class provides clear, named access to what's going on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeFuncResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

 &lt;span class="c1"&gt;# and inside of some_function()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SomeFuncResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This means the receiving code is much neater and easier to understand:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a better record of what you were trying to achieve in the first place, and it's also much more survivable: as long as HelpfulCoworker01 does not actually rename the fields in the result object it can be tweaked and updated without causing problems.&lt;/p&gt;
&lt;p&gt;For many cases this is the right way to go. However it comes with some drawbacks of its own. &lt;/p&gt;
&lt;p&gt;First off -- let's be honest -- there's a lot of typing for something so dull.  I always try to leave that out of the equation when I can - the time spent typing the code is such a tiny fraction of the time you'll spend reading it that trying to save a few keystrokes is usually a Bad Idea &lt;sup&gt;(tm)&lt;/sup&gt;.  However, typing 5 lines when you could just type a pair of bracket does feel like an imposition -- particularly when the 5 lines are 100% boring boilerplate.&lt;/p&gt;
&lt;p&gt;The second issue is that, being a class, &lt;code&gt;SomeFuncResult&lt;/code&gt; is comparatively expensive: it costs a smidge more in both memory and processor time than just a list or a tuple of values. I'm ranking this behind the typing costs because most of the time that increment of cost doesn't matter at all: if you're dealing with a few hundred or even a few thousand of them, at a time the costs for spinning up new instances of &lt;code&gt;SomeFuncResult&lt;/code&gt; just to hold data are going to be invisible to users.  However if you are doing something more performance-intensive the costs of creating a full mutable object can be significant in large numbers.  As always, &lt;a href="http://techartsurvival.blogspot.com/2015/04/the-right-profile.html"&gt;it's wiser not to try to optimize until things are working&lt;/a&gt; but this is still a consideration worth recalling.&lt;/p&gt;
&lt;p&gt;The last issue is that &lt;code&gt;SomeFuncResult&lt;/code&gt; can be changed in flight. Since it is a class, the data in a &lt;code&gt;SomeFuncResult&lt;/code&gt; can be updated (for you CS types, it is &lt;em&gt;mutable&lt;/em&gt;).  This means some other piece of code that looks at the result object in between &lt;code&gt;some_function&lt;/code&gt; and you might can decide to mess with the results.  That can be a feature or a bug depending on how you want to code it -- but since Python does not have a built-in mechanism for locking fields in an object, you'd have to put in extra work to make sure the results didn't get changed by accident if keeping the data pristine was mission-critical.  You can use the a property decorator to make a fake read only field:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeFuncResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_node&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_attribute&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alas, our 5 lines of boilerplate have now blossomed into 16. Our quest for clarity is getting expensive.&lt;/p&gt;
&lt;h1&gt;De-objectifying?&lt;/h1&gt;
&lt;p&gt;One common way to get around the hassles -- or at least, they typing costs --of custom return objects is simply to use dictionaries instead.  If you use the &lt;a href="http://www.perforce.com/perforce/doc.current/user/p4pythonnotes.txt"&gt;perforce Python API&lt;/a&gt; you'll be quite familiar with this strategy; instead of creating a class, you  just return dictionaries with nice descriptive names &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;object_list&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;attrib_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;settable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_attrib_settable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict_of_defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
           &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;node&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attribute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;new_value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Like a custom class this increases readability and clarity; it's also future proof since you can add more fields to the dictionary without messing with existing data.  &lt;/p&gt;
&lt;p&gt;Even better, dictionaries -- unlike classes --  are self-describing: in order to understand the contents of a custom result class like &lt;code&gt;SomeFuncResult&lt;/code&gt; you'll have to look at the source code, whereas you can see the contents of a result dictionary with a simple print statement.  Dictionaries are slightly cheaper than classes (there is a &lt;a href="http://stackoverflow.com/questions/1336791/dictionary-vs-object-which-is-more-efficient-and-why"&gt;good workaround&lt;/a&gt; to speed up classes, but it's something you have to write and maintain).  And, of course, dictionaries have minimal setup costs: they are boiler-plate free.&lt;/p&gt;
&lt;p&gt;This doesn't mean they are ideal for all circumstances, howerver.  &lt;/p&gt;
&lt;p&gt;The  Achilles' heel of using dictionaries is keys, which are likely to be strings. Unless you are very disciplined about using named constants for all your result dictionaries you'll inevitably find that somebody somewhere has type &lt;code&gt;attribite&lt;/code&gt; with an extra &lt;em&gt;i&lt;/em&gt; instead of a &lt;em&gt;u&lt;/em&gt; and suddenly perfectly valid, impeccably logical code is failing because nobody thought to look at the key names. Instead of typing lots of setup code once, you'll be dribbling out square brackets and quotes till the end of time, with lots of little missteps and typos along the way.  While that's not an insurmoutable problem it's another annoyance.&lt;/p&gt;
&lt;h1&gt;Return of the namedtuples&lt;/h1&gt;
&lt;p&gt;Luckily there is yet another -- and for most purposes better -- way to return complex results --- one that is both flexible and self-describing. &lt;a href="http://pymotw.com/2/collections/namedtuple.html"&gt;namedtuples&lt;/a&gt; are part of the python standard library and they offer a clean, simple way to create lightweight objects that have named properties -- like classes -- but require almost no setup: you can create a new type of named tuple with a single line of code, and then use it like a lightweight (and immutable) class.&lt;/p&gt;
&lt;p&gt;A namedtuple is just a python tuple that can also use names to access it's own fields. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;

&lt;span class="c1"&gt;# create a namedtuple called &amp;#39;SomeFuncRes&amp;#39; to hold nodes, attributes and values&lt;/span&gt;
&lt;span class="n"&gt;SomeFuncRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SomeFuncRes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node attribute value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# make an instance&lt;/span&gt;
&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SomeFuncRes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pCube1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;33.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Result: SomeFuncRes(node=&amp;#39;pCube1&amp;#39;, attribute=&amp;#39;tx&amp;#39;, value=33.0)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, namedtuples are as even easier to 'read' than dictionaries when printed out. However, namedtuples give you dot-access to their contents.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;
&lt;span class="c1"&gt;# pCube1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This saves a few characters: &lt;code&gt;result.node&lt;/code&gt; beats &lt;code&gt;result['node']&lt;/code&gt; -- but mopre important offers with far fewer opportunities for mistyped keys or open quotes. &lt;/p&gt;
&lt;p&gt;However, namedtuples can also use old-fashioned indexed access too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# pCube1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you can even iterate over them if you need to, since a namedtuple is in the end just a slightly fancier tuple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

&lt;span class="c1"&gt;# pCube1&lt;/span&gt;
&lt;span class="c1"&gt;# tx&lt;/span&gt;
&lt;span class="c1"&gt;# 30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Namedtuples are easy to instantiate: You can create them using index ordering, names, or **keyword arguments.  Names tend to be better for clarity, but if you're expanding the results of other functions like &lt;code&gt;zip()&lt;/code&gt; indices and double-starred dictionaries can be very handy.  Having all three options allows you to create them in the most appropriate way.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;SomeFuncRes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pSphere1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# SomeFuncRes(node=&amp;#39;pSphere1&amp;#39;, attribute=&amp;#39;ry&amp;#39;, value=180)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;SomeFuncRes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pCube1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# SomeFuncRes(node=&amp;#39;pCube1&amp;#39;, attribute=&amp;#39;tz&amp;#39;, value=1)&lt;/span&gt;
&lt;span class="n"&gt;from_dict&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;node&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pPlane1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attribute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;40.5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;SomeFuncRes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# SomeFuncRes(node=&amp;#39;pPlane1&amp;#39;, attribute=&amp;#39;rz&amp;#39;, value=40.5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unlike classes or dictionaries, namedtuples are &lt;em&gt;immutable&lt;/em&gt;; that is, they are read-only by default.  This is usually a Good Thing&lt;sup&gt;(tm)&lt;/sup&gt; for a result object, since data changing in mid-flight can lead to subtle bugs that may be very hard to reproduce.  Immutability also makes them cheaper: they don't require Python to do as much setup behind then scenes when a they are created, which can be significant in large quantities.  They usually &lt;a href="http://blog.explainmydata.com/2012/07/expensive-lessons-in-python-performance.html"&gt;take up less memory as well&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This combination of features is tough to beat in a cheapo data-only class.  If for some reason you need to upgrade to a real class instead, you probably won't even need to change the code which reads your namedtuples:  Python doesn't care if &lt;code&gt;result.node&lt;/code&gt; is a namedtuple field or a regular object field.  For all these reasons, namedtuples are a great little tool for a lot of common data-bundling jobs.   No strategy fits every battle, but namedtuples are an excellent - and often overlooked! -- way to manage this very common (albeit not very interesting) problem and to keep your overall toolkit cleaner, more robust and easier to maintain.&lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>wrap-up</title><link href="/wrap-up.html" rel="alternate"></link><updated>2014-01-05T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2014-01-05:wrap-up.html</id><summary type="html">&lt;p&gt;The beauty of working with code, even really simple code, is that you can build your own little universe out of bits and pieces contributed by thousands of other people -- all without paying a dime or even asking them for help.  From sharing a script off of CreativeCrash to downloading a huge open-source behemoth like Apache, any reasonably plucky individual can today make stuff that actually involves the work of thousands of anonymous others. It's really quite a remarkable evolution in human history that so many people voluntarily give away their work for nothing, and (whatever else you can say about the internet era) it's something to be proud of participatng in.&lt;/p&gt;
&lt;p&gt;On the other hand... &lt;/p&gt;
&lt;p&gt;Well, Say you are an Amish farmer and all your neighbors showed up to help you raise your barn, you'd certainly be grateful. But you might still be pretty annoyed if Hans from next door hung your barn doors so they stuck in the summer heat.  Maybe old Hans worries more about keeping the barn warm than you do, so he prefers a tight seal: but that's small comfort when you're heaving on that handle in a muggy Pennsylvania morning. The internet abounds in excellent -- and, amazingly, free -- tools to help make your life easier. But they all started life as tools to make somebody else's life easier. If your needs don't line up perfectly with the needs of the original author, you're likely to get a little &lt;em&gt;&lt;a href="http://www.dict.cc/deutsch-englisch/gereizt.html"&gt;gereizt&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="barn raising" src="http://notonbluray.com/blog/wp-content/uploads/2014/04/Witness-barn-raising-scene-Bluray-screenshot-3.png" /&gt;&lt;/p&gt;
&lt;p&gt;The fact is that nobody writes all their own stuff: we all use other people's code all the time  (and, as sharing becomes more and more ingrained in coding, that's only going to increase).  All that sharing means that we constantly have to work with libraries and APIs that are useful and free and for which we know we should be grateful... but --  like that sticky barn door -- they drive us absolutely bonkers.&lt;/p&gt;
&lt;h1&gt;Wrap up&lt;/h1&gt;
&lt;p&gt;Not surprisingly, almost everybody ends up writing &lt;em&gt;wrappers&lt;/em&gt;: code to help ease those nice-but-imperferct tools and API into a something that feels a little more natural. If you spend a lot of time on &lt;a href="http://tech-artists.org"&gt;TAO&lt;/a&gt; or coding forums where people swap tips and advertise their wares you'll see a huge variety of wrappers for all sorts of tasks: indeed, the wrappers often seem to outnumber the actual functional bits. Whether you call the job making things 'more pythonic' or 'more functional' or 'cleaner', its something we all feel compelled to do (and to &lt;a href="https://github.com/theodox/mGui"&gt;share&lt;/a&gt;) from time to time.&lt;/p&gt;
&lt;p&gt;It's also easy to get  cynical about wrappers.  You see so many -- and so many of them just taste-driven syntactic variations on each other -- that veteran coders often reflexively shrug and ignore them.  This is particularly true in Python land, where the malleability of the language encourages a certain degree of experimentation and re-casting.  Because you &lt;em&gt;can&lt;/em&gt;  adapt Python to suit your tastes, the temptation to do so even when it's not actually getting you much beyond style points is hard to resist.  &lt;/p&gt;
&lt;p&gt;The net result of all this customization and adaptation is messier than Christmas morning: wrappers everywhere.  Whatever simplifications each individual wrapper gives you, the aggregate effect of so many different extra layers is overwhelming. At several times in the last decade I've sworn off wrappers and vowed to stick with vanilla python, straight-up maya.cmds and simple, linear code.  A good code archaeologist could troll through my history and find several repeated periods of growth and die-offs in the wrapper ecosystem, like fossils trapped in shale.&lt;/p&gt;
&lt;p&gt;&lt;img alt="where's pymel?" src="http://www.lparchaeology.com/prescot/images/156.jpg" /&gt;&lt;/p&gt;
&lt;h1&gt;Wraptors&lt;/h1&gt;
&lt;p&gt;Wrappers, though, never really die off like the dinosaurs: they, in fact, more persistent as the cockroaches.  And there's a lesson in that.  &lt;/p&gt;
&lt;p&gt;Consider a classic case of wrapper-iteis: a system for &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;making maya GUI less of a pain&lt;/a&gt;.  Everybody writes that one at some point in their TA career (I've done it 4 times to my certain knowledge, not counting one-offs and half-assed, abandonware).  When somebody feels compelled to spruce something up that much it's a sign. &lt;/p&gt;
&lt;p&gt;Sure, most gui wrappers are just a reaction to the clunky, wordy way that Maya expects us to pop up a window or make a button.  And sure, most of those wrappers (some of my own, I hasten to add) really aren't much better: they're just shortcuts that cut down on the carpal-tunnel of &lt;code&gt;cmds.textField(fieldname, q=True, text=True)&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Sure, saving keystrokes is nice, but over the life of a piece of code the time spent typing is a tiny fraction of that spent reading, debugging and refactoring: that you could (and probably should) just bit the bullet on. But so many persistent, repeated efforts to fix a problemare a symptom that something worse than wordiness is the problem.  Wrapper-itis really runs rampant when the toolkit that is simply not adequate to the job at hand. If you have to spend a lot of time thinking about the implementation details &lt;em&gt;instead&lt;/em&gt; of the problem you really want to solve you're not just wasting keystrokes: you're wasting precious thought and time.&lt;/p&gt;
&lt;p&gt;So I've been trying to soften my anti-wrapper stance. Sometimes it's better to actually solve a recurring problem instead of papering it over; sometimes it's worth taking the time to be in a position to write the code you &lt;em&gt;need&lt;/em&gt; to write instead of the code you're &lt;em&gt;forced&lt;/em&gt; to write.  Sometimes.&lt;/p&gt;
&lt;p&gt;Which of course raises the question of how you can identify those situations and distinguish between a real need for better abstractions and a plain old peevish desire to avoid boilerplate. &lt;/p&gt;
&lt;h1&gt;Wraptitude&lt;/h1&gt;
&lt;p&gt;The prime way to distinguish between a 'wrappable' problem and a purely syntactic one is to consider the needs of the person who'll be picking through your code after you'be been run over by a bus.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.ytimg.com/vi/y_PrZ-J7D3k/maxresdefault.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;When your replacement comes to  look at your code, will they see something that seems to clearly express the problems you were trying to solve? Or just code that clearly expresses your preferences for a particular set of formatting options and code idioms?&lt;/p&gt;
&lt;p&gt;Here's a little bit of code that reads some information from a database in order to add some 'credits' to a time account: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;replenish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;connect_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;repl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT replenished FROM users WHERE name LIKE ? AND DATE (replenished) &amp;lt;  DATE (&amp;#39;now&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
        &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;daynum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT strftime (&amp;#39;%w&amp;#39;, &amp;#39;now&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;daynum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;daynum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;repl_amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;SELECT sun, mon, tues, weds, thurs, fri, sat FROM replenish WHERE users_name LIKE ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
            &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repl_amount&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;daynum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;cap_amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT cap, balance FROM users WHERE name LIKE ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;
            &lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cap_amount&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;new_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UPDATE users SET balance = ? , replenished = DATE(&amp;#39;now&amp;#39;) WHERE name LIKE ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;replenished with &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt; credits&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;new_balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the basic logic is pretty simple.  Stripped all the fluff, you merely need to:
    * connect to the database
    * ask the database the last time the user was topped off
    * if the user hasn't been replenished today, get the amount due
    * add the amount to the user's account&lt;/p&gt;
&lt;p&gt;That's just four basic ideas. but it takes more than 20 lines to express them. &lt;/p&gt;
&lt;p&gt;Far worse, the key logical linkages of the operation are implied, not stated.For the code to make real sense you need to know or deduce that the &lt;em&gt;users&lt;/em&gt; table has a field called &lt;em&gt;replenished&lt;/em&gt; which stores the last day when the user was topped off; that the 'replenish' table has seven fields containing the top-off numbers, arranged Sunday throguh Saturday; and that the user table stores both the maximum number of credits to store and the current balance of credits.  The implementation of our simple, 4-step idea only makes sense with all of that special knowledge. It's further obscured by time saving shortcuts, like using the  actual column index in a database table to check today's value.  That may save a couple of lines but it renders the code even harder to parse. And, of course, there are syntax quirks big and small, particularly relating to the creation and formatting of the SQL. &lt;/p&gt;
&lt;p&gt;This code works fine; it's even fairly economical and readable for what it does (for a given value 'economical') But it's not the kind of thing you'd ever want to &lt;em&gt;inherit&lt;/em&gt;; it makes sense to me, because I wrote it and I remember (at least today) what I was thinking about when I did.  But some future inheritor (heck, even me a year from now) will have to think long and hard about what really ought to be a simple process.  The whole thing is bogged down in implementation details that &lt;em&gt;obscure the intent&lt;/em&gt; of what's going on.  Really good code often reads almost like pseudo-code.  This does not.&lt;/p&gt;
&lt;p&gt;To illustrate what a good wrapper can do, here's the same code using an '&lt;a href="https://en.wikipedia.org/wiki/Object-relational_mapping"&gt;object relational mapper&lt;/a&gt;' called &lt;a href="https://github.com/coleifer/peewee"&gt;peewee&lt;/a&gt;: it's a wrapper around the SQL backend that map database operations onto classes and allows you to focus on the logic instead of the mechanics:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;replenish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;connect_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;today_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;updatable_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replenished&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;today_update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Replenish&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today_name&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;updatable_user&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;  &lt;span class="n"&gt;today_update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today_update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updatable_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;updatable_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;updatable_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_balance&lt;/span&gt;
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;replenished with &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt; credits&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;new_balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's a significantly cleaner bit of code to read.  It still requires some outside knowledge but the intention is much more clearly expressed and the message isn't drowned out in quotes and parens.  An 'offscreen' benefit, given the way peewee is structured, is that backtracking to the &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Replenish&lt;/code&gt; classes would tell the rest of the story pretty straightforwardly without a ton of comments.  Only a handful of lines are needed to munge data into the right forms, and the code almost &lt;em&gt;reads&lt;/em&gt; like the summary. &lt;/p&gt;
&lt;p&gt;That's a good example of how wrappers can help: saving keystrokes is nice but clarifying the real &lt;em&gt;meaning&lt;/em&gt; of the code is priceless.&lt;/p&gt;
&lt;h1&gt;Wrapola&lt;/h1&gt;
&lt;p&gt;Well, maybe not exactly price-&lt;em&gt;less&lt;/em&gt;. All wrapper code comes with a cost: there are new rules to learn and, probably, new bugs to encounter.  If the wrapper uses odd conventions, unusual data formats or is simply slower than hand rolled code it may still be a bad bargain. Nonetheless, this example shows  wrappers can be more than just a protest against awkward syntax and API's that don't match your taste. Ultimately wrappers are a perfect microcosm of what all coding is about: the search for a clearer understanding of the problem you're trying to solve.  &lt;/p&gt;
&lt;p&gt;So if you're thinking about writing a wrapper, ask yourself this: does the code you want to write teach you something about the problem your solving? Or does it just save you a few keystrokes? Typing is a pain, but you'll spend a lot more tine looking at your code than you ever will typing it. So don't focus on just counting lines or syntax: focus on whether the wrapper helps you understand the problem better.  If the wrapped code reads like a description of your thought process, you're on the right track.  If it's  just getting you back to &lt;a href="http://www.twitch.tv/undeadlabs"&gt;that TwitchTV stream&lt;/a&gt; on your second monitor a few minutes earlier it might not be worth your time.&lt;/p&gt;
&lt;h1&gt;PS&lt;/h1&gt;
&lt;p&gt;I used an ORM for my example because it provides such a powerful example of code that's not bogged down in syntactic complexities. There is, however, a classic internet flame war about ORMs that I'm glossing over, with nerd rage aplenty for friends and foes of ORMs. Background &lt;a href="http://martinfowler.com/bliki/OrmHate.html"&gt;here&lt;/a&gt; if you care.  &lt;/p&gt;</summary><category term="blog"></category><category term="programming"></category><category term="maya"></category><category term="python"></category></entry><entry><title>mtasks</title><link href="/mtasks.html" rel="alternate"></link><updated>2014-01-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2014-01-01:mtasks.html</id><summary type="html">&lt;p&gt;Maya is coming up on its twentieth birthday this year.  That's an impressive run for a piece of software, and it definitely validates some of the key design decisions made back in the 90's.  &lt;/p&gt;
&lt;p&gt;However, the old gray mare is a little long in the tooth these days.  Many of the key changes in computing that have take place since the days of Windows 95 are not fully integrated into the Maya ecosystem. In particular, the core of Maya remains single-threaded:  only the main Maya thread can touch your maya scenes.  &lt;/p&gt;
&lt;p&gt;If you've ever tried to run multiple tasks simultaneously in Maya using Python threads, you know it's a giant pain in the proverbial patootie.  If you don't obsessively wrap every call to &lt;code&gt;maya.cmds&lt;/code&gt; or PyMel with &lt;code&gt;utils.executeDeferred()&lt;/code&gt; you will be plagued with mysterious, inconsistent bugs - when you're not actually just hard-crashing your machine. Sometimes -- like when you've got a big long-running task you need to kick off and monitor -- the pain is worth it it.  There are a lot of little jobs -- particularly things where a bit of concurrency would make your users' experience a bit smoother, such as flashing messages in a gui window -- where the hassle doesn't justify the extra work and increased risk of bugs.&lt;/p&gt;</summary><category term="blog"></category></entry><entry><title>Proportional Integral Differential Awesome</title><link href="/proportional-integral-differential-awesome.html" rel="alternate"></link><updated>2014-01-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2014-01-01:proportional-integral-differential-awesome.html</id><summary type="html">&lt;p&gt;Outside of work I've been toying a lot with &lt;a href="http://www.dexterindustries.com/site/?product_cat=brickpi-lego-for-raspberry-pi"&gt;BrickPi&lt;/a&gt;, which allows a Raspberry Pi to control &lt;a href="http://www.lego.com/en-us/mindstorms/?domainredir=mindstorms.lego.com"&gt;Lego Mindstorms&lt;/a&gt; sensors and motors.  One of the neatest ideas I stumbled on in my reading is the Proportional Integral Differential Controller, or 'PID' for short. It's a nifty idea with a lot of possible applications in games, particularly in animation.&lt;/p&gt;
&lt;p&gt;The PID algorithm is actually a pretty old trick - PID's were originally invented for automatic steering of steamships back in the 1890's (a helpful reminder, if you need one, that people were pretty damn clever even before the internet). Nowadays PIDs can be found  in all sorts of semi-automatic control systems from thermostats to autopilots to Segways.  Although the original implementations are mechanical, nowadays the overwhelming majority of PIDs are done in software, because if you take away all the fancy terminology they are just a tool for trying to fiddle some numbers to get other numbers to come out where you want them to be. Those numbers could be the temperature of your home being adjusted by the output of your air conditioner, the angle of a rudder on a ship trying to compensate for winds and current, or the force of a servo motor trying to keep a Segway from &lt;a href="https://www.youtube.com/watch?v=F8oKJbU5MCQ"&gt;doing something embarrassing&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;PID Basics&lt;/h2&gt;
&lt;p&gt;In all of these cases, the basic facts are simple. There are only 3 numbers to understand:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;output signal&lt;/strong&gt; is the number that represents how things are right now: the heading of the ship, the angle of the segway, or the temperature in the bedroom.  The neat thing about PID controllers is they don't care &lt;em&gt;why&lt;/em&gt; the number is off - they don't require any understanding of the mechanism that causes the output signal to change, only what the current state of the output it. This makes them a great general purpose tool.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;target&lt;/strong&gt; number represents how we want things to be: the way we should be heading or the right temperature or whatever. It's worth mentioning that the target and the output only make sense if they are measured in the same way  - the units could be degrees of angle or degrees Farenheit or miles per hour, but they need to be the same for the output and the target.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;error&lt;/strong&gt; is the difference between the output signal and the target.  If whatever we're trying to control is right on track -- the ship's heading straight or the room is a comfy 70 degrees -- the error is zero. Larger numbers mean bigger offsets. In most cases the error can be positive or negative - it can be too hot or too cold, and the value of the difference affects how we can try to correct it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Controlling the system&lt;/h2&gt;
&lt;p&gt;The PID controller's job is to track that error value and use it to nudge the process in the right direction. If the ship is heading too far to port, nudge the rudder starboard. If the room is too hot, turn down the furnace. If the Segway is falling over, have a good laugh at the poor joker who just fell off... er, &lt;em&gt;apply more torque&lt;/em&gt; to push it back toward equilibrium.&lt;/p&gt;
&lt;p&gt;Now, it's easy to see how you could try to fix single-variable problems like ship heading or temperature with a really dumb algorithm like "if it's cold, turn up the heat -- if it's hot, turn it down."  However most complex systems don't work in a very linear fashion: ships get pushed off course by winds and waves; furnaces take a while to heat up and longer to cool down; Segways have to accomodate people of all different shapes and sizes.  This means that the same inputs might not make the same responses - adding 1 newton of torque to the Segway will produce very different results for Mike Tyson and Natalie Portman &lt;em&gt;I'd add, parenthetically, that googling &lt;a href="https://www.google.com/search?q=short%20celebs"&gt;short celebs&lt;/a&gt; is a revealing experience. You're being &lt;strong&gt;lied to&lt;/strong&gt; by the Hollywood machine. Wake up, sheeple!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is why the PID is so handy. It uses 3 different ways of compensating for the delta between the current output and the target. These work together to produce stronger corrections when whatever you're controlling is way out of line, but gradually diminish the correction in order to damp down the wild swings which would come from over-correcting.  The balance between the three factors is very important to the behavior of the system (in the commercial world, it's a whole specialized math discipline of its own). Luckily they are based on fairly simple concepts so they can be managed without a math PhD.&lt;/p&gt;
&lt;p&gt;The Proportional Integral Differential controller has three basic correction types, known (surprise) as the proportional, integral and differential components.  Here's what they do:&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;proportional component&lt;/strong&gt; is based only on how large the current error is. If you have an error value of X, it wants to apply a correction of -X to the result.  When the proportional control is cranked very high, the output will be clamped very tightly to the target. Unfortunately this is not usually what you want in games - it's trivial to simple position-constrain one object to another or set a number. &lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;integral component,&lt;/strong&gt; on the other hand, applies its fix based on how long the signal has been off. This means integral fix will be more powerful if the signal has been away from the target for long times - think of a ship that has been pushed off course by a strong wind - if it's been heading the wrong way for a while it will need to correct far more.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;differential component&lt;/strong&gt; applies a fix which scales based on how quickly the error is diminishing - if the signal and target are converging fast, the differential will fade out; if they are diverging fast it ramps up. The differential control is useful for preventing overshoots. It also provides a little bit of anticipation: the proportional and integral corrections only know that you are off-target &lt;em&gt;right now&lt;/em&gt;, where the differential essentially predicts that you will be on target soon, so maybe you can relax a bit.&lt;/p&gt;
&lt;p&gt;The interaction between these three systems is far more subtle and interesting than this simple, bald description conveys. Despite the incredible simplicity of the algorithm (see below) the behavior can be rigidly mechanical or lazily organic, highly reactive or ponderously slow. Plus - unlike more complex control mechanisms - PIDs work on a huge range of different applications with no special knowledge.  The three components allow this fairly dumb bit of code to react to the present (the proportional), the past (the integral), and to some degree the future (the differential). Not bad for a dozen or so lines!&lt;/p&gt;
&lt;p&gt;I got interested in PIDs for making self-balancing robots in Unity, using them to control joint motors. However they are also an interesting option for animation, and at some point in the future I'd be interested porting this code to Python to see what I can do with it as an animation rigging component. The genius of the PID algorithm is that it doesn't care what the numbers &lt;em&gt;mean&lt;/em&gt; - the error value could be revenue numbers and the response could be controlling the discount on your Steam sales, or it could be measuring joint angles and controlling physics forces, or it could be adjusting the twist on a shoulder fixup joint to avoid pinches. The trick is simply to find a consistent way to measure the difference between what you want and what you've got. &lt;/p&gt;
&lt;p&gt;Basic code&lt;/p&gt;
&lt;p&gt;I've put the basic code for the PID controller up on GitHub.  Since it's in C# it's fairly self-explanatory, but here's some basic highlights of how it's put together.&lt;/p&gt;
&lt;p&gt;The MonoBehavior component itself is called Follower, and it's really just example of how a PID controller could be rather than a complete system in it's own right.  All this one does is to follow a target transform, trying to match it's Y component. The Follower MonoBehavior is really just a wrapper around a modular PIDController class : it feeds in the Y-axis delta to the PID as an an error value, and uses the response coming back from the PID to add or remove thrust. In a real application would probably be used to drive joint motors or physics impulses, but I kept it simple so as not to distract from the PID code. 
It's the PIDController class which does all the real work. It has 3 important public fields which control the relative power of the three correction techniques (in the reference these are usually called the &lt;em&gt;gain&lt;/em&gt; or &lt;em&gt;coefficients&lt;/em&gt;). The algorithm itself (stripped of all those impressive calculus symbols in the &lt;a href="http://en.wikipedia.org/wiki/PID_controller"&gt;Wikipedia article&lt;/a&gt; is as simple as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Get the error&lt;/strong&gt; the difference between where the input is and where we want it to be. In the code that's calculated by the Follower class and just passed to the PID. This version includes an optional term called 'Droop', which introduces a user-controlled amount of randomness to keep the solution from oscillating when the error and the integral get into lockstep.  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add the error&lt;/strong&gt; to the accumulated error value stored in &lt;code&gt;_integral&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Check how quickly the error is changing&lt;/strong&gt; by comparing the new error value with the last two (stored in &lt;code&gt;_backOne&lt;/code&gt; and &lt;code&gt;_backTwo&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you've got all three kinds of error you just multiply each one by the corresponding gain value and return the result (known as the &lt;code&gt;_Response&lt;/code&gt;). &lt;/p&gt;
&lt;p&gt;Clearly, the whole thing is simple -- so simple that it falls below my mildy-comic-metaphor threshold.  However there's one subtlety which drove me crazy for a while and is worth pointing out.  &lt;strong&gt;Error&lt;/strong&gt; has to be a &lt;strong&gt;signed&lt;/strong&gt; value - that is, you have to be able to have &lt;em&gt;negative&lt;/em&gt; error, or overshoot of the target, as well as the obvious undershoot errors.  If you don't have both positive and negative error values flowing in, your integral component will shoot off to infinity pretty quickly!  In this example, just measuring the distance between the follower and the target wouldn't work - that's why the example uses the difference on the Y axis rather than just measuring the distance.  &lt;/p&gt;</summary><category term="unity"></category><category term="python"></category><category term="games"></category></entry><entry><title>python_in_unity</title><link href="/python_in_unity.html" rel="alternate"></link><updated>2014-01-01T00:00:00-08:00</updated><author><name>stevet</name></author><id>tag:,2014-01-01:python_in_unity.html</id><summary type="html">&lt;ul&gt;
&lt;li&gt;importing Unity&lt;/li&gt;
&lt;li&gt;you need to use clr.AddReferenceToFile, not clr.AddReference&lt;/li&gt;
&lt;li&gt;the path to Unity/editor/data/managed needs to be in your python system path&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;then import UnityEngine&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compiling:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;use pyc.py in ipy/tools/scripts&lt;/li&gt;
&lt;li&gt;/target:dll&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;reference http://dbaportal.eu/2009/12/21/ironpython-how-to-compile-exe/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Don't work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;evidently it's broken if you have dotnet 4.5 on your machine...&lt;/li&gt;
&lt;li&gt;unity is dotnet 3.5/4 and key pieces were moved in 4.5&lt;/li&gt;
&lt;li&gt;if 4.5 has been installed it breaks back compatibility&lt;/li&gt;
&lt;li&gt;pyc.py can't pick which version to target&lt;/li&gt;
&lt;/ul&gt;</summary><category term="blog"></category></entry></feed>