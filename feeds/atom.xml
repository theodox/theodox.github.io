<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Chimeras &amp; Manticores</title><link href="https://theodox.github.io/" rel="alternate"></link><link href="https://theodox.github.io/feeds/atom.xml" rel="self"></link><id>https://theodox.github.io/</id><updated>2018-11-15T00:00:00-08:00</updated><entry><title>Pythonception!</title><link href="https://theodox.github.io/2018/pythonception" rel="alternate"></link><published>2018-11-15T00:00:00-08:00</published><updated>2018-11-15T00:00:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2018-11-15:/2018/pythonception</id><summary type="html">&lt;p&gt;It used to be impossible to launch any old Maya Python script directly from the desktop.  But not anymore, thanks to this &lt;em&gt;one simple&amp;nbsp;trick!&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="" src="https://i.imgflip.com/2mpbwr.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Even though serious Maya tools development has been done in Python for almost a decade now, Python still doesn&amp;#8217;t get a lot of love from Maya when the application starts&amp;nbsp;up.  &lt;/p&gt;
&lt;p&gt;You can run a &lt;code&gt;userSetup.py&lt;/code&gt;, which isn&amp;#8217;t bad &amp;#8212; but it isn&amp;#8217;t very flexible: you&amp;#8217;re going to get one, and only one chance with userSetup, which makes things a lot more complicated if you have support a bunch of possible configurations, like different projects or different tool setups for different specialists; you don&amp;#8217;t want to either physically swap userSetup files all the time, or to try to make one that&amp;#8217;s complex and flexible enough to handle all your needs.  And, of course, a lot of users have their own userSetups and they get mad when you want to take them&amp;nbsp;away.&lt;/p&gt;
&lt;p&gt;Unsurprisingly. many teams end up with dedicated launchers &amp;#8212; either dedicated applications or just .&lt;span class="caps"&gt;BAT&lt;/span&gt; files &amp;#8212; whose job it is to configure maya on startup.  For example you might keep parallel userSetup/code combinations in different locations and then launch Maya with an .&lt;span class="caps"&gt;BAT&lt;/span&gt; that manipulates &lt;code&gt;sys.path&lt;/code&gt; or &lt;code&gt;PYTHONPATH&lt;/code&gt; to get the right version to the top of the list.  These kinds of systems work reasonably well, although they also complicate your support structure &amp;#8212; when you&amp;#8217;re trying to add a new artists to the team you need to train them out of just launching Maya from the applications menu, and if you&amp;#8217;re supporting outsources or partner studios you need to distribute the launcher infrastructure as well as the code that does the actual&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;If you stick with the simple stuff, on the other hand&amp;#8230; well, &lt;span class="caps"&gt;BAT&lt;/span&gt; files are just nasty &amp;#8212; they&amp;#8217;re the computing equivalent of truckstop corn dogs that have been rolling under the heatlamp since&amp;nbsp;1984.&lt;/p&gt;
&lt;p&gt;In the words of the great &lt;a href="https://pyvideo.org/speaker/raymond-hettinger.html"&gt;Raymond Hettinger&lt;/a&gt;, &lt;em&gt;there&amp;#8217;s got to be a better way.&lt;/em&gt;  A way you can distribute a toolkit&amp;nbsp;that&amp;#8217;s:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Easy to activate&lt;/strong&gt; &amp;#8212; It won&amp;#8217;t require me to fire up a different program just to use the one I want to use
&lt;strong&gt;A good citizen&lt;/strong&gt; &amp;#8212; It doesn&amp;#8217;t force me to reorganize my Maya install (particularly if I&amp;#8217;m an outsource who might only be using this toolkit for a few weeks!)
&lt;strong&gt;Install Free&lt;/strong&gt; &amp;#8212; It doesn&amp;#8217;t demand a separate installer or a plugin or anything else I don&amp;#8217;t already&amp;nbsp;have.&lt;/p&gt;
&lt;p&gt;&amp;#8230; but at the same time&amp;nbsp;it&amp;#8217;s&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fully functional&lt;/strong&gt; &amp;#8212; you can&amp;#8217;t compromise the depth of what you&amp;#8217;re delivering just in order to make it easy to&amp;nbsp;deliver.&lt;/p&gt;
&lt;p&gt;The first three are actually surprisingly easy.  After all, Maya has always has it&amp;#8217;s own dedicated script file type &amp;#8212; you can always double-click or drag-and-drop a mel file and it will just work.  No installation, not configuration, not even any special rules about where the file has to be. You can mail somebody a &lt;span class="caps"&gt;MEL&lt;/span&gt; file and they can just run it from their downloads&amp;nbsp;folder.&lt;/p&gt;
&lt;p&gt;Alas, it works in &lt;span class="caps"&gt;MEL&lt;/span&gt;.  Which is to say, it&amp;#8217;s going to be an uphill battle to make it hit that last bullet point and be fully functional. And how much power can you really pack into a single &lt;span class="caps"&gt;MEL&lt;/span&gt;&amp;nbsp;file?&lt;/p&gt;
&lt;p&gt;But, as Ray would say, &lt;em&gt;there is a better way&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve ever had to write one of those &lt;span class="caps"&gt;BAT&lt;/span&gt; file launchers, you may have seen something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;maya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;import sys; sys.path.insert(0, &amp;#39;c:&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;path&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;to&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;mayatools&amp;#39;); import mayatools; maytools.run()&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s telling Maya to run a &lt;span class="caps"&gt;MEL&lt;/span&gt; command that in turn tells Python to add a folder to the path and then run.  Conceptually simple, if ugly as sin; and fine enough for a one liner.  Not, however, the stuff of which great programs are made &amp;#8212; those string escapes alone are enough to make one want to take a hot&amp;nbsp;shower.&lt;/p&gt;
&lt;p&gt;You can make things a bit better if you delegate the work to an actual Python file; that gets you down to something&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;maya.exe -c &amp;quot;python(\&amp;quot;execfile &amp;#39;c:\\path\\to\\mayatools\\mayatools.py&amp;#39;)\&amp;quot;)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One easy thing to do from here is simply to convert these BATs to &lt;span class="caps"&gt;MEL&lt;/span&gt; files &amp;#8212; after all, they&amp;#8217;re really just calling &lt;span class="caps"&gt;MEL&lt;/span&gt; anyway.  That gets you doen to one less layer of string escapes (you&amp;#8217;re still stuck quoting all the python, alas) and it will let you run Python from anywhere. In many scenarios this is a good, low-maintenance way forward.  You can create dedicated &lt;span class="caps"&gt;MEL&lt;/span&gt; launchers that can fire up Python as needed without actually mucking around in the depths of your Maya install directory, without dedicated launchers, and without even writing more than the teensiest smidgen of &lt;span class="caps"&gt;MEL&lt;/span&gt;.  Heck, this even works with&amp;nbsp;drag-and-drop!&lt;/p&gt;
&lt;p&gt;However it&amp;#8217;s not perfect.  The main weakness of something like this &amp;#8212; and with &lt;span class="caps"&gt;BAT&lt;/span&gt; files, for that matter &amp;#8212;  comes when you start to wonder where, exactly, the relevant python files are.  As soon as the logic gets more complex than a hard-coded path name you&amp;#8217;re suddenly back in the business of trying to write a complex algorithm in &lt;span class="caps"&gt;MEL&lt;/span&gt; without all of the nice tools you get in Python.  Sometimes you need the power of Python to unleash the power of Python&amp;#8230; it&amp;#8217;s a sort of snake-eating-its-own-tail&amp;nbsp;situation.&lt;/p&gt;
&lt;p&gt;To escape from that conundrum you really just need to figure out a way to squeeze the Python logic into thae executable shell of that &lt;span class="caps"&gt;MEL&lt;/span&gt; file.  Unfortunately, with all those stupid string escape codes, that&amp;#8217;s not a trivial task.  Unless &amp;#8212; let&amp;#8217;s get really meta here for a moment &amp;#8212; you use the power of Python to get &lt;span class="caps"&gt;MEL&lt;/span&gt; to help you unleash the power of&amp;nbsp;Python. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Whaaaaat?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.pinimg.com/originals/c8/b5/b4/c8b5b4debe30a812871382f978e227a4.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using Python to make &lt;span class="caps"&gt;MEL&lt;/span&gt; to make Python&amp;#8230;?&amp;#8221; &lt;strong&gt;Pythonception!&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The problem with jamming complex code into your &lt;span class="caps"&gt;MEL&lt;/span&gt; is all the string escaping. But Python comes with built-in tools for dealing with string-safe encoding of arbitrary data &amp;#8212; including strings.  The &lt;code&gt;base64&lt;/code&gt; moduie is used to encode aribtrary data for transmission over the internet as blocks of characters.  For example you can take a string&amp;nbsp;like &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;example = r&amp;#39;This is a long string, including punctuation and &amp;quot;difficult&amp;quot; characters like quotes\slashes&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and turn it into something that will not require special&amp;nbsp;escapes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;base64&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64_urlsafeencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#  VGhpcyBpcyBhIGxvbmcgc3RyaW5nLCBpbmNsdWRpbmcgcHVuY3R1YXRpb24gYW5kICJkaWZmaWN1bHQiIGNoYXJhY3RlcnMgbGlrZSBxdW90ZXNcc2xhc2hlcw==&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Base64encoding doesn&amp;#8217;t use the full ascii character set, and the &lt;code&gt;b64_urlsafeencode&lt;/code&gt; in particular avoids slashes &amp;#8212; so you can be sure that your big blob or random characters will not cause &lt;span class="caps"&gt;MEL&lt;/span&gt; to fritz&amp;nbsp;out.&lt;/p&gt;
&lt;p&gt;This kind of packing gives you the means to take a whole Python file &amp;#8212; as much code as you need to find your install directory, or download updates from the network, or sync up to perforce &amp;#8212; and jam it right into your &lt;span class="caps"&gt;MEL&lt;/span&gt; file. Here&amp;#8217;s about all you need to compile a Python file to &lt;span class="caps"&gt;MEL&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;python_to_mel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pythonfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;melfile&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pythonfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;py_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;encoded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b64_urlsafeencode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;py_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;py_to_mel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import base64; _py_code = b64_urlsafedecode(&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#39;); exec py_code&amp;quot;&lt;/span&gt;  &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;encoded&lt;/span&gt; 
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;melfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python(&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;);&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;py_to_mel&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, when you double-click that Mel file the original code &amp;#8212; safely stashed away inside that block of gibberish &amp;#8212; will be turned back into code and run as if you&amp;#8217;d typed it into the script&amp;nbsp;listener.  &lt;/p&gt;
&lt;p&gt;Incidentally if something goes wrong you can see the actual text fo the Python code in Maya &amp;#8212; in the example above it&amp;#8217;s stashed in variable called &lt;code&gt;_py_code&lt;/code&gt;, which will be in the global namespace (again exactly as if you had typed it in the&amp;nbsp;listener).&lt;/p&gt;
&lt;p&gt;While you can certainly achieve the same end in different ways, this method as a lot of appeal, particularly because it gives you a maximal amount of power without any infrastructure on the receiving end.  You could email a &lt;span class="caps"&gt;MEL&lt;/span&gt; file like that to anybody and they could run it as is.  Anything in the standard library &amp;#8212; including important things like the ability to download an update from an http server or to call out to a source control program &amp;#8212; can now be done from a vanilla &lt;span class="caps"&gt;MEL&lt;/span&gt; file.  It&amp;#8217;s almost enough to make you like &lt;span class="caps"&gt;MEL&lt;/span&gt; again&amp;#8230; it&amp;#8217;s like the good old days of&amp;nbsp;2005.&lt;/p&gt;
&lt;p&gt;Of course you&amp;#8217;ll quickly run into the other big hassle of Maya startup, which is setting up the rest of your Python environment: the endless old struggle of &lt;span class="caps"&gt;PATH&lt;/span&gt; and &lt;span class="caps"&gt;PYTHONPATH&lt;/span&gt; and the rest.  But don&amp;#8217;t worry! &lt;span class="caps"&gt;MEL&lt;/span&gt; has an answer for that as well&amp;#8230; but it&amp;#8217;s an answer that will wait until next&amp;nbsp;time.&lt;/p&gt;</content><category term="python"></category><category term="maya"></category><category term="programming"></category></entry><entry><title>TA 101</title><link href="https://theodox.github.io/2018/ta_101" rel="alternate"></link><published>2018-08-07T00:00:00-07:00</published><updated>2018-08-07T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2018-08-07:/2018/ta_101</id><summary type="html">&lt;p&gt;Some thoughts about building a coding culture for tech&amp;nbsp;artists.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s been long and &lt;a href="https://wccftech.com/undead-labs-microsoft-not-messing-around/"&gt;very eventful&lt;/a&gt; few&amp;nbsp;months.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://cdn.wccftech.com/wp-content/uploads/2018/06/Xbox_E32018_Spencer.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Phil Spencer at E3, announcing that Microsoft is aquiring Undead&amp;nbsp;Labs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Looking ahead to a rather bigger future version of Undead Labs &amp;#8212; and a &lt;strong&gt;State of Decay 3&lt;/strong&gt; that&amp;#8217;s even more ambitious than 2 was &amp;#8212; I&amp;#8217;ve been doing a lot of code reviews on my existing code base to see what new hires will have to deal&amp;nbsp;with.  &lt;/p&gt;
&lt;p&gt;The results are not always pretty.  On the purely functional side, the code has held up reasonably well.  But it&amp;#8217;s got the logical coherence of the street grid in a medieval city &amp;#8212; it&amp;#8217;s full of quirks, blind alleys, dead code and other hazards waiting to trap the unwary.  I rather despair of being able to introduce new TAs to the team without (a) spending inordinate amounts of time on teaching and (b) dying of&amp;nbsp;shame.&lt;/p&gt;
&lt;h3&gt;Archaeology&lt;/h3&gt;
&lt;p&gt;The first thing jumps out at me when I read over our code is the hodgepodge of different styles.  Not only does the code reflect several different individual styles &amp;#8212; any codebase with more than zero coders has that &amp;#8212;  it also shows distinct archaeological strata in my own style over the last eight years.  There&amp;#8217;s code that reads like C# (right down to C# naming conventions) and code that reads like &lt;span class="caps"&gt;MEL&lt;/span&gt;.  There&amp;#8217;s code that does everything in giant 1,000 line monster functions and code that can&amp;#8217;t seem to take a step without definining a new&amp;nbsp;class.  &lt;/p&gt;
&lt;p&gt;Style drift is inevitable &amp;#8212; and healthy.  It shows that a team is growing and getting better.  Unfortunately it also makes it hard to keep a codebase healthy.  Trying to revert to the mindset I had seven or eight years ago is difficult as well as embarassing; trying to understand why I did something a certain way is often so much work that it&amp;#8217;s tempting to simply rubbish a working but creaky solution and write a shiny new one from&amp;nbsp;scratch.  &lt;/p&gt;
&lt;p&gt;Alas, it&amp;#8217;s easy to plan on writing new and improved systems.  Nobody, after all,  plans on writing new and improved bugs&amp;#8230; but that doesn&amp;#8217;t mean you won&amp;#8217;t.  And the time spent fixing those new bugs is time not spent on new functionality (and the new bugs that come with &lt;em&gt;that&lt;/em&gt;).  &lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a big investment to get back to where you are&amp;nbsp;today. &lt;/p&gt;
&lt;p&gt;So, dealing with all that fugly old code is definitely not an easy task.  Letting things sit is an invitation to code rot and a drag on training; constantly trying to rebuild from scratch means a long struggle just to get back to&amp;nbsp;parity.  &lt;/p&gt;
&lt;p&gt;The closest thing I&amp;#8217;ve been able to come up with as an &amp;#8220;answer&amp;#8221; is gradualism &amp;#8212; don&amp;#8217;t let code sit ungroomed, but try to nudge it in the right direction instead of nuking it from orbit and building on the glass. A steady diet of small improvements and modernisations is very preferable to simply burning the whole house down every few&amp;nbsp;years.&lt;/p&gt;
&lt;p&gt;At least, I &lt;em&gt;hope&lt;/em&gt; it&amp;nbsp;is.&lt;/p&gt;
&lt;h3&gt;Set&amp;nbsp;Theory&lt;/h3&gt;
&lt;p&gt;One of the most interesting hidden taxes in old code is the incredible mare&amp;#8217;s nest of &lt;strong&gt;duplication.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;No individual really knows a whole codebase very well.  Plus, some people tend to reinvent their own solutions instead of looking around for what&amp;#8217;s already there. Meanwhile some people &amp;#8212; myself definitely included! &amp;#8212; are constantly tempted to invent pure, perfect, abstract solutions for all the world&amp;#8217;s problems&amp;#8230; solutions so abstract that they often languish away in Platonic purity, unused because they level of abstraction is impossibly&amp;nbsp;high.  &lt;/p&gt;
&lt;p&gt;And, of course, everybody is better at solving code problems than at naming the solutions, so even the the most well-intentioned colleague may never even know that the tools they want are lying there in plain&amp;nbsp;sight.&lt;/p&gt;
&lt;p&gt;Duplication isn&amp;#8217;t just a waste of time &amp;#8212; it&amp;#8217;s an obstacle to making things better and an invitation to code rot.  All else being equal, every line of code is a potential liabilitt.  So a good part of trying to modernise the codebase is simply going to be cleaning house: finding and standardizing the fifty different ways people look for files that are &amp;#8216;in the project&amp;#8217; or &amp;#8216;not in the project&amp;#8217;, the dozens of ways people decide of one object is a child of another, the scores of methods for deciding what is or is not supposed to be animatable, and so&amp;nbsp;on.&lt;/p&gt;
&lt;h3&gt;Comparative&amp;nbsp;Sociology&lt;/h3&gt;
&lt;p&gt;Untangling that Gordian knot is going to be a large project &amp;#8212; one of those things that you have to describe in meetings as &amp;#8220;a&amp;nbsp;process&amp;#8221;.  &lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve &lt;a href="https://github.com/theodox/ta_101/blob/master/TA%20coding%20101.md"&gt;already shared&lt;/a&gt; a draft of the doc I&amp;#8217;m working on as part of the&amp;nbsp;process. &lt;/p&gt;
&lt;p&gt;It may be casually described as a &amp;#8220;coding standards&amp;#8221; document, but that&amp;#8217;s not really a good description: I scarcely give a damn about things like where brackets go.  What I&amp;#8217;m groping for &amp;#8212; and it&amp;#8217;s definitely an exploration &amp;#8212; is the right way to foster and grow a shared approach to problem solving.  Neat well organized code is certainly part of that, but it&amp;#8217;s only a small part.   The real end product of a process like this is not just better code: it&amp;#8217;s a better &lt;em&gt;coding culture&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;It might be a bit suprising that I&amp;#8217;d bother sharing what&amp;#8217;s essentially an internal policy document on the internet. But a lot of what I want to accomplish is to make it easier for new team members to know what&amp;#8217;s going on as they join Undead Labs; if my ideas are too far outsife of what you might call the &amp;#8220;techart mainstream&amp;#8221; it doesn&amp;#8217;t matter if I write them down and blather on about them.  The whole idea is not to create something radical and new &amp;#8212; it&amp;#8217;s to help clarify and crystallize the ideas we all half-way know&amp;nbsp;already. &lt;/p&gt;
&lt;p&gt;There&amp;#8217;s useful analogy in the way that Python programmers use the word &amp;#8220;Pythonic.&amp;#8221; It&amp;#8217;s an almost mystical quality &amp;#8212; and, like many mystical experiences, &lt;a href="https://www.theregister.co.uk/2018/07/13/python_creator_guido_van_rossum_quits/"&gt;the search for it often ends in controversy and feuding&lt;/a&gt;.  Even though &amp;#8220;Pythonic&amp;#8221; is not easily reducable to a set of Powerpoint bullets it&amp;#8217;s still a powerful ideal that has shaped a generation of Python code in both very obvious and very subtle ways.  After spending much of the last two years in the depths of the Unreal C++ codebase, I&amp;#8217;m extremely aware of the way that programming languages create their own cultures.  If you want an object lesson, Just watch some of the best C++ speakers, like &lt;a href="https://www.youtube.com/watch?v=smqT9Io_bKo"&gt;Scott Meyers&lt;/a&gt; or &lt;a href="https://www.youtube.com/watch?v=xnqTKD8uD64"&gt;Herb Sutter&lt;/a&gt; and listen to the way they talk abou their language &amp;#8212; then contrast it to the way somebody like &lt;a href="https://www.youtube.com/watch?v=OSGv2VnC0go"&gt;Raymond Hettinger&lt;/a&gt; or &lt;a href="https://www.youtube.com/watch?v=x-kB2o8sd5c"&gt;Brandon Rhodes&lt;/a&gt; talks about&amp;nbsp;Python.  &lt;/p&gt;
&lt;h3&gt;Philosophy&amp;nbsp;101&lt;/h3&gt;
&lt;p&gt;Hence, my immediate instinct to a looming cultural change at the company is to write a doc about coding.  But the target isn&amp;#8217;t just my own team &amp;#8212; it&amp;#8217;s all those future teammates out there that will have to learn the way we do things.  If we can somehow &lt;em&gt;scrape away&lt;/em&gt; the idiosyncracies of one team&amp;#8217;s history and get at the common, instinctual basis of &lt;span class="caps"&gt;TA&lt;/span&gt; work then onboarding new people will be a lot easier.  They&amp;#8217;ll be productive sooner, and we&amp;#8217;ll spend less energy trying to change &lt;em&gt;their&lt;/em&gt; habits into &lt;em&gt;our&lt;/em&gt; habits.  Instead of trying to invent a novel new culture, it&amp;#8217;s more about trying to clarify and articulate things that most &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;#8217;s already know and do on some&amp;nbsp;level. &lt;/p&gt;
&lt;p&gt;Python has it&amp;#8217;s famous &lt;a href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt;.  What would a &amp;#8220;Zen of technical art&amp;#8221; look like?  I don&amp;#8217;t really know, but I think the next several months might met me a little&amp;nbsp;closer.  &lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re interested in the questions as well, I&amp;#8217;d encourage you to grab that &lt;a href="https://github.com/theodox/ta_101/blob/master/TA%20coding%20101.md"&gt;coding document&lt;/a&gt; and see how you&amp;#8217;d re-write it. Feel free to lodge an issue on the github repo, or to submit a pull request if you think something could be better.  For that matter, fork your own version and we&amp;#8217;ll see how different teams think this ought to work out.   I&amp;#8217;ve already gotten a lot of useful feedback both through GitHub and person-to-person; more is always better!  One of the things I feel is part of half-unconscious &lt;span class="caps"&gt;TA&lt;/span&gt; culture is a commitment to sharing&amp;nbsp;knowledge. &lt;/p&gt;
&lt;p&gt;What do you say? Is that part of how we do&amp;nbsp;things?&lt;/p&gt;</content><category term="techart"></category><category term="industry"></category><category term="programming"></category></entry><entry><title>Help!</title><link href="https://theodox.github.io/2018/help" rel="alternate"></link><published>2018-05-10T00:00:00-07:00</published><updated>2018-05-10T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2018-05-10:/2018/help</id><summary type="html">&lt;p&gt;Something that&amp;#8217;s always driven me crazy in Maya is the fact that &lt;code&gt;maya.cmds&lt;/code&gt; does not really support Python&amp;#8217;s built-in &lt;code&gt;help()&lt;/code&gt; function.  But after suffering for years on that account, it finally occurred to me today that it&amp;#8217;s&amp;nbsp;fixable.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-sImC61f6sxw/Vbk7c-gxPhI/AAAAAAACqFU/28rnJSRnOuo/s1600/the-beatles-help-movie-poster_5896.jpg"&gt;&lt;/p&gt;
&lt;!--jump--&gt;

&lt;p&gt;If (like I often dow) you&amp;#8217;ve forgotten the countless different flags that go with a particularly involved Maya command, it&amp;#8217;s a pain to have to hop over to google just to remember the cryptic codes for the different options.  Consider a monster like, say, &lt;code&gt;file&lt;/code&gt;  which has somewhere north of 50(!) flags you have to keep track of.  Most aren&amp;#8217;t complicated, but apart from the most common ones you&amp;#8217;ll never remember them&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;In &lt;span class="caps"&gt;MEL&lt;/span&gt; you can&amp;nbsp;type&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    help file;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;from the command line, which prints a nicely formatted list of the whole&amp;nbsp;shebang:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Synopsis: file [flags] [String]
    Flags:
       -e -edit
       -q -query
       -a -activate                        
     -add -                                
     -amf -anyModified                     
      -ap -activeProxy                     
      -at -applyTo                          String
     -bls -buildLoadSettings               
       -c -command                          String String
      -ch -constructionHistory              on|off
     -chn -channels                         on|off
     -cmp -compress                        
     -cnl -copyNumberList                  
     -con -constraints                      on|off
      -cr -cleanReference                   String
      -de -defaultExtensions                on|off
     -dns -defaultNamespace                
      -dr -deferReference                   on|off
      -ea -exportAll                       
     -ean -exportAnim                      
     -ear -exportAnimFromReference         
     -eas -exportSelectedAnim              
      -ec -editCommand                      String
      -er -exportAsReference               
     -err -errorStatus                     
      -es -exportSelected                  
     -esa -exportSelectedAnimFromReference 
     -esn -executeScriptNodes               on|off
     -esr -exportSelectedNoReference       
     -ess -exportSelectedStrict            
     -eur -exportUnloadedReferences        
      -ex -exists                          
     -exn -expandName                      
     -exp -expressions                      on|off
     -exs -exportAsSegment                 
       -f -force                           
     -fmd -fileMetaData                    
      -fr -flushReference                   String
      -gl -groupLocator                    
      -gn -groupName                        String
      -gr -groupReference                  
       -i -import                          
     -ifr -importFrameRate                  on|off
      -ir -importReference                 
     -itr -importTimeRange                  String
      -iv -ignoreVersion                   
       -l -list                            
     -lad -loadAllDeferred                  on|off
     -lar -loadAllReferences               
     -lck -lockReference                   
     -lcu -lockContainerUnpublished         on|off
      -lf -lockFile                         on|off
     -lfo -lastFileOption                  
     -lnr -loadNoReferences                
     -loc -location                        
      -lr -loadReference                    String
     -lrd -loadReferenceDepth               String
     -lrp -loadReferencePreview             String
      -ls -loadSettings                     String
     -ltf -lastTempFile                    
      -mf -modified                         on|off
     -mnc -mergeNamespacesOnClash           on|off
     -mnp -mergeNamespaceWithParent        
     -mnr -mergeNamespaceWithRoot          
     -mns -mapPlaceHolderNamespace          String String (multi-use)
      -ms -moveSelected                    
     -new -newFile                         
      -ns -namespace                        String
       -o -open                            
      -op -options                          String
      -pm -proxyManager                     String
     -pmt -prompt                           on|off
      -pn -preserveName                    
     -pns -parentNamespace                 
     -pos -postSaveScript                   String
      -pr -preserveReferences              
     -prs -preSaveScript                    String
      -pt -proxyTag                         String
      -pu -preserveUndo                     on|off
      -pv -preview                         
       -r -reference                       
      -ra -renameAll                        on|off
     -rdi -referenceDepthInfo               UnsignedInt
     -rdn -removeDuplicateNetworks         
     -rep -replaceName                      String String (multi-use)
     -rer -resetError                      
     -rfn -referenceNode                    String (Query Arg Optional)
      -rn -rename                           String
     -rnn -returnNewNodes                  
     -rns -relativeNamespace                String
     -rpl -renamingPrefixList              
     -rpr -renamingPrefix                   String
      -rr -removeReference                 
     -rts -renameToSave                     on|off
       -s -save                            
      -sa -selectAll                       
     -sdc -saveDiskCache                    String
     -seg -segment                          String
      -sh -shader                           on|off
     -shd -sharedNodes                      String (multi-use)
     -shn -shortName                       
      -sn -sceneName                       
     -sns -swapNamespace                    String String (multi-use)
      -sr -saveReference                   
     -srf -sharedReferenceFile             
     -sru -saveReferencesUnloaded          
     -str -strict                           on|off
     -stx -saveTextures                     String
     -typ -type                             String
      -uc -uiConfiguration                  on|off
      -un -unresolvedName                  
     -uns -usingNamespaces                 
      -ur -unloadReference                  String
       -w -writable                        
     -wcn -withoutCopyNumber  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;maya.cmds&lt;/code&gt;, alas, does not support this directly.  Python&amp;#8217;s built-in &lt;code&gt;help()&lt;/code&gt; function is very handy for remembering options and syntax but it works off of docstrings, and &lt;code&gt;cmds&lt;/code&gt; does not include useful ones.  If you&amp;nbsp;try &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    help(file)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in the listener you get the supremely&amp;nbsp;useless&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Help on built-in function file in module maya.cmds:

    file(...)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I&amp;#8217;ve been annoyed by that one for years &amp;#8212; but it finally struck me today that there&amp;#8217;s an easy workaround.   A little function like this will let you hide the built-in help function in the listener so you can use the &lt;span class="caps"&gt;MEL&lt;/span&gt; help and Python &lt;code&gt;help()&lt;/code&gt; interchangeably:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.cmds&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cmds&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.mel&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;mel&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;_original_help&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;help&lt;/span&gt;


        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;maya_help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__module__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;mel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;help {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;_original_help&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;help&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;maya_help&lt;/span&gt;           
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you toss that into your &lt;code&gt;userSetup.py&lt;/code&gt; or some other code that runs at startup you should be able to type things like &lt;code&gt;help (cmds.file)&lt;/code&gt; and get the relevant info in your&amp;nbsp;listener.&lt;/p&gt;
&lt;p&gt;It only took a &lt;em&gt;decade&lt;/em&gt; of Maya Python for that one to occur to&amp;nbsp;me.  &lt;/p&gt;
&lt;p&gt;Doh.&lt;/p&gt;</content><category term="python"></category><category term="maya"></category><category term="programming"></category></entry><entry><title>State of Decay 2</title><link href="https://theodox.github.io/2018/sod2" rel="alternate"></link><published>2018-04-29T00:00:00-07:00</published><updated>2018-04-29T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2018-04-29:/2018/sod2</id><summary type="html">&lt;p&gt;After a long, long, &lt;em&gt;long&lt;/em&gt; dev cycle, &lt;a href="https://www.stateofdecay.com/"&gt;State of Decay 2&lt;/a&gt; is finally about&amp;nbsp;done.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="SOD 2 box" src="https://news.xbox.com/en-us/wp-content/uploads/thumb_610D2555B6F4417F9CDEDA14369E8419.jpg"&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s no accident that there have not been a lot of blog entries in the last several months, but hopefully life will be returning to normal soon.  I took the time to clean up my &lt;a href="/2016/new_blog"&gt;site generator&lt;/a&gt; and simplify the site theme, though I expect I&amp;#8217;ll probably waste a bunch of time fiddling around over the&amp;nbsp;summer.&lt;/p&gt;
&lt;p&gt;In any event, the game is looking good &amp;#8212; although I&amp;#8217;ve got one &lt;strong&gt;&lt;span class="caps"&gt;HUGE&lt;/span&gt;&lt;/strong&gt; bug I must squish before we go out the door! &amp;#8212; and it&amp;#8217;s been a real blast to bask in some of the reactions from people who&amp;#8217;ve seen the&amp;nbsp;game.  &lt;/p&gt;
&lt;p&gt;The last couple of years have been kind of a wild ride, professionally &amp;#8212; I certainly never thought I&amp;#8217;d spend more time staring at C++ than anything else ! &amp;#8212;  but at least, now that the dust is settling, there should be time for blogging again.  With all the crazy stuff I&amp;#8217;ve had to learn I&amp;#8217;m sure there will be lots to chew over,&amp;nbsp;too.&lt;/p&gt;
&lt;p&gt;In any event, the press embargo will lift on May 1st, and opening day will be May 22d.  In the meantime, here&amp;#8217;s a little video teaser from the company stream with a special shout out to my colleague Jeff Sult, who helped me ferret out a truly insidious bug in the Xbox shader&amp;nbsp;compiler.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/fSFqoZ3YlUI" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt; If you&amp;#8217;re wondering&amp;#8230; sometimes the Xbox decides to &amp;#8216;optimize&amp;#8217; exponent operators to use a logarithm instead of a multiply&amp;#8230; Which is very nice unless your exponent somehow goes &lt;em&gt;negative&lt;/em&gt;, in which case the result is a &lt;span class="caps"&gt;NAN&lt;/span&gt; which can really mess up your &lt;span class="caps"&gt;PBR&lt;/span&gt; G-buffers.&amp;nbsp;Sigh&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="games"></category><category term="industry"></category></entry><entry><title>mGui 2.2 release is ready</title><link href="https://theodox.github.io/2017/mGui_2_2" rel="alternate"></link><published>2017-07-25T00:00:00-07:00</published><updated>2017-07-25T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2017-07-25:/2017/mGui_2_2</id><summary type="html">&lt;p&gt;The latest next point release of &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt; &amp;#8212; the python module to &lt;a href="2016/mgui2_live"&gt;streamline maya gui creation&lt;/a&gt; &amp;#8212; is up on on Github, thanks in large part to &lt;a href="https://github.com/bob-white"&gt;+Bob White&lt;/a&gt;, who put in a lot of the work on this&amp;nbsp;release. &lt;/p&gt;
&lt;p&gt;Although this is a point release, it has some exciting&amp;nbsp;improvements:&lt;/p&gt;
</summary><content type="html">&lt;p&gt;The latest next point release of &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt; &amp;#8212; the python module to &lt;a href="2016/mgui2_live"&gt;streamline maya gui creation&lt;/a&gt; &amp;#8212; is up on on Github, thanks in large part to &lt;a href="https://github.com/bob-white"&gt;+Bob White&lt;/a&gt;, who put in a lot of the work on this&amp;nbsp;release. &lt;/p&gt;
&lt;p&gt;Although this is a point release, it has some exciting&amp;nbsp;improvements:&lt;/p&gt;


&lt;h1&gt;Improved Menu&amp;nbsp;Support&lt;/h1&gt;
&lt;p&gt;We&amp;#8217;ve added a more refined an elegant method for handling sub-menus with the &lt;code&gt;SubMenu&lt;/code&gt; class.  This works like a context manager, so the structure of the menu is obvious when reading the&amp;nbsp;code.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TestMenu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;food_menu&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

        &lt;span class="c1"&gt;# conventional menu items&lt;/span&gt;
        &lt;span class="n"&gt;hotdog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hot Dog&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;burger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Burger&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;taco&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Taco&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# a submenu&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;SubMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Pizza&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;pepperoni&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckBoxMenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Pepperoni&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;sausage&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckBoxMenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sausage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;pineapples&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CheckBoxMenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Pineapples&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pepperoni&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sausage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pineapples&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;each&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;pizza_selected&lt;/span&gt;


        &lt;span class="n"&gt;MenuDivider&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;SubMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Delivery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;RadioMenuItemCollection&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;radio&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;eatin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RadioMenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Eat In&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;takeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RadioMenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Take Out&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;delivery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RadioMenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Delivery&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We&amp;#8217;ve also enhance menus so they support the same kind of dot notation as other mGui controls.  In this example that means you could get to the &amp;#8216;sausage&amp;#8217; item&amp;nbsp;as&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;food_menu&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sausage&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is going to be both more readable and more consistent with other mGui code.  If you use the &lt;span class="caps"&gt;YAML&lt;/span&gt; menu loader, that also supports&amp;nbsp;submenus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!MMenuItem&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;key&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;check&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;label&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;checkboxes&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;annotation&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Toggle me!&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;options&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
              &lt;span class="l l-Scalar l-Scalar-Plain"&gt;checkBox&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;True&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;command&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;mGui.examples.menu_loader.checkbox&lt;/span&gt;


        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!MSubMenu&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;key&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;submenu&lt;/span&gt;
            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;label&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;submenus&lt;/span&gt;

            &lt;span class="l l-Scalar l-Scalar-Plain"&gt;items&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt;
                &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!MMenuItem&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;key&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sub1&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;label&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Item 1&lt;/span&gt;

                &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="kt"&gt;!MMenuItem&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;key&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;sub2&lt;/span&gt;
                  &lt;span class="l l-Scalar l-Scalar-Plain"&gt;label&lt;/span&gt;&lt;span class="p p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Item 2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Working with existing&amp;nbsp;items&lt;/h1&gt;
&lt;p&gt;At various points we supported three different idioms (&lt;code&gt;Menu.from_existing()&lt;/code&gt;, &lt;code&gt;gui.derive()&lt;/code&gt; and &lt;code&gt;Control.wrap()&lt;/code&gt;. for putting an mGui wrapper around existng controls.  In this release these have been collapsed into a single function, &lt;code&gt;gui.wrap()&lt;/code&gt; which has some cool new&amp;nbsp;features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#8217;s automatically recursive. So if you wrap an existing menu, the returned object will have nested properties for all of the menuItems in the menu.  If you wrap an existing layout, you&amp;#8217;ll have nested properties for all the layout&amp;#8217;s&amp;nbsp;children.&lt;/li&gt;
&lt;li&gt;It does a better job matching the underlying maya gui widgets to mGui wrapper classes than any of the previous methods.  Because of some irregularities in the way Maya relates commands to objects there are still some edge cases the new &lt;code&gt;wrap()&lt;/code&gt; should get most&amp;nbsp;cases.&lt;/li&gt;
&lt;li&gt;For maya objects with python callbacks, you can ask &lt;code&gt;wrap()&lt;/code&gt; to convert them to [multicast delegates for you. This does not support mel callbacks yet, but we may be able to expand to supporting them in the&amp;nbsp;future.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new, improved &lt;code&gt;gui.wrap()&lt;/code&gt; should make it much easier to add mGui controls or layouts to menus and windows that come from regular&amp;nbsp;Maya.  &lt;/p&gt;
&lt;p&gt;For the time being, we&amp;#8217;ve re-pointed &lt;code&gt;gui.derive()&lt;/code&gt; at &lt;code&gt;gui.wrap()&lt;/code&gt; under the hood so it won&amp;#8217;t break existing code &amp;#8212; it will however issue a deprecation warning so that when we remove &lt;code&gt;derive()&lt;/code&gt; in 2.3 people will have had plenty of&amp;nbsp;warning.&lt;/p&gt;
&lt;h1&gt;&lt;code&gt;Find()&lt;/code&gt; method for child&amp;nbsp;controls&lt;/h1&gt;
&lt;p&gt;We&amp;#8217;ve added a new method to all layouts that will collect all children of a layout by mGui type.  This is handy for big complex layouts where you aren&amp;#8217;t quite sure what something should be called &amp;#8212; or for layouts that you&amp;#8217;ve gotten from &lt;code&gt;gui.wrap()&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;&amp;amp;c.&lt;/h1&gt;
&lt;p&gt;We&amp;#8217;ve also cleaned up and expanded the &lt;a href="https://github.com/theodox/mGui/tree/master/mGui/examples"&gt;examples&lt;/a&gt;, added more test coverage, and fixed a few minor bugs (the most obvious one will be that the &lt;code&gt;StretchForm()&lt;/code&gt; classes properly respect margins, at long&amp;nbsp;last!). &lt;/p&gt;
&lt;p&gt;We&amp;#8217;re starting to put more time into the &lt;a href="https://github.com/theodox/mGui/wiki/Getting-started"&gt;project wiki&lt;/a&gt;, including some new tutorials.  Feedback and suggestions are much appreciated! And of course if you run into any problems be sure to log them on the &lt;a href="https://github.com/theodox/mGui/issues"&gt;project issues page&lt;/a&gt;.  We&amp;#8217;ve been debated whether or not we should package the project for PyPi and/or the Maya app store &amp;#8212; if you have an opinion you should chime in in the comments or on the issues&amp;nbsp;page.&lt;/p&gt;</content><category term="maya"></category><category term="mgui"></category></entry><entry><title>GDC submissions time again!</title><link href="https://theodox.github.io/2017/gdc_subs_2018" rel="alternate"></link><published>2017-07-20T00:00:00-07:00</published><updated>2017-07-20T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2017-07-20:/2017/gdc_subs_2018</id><summary type="html">&lt;p&gt;It&amp;#8217;s that time of year again: the &lt;a href="http://www.gdconf.com/conference/c4p/index.html"&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt; call for submissions&lt;/a&gt; is open. We&amp;#8217;re looking for artists, animators from tech artists of every stripe, shape, size and industry specialty to share their expertise and insights with the community.  This is a great opportunity to share knowledge and burnish up your professional credentials as&amp;nbsp;well. &lt;/p&gt;
</summary><content type="html">&lt;p&gt;It&amp;#8217;s that time of year again: the &lt;a href="http://www.gdconf.com/conference/c4p/index.html"&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt; call for submissions&lt;/a&gt; is open. We&amp;#8217;re looking for artists, animators from tech artists of every stripe, shape, size and industry specialty to share their expertise and insights with the community.  This is a great opportunity to share knowledge and burnish up your professional credentials as&amp;nbsp;well. &lt;/p&gt;


&lt;p&gt;&lt;img alt="" src="https://www.brokenjoysticks.net/wp-content/uploads/2016/01/GDC_Logo.png"&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re interested in speaking you should also check out the  &lt;a href="http://tech-artists.org/t/gdc2018-tech-art-bootcamp-call-for-submissions/8953"&gt;discussion thread on &lt;span class="caps"&gt;TAO&lt;/span&gt;&lt;/a&gt; about the tech artists&amp;#8217; bootcamp, which has become a real pillar of the show over the last few years. Not only is it a great chance for first-time speakers to break in, it&amp;#8217;s an amazing opportunity to commune with the tech-art zeitgeist&amp;#8230; and a great place to see what topics might make a good one-off talk for the general&amp;nbsp;conference!&lt;/p&gt;
&lt;p&gt;For more on why this is a Good Idea&lt;sup&gt;tm&lt;/sup&gt;, check out &lt;a href="/pages/pub/submit"&gt;my perennial post on the same topic&lt;/a&gt;.   This year the call for subs closes on August 17, which is a bit earlier than last year. Don&amp;#8217;t&amp;nbsp;dawdle!&lt;/p&gt;</content><category term="industry"></category><category term="gdc"></category></entry><entry><title>Cookbook’s back!</title><link href="https://theodox.github.io/2017/cookbook-back" rel="alternate"></link><published>2017-06-25T00:00:00-07:00</published><updated>2017-06-25T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2017-06-25:/2017/cookbook-back</id><summary type="html">&lt;p&gt;The Character Rigger&amp;#8217;s Cookbook is back&amp;nbsp;online.&lt;/p&gt;</summary><content type="html">&lt;p&gt;A couple of months ago, Dropbox stopped serving image requests and the slides from the &lt;em&gt;Character Rigger&amp;#8217;s Cookbok&lt;/em&gt; went&amp;nbsp;offline.  &lt;/p&gt;
&lt;p&gt;While scrambling around trying to figure out how to resurrect them, I discovered an old copy of the audio from the original talk. This allowed me to put together a YouTube of the whole thing (minus some of the animated examples, alas, which have long since&amp;nbsp;disappeared).  &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/RlgLSq-GsVg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I wish I had a proper presentation video so you could see my gyrations and gesticulations as I tried to illustrate things &amp;#8212; but, remembering how much hopping and posing I did for that talk, perhaps it&amp;#8217;s for the best.  The video + audio format here, even without accompanying animations, is way better than the bare slides were.  See, every cloud has a silver lining.  Phhhhttt,&amp;nbsp;Dropbox!&lt;/p&gt;
&lt;p&gt;If you want to permalink to the video you can use &lt;a href="https://youtu.be/RlgLSq-GsVg"&gt;this YouTube link&lt;/a&gt; or link directly to the &lt;a href="pages/cookbook"&gt;Cookbook page&lt;/a&gt; on my nav&amp;nbsp;bar.&lt;/p&gt;</content><category term="rigging"></category><category term="gdc"></category><category term="talks"></category><category term="animation"></category></entry><entry><title>How the other half lives, revisited</title><link href="https://theodox.github.io/2017/transcrypt.md" rel="alternate"></link><published>2017-06-22T00:00:00-07:00</published><updated>2017-06-22T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2017-06-22:/2017/transcrypt.md</id><summary type="html">&lt;p&gt;An interesting way to get python into the&amp;nbsp;browser&lt;/p&gt;</summary><content type="html">&lt;p&gt;Way back in 2013, when I was first getting this blog rolling, I spent some time investigating &lt;a href="/2013/Python_in_browsers"&gt;different ways to get Python into the browser&lt;/a&gt;. In the intervening several years, Javascript has continued to spread its dark cloud of despair over the web like a digital Mount Doom, spewing depression and silent type conversions to every corner of Middle&amp;nbsp;Earth. &lt;/p&gt;
&lt;p&gt;The much-hyped prospect of &lt;a href="http://webassembly.org/"&gt;WebAssembly&lt;/a&gt; hasn&amp;#8217;t really panned out yet. There has been progress, and someday we&amp;#8217;ll probably get to the point where Python and other languages can be &amp;#8216;compiled&amp;#8217; directly to WebAssembly &amp;#8212; but right now the tools and processes for doing it are pretty clunky and the performance of Python intepreters running in the browser remains unimpressive. The most successful project in this space &amp;#8212; &lt;a href="http://pypyjs.org/"&gt;Pypy.js&lt;/a&gt; works pretty well. But, because it&amp;#8217;s a port of the whole CPython interpreter, it&amp;#8217;s a huge download: on my fast connection it takes 11 seconds to load and boot the Pypy.js interpreter for the first time. Pypy.js is a hopeful sign, since it&amp;#8217;s extremely compatable and, startup times excepted, not too slow to run. However it&amp;#8217;s going to be a while yet before somebody figures out how to cut down the huge cost of importing a whole python ecosystem into a&amp;nbsp;browser. &lt;/p&gt;
&lt;p&gt;A different approach approach which has prospered in the last few years is the creation of dialects of Javascript which work around some of the language&amp;#8217;s quirks and syntax. Effectively, you write in some &lt;em&gt;other&lt;/em&gt; language and then compile (or more precisely, &amp;#8220;transpile&amp;#8221;) it into Javascript. This approach has two obvious benefits. First off, you get the universality of Javascript &amp;#8212; once your code is transpiled, it&amp;#8217;s just another bit of &lt;span class="caps"&gt;JS&lt;/span&gt; so it will work in all sorts of browsers without extra help. Secondly, it&amp;#8217;s automatically interoperable with all the Javascript libraries out there, so you can tap into web ecosystem right off the&amp;nbsp;bat. &lt;/p&gt;
&lt;p&gt;One of the first examples of this approach &lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt;, which looks and acts a lot like Ruby but gets turned into vanilla Javascript when compiled. I did a couple of hobby projects with a more Python-ish transpiler called &lt;a href="http://www.rapydscript.com/"&gt;RapydScript&lt;/a&gt;, which bills itself modestly as &amp;#8220;Pythonic Javascript that doesn&amp;#8217;t suck&amp;#8221;. For a lot of common cases Rapydscript really looks and acts like Python. However if you&amp;#8217;re a moderately advanced Python programmer the two languages start to show increasing differences; the maintainer of RapydScript wants to optimize for raw Javascript performance, which means that many language constructs don&amp;#8217;t work quite the same way; the project&amp;#8217;s &lt;a href="https://github.com/atsepkov/RapydScript#quirks"&gt;list of &amp;#8220;quirks&amp;#8221;&lt;/a&gt; ended up being a little long for my&amp;nbsp;taste. &lt;/p&gt;
&lt;h1&gt;Transcrypt&lt;/h1&gt;
&lt;p&gt;&lt;img alt="transcrypt" src="http://transcrypt.org/illustrations/merchandise.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can tell it&amp;#8217;s a real project because it&amp;#8217;s got&amp;nbsp;merch!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The most recent entry in the transpiler field is &lt;a href="http://www.transcrypt.org/"&gt;Transcrypt&lt;/a&gt;. Like other transpilers it allows you to write &amp;#8220;almost Python&amp;#8221; (in this case, &amp;#8220;almost Python 3.6&amp;#8221;) and compile it to Javascript. For me, at any rate, it has a couple of interesting advantages to other entries in this&amp;nbsp;space:&lt;/p&gt;
&lt;h4&gt;Source&amp;nbsp;maps&lt;/h4&gt;
&lt;p&gt;The most irritating part of using a transpiler is debugging. By definition, there&amp;#8217;s not a 1:1 match between the code you wrote and the code that&amp;#8217;s being run, which usually makes it tricky to understand how things have gone&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;Transcrypt makes this far less painful by generating &lt;a href="https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps"&gt;good source maps&lt;/a&gt;, which provide a map between the compiled code and the source. This feature was created to support &amp;#8216;minified&amp;#8217; &lt;span class="caps"&gt;JS&lt;/span&gt; (where all the whitespace is removed to allow for quicker downloads), but Transcrypt hijacks it so that runtime problems in the &lt;span class="caps"&gt;JS&lt;/span&gt; version point to the python source when debugging. In Chrome, at least, I can even get live preview of the values at a&amp;nbsp;breakpoint:&lt;/p&gt;
&lt;p&gt;&lt;img alt="debug image" src="/images/transcrypt_debug.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Debugging &lt;a href="https://github.com/theodox/pysteroids"&gt;Pysteroids.py&lt;/a&gt; in Transcrypt and&amp;nbsp;Chrome.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For me this is Transcrypt&amp;#8217;s killer advantage over alternate transpilers: it means I can &lt;em&gt;debug&lt;/em&gt; as well as code in&amp;nbsp;Python. &lt;/p&gt;
&lt;p&gt;Occasionally the problems are in code that doesn&amp;#8217;t map easily to mine, in which case I&amp;#8217;ll see the Javascript debug code instead. Transcrypt&amp;#8217;s &lt;span class="caps"&gt;JS&lt;/span&gt; is generally clean and readable, although (being Javascript) it still involves spooky scope magic that my brain refuses to process properly. It&amp;#8217;s true that things get funky when you start descending into code from Javascript libraries &amp;#8212; in the shot above, for example, all of the graphics are rendered &lt;a href="http://threejs.org"&gt;three.js&lt;/a&gt; &amp;#8212; so one occasionally gets shunted into unreadable minified library code. Still, so far I&amp;#8217;ve found Transcrypt&amp;#8217;s source mapping combined with the Chrome debugger is a pretty good productivity environment; it&amp;#8217;s at certainly more sophisticated than dumping print statements into the Maya&amp;nbsp;listener!&lt;/p&gt;
&lt;h4&gt;Fine-grained&amp;nbsp;control&lt;/h4&gt;
&lt;p&gt;There&amp;#8217;s a built-in tension in all transpiled projects. A lot of core language features in Python have only approximate counterparts in Javascript; basic data types like lists (= &lt;span class="caps"&gt;JS&lt;/span&gt; &lt;code&gt;Array&lt;/code&gt;) and dicts (= &lt;span class="caps"&gt;JS&lt;/span&gt; &lt;code&gt;Object&lt;/code&gt;) have related but still distinct behaviors. This forces the transpiler designer to choose between re-implementing the Python behavior in a custom &lt;span class="caps"&gt;JS&lt;/span&gt; object &amp;#8212; which is going to be slower than using the native &lt;span class="caps"&gt;JS&lt;/span&gt; types &amp;#8212; and creating false-friend code which confounds the user&amp;#8217;s expectations when run in the browser. Rapydscript basically followed the designer&amp;#8217;s intuitions as to which behaviors to keep and which to branch, so perhaps it&amp;#8217;s not surprising that this has led to a rival &lt;a href="https://github.com/kovidgoyal/rapydscript-ng"&gt;fork of the project&lt;/a&gt; from a developer who disagreed with some of those choices. All translation involves compromises: as they used to say &lt;a href="https://www.altalang.com/beyond-words/2008/10/09/traduttore-traditore/"&gt;&amp;#8220;traddutore tradditore&amp;#8221;&lt;/a&gt;, &amp;#8220;a translator is a&amp;nbsp;traitor.&amp;#8221;&lt;/p&gt;
&lt;p&gt;Transcrypt tries to resolve this tension by allowing more local control over the compilation strateg. You can opt in to the more expensive or intrusive features using compiler directives. This moves more of the burden onto you, but it at least allows the choices to be made tactically rather than making you work in a predetermined&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;So, for example, an ordinary Transcrypt function does not accept the &lt;code&gt;**kwards&lt;/code&gt; syntax. However you can enable it in functions where it&amp;#8217;s appropriate like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;vanilla_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*args are supported automatically&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;__pragma__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;kwargs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;kwargs_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;kwargs have to be enabled manually&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;__pragma__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nokwargs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I could be happier about the aesthetics of all those &lt;code&gt;__pragma__&lt;/code&gt; statements lying around but at least they are explicit. One quirk I did find a bit tough is that it&amp;#8217;s not always clear where the &lt;code&gt;__pragma__&lt;/code&gt; really wants to reside: so, for example, I wrote a litte coroutine generator that needed to use &lt;a href="https://stackoverflow.com/questions/19302530/python-generator-send-function-purpose"&gt;the &lt;code&gt;send()&lt;/code&gt; feature of generators&lt;/a&gt;. In Transcrypt, that is only enabled with a pragma, but it took me a couple of hourse of confusion before I realized the pragma had to be present where I called &lt;code&gt;send()&lt;/code&gt;, not when I created the&amp;nbsp;generator.&lt;/p&gt;
&lt;p&gt;Nevertheless, I do like the idea of having opt-in control over the more expensive or complex features of Python. Not only does it let the user make personal tradeoffs between Pythonicism and performance, it also helps to teach you where the real differences betwee pure Python and Transcrybed Python&amp;nbsp;lie.&lt;/p&gt;
&lt;h4&gt;Pythonic&amp;nbsp;feel&lt;/h4&gt;
&lt;p&gt;This aspect is subjective, but in general I&amp;#8217;d say Transcrypt feels more &amp;#8220;pythonic&amp;#8221; than Rapydscript. The compiler is actually written in Python and uses the native Python &lt;span class="caps"&gt;AST&lt;/span&gt; module, so it does not have to reinvent the semantics of the Python side of the language. It&amp;#8217;s got most of the things that make Python a high-productivity environment &amp;#8212; classes, list comprehensions, decorators, even metaclasses. I&amp;#8217;ve run into a few gaps in the toolkit &amp;#8212; for example, at present a metaclass can&amp;#8217;t create an instancemethod for you &amp;#8212; but I&amp;#8217;d say that at least 9 out of every ten things I try using my Python instincts work as&amp;nbsp;expected.&lt;/p&gt;
&lt;h1&gt;Gotchas&lt;/h1&gt;
&lt;p&gt;Of course, there is still a residue of gotchas. Javascript is a language (and one with many notorious quirks of its own) and not a neutral platform. So, Transcrypt inherits some of Javascript&amp;#8217;s less&amp;#8230; useful&amp;#8230; behaviors in ways that can trip you up. The nastiest one is &lt;span class="caps"&gt;JS&lt;/span&gt;&amp;#8217;s habit of silently changing types for you. I never really got the point of those forum trolls who insist &amp;#8220;Python is a &lt;em&gt;strongly typed&lt;/em&gt; language&amp;#8221; until I started getting bugs that came from this behavior. Sure, you don&amp;#8217;t need all the scaffolding of C# or C++ variable declarations in Python, but a number is still a number and a string is still a string. In &lt;span class="caps"&gt;JS&lt;/span&gt;, well&amp;#8230; maybe not. In&amp;nbsp;Python&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;X&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will raise an&amp;nbsp;error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;unsupported&lt;/span&gt; &lt;span class="n"&gt;operand&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;int&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;str&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but in Javascript &amp;#8212; and in Transcrypt &amp;#8212; it just prints &amp;#8220;1X&amp;#8221;. This leads to an awful lot of deferred bugs, where code just continues skipping merrily along long after it should have crashed because you passed in the wrong kind of variable. Transcrypt actually supports the new Python type annotations, and it provides a linter that will help you spot possible type errors at compile time. That&amp;#8217;s helpful but it&amp;#8217;s still not what my Python radar is scanning&amp;nbsp;for. &lt;/p&gt;
&lt;p&gt;There are also parts of Python that haven&amp;#8217;t been ported. The two that I&amp;#8217;ve been bummed out by are &lt;a href="http://book.pythontips.com/en/latest/context_managers.html"&gt;context managers&lt;/a&gt; and &lt;a href="https://www.smallsurething.com/python-descriptors-made-simple/"&gt;descriptors&lt;/a&gt;, both of which I miss. I&amp;#8217;ve bumped into the limits of the port once or twice as well &amp;#8212; for example the Transcrypt &lt;code&gt;zip()&lt;/code&gt; works as expected for static lists but doesn&amp;#8217;t work with iterators or generators. On the plus side Transcrypt is open source so it&amp;#8217;s not unlikely that some of these gaps will get filled. However it&amp;#8217;s important to recognize that Transcrypt isn&amp;#8217;t intended to be a complete Python: the project&amp;#8217;s goal to combine high &amp;#8212; but not complete &amp;#8212; compatibility with speed and simplicity. Completists will probably find it frustrating, but pragmatists will probably enjoy what it can already&amp;nbsp;do. &lt;/p&gt;
&lt;h2&gt;Report&amp;nbsp;Card&lt;/h2&gt;
&lt;p&gt;Despite the missing pieces, I like Transcrypt pretty well so far. It&amp;#8217;s not a complete web-ready Python, but it&amp;#8217;s a lot more fun and productive for me than writing &lt;span class="caps"&gt;JS&lt;/span&gt;. It only took a few nights to bang out a version of Asteroids with Transcrypt and &lt;a href="https://threejs.org/"&gt;three.&lt;span class="caps"&gt;JS&lt;/span&gt;&lt;/a&gt; which runs pretty smoothly on my phone with 3d graphics and audio.  You can play it &lt;a href="/extra/pysteroids.html"&gt;here&lt;/a&gt;.  You&amp;#8217;ll note that I didn&amp;#8217;t push it too far &amp;#8212; you&amp;#8217;ll need to reload the page after you clear the level or die three times.  My high score so far is 9583, if you&amp;#8217;re feeling competitive.  I did, however, include the source maps along with the minified, transcrypted Javascript &amp;#8212; in Chrome, you can see the original Python by &lt;a href="https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps"&gt;opening developer tools and looking at sources&lt;/a&gt;. The &lt;a href="https://github.com/theodox/pysteroids"&gt;code is also up on Github&lt;/a&gt;, although it&amp;#8217;s not the most interesting part of the process: getting a working Python game into browser is the cool part&amp;nbsp;here.&lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t think I&amp;#8217;d be substantially more worried about tackling a bigger project in Transcrypt than I would be to do it in &lt;span class="caps"&gt;JS&lt;/span&gt;, though that probably says more about my lack of &lt;span class="caps"&gt;JS&lt;/span&gt;-fu than anything else. On the whole, it&amp;#8217;s a fun and useful piece of kit. Although the missing bits and pieces are irritating, I&amp;#8217;m not altogether sure they&amp;#8217;re actually more irritating than the hassle of creating a working virtualenv with pyglet or pygame would be. And &amp;#8212; unlike pyglet or pygame &amp;#8212; once I&amp;#8217;ve got my project compiled I can get it into lots of people&amp;#8217;s hands by simply popping it onto a web server without any of the usual indignities of Python&amp;nbsp;distribution. &lt;/p&gt;
&lt;p&gt;So&amp;#8230; it&amp;#8217;s not quite web-python Nirvana but it&amp;#8217;s pretty damn&amp;nbsp;cool. &lt;/p&gt;</content><category term="python"></category><category term="web"></category></entry><entry><title>Slides slippin’</title><link href="https://theodox.github.io/2017/slides_slippin" rel="alternate"></link><published>2017-04-23T00:00:00-07:00</published><updated>2017-04-23T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2017-04-23:/2017/slides_slippin</id><summary type="html">&lt;p&gt;Some issues with the &lt;a href="pages/cookbook"&gt;Character Riggers&amp;#8217;&amp;nbsp;Cookbook&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A quick heads up: Dropbox, where I&amp;#8217;d been hosting the images for the &lt;em&gt;&lt;a href="pages/cookbook"&gt;Character Riggers&amp;#8217; Cookbook&lt;/a&gt;&lt;/em&gt; slides, no longer serves images to &lt;span class="caps"&gt;HMTL&lt;/span&gt; requests &amp;#8212; so the slide images don&amp;#8217;t show anymore.  I found an online version of an earlier incarnation of the talk (an &lt;em&gt;Angelfire&lt;/em&gt; page, if you can believe it!) and am pointing the cookbook link at that for the time being. I&amp;#8217;ll get the better looking version of the slides rebuilt &lt;span class="caps"&gt;ASAP&lt;/span&gt;.  &lt;/p&gt;
&lt;p&gt;If you really need a copy of the presentation I can send the images in a zip &amp;#8212; contact me via the comments.  Sorry for the&amp;nbsp;disruption.&lt;/p&gt;</content><category term="gdc"></category><category term="rigging"></category></entry><entry><title>Tech-Artists Org 2.0</title><link href="https://theodox.github.io/2017/techart_2_0" rel="alternate"></link><published>2017-03-29T00:00:00-07:00</published><updated>2017-03-29T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2017-03-29:/2017/techart_2_0</id><summary type="html">&lt;p&gt;Tech-Artists.Org got a&amp;nbsp;facelift!&lt;/p&gt;</summary><content type="html">&lt;p&gt;After several months of behind the scenes work, &lt;a href="http://tech-artists.org/" target="_blank"&gt;Tech-artists.org&lt;/a&gt; has a new&amp;nbsp;face. &lt;/p&gt;
&lt;p&gt;&lt;img alt="tao2" src="/images/tao2.png"&gt;&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve moved the site to a cloud-hosted &lt;a href="http://www.discourse.org/"&gt;Discourse&lt;/a&gt; server, replacing our wonky old VBulletin forums with a swanky, mobile-friendly front end.  It&amp;#8217;s a &lt;em&gt;much&lt;/em&gt; more pleasant reading and writing experience, and it uses the same Markdown syntax as &lt;a href="/2016/new_blog"&gt;this blog&lt;/a&gt; and GitHub, which makes adding code examples approximately 17 million times easier than the old VBulletin&amp;nbsp;way. &lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re already a registered user you should check it out. New users are more than welcome (and we&amp;#8217;ve added easy sign-in with either Google or Github&amp;nbsp;credentials).&lt;/p&gt;
&lt;p&gt;This is a great time to get involved the tech-art community as we clean up and modernize the site.  Hope to see you there. And, if you&amp;#8217;ve missed out on it, don&amp;#8217;t forget to join the chatter in the &lt;a href="https://tech-artists.slack.com/"&gt;Tech-artists slack channel&lt;/a&gt;&amp;nbsp;too!&lt;/p&gt;
&lt;p&gt;Hat tip to &lt;a href="https://plus.google.com/u/0/+RobertButterworth"&gt;+Rob Butterworth&lt;/a&gt; and &lt;a href="https://plus.google.com/u/0/116461271591099938175"&gt;+Jeff Hanna&lt;/a&gt; for helping put this all together &amp;#8212; and of course to &lt;a href="https://plus.google.com/u/0/+RobGalanakis"&gt;+Rob Galanakis&lt;/a&gt; who got the whole ball rolling in the first&amp;nbsp;place.&lt;/p&gt;</content><category term="community"></category><category term="web"></category><category term="techart"></category></entry><entry><title>Two Minute Papers</title><link href="https://theodox.github.io/2017/two_minute_papers" rel="alternate"></link><published>2017-02-01T00:00:00-08:00</published><updated>2017-02-01T00:00:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2017-02-01:/2017/two_minute_papers</id><summary type="html">&lt;p&gt;A great, condensed source for cool graphics&amp;nbsp;research&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s been a while since in updated the &lt;a href="/pages/research"&gt;graphics research&lt;/a&gt; page &amp;#8212; and, given that ominous &lt;em&gt;Coming 2017&lt;/em&gt; in the &lt;em&gt;State of Decay 2&lt;/em&gt; E3 trailer it may be a while before I get to frolic in the fields of pure science once&amp;nbsp;more.  &lt;/p&gt;
&lt;p&gt;However, I&amp;#8217;ve stumbled on a great stand-in for slogging through those &lt;span class="caps"&gt;SIGGRAPH&lt;/span&gt; abstracts: a cool YouTube channel called &lt;a href="https://www.youtube.com/user/keeroyz/videos"&gt;Two Minute Papers&lt;/a&gt;, which aims to provide a fast, not-too-math heavy intro to a lot of interesting research in graphics and&amp;nbsp;animation.  &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_ZLXKt4L-AA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;It&amp;#8217;s a great fast way to get an insight into what&amp;#8217;s going on in the academic realm without too much investment (and without having to slog through the inevitable &lt;span class="caps"&gt;SIGGRAPH&lt;/span&gt; calculus lesson). There are occasional non-graphics papers in there (like &amp;#8220;What is Impostor Syndrome?&amp;#8221;) which seem like fluff, and a bit too much &amp;#8220;yay Neural Networks!&amp;#8221; cheerleading &amp;#8212; but on the whole this is a great way to find out some cool academic research you would never dig up on your own.  There are supposed to be two new videos per&amp;nbsp;week.&lt;/p&gt;
&lt;p&gt;By the way, the &lt;a href="https://twitter.com/karoly_zsolnai"&gt;creator of the videos&lt;/a&gt; has a &lt;a href="https://www.patreon.com/TwoMinutePapers"&gt;Patreon&lt;/a&gt;. If you like the stuff, think aboout hitting the tip&amp;nbsp;jar!&lt;/p&gt;</content><category term="graphics"></category><category term="research"></category></entry><entry><title>mGui Maintenance</title><link href="https://theodox.github.io/2017/mGui_maintenance" rel="alternate"></link><published>2017-01-14T00:00:00-08:00</published><updated>2017-01-14T00:00:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2017-01-14:/2017/mGui_maintenance</id><summary type="html">&lt;p&gt;With special thanks to Bob White, Eric Spevacek, Logan Bender and Kartik Hariharan I&amp;#8217;d like to announce the 2.1 point release of &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;This is mostly a stabilization release for the &lt;a href="/2016/mgui2_live"&gt;big 2.0 update we pushed in October&lt;/a&gt;. &lt;/p&gt;
</summary><content type="html">&lt;p&gt;With special thanks to Bob White, Eric Spevacek, Logan Bender and Kartik Hariharan I&amp;#8217;d like to announce the 2.1 point release of &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;This is mostly a stabilization release for the &lt;a href="/2016/mgui2_live"&gt;big 2.0 update we pushed in October&lt;/a&gt;. &lt;/p&gt;


&lt;h2&gt;New&amp;nbsp;Feature&lt;/h2&gt;
&lt;p&gt;The main new feature in this release is the addition of &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/treeView.py"&gt;&lt;code&gt;mGui.treeView&lt;/code&gt;&lt;/a&gt;, a module for wrapping Maya&amp;#8217;s &lt;code&gt;treeView&lt;/code&gt; widget.  I&amp;#8217;ve never been a fan of the maya treeView, which seems like it comes from another planet than the rest of the Maya widget set; it&amp;#8217;s so different that it needed a whole module of it&amp;#8217;s own to make it&amp;nbsp;workable. &lt;/p&gt;
&lt;p&gt;The new &lt;code&gt;MTreeView()&lt;/code&gt; class wraps the existing mGui &lt;code&gt;TreeView&lt;/code&gt;, but provides a more idiomatic way to get at the TreeView&amp;#8217;s button commands.  You can now use the same style you use for other mGui&amp;nbsp;buttons:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGui.treeView&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MTreeView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGui.gui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGui.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;FillForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MTreeView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numberOfButtons&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_items&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;btn_a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tree_view&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectItem&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;items&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;button_index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;btn_b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;selected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tree_view&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectItem&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;items&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;selected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;button_index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;button 2 was pressed&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;double_click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;double click&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt;

&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pressed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;btn_a&lt;/span&gt;
&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;buttons&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pressed&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;btn_b&lt;/span&gt;
&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;itemDblClickCommand&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;double_click&lt;/span&gt;

&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;buttons&lt;/code&gt; field looks like an array, and you can (as you see in the sample) use the standard mGui &lt;code&gt;+=&lt;/code&gt; syntax to add a handler to the buttons as defined by the TreeViews &lt;code&gt;numberOfButtons&lt;/code&gt; parameter.  &lt;/p&gt;
&lt;h2&gt;Updated&amp;nbsp;examples&lt;/h2&gt;
&lt;p&gt;The example code has been cleaned up a tad &amp;#8212; some of this is just part of the conversion to the new keyless idiom and some of this is just graphic&amp;nbsp;polish. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://dl.dropboxusercontent.com/u/2977490/bound_collection"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A better-looking version of the boundCollection&amp;nbsp;sample&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In particular &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/examples/formExamples.py"&gt;&lt;code&gt;mGui.examples.formExamples.py&lt;/code&gt;&lt;/a&gt;, which shows the various options for FormLayouts in mGui, got a bit of cleanup to make it more understandable.  &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/examples/boundCollection.py"&gt;&lt;code&gt;mgui.examples.boundCollection.py&lt;/code&gt;&lt;/a&gt; got some much-needed&amp;nbsp;cleanup.&lt;/p&gt;
&lt;h2&gt;Bug&amp;nbsp;fixes&lt;/h2&gt;
&lt;h3&gt;Better handling of&amp;nbsp;LayoutDialogs&lt;/h3&gt;
&lt;p&gt;We discovered an odd condition where Maya would sometimes refuse to fire off the event handlers attached to an mGui widget when the widget was called through maya&amp;#8217;s &lt;code&gt;layoutDialog&lt;/code&gt; command.  It seems like Maya didn&amp;#8217;t like the potentially aynchronous &lt;code&gt;MayaEvent&lt;/code&gt; handlers inside of &lt;code&gt;layoutDialog&lt;/code&gt;, so we added a little bit of tracking to make sure that only synchronous &lt;code&gt;Event&lt;/code&gt; handlers get attached in that special case. I&amp;#8217;d been working around that by manually re-assigning Event objects to the handlers &amp;#8212; but that&amp;#8217;s a silly thing to ask users to remember, so now it&amp;#8217;s all transparently handled under the&amp;nbsp;hood.&lt;/p&gt;
&lt;h3&gt;HorizontalExpandForm&lt;/h3&gt;
&lt;p&gt;We found and fixed an issue with the &lt;code&gt;HorizontalExpandForm()&lt;/code&gt;, which had somehow stopped&amp;nbsp;expanding.&lt;/p&gt;
&lt;h3&gt;List.inner_list&lt;/h3&gt;
&lt;p&gt;Fixed a condition where sometimes &lt;code&gt;List()&lt;/code&gt; controls didn&amp;#8217;t correctly report their the &amp;#8216;inner_list&amp;#8217; property which actually contained their visible contents.  In general you don&amp;#8217;t want to mess with the &lt;code&gt;inner_list&lt;/code&gt; property in any case, but it should be available for inspection when absolutely necessary&amp;nbsp;now.&lt;/p&gt;
&lt;h2&gt;Till next&amp;nbsp;time&amp;#8230;&lt;/h2&gt;
&lt;p&gt;This was a fun release, since it had a lot more contributions from new faces. It&amp;#8217;s nice to see people running with the code and it&amp;#8217;s gratifying that it is holding up &lt;span class="caps"&gt;OK&lt;/span&gt; so&amp;nbsp;far. &lt;/p&gt;
&lt;p&gt;It&amp;#8217;s a &lt;a href="http://www.xbox.com/en-US/games/state-of-decay-2"&gt;ship year&lt;/a&gt;, so I expect that both the blogging and hacking will be a bit&amp;#8230; light&amp;#8230; for a while.  But don&amp;#8217;t hesitate to chime in with questions, comments or, better yet, bug fix pull&amp;nbsp;requests!  &lt;/p&gt;</content><category term="python"></category><category term="mGui"></category><category term="maya"></category><category term="gui"></category></entry><entry><title>Happy Thanksgiving!</title><link href="https://theodox.github.io/2016/python_jerky" rel="alternate"></link><published>2016-11-25T00:00:00-08:00</published><updated>2016-11-25T00:00:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-11-25:/2016/python_jerky</id><summary type="html">&lt;p&gt;Happy&amp;nbsp;Thanksgiving!&lt;/p&gt;</summary><content type="html">&lt;p&gt;You know what I&amp;#8217;m thankful&amp;nbsp;for?&lt;/p&gt;
&lt;p&gt;&lt;img alt="python jerky" src="/images/PythonJerky.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Every minute I&amp;#8217;m not writing&amp;nbsp;C++.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt; If you&amp;#8217;re puzzled what to get for your &lt;span class="caps"&gt;TA&lt;/span&gt; Secret Santa gift, you can order it &lt;a href="http://www.newportjerkycompany.com/python-jerky/"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Moar Minq!</title><link href="https://theodox.github.io/2016/minq_fixes" rel="alternate"></link><published>2016-10-16T00:00:00-07:00</published><updated>2016-10-16T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-10-16:/2016/minq_fixes</id><summary type="html">&lt;p&gt;Some updates and improvements for &lt;a href="https://github.com/theodox/minq/blob/master/readme.MD"&gt;minq&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;After the recent updates to &lt;a href="/2016/mgui2_live"&gt;mGui&lt;/a&gt;, I&amp;#8217;ve just pushed a few changes to &lt;a href="https://github.com/theodox/minq/blob/master/readme.MD"&gt;minq&lt;/a&gt;.  After a couple of months away I solved a couple of nagging issues with that had me stumped&amp;nbsp;earlier.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Oh man, after a month of C++ it feels so nice to do somey Python, even if it&amp;#8217;s just playing&amp;nbsp;hooky&amp;#8230;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Fabulous Fancy&amp;nbsp;Filters&lt;/h1&gt;
&lt;p&gt;The big change is to the way you do attribute filters.  In the first release, you had to choose between a nice clean way of writing an attribute filter and a limited set of features.  The &lt;code&gt;where()&lt;/code&gt; operator on a query let you pass in a filter function , so you could &amp;#8212; for example &amp;#8212; find all the transforms above the zero line like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;upper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.ty&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Under the hood that would look more or less&amp;nbsp;like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_node&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.ty&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;each_node&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which works fine. However for a big list it involves a potentially large number of independent &lt;code&gt;getAttr&lt;/code&gt; calls, which aren&amp;#8217;t too fast.  So we also added the option to format a special bulk query that would issue the same &lt;code&gt;getAttr&lt;/code&gt; on all of the items in your query at once, for a big speed boost. Those accelerated queries looked like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;upper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ty&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This exploits an interesting behavior in Maya: if you select a whole bunch of items at once and do a &lt;code&gt;getAttr&lt;/code&gt; from the listener you&amp;#8217;ll get a whole list of answers, not just one &amp;#8212; and the cost of the query is correspondingly lower.  Unfortunately, it doesn&amp;#8217;t work for &lt;em&gt;custom&lt;/em&gt; attributes: it only works for Maya&amp;#8217;s built-in&amp;nbsp;attributes.&lt;/p&gt;
&lt;p&gt;So in the old version of minq you had to choose between a clean, fast bulk query or a wordy, slower but more flexible version using a lambda.  To de-couple the style from the speed, I&amp;#8217;ve added two new variants on the query syntax:  &lt;code&gt;native&lt;/code&gt; will generate a fast bulk attribute query for built-in attributes, and &lt;code&gt;custom&lt;/code&gt; uses the same syntax but uses the slower-but-flexible approach instead.&amp;nbsp;Thus&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;upper&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ty&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# a fast bulk query&lt;/span&gt;
    &lt;span class="n"&gt;customized&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Shapes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;custom&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# a slower general query&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There&amp;#8217;s also an option for tweaking the custom queries so they will or will not raise exceptions if the custom attribute isn&amp;#8217;t found.  The default behavior for missing attributes is simply not to pass the filter, but in some situations you may want to know for sure if your stream has items that are missing the attributes you&amp;nbsp;expect.&lt;/p&gt;
&lt;h1&gt;Proud, Pleasing&amp;nbsp;Positions&lt;/h1&gt;
&lt;p&gt;Another longstanding gripe that is partially cleaned up in this pass is bulk queries for object positions.  It&amp;#8217;s always been easy to get &lt;em&gt;local&lt;/em&gt; positions with a simple query&amp;nbsp;like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;Selected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AttribValues&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;translate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However there was no easy way to get &lt;em&gt;world&lt;/em&gt; positions. This release adds the &lt;code&gt;WorldPositions&lt;/code&gt; and &lt;code&gt;LocalPositions&lt;/code&gt; classes which will return the&amp;nbsp;positions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;camera_positions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cameras&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WorldPositions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Under the hood these are extracted from the &lt;code&gt;matrix&lt;/code&gt; and &lt;code&gt;worldMatrix&lt;/code&gt; attributes so they work as speedy bulk queries.  The main limitation is that the results will always come back in native Maya units (ie, in centimeters) so you may need to transform them if you&amp;#8217;re working in another unit.  Should you need to do that, here&amp;#8217;s a handy hack using &lt;code&gt;api.OpenMaya.MVector&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;in_meters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;MVector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="n"&gt;Selected&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WorldPositions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;in_meters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Along with &lt;code&gt;LocalPositions&lt;/code&gt; and &lt;code&gt;WorldPositions&lt;/code&gt;, access to the matrices also made it easy to add a &lt;code&gt;LocalAxis&lt;/code&gt; query. This will return the local X, Y or Z axis of a transform in either world or local&amp;nbsp;space:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;forwards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Meshes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LocalAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;By default the axis vectors will be returned in world space, but you can get local space&amp;nbsp;instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;lcl_forwards&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Meshes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LocalAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These vectors are extracted directly from the matrices, so you may need to renormalize them depending on what you want them&amp;nbsp;for. &lt;/p&gt;
&lt;h1&gt;Dauntless&amp;nbsp;Documentation&lt;/h1&gt;
&lt;p&gt;While we&amp;#8217;re on the subject, I&amp;#8217;ve cleaned up the &lt;a href="https://github.com/theodox/minq/wiki"&gt;minq wiki&lt;/a&gt;.  After a long month of slogging through the Unreal Engine codebase in search of what-the-heck-is-going-on-here?, I&amp;#8217;ve tried to atone for my past sins in terms of under-documenting.  Please give me a shout out or update the wiki yourself if you see something wrong or unclear on the&amp;nbsp;docs!&lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="minq"></category></entry><entry><title>mGui 2.0 is live</title><link href="https://theodox.github.io/2016/mgui2_live" rel="alternate"></link><published>2016-10-09T00:00:00-07:00</published><updated>2016-10-09T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-10-09:/2016/mgui2_live</id><summary type="html">&lt;p&gt;&lt;a href="https://github.com/theodox/mGui"&gt;mGui 2&lt;/a&gt; is&amp;nbsp;live&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s been a &lt;em&gt;craaazy&lt;/em&gt; summer at work, so I had to defer integrating a bunch of &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt; changes that have been sitting on a branch in the GitHub repo for several months.  However things have settled down a bit, and it&amp;#8217;s time to get this&amp;nbsp;done.&lt;/p&gt;
&lt;p&gt;&lt;img alt="all your rebase" src="http://i2.wp.com/discoposse.com/wp-content/uploads/2015/07/all-your-rebase-featured.png?resize=250%2C243"&gt;&lt;/p&gt;
&lt;p&gt;So, &lt;strong&gt;I&amp;#8217;m going to merge the &lt;a href="https://github.com/theodox/mGui/tree/remove_keys"&gt;&lt;code&gt;remove_keys&lt;/code&gt;&lt;/a&gt; branch &amp;#8212; aka &amp;#8216;mGui 2.0&amp;#8217; &amp;#8212; into the main line tomorrow: October 10th, 2016.&lt;/strong&gt;  It&amp;#8217;s been in use at a couple of sites for the last few months and seems pretty stable, so the time has come to pull the&amp;nbsp;trigger. &lt;/p&gt;
&lt;h1&gt;mGui? What&amp;#8217;s&amp;nbsp;that?&lt;/h1&gt;
&lt;p&gt;For those of you who haven&amp;#8217;t heard of it, &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt; is a module designed to speed the creation of Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; items.  The main design goal is to combine the portability of native Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; with more modern software&amp;nbsp;patterns.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt; syntax is more object-oriented than you&amp;#8217;d see in &lt;code&gt;maya.cmds&lt;/code&gt;. Instead of issuing commands to create a widget you make objects instead.  This little snippet in vanilla maya creates a window with &lt;code&gt;TextScrollList&lt;/code&gt; and adds to the list when you click a&amp;nbsp;button: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.cmds&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cmds&lt;/span&gt;

&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;textScroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textScrollList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;button_callback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textScrollList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;textScroll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pushed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;push&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button_callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
    &lt;span class="n"&gt;af&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;textScroll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;textScroll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;textScroll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
    &lt;span class="n"&gt;aoc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;textScroll&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The mGui version looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGui.gui&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGui.forms&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;


&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;FooterForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;textScroll&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TextScrollList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;push&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;__&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;textScroll&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pushed&amp;#39;&lt;/span&gt;
        &lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;handle_push&lt;/span&gt;

&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The actual &lt;span class="caps"&gt;GUI&lt;/span&gt; produced by both snippets is identical, but the mGui version adds a few nice gimmicks to make the code shorter and simpler.  Instead of functions, mGui widgets are objects with properties. That lets you tweak they layout and appearance more naturally. To change the color of the button in this example, the vanilla maya would&amp;nbsp;be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;whereas the mGui version&amp;nbsp;is &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are also a bunch of supporting features designed to make it easier to manage large, complex GUIs without too much tedium.  For more background you can check out &lt;a href="/2014/all_your_base"&gt;the original post&lt;/a&gt; to see how the underlyint tech works, and the &lt;a href="/2016/mgui_updates_2"&gt;mGui 2.0 announcement&lt;/a&gt; to see all the features in that will be coming&amp;nbsp;on-line.&lt;/p&gt;
&lt;h1&gt;Incoming!!!&lt;/h1&gt;
&lt;p&gt;Part of the reason I&amp;#8217;ve sat on this one for so long is that it does introduce some minor breaking changes.  There are two key things to watch out&amp;nbsp;for.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Key names&lt;/strong&gt; In mGui 1.0, every widget was supposed to have a &amp;#8216;key name&amp;#8217;.  This was used to create an absolute path to the widget, so you could address it as &amp;#8216;window.columnLayout.button1&amp;#8217; or something like that.  It worked fine but it required every widget to get an explicit name or a bailout value like &lt;code&gt;None&lt;/code&gt;, which rendered the code a bit more cluttered than it had to be.  In mGui 2.0, the key names are derived from local variables: so if you build your gui like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ColumnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;go_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Go&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;stop_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Stop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you could address the buttons as &lt;code&gt;window.main.go_button&lt;/code&gt; or &lt;code&gt;window.main.stop_button&lt;/code&gt; because of the variable names which were present when they were created.  You can still provide an explicit key if you really want to but it&amp;#8217;s not commonly&amp;nbsp;needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Naming conventions&lt;/strong&gt;  In mGui 1.0 the property names used a convention we used in my office, that member variables were capitalized. Thus a property on a widget would get a capital letter: &lt;code&gt;my_button.Width = 128&lt;/code&gt; and so on.  This is not very typical python style, so in this release we&amp;#8217;re using the the standard python convention and the properties are now lower-cased:  &lt;code&gt;my_button.width = 128&lt;/code&gt;.  This makes the upgrade a little more painful than it has to be, for which I apologize; but it helps with readability and code-compatibility in the long run.  A good &lt;a href="/2014/for_regex_haters"&gt;regular expression&lt;/a&gt; will help you find and fix most issues quickly &amp;#8212; I got all of my code (and I have alot of mGui code!) fixed in a couple of&amp;nbsp;hours.&lt;/p&gt;
&lt;p&gt;Anyway, hope you find it useful. Please don&amp;#8217;t hesitate to put bugs or questions up on the GitHub site &amp;#8212; that&amp;#8217;s what it&amp;#8217;s there for! Special thanks to &lt;a href="https://github.com/bob-white"&gt;+Bob White&lt;/a&gt; for his help on this one.  And if you feel like taking a whack at fixing bugs, improving docs or adding features to the project by all means take a shot and send me a pull&amp;nbsp;request!&lt;/p&gt;
&lt;p&gt;All mGui-related posts can be found &lt;a href="/tag/mgui"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="mGui"></category></entry><entry><title>Documentation 2.0?</title><link href="https://theodox.github.io/2016/doc_20" rel="alternate"></link><published>2016-07-25T00:00:00-07:00</published><updated>2016-07-25T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-07-25:/2016/doc_20</id><summary type="html">&lt;p&gt;StackOverflow wants to tackle documentation. Maybe we should&amp;nbsp;help.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Alas, since this was posted the Stackoverflow documentation project has come and gone.  The Documentary millennium is postponed for the forseeable&amp;nbsp;future&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I noticed recently that &lt;a href="http://stackoverflow.com/users/1936075/theodox"&gt;StackOverflow&lt;/a&gt; is trying to encourage community documentation. The tagline they&amp;#8217;re using is &amp;#8220;Let&amp;#8217;s do for documentation what we did for &lt;span class="caps"&gt;QA&lt;/span&gt;,&amp;#8221; which immediately made the cynical side of my brain think &amp;#8220;like, turn it into a brogrammer mud-wrestling&amp;nbsp;match?&amp;#8221; &lt;/p&gt;
&lt;p&gt;Kidding aside, documentation is something I&amp;#8217;ve gotten to be very uptight about. Maybe it&amp;#8217;s just having spent a the better part of a year having to maintain somebody else&amp;#8217;s code. Maybe its the whiplash I&amp;#8217;ve gotten from hopping between 3 game engines in 5 years.  Or maybe I&amp;#8217;m just setting into my grumpy old man persona and I want to stop answering the same questions about how to attach a control to a &lt;code&gt;formLayout&lt;/code&gt;.  But the idea of a good, relatively up-to-date community documentation is really appealing to&amp;nbsp;me.&lt;/p&gt;
&lt;p&gt;One of the things that really jumped out at me in the initial pitch on StackOverflow was the&amp;nbsp;sentence&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[Documentation] was usually written once, often by someone not even using the technology, so it was a guess at what to focus&amp;nbsp;on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;which really rang true: I&amp;#8217;ve generally run into only two different kinds of documentation: slick, well written and shallow &amp;#8212; or spotty and inadequate. Those are not great alternatives.  Easily 7 times out of 10 I end up on StackOverflow it&amp;#8217;s precisely because I&amp;#8217;ve found another hole in somebody&amp;#8217;s&amp;nbsp;documentation.&lt;/p&gt;
&lt;p&gt;The idea that &lt;span class="caps"&gt;SO&lt;/span&gt; is pushing is effectively a kind of Wikipedia for their different communities: They want users to put together the building blocks and also to edit each other&amp;#8217;s works &amp;#8212; voting things up and down and editing them collaboratively more or less the way they do with &lt;span class="caps"&gt;SO&lt;/span&gt;&amp;nbsp;questions. &lt;/p&gt;
&lt;p&gt;To get a sense of where this is headed, you can check out the &lt;a href="http://stackoverflow.com/documentation/python/topics"&gt;Python documentation page&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;To me it doesn&amp;#8217;t feel quite right just yet: the examples are fine on their own but I&amp;#8217;m not sure I&amp;#8217;d know how to assemble them into a coherent picture if I didn&amp;#8217;t already know roughly how they fit together. On the other hand this is still new: give it a couple of years, with the incredible amount of free labor that the internet&amp;#8217;s reputation economy provides, and I can see it being as good as the double-whammy of Unity&amp;#8217;s docs and answer platforms.  It&amp;#8217;s particularly appealing to have a single place where a community can put the perennials: so many &lt;span class="caps"&gt;SO&lt;/span&gt; questions are just repeats of old questions where for some reason the asker hasn&amp;#8217;t figured out the magic combinations of search terms to find the pre-existing answers.  I hope that a good community doc site, with input from lots of people who know their way around, would produce a lot of folks who could efficiently route the clueless to the information &amp;#8212; the answer might really lie less in the docs themselves than in creating a culture of people who knew roughly where to send people for authoritative&amp;nbsp;info.&lt;/p&gt;
&lt;p&gt;With that in mind I&amp;#8217;d like to point out that there are currently only two people signed up to do documentation for Maya programming on &lt;span class="caps"&gt;SO&lt;/span&gt; &amp;#8212; the site requires a minimum of five user before it will open a documentation site for a given topic.  I think it would be great if the &lt;span class="caps"&gt;TA&lt;/span&gt; community led the way in getting the Maya documentation project into good shape.  Not only would we all benefit from the information directly, we&amp;#8217;d also have a chance to point new entrants in the field to a common source of knowledge that we all share in &amp;#8212; over time I can see it becoming an important part of onboarding new &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;#8217;s into the&amp;nbsp;business.&lt;/p&gt;
&lt;p&gt;Plus, if it really works I can stop answering all those &amp;#8216;how do I make this button update this field in Maya&amp;#8217; questions once and for&amp;nbsp;all.&lt;/p&gt;
&lt;p&gt;So, whaddya say gang? Who&amp;#8217;s with&amp;nbsp;me?&lt;/p&gt;</content><category term="maya"></category><category term="programming"></category><category term="industry"></category><category term="techart"></category></entry><entry><title>Submission Time!</title><link href="https://theodox.github.io/2016/gdc-subs-open-2017" rel="alternate"></link><published>2016-07-21T00:00:00-07:00</published><updated>2016-07-21T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-07-21:/2016/gdc-subs-open-2017</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt; call for submissions is now&amp;nbsp;open&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt; just opened up their &lt;a href="http://www.gdconf.com/conference/c4p/"&gt;call for papers&lt;/a&gt; for the 2017 conference. It&amp;#8217;s time to get those submissions together soon &amp;#8212; the submissions will close on &lt;strong&gt;August 18th&lt;/strong&gt;.  Make sure to check out the page in detail - the sumbmissions process has gotten a bit stiffer in the last couple of years, it&amp;#8217;s much easier to see a talk through to the end if you know how the system works.  The &lt;a href="http://www.gdconf.com/conference/c4p/"&gt;call for papers page&lt;/a&gt; has the&amp;nbsp;details.&lt;/p&gt;
&lt;p&gt;As I&amp;#8217;ve &lt;a href="/pages/pub/submit"&gt;said many times before&lt;/a&gt;, &lt;span class="caps"&gt;GDC&lt;/span&gt; talks are a great forum for &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;#8217;s who want to strut their stuff, advance their careers, and win the respect of their peers. As the talkiest branch of the art community &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;#8217;s are &lt;span class="caps"&gt;GDC&lt;/span&gt; naturals.  And, from a personal perspective, there is nothing in the world that forces you to get your shizzle together like preparing to discourse about it in front of 300 strangers.   So start&amp;nbsp;outlining!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;:&lt;/strong&gt; I&amp;#8217;m a big fan of &lt;a href="http://www.decksetapp.com/"&gt;DeckSet&lt;/a&gt; as a powerpoint alternative, especially while a talk is still taking shape.  &lt;em&gt;Don&amp;#8217;t&lt;/em&gt; get sucked into tweaking slide layouts before you know what you want to&amp;nbsp;say!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;PPS&lt;/span&gt;:&lt;/strong&gt; Get in touch via the contact links if you&amp;#8217;re trying to refine a topic idea. Or throw it into the comments and get some feedback from other&amp;nbsp;readers.&lt;/p&gt;</content><category term="gdc"></category><category term="industry"></category></entry><entry><title>GDC Submissions for 2017 opening soon!</title><link href="https://theodox.github.io/2016/gdc-subs-2017" rel="alternate"></link><published>2016-07-06T22:30:00-07:00</published><updated>2016-07-06T22:30:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-07-06:/2016/gdc-subs-2017</id><summary type="html">&lt;p&gt;Time to get those &lt;span class="caps"&gt;GDC&lt;/span&gt; submissions&amp;nbsp;in!&lt;/p&gt;</summary><content type="html">&lt;p&gt;The annual call for submissions to &lt;a href="http://www.gdconf.com/news/in_the_wake_of_record-breaking/"&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt;&lt;/a&gt; is going to open soon.  Looks like the submissions site will be open July 21st, so start working on those outlines&amp;nbsp;now!  &lt;/p&gt;
&lt;p&gt;For a roundup of why &lt;span class="caps"&gt;GDC&lt;/span&gt; talks are a great venue for tech artists, check out &lt;a href="/pages/pub/submit"&gt;this old post&lt;/a&gt;. And start planning ahead for the Tech Art&amp;nbsp;Bootcamp!&lt;/p&gt;</content><category term="gdc"></category><category term="industry"></category></entry><entry><title>Command and Conquer</title><link href="https://theodox.github.io/2016/cli_zip" rel="alternate"></link><published>2016-06-16T00:00:00-07:00</published><updated>2016-06-16T00:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-06-16:/2016/cli_zip</id><summary type="html">&lt;p&gt;A handy hack for distributing Python command line tools with predictable execution&amp;nbsp;environments.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s pretty common for &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;#8217;s to want some specialty command-line tools that for their own use, or to share with a select number of power users who aren&amp;#8217;t afraid of typing.  Python is great at making tools for this kind of one-off use, distributing and maintaing these kinds of scripts  requires jumping even more hoops than sending out artist tools (something covered in more detail &lt;a href="blog/2014/save_the_environment"&gt;here&lt;/a&gt; and &lt;a href="blog/2014/egg_man"&gt;here&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;It&amp;#8217;s much easier for folders full of loose scripts to diverge among coders, who are likely to be tinkering with their contents, than it is among artists.  For keeping the artists on the same page, I &lt;a href="/blog/2014/egg_man"&gt;distribute a complete environment in a single .zip file&lt;/a&gt;, which has definitely cut my distribution headaches by an order of magnitude and simplified my management a great deal.  But until fairly recently the techies had to muddle along the old fashioned&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;However, once we started getting in to command line tools on a larger scale,  we realized that we can get many of the same benefits by using the same zip file as part of our command line arsenal.  This means we can write scipts that use our up-to-date in-house libraries (and also all of the path manipulation that gets done for our artist tools) without&amp;nbsp;modification.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://static2.gamespot.com/uploads/scale_super/gamespot/images/2006/043/reviews/712537-930763_20060213_001.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Forget &lt;span class="caps"&gt;CLI&lt;/span&gt; tools, bring on the &lt;span class="caps"&gt;FMV&lt;/span&gt; tools and party like its&amp;nbsp;1996&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Just a &lt;span class="caps"&gt;NOD&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;The trick is really pretty simple. All you need to do is include a &lt;code&gt;__main__.py&lt;/code&gt; in the zip file.  Any python zip with a &lt;code&gt;__main__.py&lt;/code&gt; is treated by python as an executable script.  Here&amp;#8217;s a trivial&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;# I was called with&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;arguments&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you zip that file, you can execute it like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;
&lt;span class="c1"&gt;# I was called with hello world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you understand that, you can build a flexible command-line toolkit that uses your library quite simply.  You&amp;#8217;ll need to collect all of your path mongering into a single place, but that&amp;#8217;s a good idea in any case &amp;#8212; things get crazy pretty quick if every module can mess with &lt;code&gt;sys.path&lt;/code&gt; on a&amp;nbsp;whim.  &lt;/p&gt;
&lt;p&gt;I use a module that mimics &lt;code&gt;site&lt;/code&gt; but works for zips as well as loose&amp;nbsp;files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;zipsite&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zipfile&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_pth_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# this gets overridden in derived classes&lt;/span&gt;
        &lt;span class="c1"&gt;# so that zips and loose files worh the same&lt;/span&gt;
        &lt;span class="k"&gt;yield&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_pth_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;new_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{0}/{1}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;new_path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FolderSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.pth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="n"&gt;clean_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roots&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ZipSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ZipFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;all_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namelist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;all_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;pth_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_names&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.pth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pthfile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pth_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;local_pth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pthfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pthfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;U&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;local_pth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;addsitedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    for every .pth file in or under each root, process the pth file&lt;/span&gt;
&lt;span class="sd"&gt;    in the same way as site.addsitedir()&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_root&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_zipfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;ZipSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;FolderSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As long as that&amp;#8217;s in my distribution zip, my &lt;code&gt;__main__&lt;/code&gt; cam setup all the paths with a couple of&amp;nbsp;lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zipsite&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;zipsite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addsitedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the real work is delegated to the .pth files, which is a much simpler and less error prone method than letting the individual modules run&amp;nbsp;rampant.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://s3.amazonaws.com/bronibooru/a5fcec9d4f6a844d7222954ada743cf5.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I&amp;#8230;. I just don&amp;#8217;t know what to say&amp;#8230; I mean&amp;#8230;   But it &lt;strong&gt;is&lt;/strong&gt; the least problematic search result for &amp;#8216;Command and Conquerer Red Alert&amp;nbsp;characters&amp;#8217;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Red&amp;nbsp;Alert&lt;/h1&gt;
&lt;p&gt;Of course, this is only a little bandaid on the big, nasty psoriasis that is Python tools distribution.  I was very hopeful when I stumbled across this PyCon talk on&amp;nbsp;YouTube:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5BqAeN-F9Qs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Alas, however, the talk mostly served to reinforce my feeling that Python distribution is badly busted (and that &lt;code&gt;pip install&lt;/code&gt; is not how to fix it).  For the meantime it&amp;#8217;s at least comforting to know there&amp;#8217;s fairly easy way to pop out an uncomplicated, repeatable toolkit with no external dependencies even if it costs you some disk&amp;nbsp;space.&lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="distribution"></category></entry><entry><title>State of Decay 2 announced</title><link href="https://theodox.github.io/2016/sod_2" rel="alternate"></link><published>2016-06-14T00:05:00-07:00</published><updated>2016-06-14T00:05:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-06-14:/2016/sod_2</id><summary type="html">&lt;p&gt;State of Decay 2 is finally going&amp;nbsp;public!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;m super excited to report that I can finally admit in public that &lt;a href="http://www.stateofdecay.com"&gt;State of Decay 2&lt;/a&gt; is under development. Hats off to my team for an amazing job on the trailer (which, I hasten to add, is 100% in-engine using game assets&amp;#8230; and which was put together in record time to&amp;nbsp;boot).  &lt;/p&gt;
&lt;p&gt;I was also kind of touched that the audience spontaneously applauded when they saw the Brontogas logo.  It&amp;#8217;s always cool to be reminded of &lt;em&gt;why&lt;/em&gt; we do what we&amp;nbsp;do.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the trailer if you missed the E3&amp;nbsp;presentations:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/_JMJFyXuGUw" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;: One tech note that might be of interest to this audience: if you look really carefully in the interior scenes you might be able to see something that looks a lot like dynamic bounce lighting.  &lt;em&gt;Just&amp;nbsp;sayin&amp;#8217;&amp;#8230;&lt;/em&gt;&lt;/p&gt;</content><category term="games"></category><category term="industry"></category></entry><entry><title>Bye-Bye Blogger Blues</title><link href="https://theodox.github.io/2016/new_blog" rel="alternate"></link><published>2016-06-12T12:31:00-07:00</published><updated>2016-06-12T12:31:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-06-12:/2016/new_blog</id><summary type="html">&lt;p&gt;&lt;img alt="" src="http://www.stageoflife.com/Portals/0/Blogging%20Resources/Blogging%20Cartoons/BloggingCartoon5.jpg"&gt;The new &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;-based blog is up! Please check it out and let me know how it&amp;#8217;s&amp;nbsp;working!&lt;/p&gt;</summary><content type="html">&lt;p&gt;After a &lt;a href="http://techartsurvival.blogspot.com/2016/04/blogger-blues.html"&gt;long pause&lt;/a&gt; I&amp;#8217;ve finally completed the move to a &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt; based blog created with &lt;a href="http://getpelican.com"&gt;Pelican&lt;/a&gt;. Converting old blogger files, a markdown based wiki, and a bunch of other random pages was quite and adventure, but it&amp;#8217;s more or less done now.  I&amp;#8217;d appreciate it greatly if you let me know &amp;#8212; either via the comments or one of the social links that accompany each post &amp;#8212; if you find any bugs, dead links or missing images in the site so I can fix them&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;At some point I&amp;#8217;ll post an overview of how it went, but after several weekends of manually fixing old links, fiddling with &lt;span class="caps"&gt;CSS&lt;/span&gt;, and hitting &amp;#8216;refresh&amp;#8217; on my browser I need to get up and walk around a&amp;nbsp;bit.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.stageoflife.com/Portals/0/Blogging%20Resources/Blogging%20Cartoons/BloggingCartoon5.jpg"&gt;&lt;/p&gt;</content><category term="blogging"></category><category term="markdown"></category></entry><entry><title>mGui updates in the offing…</title><link href="https://theodox.github.io/2016/mgui_updates_2" rel="alternate"></link><published>2016-03-26T15:34:00-07:00</published><updated>2016-03-26T15:34:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-03-26:/2016/mgui_updates_2</id><summary type="html">&lt;p&gt;A sneek peek at some changes in the 2.0 version of &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;For those of you who&amp;#8217;ve been using &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt; to speed up and simplify your Maya gui coding, there are some interesting changes on the horizon. Although I&amp;#8217;m not entirely ready to release the changes I have in mind they are mostly sitting in &lt;a href="https://github.com/theodox/mGui/tree/remove_keys"&gt;their own branch in the Github repo&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;The upcoming version introduces some new idioms - in particular, it gets rid of the need for explicitly setting keys on new controls to get access to nested properties. In the first version of mGui you&amp;#8217;d write something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;example_window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;VerticalForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Items without vertex colors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerticalList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lister&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Collection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;    
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;HorizontalStretchForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;buttons&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the new refactor that looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;example_window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;VerticalForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Items without vertex colors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;lister&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerticalList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;lister&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;    
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;HorizontalStretchForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;button_row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The big advantage here is that those local variables are not scoped exclusively to the layout context managers where they live, which makes it easy to control when and where you hook up your event handlers: In the above example you could defer all the bindings and event handlers to the end of the script like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;example_window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;VerticalForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;Text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Items without vertex colors&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;lister&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerticalList&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;HorizontalStretchForm&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;button_row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Refresh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Close&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;lister&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;  
&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;refresh_def&lt;/span&gt;  
&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;close_def&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So far I&amp;#8217;m really liking the new idiom, particularly eliminating the extra quotes and redundant &lt;code&gt;None&lt;/code&gt; keys. However this is a minorly breaking change: in some cases, old code which relied on the key value to name and also label a control at the same time will when the keys become redundant. Moreover I bit the bullet and started to refactor the entire mGui module to use correct pep-8 naming conventions - in particular, member variables are &lt;em&gt;no longer capitalized&lt;/em&gt;. So if you have code outside of mGui this will introduce some issues. When I converted my own code, most of the changes could be done with a regular expression but there were a few&amp;nbsp;danglers.&lt;/p&gt;
&lt;p&gt;I think the changes are worth the effort, but I&amp;#8217;d be really interested in hearing from users before trying to bring the new mGui branch back into the main line. It should actually be possible to write a script that fixes most existing code automatically, that&amp;#8217;s something we could refine collaboratively.Please let me know in the comments or by opening an issue on the GitHub site if you have comments or&amp;nbsp;plans. &lt;/p&gt;
&lt;p&gt;As always, bug fixes and pull requests always&amp;nbsp;entertained!&lt;/p&gt;</content><category term="mGui"></category></entry><entry><title>Another Year, Another GDC…</title><link href="https://theodox.github.io/2016/gdc_2016" rel="alternate"></link><published>2016-03-20T14:43:00-07:00</published><updated>2016-03-20T14:43:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-03-20:/2016/gdc_2016</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt; 2016 after-action&amp;nbsp;report&lt;/p&gt;</summary><content type="html">&lt;p&gt;It doesn’t take much super-secret industry-insider special knowledge to know that the big story this year was &lt;span class="caps"&gt;VR&lt;/span&gt;, &lt;span class="caps"&gt;VR&lt;/span&gt; and more &lt;span class="caps"&gt;VR&lt;/span&gt; – if the you had somehow managed to miss out on the pre-show hype the giant black Oculus booth looming like the Death Star right over the entrance to the expo floor told pretty much the whole story in one&amp;nbsp;glance.   &lt;/p&gt;
&lt;p&gt;&lt;a href="https://gdc.tech.ubm.com/eventAssets/gameev_2016_151009160527/image/gdc16_logo-color.png"&gt;&lt;img alt="" src="https://gdc.tech.ubm.com/eventAssets/gameev_2016_151009160527/image/gdc16_logo-color.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It is, however, interesting to note how cynical we’ve become as an industry about tech bubbles: from MMOs to Facebook games to In-app purchases and 3-D TVs, we’ve all lived through so many Next Big Things that we habitually reserve judgement – even on things like the latest crop of &lt;span class="caps"&gt;VR&lt;/span&gt; gear which sets our little nerdly hearts a-fluttering. I had a lot of conversations with people on the general theme of &lt;em&gt;“wow, that’s cool. In three years most of them will be out of business, though.”&lt;/em&gt; – even with people in the &lt;span class="caps"&gt;VR&lt;/span&gt; business&amp;nbsp;itself.   &lt;/p&gt;
&lt;p&gt;Personally, I think &lt;span class="caps"&gt;VR&lt;/span&gt; is going to survive but I don’t think it’ll be the kind of world-changing, ubiquitous tech that the broadband internet and handhelds have turned out to be. It’s an awesome geek toy and the gateway to many interesting and novel experiences. I see it sort of like that kayak in the garage: a cool thing that gets dusted off a few times a year but not a regular part of daily life, and never going to buffed up to the high consumerist gloss of an iPhone. Maybe in another decade, but for now it’s a really cool niche product. I hope all that crazy money sloshing around in &lt;span class="caps"&gt;VR&lt;/span&gt; land fuels some general purpose innovation : in particular, I hope that &lt;span class="caps"&gt;VR&lt;/span&gt;’s need for screaming framerates in two renders at once may make hardware that is more performant overall and also for split-screen friendly deferred&amp;nbsp;rendering.&lt;/p&gt;
&lt;p&gt;In the actual, as opposed to the virtual, world the highlight of the show for me is always the &lt;span class="caps"&gt;TA&lt;/span&gt; roundtables. It’s such a great resource for the community, and a chance for folks who often live a bit outside the main stream of their development teams to get together with people who share their unique and esoteric pain. Those three roundtables are the only room full of people who will chuckle at jokes about MaxScript and who truly appreciate the hopeless pathos of sending emails about proper check-in procedures to a team of artists. As always, hats off to &lt;a href="https://plus.google.com/116461271591099938175"&gt;+Jeff Hanna&lt;/a&gt;  for running the roundtables and also the &lt;span class="caps"&gt;TA&lt;/span&gt; Bootcamp, which I had to miss this year but sounded really good. I’m anxiously awaiting the release of the talks I missed on the &lt;a href="http://www.gdcvault.com/play/1021806/Art-Direction-Bootcamp-Technical-Art"&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt; Vault&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;In these annual roundups I usually try to note the size and intensity of the job market. This year was kind of difficult to gauge. The big mega-booths from mega-teams were largely absent this year: I didn’t see many of the long lines of students queuing up to show their portfolios to Blizzard, Bungie, or 343. On the other hand the general commercial tempo seemed pretty up beat. I think this reflects the general trend away from big, highly institutionalized teams and toward smaller, more agile (but also more fragile) groupings: the job market is more fragmented but not necessarily smaller than in years gone by. I could be wrong about that one, though – this might just be a mid-console-cycle&amp;nbsp;lull.  &lt;/p&gt;
&lt;p&gt;To all the folks I saw down at the show – it was awesome! To those who didn’t make it this year – don’t miss it next&amp;nbsp;time!  &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt; - one important thing that came out of the round table is that more and more people are signing up to the &lt;a href="http://tech-artists.org/forum/showthread.php?5748-Tech-Artists-Org-is-now-on-Slack!"&gt;Tech artists slack channel&lt;/a&gt;.  If you&amp;#8217;re not already a member, follow that link to sign&amp;nbsp;up.&lt;/p&gt;</content><category term="industry"></category><category term="gdc"></category><category term="jobs"></category></entry><entry><title>A touch of minq +</title><link href="https://theodox.github.io/2016/a_touch_of_minq" rel="alternate"></link><published>2016-03-06T09:02:00-08:00</published><updated>2016-03-06T09:02:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-03-06:/2016/a_touch_of_minq</id><summary type="html">&lt;p&gt;Introducing &lt;strong&gt;Minq&lt;/strong&gt;, a query language for Maya&amp;nbsp;scenes.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you’re a long-time reader, you may recall that i’m very ambivalent about &lt;a href="wraptastic.html"&gt;wrapper code&lt;/a&gt;. I’m just as prone to adding my own little spoonful of syntax sugar on top of my daily tasks, but I’ve also been around long enough to be a bit cynical about my own various faddisms and dubious style choices over the years. Sure, extra typing is annoying – but nowadays I tend to set a pretty high bar for actually writing wrapper code instead of just, ya know, doing my actual &lt;em&gt;job&lt;/em&gt;.&lt;br&gt;
So, it’s with a little bit of trepidation that I’m sharing my latest library. &lt;strong&gt;&lt;a href="https://github.com/theodox/minq"&gt;Minq&lt;/a&gt;&lt;/strong&gt; bills itself as ‘a query language for Maya scenes.’ The goal is to simplify a very common task for Maya coders: finding things in a scene.&lt;br&gt;
Now, that isn’t a particularly interesting job most of the time, but it’s one we do a &lt;em&gt;lot&lt;/em&gt;: a quick grep of my own codebase shows over 600 calls to &lt;code&gt;cmds.ls()&lt;/code&gt;, &lt;code&gt;cmds.listRelatives()&lt;/code&gt;, &lt;code&gt;cmds.listHistory&lt;/code&gt; and &lt;code&gt;cmds.nodeType()&lt;/code&gt; in various combinations: as far as I can tell, &lt;code&gt;ls()&lt;/code&gt; is actually the single most common call I make. &lt;br&gt;
Moreover, I’m reasonably certain (though I didn’t do the grepping to bear this out) that those hundreds of &lt;code&gt;ls()&lt;/code&gt; calls are accompanied by hundreds of little snippets of code to deal with Maya’s quirks. How often have you run into little gems like&amp;nbsp;this?  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;something_thats_not_transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# [u&amp;#39;top&amp;#39;]&lt;/span&gt;

&lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# [u&amp;#39;front&amp;#39;, u&amp;#39;persp&amp;#39;, u&amp;#39;side&amp;#39;, u&amp;#39;top&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or&amp;nbsp;this?  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_meshes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mesh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;  
&lt;span class="c1"&gt;# Error: &amp;#39;NoneType&amp;#39; object is not iterable  &lt;/span&gt;
&lt;span class="c1"&gt;# Traceback (most recent call last):  &lt;/span&gt;
&lt;span class="c1"&gt;#   File &amp;quot;&amp;lt;maya console&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;  &lt;/span&gt;
&lt;span class="c1"&gt;# TypeError: &amp;#39;NoneType&amp;#39; object is not iterable #&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are of course ways around these little gotchas - but given the number of times you have to interact with them it’s hard to be sure you’ve really nailed them all. In my case a 99% correct handlong of my &lt;code&gt;ls()&lt;/code&gt; calls alone will produce at least 5 bugs.&lt;br&gt;
More importantly – and, frankly, the whole reason for this project – dealing with these little gotchas is not an &lt;em&gt;interesting&lt;/em&gt; job. Finding, filter and sorting stuff in your Maya scene is not am opportunity for you to display your brilliant algorithms or clever strategies for bending Maya to your will: it’s just a bunch of stuff you have to on your way to fixing the problems your users really want&amp;nbsp;fixed.  &lt;/p&gt;
&lt;h2&gt;Minq in&amp;nbsp;action&lt;/h2&gt;
&lt;p&gt;Hence, &lt;a href="https://github.com/theodox/minq"&gt;minq&lt;/a&gt;. &lt;br&gt;
The goal of minq is to provide a more concise and more readable way to find things in your maya scenes. Here’s an example to give you the idea of how the project is supposed to work.&lt;br&gt;
Suppose you need to find all of your character skeletons and distinguish them from other things lying around in the scene. The easy way to do that is usually to look for assemblies (top level nodes) which have children who drive skinClusters. Here’s an example of how you could find all the root nodes in the scene which drive skins using conventional&amp;nbsp;means:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_assemblies_that_drive_skins&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="n"&gt;skinned&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;asm&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;assemblies&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;[]:&lt;/span&gt;  
        &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listRelatives&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ad&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
        &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listHistory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;skinCluster&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;skinned&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;skinned&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You’ll notice the littering of &lt;code&gt;or []&lt;/code&gt; to make sure we don’t get errors for failed queries. We have to create two temporary variables (&lt;code&gt;childen&lt;/code&gt; and &lt;code&gt;history&lt;/code&gt;) in order to store the intermediate results. And, obviously, we’re 3 layers deep when we get to the actual work item. &lt;br&gt;
Above all, though, you need to remember two little bits of Maya trivia to make sense of this code: that &lt;code&gt;cmds.ls(asm=True)&lt;/code&gt; means ‘give me the assemblies’ and that &lt;code&gt;listRelatives(ad=True)&lt;/code&gt; gives you the children of an object. These are, of course, very clear to Maya vets – but there are over 50 flags in &lt;code&gt;ls()&lt;/code&gt; and more than a dozen in &lt;code&gt;listRelatives()&lt;/code&gt; . I’ve been working in Maya for 20 years and I still need to look up most of them. You pass those flags to Maya as strings which won’t get evaluated until runtime – and it’s possible to mistype them and not even know because &lt;code&gt;ls()&lt;/code&gt;, in particular, makes wierd tweaky decisions about how to interpret conflicting flags.&lt;br&gt;
Here’s the minq equivalent to the previous&amp;nbsp;function:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;drives_skin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AllChildren&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;skin_clusters&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SkinClusters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;skin_clusters&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;unskinned_assemblies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Assemblies&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;drives_skin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It’s shorter, but the real goal is to make it more readable. Here’s what happens, which should be pretty clear from the&amp;nbsp;names:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;drives_skin()&lt;/code&gt; takes a maya&amp;nbsp;object  &lt;/li&gt;
&lt;li&gt;It gets all of that object’s&amp;nbsp;children  &lt;/li&gt;
&lt;li&gt;It gets all of the future history of those&amp;nbsp;children  &lt;/li&gt;
&lt;li&gt;It it filters down to only the skin clusters in that future&amp;nbsp;history  &lt;/li&gt;
&lt;li&gt;it returns true if any skin clusters are&amp;nbsp;present  &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The rest of it pretty self evident: &lt;code&gt;unskinned_assemblies&lt;/code&gt; just collects all of the assemblies which pass &lt;code&gt;drives_skin()&lt;/code&gt;. The &lt;em&gt;algorithm&lt;/em&gt; is exactly the same as the first version – but, at least to me, that algorithm is actually expressed much more clearly in the minq version. As for concision, I deliberately broke the query into two lines to make it easier to read &amp;#8212; otherwise it could all be done in a single expression.&lt;br&gt;
A purist will probably point out that there are important under-the-hood details in the first one that are hidden in the second, and s/he’d be right. However after doing a lot of this kind of code down the years I’m fairly certain that those important details have almost always been important because screwing them up causes problems – not because they provide an opportunity for a wizardly optimization or better approach to the problem. I’m interested in finding unskinned meshes, not in remembering to pass the correct flags to &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;listRelatives&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;Here’s a couple of other examples to give you the flavor of what a minq query looks&amp;nbsp;like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# get all mesh transforms in a scene  &lt;/span&gt;
&lt;span class="n"&gt;mesh_transforms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;Meshes&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Parents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# find stub joints  &lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;is_stub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;stubs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Joints&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;is_stub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# filtering by type, by name, and with functions  &lt;/span&gt;
&lt;span class="n"&gt;cube_creator_nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;PolyCreators&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;polyCube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;used_to_be_cubes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cube_creator_nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Future&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Meshes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;has_8_verts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyEvaluate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;  
&lt;span class="n"&gt;still_are_cubes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;used_to_be_cubes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;has_8_verts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# adding, subtracting or intersecting queries&lt;/span&gt;

&lt;span class="n"&gt;too_high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ty&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;too_low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ty&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;middle_xforms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Transforms&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;too_high&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;too_low&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, that’s the basic idea: to replace a lot of tedious boilerplate with something a little cleaner, more predictable and easier to maintain. The code for the whole thing is up on &lt;a href="https://github.com/theodox/minq"&gt;up on Github&lt;/a&gt; under the usual &lt;span class="caps"&gt;MIT&lt;/span&gt;, ‘use it as you like but keep the copyright header’ license. It’s still very much a work-in-progress and I’d love feedback, particularly on issues of syntax and&amp;nbsp;style. &lt;/p&gt;</content><category term="python"></category><category term="maya"></category><category term="programming"></category><category term="minq"></category></entry><entry><title>Technical Art for Art Directors</title><link href="https://theodox.github.io/2016/technical_art_for_art_directors" rel="alternate"></link><published>2016-03-05T16:06:00-08:00</published><updated>2016-03-05T16:06:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-03-05:/2016/technical_art_for_art_directors</id><summary type="html">&lt;p&gt;My 2015 &lt;span class="caps"&gt;GDC&lt;/span&gt; talk, &lt;a href="http://www.gdcvault.com/play/1021806/Art-Direction-Bootcamp-Technical-Art"&gt;Technical Art For Art Directors&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I noticed that my 2015 &lt;span class="caps"&gt;GDC&lt;/span&gt; talk, &lt;a href="http://www.gdcvault.com/play/1021806/Art-Direction-Bootcamp-Technical-Art"&gt;Technical Art For Art Directors&lt;/a&gt;,  is currently up on the &lt;span class="caps"&gt;GDC&lt;/span&gt; Vault and is not behind the paywall.  If you&amp;#8217;ve been struggling to explain what you do, you might find this one&amp;nbsp;useful:  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://3.bp.blogspot.com/-NznutU-ZoJA/Vtt0XRPAm0I/AAAAAAABNYc/YkgrX_U8iCc/s1600/ta-ad.jpg"&gt;&lt;img alt="" src="https://3.bp.blogspot.com/-NznutU-ZoJA/Vtt0XRPAm0I/AAAAAAABNYc/YkgrX_U8iCc/s640/ta-ad.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="gdc"></category><category term="industry"></category><category term="articles"></category></entry><entry><title>The little things</title><link href="https://theodox.github.io/2016/the_little_things" rel="alternate"></link><published>2016-02-18T19:27:00-08:00</published><updated>2016-02-18T19:27:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-02-18:/2016/the_little_things</id><summary type="html">&lt;p&gt;After a decade, victory over over userSetup.py is within our&amp;nbsp;grasp&lt;/p&gt;</summary><content type="html">&lt;p&gt;It’s the little things that really matter in&amp;nbsp;life.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tshirtbordello.com/images/rule-32-enjoy-little-things-s3.jpg"&gt;&lt;img alt="" src="http://www.tshirtbordello.com/images/rule-32-enjoy-little-things-s3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you’ve ever spent any time wrestling with Maya distribution, you’ve probably noticed that &lt;code&gt;userSetup.py&lt;/code&gt; executes in an odd fashion: it’s not a module that gets imported, it’s basically a series of statements that get executed when Maya fires&amp;nbsp;up. &lt;/p&gt;
&lt;p&gt;Unfortunately that also means that most of the usual strategies you’d use in python to find out &lt;em&gt;where&lt;/em&gt;, exactly, you are running from is problematic. The usual python tricks like &lt;code&gt;__file__&lt;/code&gt; don’t work; and most of the time asking for &lt;code&gt;os.getcwd()&lt;/code&gt; will point at your Maya program directory. Usually you end up running around looking at all the directories where Maya might be stashing a &lt;code&gt;userSetup&lt;/code&gt; and trying to figure out which one is the one you are in`. It’s&amp;nbsp;ugly.  &lt;/p&gt;
&lt;p&gt;However today, I &lt;em&gt;&lt;strong&gt;actually found one which works&lt;/strong&gt;&lt;/em&gt;. At least, I haven’t figured out how to break it&amp;nbsp;yet.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;inspect&lt;/span&gt;  
&lt;span class="n"&gt;USER_SETUP_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inspect&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentframe&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f_code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;co_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since I’ve tried to figure this one out on at least a hundred previous occasions, I am feeling unduly smug about this&amp;nbsp;one.   &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;&lt;/em&gt;, if you’re wondering why I care: this makes it really easy to do a simple install/uninstall of a &lt;a href="egg_man"&gt;&lt;code&gt;userSetup.py&lt;/code&gt; / &lt;code&gt;userSetup.zip&lt;/code&gt; combo&lt;/a&gt; with no environment variables or special&amp;nbsp;rules.   &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;PPS&lt;/span&gt;&lt;/strong&gt;: &lt;em&gt;Take that,&amp;nbsp;Maya!&lt;/em&gt;&lt;/p&gt;</content><category term="maya"></category><category term="python"></category></entry><entry><title>The Memory Hole</title><link href="https://theodox.github.io/2016/memory_hole" rel="alternate"></link><published>2016-02-06T19:50:00-08:00</published><updated>2016-02-06T19:50:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-02-06:/2016/memory_hole</id><summary type="html">&lt;p&gt;An object lesson in why you need to write stuff&amp;nbsp;down.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We tend to be the kind of people who throw themselves into things – we live for the joy of problem solving. So when we’re really grappling with the intricacies of todays disaster, we immerse ourselves in it. We tear it apart and inspect all the little moving pieces till we understand it well enough to duct-tape it back together&amp;nbsp;again.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.ocinside.de/media/uploads/less_memory_4.jpg"&gt;&lt;img alt="" src="http://www.ocinside.de/media/uploads/less_memory_4.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Along the way, that attention to detail and mastery of nuance tends to make us think we know it all. But – a shock, I know – we don’t. More to the point, we might now it all &lt;em&gt;for the moment&lt;/em&gt;. But we’ll dump that knowledge to make sure we have room for our encyclopedic knowledge of tomorrow’s problem. And next week’s. And next&amp;nbsp;months.  &lt;/p&gt;
&lt;p&gt;In short, we’re constantly flushing our caches. Unless you’re stuck in a rut, doing the same thing every day, you’re constantly learning new little things for your current problem and silently shelving the knowledge you aquired for your&amp;nbsp;last.  &lt;/p&gt;
&lt;p&gt;This is one reason why good code comments are so important. Sure, comments rot just like code. But a couple of well-placed notes about how and why the code looks the way it does can save future you a lot of time when many layers of memory recycling have left you completeley oblivious about what the hell past you was up to. I can easily think of a couple of embarrassing occasions where I’ve literally chased my own tail – done something non-obvious because of a wierd maya bug, then come back six month later to ‘clean up’ my ‘ugly code’ and of course hit the exact same bug&amp;nbsp;again.   &lt;/p&gt;
&lt;p&gt;Of course, good comments don’t have to have high literary quality, they don’t need to cover every variable and for loop, and they certainly don’t need to be overwhelming: what they should be is notes to future-self that will help him or her revive all the fading memories which seem so obvious today but which will be utterly erased before the next season of &lt;em&gt;Silicon Valley&lt;/em&gt; is released.&lt;br&gt;
Which brings me, by a &lt;em&gt;very&lt;/em&gt; roundabout route, to what I actually set out to talk about: a perfect case in point. I was noodling around with a system that needed to fire events for maya attribute changes: basically, a way to make &lt;code&gt;attributeChanged&lt;/code&gt; scriptJobs that were easy to start, stop and restart. So I did a little googling&amp;nbsp;and…   &lt;/p&gt;
&lt;p&gt;Yep. I’d already written it. I’d even &lt;a href="https://github.com/theodox/attributeEvents"&gt;put it up on Github&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;In my defense, I realized in retrospect that I had cancelled the project at work that made it necessary the first time: I did the work on the system, got it ready to go, and then decided that there was a simpler way to solve the problem without all those attribute-change scripts anyway. Nonetheless it’s a perfect illustration of how thoroughly one’s short-term memory cache gets flushed – and of the importance of leaving good comments. At least when I found the damn thing the readme that Github makes you put up reminded me how it was supposed to work (as an aside, it’s a great reason for putting your stuff up on GitHub or similar forums: knowing that other people will be looking at it forces you to clean up and document more than you would if you just decided to shelve a&amp;nbsp;project). &lt;/p&gt;
&lt;p&gt;So there you have it: an object lesson in the importance of clarity in tools development &lt;em&gt;and&lt;/em&gt; a free module for messing around with AttributeChange&amp;nbsp;scriptJobs!&lt;/p&gt;</content><category term="techart"></category></entry><entry><title>For my homies</title><link href="https://theodox.github.io/2016/for_my_homies" rel="alternate"></link><published>2016-02-01T08:46:00-08:00</published><updated>2016-02-01T08:46:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-02-01:/2016/for_my_homies</id><summary type="html">&lt;p&gt;Tech art&amp;nbsp;representin&amp;#8217;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-RZtbJhpL0Ds/Vq-LmkPaLjI/AAAAAAABNSk/i2R7KWtnOi4/s1600/Slack%2Bfor%2BiOS%2BUpload.png.jpeg"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-RZtbJhpL0Ds/Vq-LmkPaLjI/AAAAAAABNSk/i2R7KWtnOi4/s640/Slack%2Bfor%2BiOS%2BUpload.png.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hat tip: Matt&amp;nbsp;Heiniger&lt;/p&gt;</content><category term="techart"></category></entry><entry><title>Some fixups for sfx</title><link href="https://theodox.github.io/2016/some_fixups_for_sfx" rel="alternate"></link><published>2016-01-29T00:52:00-08:00</published><updated>2016-01-29T00:52:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-01-29:/2016/some_fixups_for_sfx</id><summary type="html">&lt;p&gt;pending&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve posted &lt;a href="https://github.com/theodox/sfx/commits/master"&gt;a couple of fixes&lt;/a&gt; to the code for the &lt;a href="http://techartsurvival.blogspot.com/2016/01/first-module-of-year.htmlDone"&gt;shaderfx module&lt;/a&gt; I posted a little while ago.  &lt;a href="https://plus.google.com/116374315761191190711"&gt;+Sophie Brennan&lt;/a&gt; spotted a problem with the way that module handled some kinds of nodes &amp;#8212; which I had assumed were just plain old objects but which were in fact buttoned-up group nodes.  Since they didn&amp;#8217;t use the same method to report their outputs as the rest of shaderfx they could not easily be created or connected using the&amp;nbsp;module.  &lt;/p&gt;
&lt;p&gt;Luckily  &lt;a href="https://plus.google.com/115746724358684308496"&gt;+Kees Rijnen&lt;/a&gt;, the main author of shaderfx, noticed the blog post and helpfully  pointed me at the source of the problem which I&amp;#8217;ve included in a&amp;nbsp;fix.   &lt;/p&gt;
&lt;p&gt;If you are using the original version of the code this may be a breaking change.  To unify the way that individual nodes and groups are connected,  I changed the connect() and disconnect() methods to take only two arguments where they previously took 4.  In the first pass you would&amp;nbsp;write  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;network.connect( node1, node1.outputs.xyz, node2, node2.inputs.rgb)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which was needlessly wordy.  So connect() and disconnect() now sport the cleaner, simpler&amp;nbsp;syntax  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;network.connect(node1.outputs.xyz,   node2.inputs.rgb)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As always, comments and pulls are&amp;nbsp;encouraged!&lt;/p&gt;</content><category term="sfx"></category><category term="programming"></category><category term="maya"></category></entry><entry><title>First module of the year!</title><link href="https://theodox.github.io/2016/sfx_module" rel="alternate"></link><published>2016-01-13T23:35:00-08:00</published><updated>2016-01-13T23:35:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2016-01-13:/2016/sfx_module</id><summary type="html">&lt;p&gt;Introducing &lt;span class="caps"&gt;SFX&lt;/span&gt; &amp;#8212; a python module for scripting Maya shaderFX&amp;nbsp;shaders.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s been a busy few months at work, and the blogging has been pretty light. But I promised some folks on the Tech-Artists.org slack that I&amp;#8217;d share some code for dealing with Mays&amp;#8217;s ShaderFX system: a very useful toolkit but not the best documented or automatable part of Maya. Since it&amp;#8217;s New Years&amp;#8217; Resolution time, I thought I&amp;#8217;d kill two birds with one stone and put up some notes to go with the&amp;nbsp;code  &lt;/p&gt;
&lt;p&gt;All of shaderfx in maya is organized by a single, undocumented command. Which is pretty&amp;nbsp;lame.   &lt;/p&gt;
&lt;p&gt;However, it’s not as bad as it seems once you figure out the standard command form, which is always some variant of this&amp;nbsp;form:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    shaderfx -sfxnode &amp;lt;shader node&amp;gt; -command &amp;lt;command&amp;gt; &amp;lt;node id&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;sfxnode&lt;/code&gt; argument tells maya which sfx shader to work on. The &lt;code&gt;command&lt;/code&gt; flag indiciates an action and the &lt;code&gt;node id&lt;/code&gt; specifies an node in the network. Nodes are assigned an id in order of creation, with the firstnode after the root ordinarily being number 2 and so on – however the ids are not recycled so a network which has been edited extensively can have what look like random ids and there is no guarantee that the nodes will form a neat, continuous order. &lt;br&gt;
Many commands take additional arguments as well. Those extra always follow the main command;&amp;nbsp;thus   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    shaderfx -n &amp;quot;StingrayPBS1&amp;quot; -edit_int 19 &amp;quot;uiorder&amp;quot; 1;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;sets the value of the &lt;code&gt;uiorder&lt;/code&gt; field on node 19 to a value of 1. &lt;br&gt;
The &lt;code&gt;shaderfx&lt;/code&gt; command can also return a value: to query the &lt;code&gt;uiorder&lt;/code&gt; field in the example above you’d&amp;nbsp;issue   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    shaderfx -n &amp;quot;StingrayPBS1&amp;quot; -getPropertyValue 19 &amp;quot;uiorder&amp;quot;;  
    // Result: 1 //
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, the good news is that the &lt;code&gt;shaderfx&lt;/code&gt; command is actually pretty capable: so far, at least, I have not found anything I really needed to do that the command did not support. For some reason the help documentation on the mel command is pretty sparse but the python version of the help text is actually quite verbose and useful.&lt;br&gt;
Still, it’s kind of a wonky &lt;span class="caps"&gt;API&lt;/span&gt;: a single command for everything, and no way to really reason over a network as a whole. Worse, the different types of nodes are identified only by cryptic (and undocumented) numeric codes: for example a &lt;code&gt;Cosine&lt;/code&gt; node is 20205 – but the only way to find that out is to use the &lt;code&gt;getNodeTypeByClassName&lt;/code&gt; command (and, by the way, the node type names are case and space&amp;nbsp;sensitive).  &lt;/p&gt;
&lt;h2&gt;Cleanup&amp;nbsp;crew&lt;/h2&gt;
&lt;p&gt;With all that baggage I was pretty discouraged about actually getting any work done using shaderfx programmatically. However a little poking around produced what I hope is a somewhat more logical &lt;span class="caps"&gt;API&lt;/span&gt;, which I’m &lt;a href="https://github.com/theodox/sfx"&gt;sharing on github&lt;/a&gt;.&lt;br&gt;
The &lt;code&gt;sfx&lt;/code&gt; module is a plain python module - you can drop it into whatever location you use to story your Maya python scripts. It exposes two main classes:&lt;br&gt;
&lt;strong&gt;&lt;code&gt;SFXNetwork&lt;/code&gt;&lt;/strong&gt; represents a single shader network – it is a wrapper around the Maya shader ball. The &lt;code&gt;SFXNetwork&lt;/code&gt; contains an indexed list of all the nodes in the network and also exposes methods for adding, deleting, finding and connecting the nodes in the network.&lt;br&gt;
&lt;strong&gt;&lt;code&gt;SFXNode&lt;/code&gt;&lt;/strong&gt; represets a single node inside the network. It exposes the properties of the node so they can be accessed and edited using python dot-style&amp;nbsp;syntax. &lt;/p&gt;
&lt;p&gt;The module also includes to submodules, &lt;code&gt;sfxnodes&lt;/code&gt; and &lt;code&gt;pbsnodes&lt;/code&gt;. These make it easier to work with the zillions of custom node ids: Instead of remembering that a &lt;code&gt;Cosine&lt;/code&gt; node is type 20205, you reference &lt;code&gt;sfxnodes.Cosine&lt;/code&gt;. I’ll be using the &lt;code&gt;StingrayPBSNetwork&lt;/code&gt; class and the &lt;code&gt;pbsnodes&lt;/code&gt; submodule in my examples, since most of my actual use-case involves the Stingray &lt;span class="caps"&gt;PBS&lt;/span&gt; shader. The syntax and usage, however, are the same for the vanilla &lt;code&gt;SFXNetwork&lt;/code&gt; and &lt;code&gt;sfxnodes&lt;/code&gt; – only the array of node types and their properties.&lt;br&gt;
Here’s a bit of the basic network&amp;nbsp;functionality.   &lt;/p&gt;
&lt;h3&gt;Create a&amp;nbsp;network&lt;/h3&gt;
&lt;p&gt;To create a new shaderfx network, use the &lt;code&gt;create()&lt;/code&gt; classmethod:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sfx&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StingrayPBSNetwork&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sfx.pbsnodes&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pbsnodes&lt;/span&gt;

&lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StingrayPBSNetwork&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;new_shader&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That creates a new shaderball (note that it won’t be connected to a shadingEngine by default – that’s up to&amp;nbsp;you).  &lt;/p&gt;
&lt;h3&gt;Listing&amp;nbsp;nodes&lt;/h3&gt;
&lt;p&gt;An SFXNetwork contains a dictionary of id and nodes in the field &lt;code&gt;nodes&lt;/code&gt;. This represents all of the graph nodes in the network. &lt;em&gt;Note I’ve used a different shader than the default one in this example to make things easier to&amp;nbsp;read.&lt;/em&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;  
&lt;span class="c1"&gt;# { 1 : &amp;lt;sfxNode UnlitBase (1)&amp;gt;, 2: &amp;lt;sfxNode &amp;#39;MaterialVariable&amp;#39; (2)&amp;gt; }&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;  
&lt;span class="c1"&gt;# &amp;lt;sfxNode &amp;#39;MaterialVariable&amp;#39; (2)&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The keys of the dictionary are the node ids. As already noted, these are not guaranteed to be in a continuous order depending on what you do to the network - however they are stable and they will always match the id numbers shown in the shaderfx ui when you activate the &lt;code&gt;show node IDs&lt;/code&gt; toggle in the ShaderFX&amp;nbsp;window.  &lt;/p&gt;
&lt;p&gt;The values of the node dictionary are &lt;code&gt;SFXNode&lt;/code&gt; objects.  &lt;/p&gt;
&lt;h3&gt;Adding new&amp;nbsp;nodes&lt;/h3&gt;
&lt;p&gt;To add a node to the network use its &lt;code&gt;add()&lt;/code&gt; method and pass a class from either the &lt;code&gt;sfxnodes&lt;/code&gt; or &lt;code&gt;pbsnodes&lt;/code&gt; submodule to indicate the&amp;nbsp;type.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;if_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pbsnodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# creates an If node and adds it to the network&lt;/span&gt;

&lt;span class="n"&gt;var_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pbsnodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MaterialVariable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# creates a MaterialVariable node and adds it to the network&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Connecting&amp;nbsp;nodes&lt;/h3&gt;
&lt;p&gt;Connecting nodes in shaderfx requires specifying the source node the source plug, the target node and the target plug. Unforunately the plugs are indentifited by zero-based index numbers: the only way to know them by default is to count the slots in the actual shaderfx &lt;span class="caps"&gt;UI&lt;/span&gt;. Output plugs are usually (not always) going to be index zero but the target plugs can be all over the map.&lt;br&gt;
To make this cleaner, each &lt;code&gt;SFXNode&lt;/code&gt; object exposes two fields called &lt;code&gt;inputs&lt;/code&gt; and &lt;code&gt;outputs&lt;/code&gt;, which have named members for the available plugs. So to connect the ‘result’ output of the &lt;code&gt;var_node&lt;/code&gt; object to the input named ‘B’ on the &lt;code&gt;if_node&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;if_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the connection can’t be made for some reason, a &lt;code&gt;MayaCommandError&lt;/code&gt; will be&amp;nbsp;raised.  &lt;/p&gt;
&lt;p&gt;In any shader system it&amp;#8217;s common to have to ‘swizzle’ the connections: to connect the x and z channels of a 3-pronged output to channels of an input, for example. Mismatched swizzles are a common cause of those &lt;code&gt;MayaCommandErrors&lt;/code&gt;. You can set the swizzle along with the connection by passing the swizzle you need as a&amp;nbsp;string  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;if_node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# connects the &amp;#39;x&amp;#39; output of var_node  to the b channel of the input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Setting node&amp;nbsp;properties&lt;/h3&gt;
&lt;p&gt;Nodes often have editable properties. There are a lot of different ones so it is often necessary to inspect a node and find out what properties it has and what type of values those properties accept. Every &lt;code&gt;SFXNode&lt;/code&gt; object has a read-only member &lt;code&gt;properties&lt;/code&gt;, which is a dictionary of names and property types.&amp;nbsp;Thus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;  
&lt;span class="c1"&gt;# { &amp;#39;min&amp;#39;: &amp;#39;float&amp;#39;, &amp;#39;max&amp;#39;: &amp;#39;float&amp;#39;, &amp;#39;method&amp;#39;: &amp;#39;stringlist&amp;#39; }&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you know that a property exists on an object you can query it or set it using typical python dot&amp;nbsp;syntax:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   
&lt;span class="c1"&gt;# get the node at index 5 in this network&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="c1"&gt;# { &amp;#39;min&amp;#39;: &amp;#39;float&amp;#39;, &amp;#39;max&amp;#39;: &amp;#39;float&amp;#39;, &amp;#39;method&amp;#39;: &amp;#39;stringlist&amp;#39; }&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;  
&lt;span class="c1"&gt;# 1.0  &lt;/span&gt;
&lt;span class="c1"&gt;# getting a named property returns its value.&lt;/span&gt;

&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;  
&lt;span class="c1"&gt;# sets the node value&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;  
&lt;span class="c1"&gt;# 2.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you try to access a property that doesnt exist, an error will be&amp;nbsp;raised:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_dont_exist&lt;/span&gt;  
&lt;span class="c1"&gt;# AttributeError: no attribute named i_dont_exist&lt;/span&gt;

&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i_dont_exist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;  
&lt;span class="c1"&gt;# MayaCommandError&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Help&amp;nbsp;wanted!&lt;/h2&gt;
&lt;p&gt;So, there’s the basics. This module is pretty simple but I’ve found it &lt;em&gt;extremely&lt;/em&gt; helpful in workign with &lt;span class="caps"&gt;SFX&lt;/span&gt; nodes. It will be much easier to work with, of course, if you already know your way around ShaderFX. Please let me know how it works for you – and as always bug reports and pull requests are very&amp;nbsp;welcome! &lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="shaders"></category><category term="techart"></category><category term="sfx"></category></entry><entry><title>Grrrr….. Maya!!!</title><link href="https://theodox.github.io/2015/grrrr_maya" rel="alternate"></link><published>2015-10-27T22:43:00-07:00</published><updated>2015-10-27T22:43:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-10-27:/2015/grrrr_maya</id><summary type="html">&lt;p&gt;A really annoying, and really old bug in Maya relating to&amp;nbsp;materials.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Some kinds of pain are just occasional: you stub your toe or bump your head, ouch, and then its&amp;nbsp;over. &lt;/p&gt;
&lt;p&gt;Other kinds of pain aren&amp;#8217;t as sharp or as sudden&amp;#8230; but they&amp;#8217;re chronic.  That persistent twinge in your lower back may not hurt as much as a twisted ankle - but it&amp;#8217;s going to be there forever (at least unless you get into Power Yoga, or so my wife&amp;nbsp;claims).  &lt;/p&gt;
&lt;p&gt;Maya is old enough to have a few of those chronic pains, and I just ran in to one which &amp;#8212; once we debugged it and figured it out &amp;#8212; I realized has been a persistant irritant for at least the last decade; if my creaky old memory does not lie it&amp;#8217;s been a distinct pain in the butt since at least 2002 and it may very well go back all the way to Maya&amp;nbsp;1.0. &lt;/p&gt;
&lt;p&gt;In another context I might even have been able to diagnose it but instead we spent a ton of time and energy working around an unexpected behavior which is, in fact, purely standard Maya. It&amp;#8217;s &lt;em&gt;stupid&lt;/em&gt; Maya, but it&amp;#8217;s standard too.  Maya, alas, is &lt;strong&gt;double plus ungood&lt;/strong&gt; about mixing per-face and per-object material assignments. So, I figured I&amp;#8217;d document this here for future sufferers: it might not ease the pain much, but at least you&amp;#8217;ll know you&amp;#8217;re not&amp;nbsp;crazy.  &lt;/p&gt;
&lt;p&gt;The basic problem is that assigning materials to faces and to objects use slightly different mechanisms. If you check your hypergraph you&amp;#8217;ll see that per-face assignments connect to their shadingGroup nodes through the &lt;code&gt;compInstObjectGroups[]&lt;/code&gt; attribute while object-level assigmemts go through the similar-but-not-identical &lt;code&gt;instObjectGroups&lt;/code&gt; attribute (if you&amp;#8217;re looking for these in the docs, the component cone is inherited from the &lt;a href="http://help.autodesk.com/cloudhelp/2016/ENU/Maya-Tech-Docs/Nodes/geometryShape.html"&gt;&lt;code&gt;geometryShape&lt;/code&gt;&lt;/a&gt; class and the object version comes from &lt;a href="http://help.autodesk.com/cloudhelp/2016/ENU/Maya-Tech-Docs/Nodes/dagNode.html"&gt;&lt;code&gt;dagNode&lt;/code&gt;&lt;/a&gt;).  &lt;/p&gt;
&lt;p&gt;As long as you&amp;#8217;re working with one object at a time this isn&amp;#8217;t a problem. However, if you&amp;#8217;re duplicating or copy-pasting nodes, there&amp;#8217;s a gotcha:  If you ever try to merge meshes which have a mix of per-face and per-object assignments, Maya will magically &amp;#8220;remember&amp;#8221; old per-face assigments in the combined mesh.  If you&amp;#8217;re a masochist, here&amp;#8217;s the&amp;nbsp;repro:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a object, give it a couple of different materials on different&amp;nbsp;faces&lt;/li&gt;
&lt;li&gt;duplicate it a couple of&amp;nbsp;times&lt;/li&gt;
&lt;li&gt;assign a per-object material to the duplicates, overriding the original per-face&amp;nbsp;assignments&lt;/li&gt;
&lt;li&gt;combine all the&amp;nbsp;meshes.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Et voîla!&lt;/em&gt; The cloned meshes revert to their original&amp;nbsp;assignments&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-WHA-mYamWSw/VjBfoXDF_4I/AAAAAAABMuY/BtrR34QPRhM/s1600/pasted_image_at_2015_10_23_05_32_pm_720.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-WHA-mYamWSw/VjBfoXDF_4I/AAAAAAABMuY/BtrR34QPRhM/s640/pasted_image_at_2015_10_23_05_32_pm_720.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What appears to happen is that those &lt;code&gt;compInstObjectGroups&lt;/code&gt; connections are driven by hidden &lt;code&gt;groupID&lt;/code&gt; nodes which don&amp;#8217;t get deleted when the per-face assignments are overridden by the per-object ones in step (3) .  They stick around even though they aren&amp;#8217;t being used, and when the mesh is combined they step right back into their original&amp;nbsp;roles.  &lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re doing this interactively it&amp;#8217;s an annoyance. If you&amp;#8217;re got tools that do things like auto-combine meshes to cut down on transform load in your game&amp;#8230;. well, it&amp;#8217;s a source of some surprising bugs and equally surprising bursts of profanity.  But at least it&amp;#8217;ss&amp;nbsp;predictable.&lt;/p&gt;
&lt;p&gt;The workaround:  Before doing any mesh combination first delete the existing history then add something harmless to meshes you&amp;#8217;re about to combine. (I use a triangulate step, since this happens only at export time). That kills the rogue &lt;code&gt;groupID&lt;/code&gt; nodes and keeps the combined mesh looking the way you&amp;nbsp;intended.&lt;/p&gt;
&lt;p&gt;Sheesh. What a way to make a&amp;nbsp;living.&lt;/p&gt;</content><category term="maya"></category><category term="bugs"></category><category term="programming"></category><category term="techart"></category></entry><entry><title>Charcoal - it’s smokin’!</title><link href="https://theodox.github.io/2015/charcoal" rel="alternate"></link><published>2015-10-06T22:40:00-07:00</published><updated>2015-10-06T22:40:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-10-06:/2015/charcoal</id><summary type="html">&lt;p&gt;The Charcoal editor, an excellent drop-in replacement for Maya&amp;#8217;s script&amp;nbsp;editor&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you’re shopping around for something new – whether it’s a cool new piece of software or just a kitchen gadget – it’s not uncommon to tell yourself, “man, I wish I had thought of that.” But what’s really impressive is when you see a polished product and you say to yourself &lt;em&gt;Dammnit, I absolutely thought of that!&lt;/em&gt;, or &lt;em&gt;I’ve been wanting this exact thing for years!&lt;/em&gt;. It’s a rare thrill when you stumble across something that seems as if it were a gift from some future self, come back to give you exactly what you wanted in a way that only you, yourself could.&lt;br&gt;
One of my coworkers found one of those little somethings the other day - a product that will make pretty much any &lt;span class="caps"&gt;TA&lt;/span&gt; go feel like Christmas came a little&amp;nbsp;early.   &lt;/p&gt;
&lt;p&gt;The &lt;a href="http://zurbrigg.com/charcoal-editor"&gt;Charcoal Editor&lt;/a&gt; from &lt;a href="http://zurbrigg.com/about"&gt;Chris Zurbrigg&lt;/a&gt; is a slick, polished replacement for Maya’s script editor. It’s a plugin (available for Maya on Mac, Windows and Linux) that offers many of the features of a slick Python &lt;span class="caps"&gt;IDE&lt;/span&gt; right inside of Maya. Some of the key highlights&amp;nbsp;include  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Syntax&amp;nbsp;highlighing&lt;/li&gt;
&lt;li&gt;Autcomplete (including your own code and also the entire Maya cmds&amp;nbsp;api)&lt;/li&gt;
&lt;li&gt;Smart indent and&amp;nbsp;dedent&lt;/li&gt;
&lt;li&gt;Bracket&amp;nbsp;matching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;but the feature that will sell most Maya veterans instantly is the fact you can execute lines or scripts without the familiar &lt;strong&gt;Select &amp;gt; Enter&lt;/strong&gt; that has deleted countless lines of your test code down the&amp;nbsp;ages.   &lt;/p&gt;
&lt;p&gt;&lt;a href="https://vimeo.com/89196374"&gt;Charcoal Editor Overview&lt;/a&gt; from &lt;a href="https://vimeo.com/zurbrigg"&gt;Chris Zurbrigg&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That one feature alone would probably be worth the price for most people who do a lot of scripting. But the whole package is thoughtfully put together in a way that clearly says the author wrote a tool for himself – and that he shares a lot of the frustrations that have driven you and I bonkers for the last 18 years of Maya history. A great example is the addition of quick help for Maya commands: if you (like me) can never remember the difference between the flags for &lt;code&gt;listConnections&lt;/code&gt; and those for &lt;code&gt;listRelatives&lt;/code&gt;, Charcaol allows you to pop up a quick in-window help view or to open the relevant documentation in a browser: a welcome alternative to the maddening ritual of entering “cmds.whatever” into Chrome and being directed to the Maya 2011 Japanese docs by the mysterious imps of the&amp;nbsp;internet.   &lt;/p&gt;
&lt;p&gt;In general, Charcoal shows a lot of attention to the nuances of scripting work. For example, it allows you to quickly toggle layouts: Charcoal allows you to quickly flip back and forth between the usual split view and a full panel of either script or history, so you don’t have to give up coding space to see your printouts or vice-versa. Likewise, you can set font sizes and color schemes for the scripting panel and the history panel separately – a big help if you want to save space on your printouts or if (like me) your eyes are going and you need to bump up the font size for coding. The history panel even supports highlighting – separating errors and warnings clearly from regular printouts, for example. All in all it’s a collection of small touches that offers a much-appreciated sense that the program has your back and that the author has wrestled with many of the same irritations you’ve&amp;nbsp;had.  &lt;/p&gt;
&lt;p&gt;The product also ventures into territory that’s useally associated with full-fledged IDEs. It particular it offers an “outline view” which displays the classes and functions in the current scope - a big help for navigating around in a longish file, as well as a handy way to remember what you’re working with. There’s also a “project view” which displays all of the scripts in a project folder tree – more or less the same as the project views in &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; or &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; (two other scripter-friendly editors you should check out if you’ve never seen them.)&lt;br&gt;
These &lt;span class="caps"&gt;IDE&lt;/span&gt; features will be very helpful for folks who’ve been soldiering on with nothing but the Maya script editor and Notepad. If you’re already using an &lt;span class="caps"&gt;IDE&lt;/span&gt; like &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;, &lt;a href="https://wingware.com/"&gt;Wing&lt;/a&gt;, or &lt;a href="http://microsoft.github.io/PTVS/"&gt;&lt;span class="caps"&gt;PTVS&lt;/span&gt;&lt;/a&gt; they may not be quite enough to wean you out of your fancy environment – particularly if you’r gotten used to using a real debugger instead of littering your code with print statements. Charcoal’s project features are functional but – given the nature of the task and the audience – are not as fancy as the equivalent features in big budget development environments. If you really prize the ablity to inifitely noodle on color themes, or a built-in style guide, you may find yourself wandering back to one of the bigger packages. That’s not a knock on Charcoal, though – it’s just a reminder that it’s a specialist tool for Maya users and not a general-purpose project management&amp;nbsp;powerhouse.  &lt;/p&gt;
&lt;p&gt;For myself, I plan on sticking with PyCharm for long coding sessions (btw, PyCharm fans, you’ll be &lt;em&gt;incredibly&lt;/em&gt; pleased to hear that Charcoal allows cut and paste directly from PyCharm, unlike Maya’s wonky script editor. Whoop-de-doo!) However Charcoal more than justifies itself as a replacement for the vanilla script editor with a lot of juicy productivity features. I’ve already gotten a lot of productivity bounce by using &lt;a href="https://github.com/cmcpasserby/MayaCharm"&gt;MayaCharm&lt;/a&gt; to bypass the Maya script editor whenever possible – but I still spend quite a lot of time in the clunky old Maya pane nonetheless. I’ve got high hopes that Charcoal will save precious brain power for real problems and allow me to focus more on doing my job and less on frantically hitting Undo after my last attempt to execute a line accidentally erased an hour’s&amp;nbsp;work.   &lt;/p&gt;
&lt;p&gt;Charcoal offers a free, non-saving demo; an individual license is $49 &lt;span class="caps"&gt;US&lt;/span&gt; (site licenses are available but you’ll have to negotiate them with the&amp;nbsp;author).&lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="tools"></category></entry><entry><title>I don’t endorse this…</title><link href="https://theodox.github.io/2015/dont_endorse" rel="alternate"></link><published>2015-09-16T15:09:00-07:00</published><updated>2015-09-16T15:09:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-09-16:/2015/dont_endorse</id><summary type="html">&lt;p&gt;Ah, &lt;span class="caps"&gt;XKCD&lt;/span&gt;. Get out of my head,&amp;nbsp;dammit.&lt;/p&gt;</summary><content type="html">&lt;p&gt;.. But I could not resist. The original title was &lt;em&gt;Automation comes from the Latin word meaning &amp;#8216;self&amp;#8217;, and &amp;#8216;mating&amp;#8217;, which means &amp;#8216;screwing&lt;/em&gt;&amp;#8217;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lh3.googleusercontent.com/-3a1UXfwg0rk/VfnomRM_Q_I/AAAAAAABMmc/VYrorxZyTMI/s640/blogger-image--1005462469.jpg"&gt;&lt;img alt="" src="https://lh3.googleusercontent.com/-3a1UXfwg0rk/VfnomRM_Q_I/AAAAAAABMmc/VYrorxZyTMI/s640/blogger-image--1005462469.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="techart"></category></entry><entry><title>It’s that time again! GDC Call for submissions is open!</title><link href="https://theodox.github.io/2015/gdc_subs_2015" rel="alternate"></link><published>2015-08-15T14:33:00-07:00</published><updated>2015-08-15T14:33:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-08-15:/2015/gdc_subs_2015</id><summary type="html">&lt;p&gt;The &lt;span class="caps"&gt;GDC&lt;/span&gt; call for submissions 2015 is&amp;nbsp;open&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s time again for &lt;span class="caps"&gt;GDC&lt;/span&gt; speakers to submit their proposals.  &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;#8217;s have a long history of providing excellent talks at the main conference and at the Tech Art Bootcamp - so take some time to put together a proposal for this year&amp;#8217;s&amp;nbsp;conference.   &lt;/p&gt;
&lt;p&gt;For more on why this is a Good Idea&lt;sup&gt;tm&lt;/sup&gt;, check out &lt;a href="/pages/pub/submit"&gt;last year&amp;#8217;s post on the same topic&lt;/a&gt;.  One important note! This year the call for subs closes on August 27, &lt;strong&gt;&lt;span class="caps"&gt;NOT&lt;/span&gt;&lt;/strong&gt; August 28 as it is in the linked post&amp;nbsp;!&lt;/p&gt;</content><category term="industry"></category><category term="gdc"></category></entry><entry><title>code wars</title><link href="https://theodox.github.io/2015/code_wars" rel="alternate"></link><published>2015-08-08T12:49:00-07:00</published><updated>2015-08-08T12:49:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-08-08:/2015/code_wars</id><summary type="html">&lt;p&gt;Code Wars, yet another programming dojo &amp;#8212; but a pretty good&amp;nbsp;one&lt;/p&gt;</summary><content type="html">&lt;p&gt;By a certain stroke of cosmic irony, it was just after I finished shoe-horning lame &lt;em&gt;Star Wars&lt;/em&gt; jokes into my last post that I started to get obsessed with &lt;a href="http://www.codewars.com/"&gt;CodeWars&lt;/a&gt;, one of the plethora of competitive coding sites that have sprung up in the last few&amp;nbsp;years.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-vc-eVNbzo1Q/VcZdEcRBhXI/AAAAAAABMag/NYI22iT0zro/s1600/cw.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-vc-eVNbzo1Q/VcZdEcRBhXI/AAAAAAABMag/NYI22iT0zro/s400/cw.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mostly I find that sort of thing pretty annoying – it’s a genre that all too easily degenerates into macho brogrammer chest-thumping. 90 percent of the code I see on those sites is so tightly knotted – in hopes of scoring fewest-number-of-lines bragging rights – that it’s useless for learning. I’m impressed as hell by&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f=lambda s:next((t,k)for t,k in map(lambda i:(s[:i],len(s)/i),range(1,len(s)+1))if t*k==s)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but I never want to have to &lt;em&gt;interact&lt;/em&gt; with it (Bonus points if you can tell what it does! Post your answer in the&amp;nbsp;comments&amp;#8230;.)  &lt;/p&gt;
&lt;p&gt;The nice thing about Codewars is that the experience tends to push you into thinking about how to solve the problems, rather than how to maximize your&amp;nbsp;score. &lt;/p&gt;
&lt;p&gt;I particularly like two things: first, the site includes a built-in test framework so you can do The Right Thing&lt;sup&gt;tm&lt;/sup&gt; and write the tests before you write the code – not only is it a helpful touch for would-be problem solvers its very effective ‘propaganda of the deed’ for encouranging people to take tests&amp;nbsp;seriously. &lt;/p&gt;
&lt;p&gt;Second, the site doesn’t just show you the ‘best’ solutions, it shows you all of them – and it allows you to vote both for solutions you think are clever and ones you think embody “best practices.” That snippet I posted above is extremely &lt;em&gt;clever&lt;/em&gt; but not a best practice – I wouldn’t let something like that into my codebase if I could avoid it! I’m not smart enough to unriddle such things, though I’m glad they&amp;nbsp;exist.  &lt;/p&gt;
&lt;p&gt;The other nice thing is that most of the problems are bite-sized, the sort of thing you can chew on while waiting for a longish perforce sync to complete. It’s a great way to practice you coding chops outside all the gnarly things that come with working in a particular problems set for work. I’ve had a work task which involved me in a lot of 5-minute wait times this week and I found CodeWars to be a nice chance to do keep my brains warm while waiting for&amp;nbsp;Perforce.  &lt;/p&gt;
&lt;p&gt;So, if you’re looking to sharpen up your coding skills you should definitely check out &lt;a href="http://www.codewars.com/"&gt;CodeWars&lt;/a&gt;. My username is &lt;em&gt;Theodox&lt;/em&gt; and in the goofy ninja-academy language of Codewars we can form an ‘alliance’ by following one another. We can make technical art a power in the land!&lt;br&gt;
On the practical side: codewars supports Python, Javascript, and several other languages – they just added C#. It’s great way to get familiar with new syntaxes and to see how folks who know what they are doing tackle problems natively, it’s a great tool to pick up a new language on your own. Give it a&amp;nbsp;shot!  &lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Return of the namedtuples</title><link href="https://theodox.github.io/2015/return_of_the_namedtuples" rel="alternate"></link><published>2015-08-02T17:59:00-07:00</published><updated>2015-08-02T17:59:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-08-02:/2015/return_of_the_namedtuples</id><summary type="html">&lt;p&gt;A quick review of the Python &lt;code&gt;namedtuple&lt;/code&gt; &amp;#8212; a great way to return complex data from your functions without needing complex custom&amp;nbsp;classes.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’m sure you’ve read or written code that looks like&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here &lt;code&gt;some_function&lt;/code&gt; must be using one of Python’s handiest features, the ability to return lists or tuples of different types in a single function. Python’s ability to return ‘whatever’ - a list, a tuple, or a single object – makes it easy to assemble a stream of data in one place and consume it in others wihout worrying about type declarations or creating a custom class to hold the results. Trying to create a similarly flexible system in, say, C# involves a lot of type-mongering. So it’s&amp;nbsp;nice.  &lt;/p&gt;
&lt;p&gt;At least, it’s nice &lt;em&gt;at first&lt;/em&gt;. Unfortunately it’s got some serious drawbacks that will become apparent after a while – outside the context of a single script or function, relying entirely on indices to keep things straight is dangerous. As so often in Pythonia, freedom and flexibility can come at the cost of chaos downstream if you’re not&amp;nbsp;careful.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcRd4-Lzu45urv3dmdng5DMjdlO-ILlLVxoa-HeHMZ8uczP4fLWC"&gt;&lt;img alt="" src="https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcRd4-Lzu45urv3dmdng5DMjdlO-ILlLVxoa-HeHMZ8uczP4fLWC"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#i-have-a-bad-feeling-about-this"&gt;&lt;/a&gt;I have a bad feeling about&amp;nbsp;this…&lt;/h1&gt;
&lt;p&gt;Everything will be hunky-dory as long as &lt;code&gt;some_function&lt;/code&gt; continues to pack its output the same way. In this example &lt;code&gt;some_function&lt;/code&gt; is probably doing something&amp;nbsp;like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# imagine some actual code here ...  &lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;object_list&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;attrib_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;settable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_attrib_settable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
           &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict_of_defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
           &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inevitably, though, something will come along that causes the order of the results to change. In a Maya example like this, for example, the likely cause would be some other user of this function finding out that the code needs to set defaults on an unusual value type. &lt;code&gt;setAttr&lt;/code&gt; needs to be told what type of data to expect if things are&amp;nbsp;unusual.  &lt;/p&gt;
&lt;p&gt;That being the case, your teammate extends &lt;code&gt;some_function&lt;/code&gt; to output the data type needed. If you’re lucky, the results look like &lt;code&gt;[node, attribute, value, type]&lt;/code&gt; and your existing code works fine. But if it changes to &lt;code&gt;[node, attribute, type, value]&lt;/code&gt; your existing code will break in wierd ways. Moreover if you haven’t written a lot of comments, the person fixing the bugs will have to sit down and deduce what &lt;code&gt;item[0]&lt;/code&gt;, &lt;code&gt;item[1]&lt;/code&gt; and &lt;code&gt;item[2]&lt;/code&gt; were supposed to&amp;nbsp;be.   &lt;/p&gt;
&lt;p&gt;This example is a perfect illustration unit tests are such a nice thing to have in Python-land: a unit test would probably catch the change in signature right away, alerting your helpful co-worker to the can of worms they have opened up by changing the output of the function. But the real moral of the story is how dangerous it is to rely on implicit knowledge of structures – like the ordering of a list – instead of on explicit instructions. When somebody fails to understand the implications of that ordering, bad things will happen. When the knowledge you need to debug the problem is hidden, things will be&lt;br&gt;
even&amp;nbsp;worse.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://images6.fanpop.com/image/photos/36000000/Harrison-in-Star-Wars-Empire-strikes-back-harrison-ford-36029606-3257-2231.jpg"&gt;&lt;img alt="" src="http://images6.fanpop.com/image/photos/36000000/Harrison-in-Star-Wars-Empire-strikes-back-harrison-ford-36029606-3257-2231.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sometimes things get&amp;nbsp;complicated&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Return classes strike&amp;nbsp;back&lt;/h2&gt;
&lt;p&gt;In most languages the way around this is to create a class that holds the results of something like &lt;code&gt;some_function&lt;/code&gt;. A result class provides clear, named access to what’s going&amp;nbsp;on:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeFuncResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;  
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;  
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

 &lt;span class="c1"&gt;# and inside of some_function()  &lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;  
    &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SomeFuncResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This means the receiving code is much neater and easier to&amp;nbsp;understand:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;some_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a better record of what you were trying to achieve in the first place, and it’s also much more survivable: as long as HelpfulCoworker01 does not actually rename the fields in the result object it can be tweaked and updated without causing&amp;nbsp;problems.  &lt;/p&gt;
&lt;h2&gt;A bit less&amp;nbsp;classy&lt;/h2&gt;
&lt;p&gt;For many cases this is the right way to go. However it comes with some drawbacks of its&amp;nbsp;own.   &lt;/p&gt;
&lt;p&gt;First off – let’s be honest – there’s a lot of typing for something so dull. I always try to leave that out of the equation when I can - the time spent typing the code is such a tiny fraction of the time you’ll spend reading it that trying to save a few keystrokes is usually a Bad Idea (tm). However, typing 5 lines when you could just type a pair of bracket does feel like an imposition – particularly when the 5 lines are 100% boring&amp;nbsp;boilerplate.  &lt;/p&gt;
&lt;p&gt;The second issue is that, being a class, &lt;code&gt;SomeFuncResult&lt;/code&gt; is comparatively expensive: it costs a smidge more in both memory and processor time than just a list or a tuple of values. I’m ranking this behind the typing costs deliberately, because most of the time that increment of cost doesn’t matter at all: if you’re dealing with a few hundred or even a few thousand of them, at a time the costs for spinning up new instances of &lt;code&gt;SomeFuncResult&lt;/code&gt; just to hold data are going to be invisible to users. However, if you are doing something more performance-intensive the costs of creating a full mutable object can be significant in large numbers. As always, &lt;a href="the_right_profile.html"&gt;it’s wiser not to try to optimize until things are working&lt;/a&gt; but this is still a consideration worth&amp;nbsp;recalling.  &lt;/p&gt;
&lt;p&gt;The last issue (but probably the most important) is that &lt;code&gt;SomeFuncResult&lt;/code&gt; can be changed in flight. Since it is a class, the data in a &lt;code&gt;SomeFuncResult&lt;/code&gt; can be updated (for you &lt;span class="caps"&gt;CS&lt;/span&gt; types, it is &lt;em&gt;mutable&lt;/em&gt;). This means some other piece of code that looks at the result object in between &lt;code&gt;some_function&lt;/code&gt; and you might can decide to mess with the results. That can be a feature or a bug depending on how you want to code it – but since Python does not have a built-in mechanism for locking fields in an object, you’d have to put in extra work to make sure the results didn’t get changed by accident if keeping the data pristine was mission-critical. You can use the a property decorator to make a fake read only&amp;nbsp;field:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeFuncResult&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
     &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;  
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attr&lt;/span&gt;  
         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;node&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_node&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_attribute&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alas, our 5 lines of boilerplate have now blossomed into 16. Our quest for clarity is getting&amp;nbsp;expensive.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://s-media-cache-ak0.pinimg.com/originals/ec/cf/c1/eccfc13e87cc987cbe29fadb248e3b6b.jpg"&gt;&lt;img alt="" src="https://s-media-cache-ak0.pinimg.com/originals/ec/cf/c1/eccfc13e87cc987cbe29fadb248e3b6b.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;obiter&amp;nbsp;dicta&lt;/h2&gt;
&lt;p&gt;One common way to get around the hassles – or at least, they typing costs –of custom return objects is simply to use dictionaries instead. If you use the &lt;a href="http://www.perforce.com/perforce/doc.current/user/p4pythonnotes.txt"&gt;perforce Python &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; you’ll be quite familiar with this strategy; instead of creating a class, you just return dictionaries with nice descriptive&amp;nbsp;names   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;object_list&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;attrib_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;settable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;is_attrib_settable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;settable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
           &lt;span class="n"&gt;new_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dict_of_defaults&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
           &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;node&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attribute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;attrib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;new_value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Like a custom class this increases readability and clarity; it’s also future proof since you can add more fields to the dictionary without messing with existing&amp;nbsp;data.   &lt;/p&gt;
&lt;p&gt;Even better, dictionaries – unlike classes – are self-describing: in order to understand the contents of a custom result class like &lt;code&gt;SomeFuncResult&lt;/code&gt; you’ll have to look at the source code, whereas you can see the contents of a result dictionary with a simple print statement. Dictionaries are slightly cheaper than classes (there is a &lt;a href="http://stackoverflow.com/questions/1336791/dictionary-vs-object-which-is-more-efficient-and-why"&gt;good workaround&lt;/a&gt; to speed up classes, but it’s something you have to write and maintain). And, of course, dictionaries have minimal setup costs: they are boiler-plate&amp;nbsp;free.  &lt;/p&gt;
&lt;p&gt;This doesn’t mean they are ideal for all circumstances,&amp;nbsp;however.&lt;/p&gt;
&lt;p&gt;The Achilles’ heel of using dictionaries is keys, which are likely to be strings. Unless you are very disciplined about using named constants for all your result dictionaries you’ll inevitably find that somebody somewhere has typed &lt;code&gt;attribite&lt;/code&gt; with an  &lt;em&gt;i&lt;/em&gt; instead of a &lt;em&gt;u&lt;/em&gt; and suddenly perfectly valid, impeccably logical code is failing because nobody thought to look at the key names. Instead of typing lots of setup code once, you’ll be dribbling out square brackets and quotes till the end of time, with lots of little missteps and typos along the way. While that’s not an insurmoutable problem it’s another&amp;nbsp;annoyance.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://assets7.thrillist.com/v1/image/1335116/size/tl-horizontal_main_2x/amazing-1983-return-of-the-jedi-photos-you-ve-never-seen"&gt;&lt;img alt="" src="http://assets7.thrillist.com/v1/image/1335116/size/tl-horizontal_main_2x/amazing-1983-return-of-the-jedi-photos-you-ve-never-seen"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not so scary when you know the&amp;nbsp;secret!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404#return-of-the-namedtuples"&gt;&lt;/a&gt;Return of the&amp;nbsp;namedtuples&lt;/h1&gt;
&lt;p&gt;Luckily there is yet another – and for most purposes better – way to return complex results — one that is both flexible and self-describing. &lt;a href="http://pymotw.com/2/collections/namedtuple.html"&gt;namedtuples&lt;/a&gt; are part of the python standard library and they offer a clean, simple way to create lightweight objects that have named properties – like classes – but require almost no setup: you can create a new type of named tuple with a single line of code, and then use it like a lightweight (and immutable) class.&lt;br&gt;
A namedtuple is just a python tuple that can also use names to access it’s own fields. For&amp;nbsp;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;

&lt;span class="c1"&gt;# create a namedtuple called &amp;#39;SomeFuncRes&amp;#39; to hold nodes, attributes and values  &lt;/span&gt;
&lt;span class="n"&gt;SomeFuncRes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SomeFuncRes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;node attribute value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# make an instance  &lt;/span&gt;
&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SomeFuncRes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pCube1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;33.0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# Result: SomeFuncRes(node=&amp;#39;pCube1&amp;#39;, attribute=&amp;#39;tx&amp;#39;, value=33.0)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, namedtuples are as even easier to ‘read’ than dictionaries when printed out. However, namedtuples give you dot-access to their&amp;nbsp;contents.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;  
&lt;span class="c1"&gt;# pCube1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This saves a few characters: &lt;code&gt;result.node&lt;/code&gt; beats &lt;code&gt;result['node']&lt;/code&gt; – but mopre important offers with far fewer opportunities for mistyped keys or open quotes. &lt;br&gt;
However, namedtuples can also use old-fashioned indexed access&amp;nbsp;too:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="c1"&gt;# pCube1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And you can even iterate over them if you need to, since a namedtuple is in the end just a slightly fancier&amp;nbsp;tuple:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

&lt;span class="c1"&gt;# pCube1  &lt;/span&gt;
&lt;span class="c1"&gt;# tx  &lt;/span&gt;
&lt;span class="c1"&gt;# 30&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Namedtuples are easy to instantiate: You can create them using index ordering, names, or **keyword arguments. Names tend to be better for clarity, but if you’re expanding the results of other functions like &lt;code&gt;zip()&lt;/code&gt; indices and double-starred dictionaries can be very handy. Having all three options allows you to create them in the most appropriate&amp;nbsp;way.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;SomeFuncRes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pSphere1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ry&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# SomeFuncRes(node=&amp;#39;pSphere1&amp;#39;, attribute=&amp;#39;ry&amp;#39;, value=180)  &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;SomeFuncRes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pCube1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attribute&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# SomeFuncRes(node=&amp;#39;pCube1&amp;#39;, attribute=&amp;#39;tz&amp;#39;, value=1)  &lt;/span&gt;
&lt;span class="n"&gt;from_dict&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;node&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pPlane1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;attribute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;40.5&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="n"&gt;SomeFuncRes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;from_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# SomeFuncRes(node=&amp;#39;pPlane1&amp;#39;, attribute=&amp;#39;rz&amp;#39;, value=40.5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One of the great advantages of namedtuples is that (unlike classes or dictionaries) namedtuples are &lt;em&gt;immutable&lt;/em&gt;; that is, they are read-only by default. This is usually a Good Thing&lt;sup&gt;tm&lt;/sup&gt; for a result object, since data changing in mid-flight can lead to subtle bugs that may be very hard to reproduce. Immutability also makes them cheaper: they don’t require Python to do as much setup behind then scenes when a they are created, which can be significant in large quantities. They usually &lt;a href="http://blog.explainmydata.com/2012/07/expensive-lessons-in-python-performance.html"&gt;take up less memory as well&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;This combination of features is tough to beat in a cheapo data-only class. If for some reason you need to upgrade to a real class instead, you probably won’t even need to change the code which reads your namedtuples: Python doesn’t care if &lt;code&gt;result.node&lt;/code&gt; is a namedtuple field or a regular object field. For all these reasons, namedtuples are a great little tool for a lot of common data-bundling jobs. No strategy fits every battle, but namedtuples are an excellent - and often overlooked! – way to manage this very common (albeit not very interesting) problem and to keep your overall toolkit cleaner, more robust and easier to&amp;nbsp;maintain.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://iruntheinternet.com/lulzdump/images/its-a-trap-pun-its-a-wrap-admiral-ackbar-star-wars-1363199217Z.jpg?id=784"&gt;&lt;img alt="" src="http://iruntheinternet.com/lulzdump/images/its-a-trap-pun-its-a-wrap-admiral-ackbar-star-wars-1363199217Z.jpg?id=784"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="programming"></category></entry><entry><title>Wraptastic!</title><link href="https://theodox.github.io/2015/wraptastic" rel="alternate"></link><published>2015-07-12T14:34:00-07:00</published><updated>2015-07-12T14:34:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-07-12:/2015/wraptastic</id><summary type="html">&lt;p&gt;When is it time to write a&amp;nbsp;wrapper?&lt;/p&gt;</summary><content type="html">&lt;h2&gt;The wrap&amp;nbsp;up&lt;/h2&gt;
&lt;p&gt;The beauty of working with code, even really simple code, is that you can build your own little universe out of bits and pieces contributed by thousands of other people – all without paying a dime or even asking them for help. From sharing a script off of CreativeCrash to downloading a huge open-source behemoth like Apache, any reasonably plucky individual can today make stuff that actually involves the work of thousands of anonymous others. It’s really quite a remarkable evolution in human history that so many people voluntarily give away their work for nothing, and (whatever else you can say about the internet era) it’s something to be proud of participatng&amp;nbsp;in.  &lt;/p&gt;
&lt;p&gt;On the other&amp;nbsp;hand…   &lt;/p&gt;
&lt;p&gt;Well, Say you are an Amish farmer and all your neighbors showed up to help you raise your barn, you’d certainly be grateful. But you might still be pretty annoyed if Hans from next door hung your barn doors so they stuck in the summer heat. Maybe old Hans worries more about keeping the barn warm than you do, so he prefers a tight seal: but that’s small comfort when you’re heaving on that handle in a muggy Pennsylvania morning.&lt;br&gt;
&lt;img alt="barn raising" src="http://notonbluray.com/blog/wp-content/uploads/2014/04/Witness-barn-raising-scene-Bluray-screenshot-3.png"&gt;  &lt;/p&gt;
&lt;p&gt;The internet abounds in excellent – and, amazingly, free – tools to help make your life easier. But they all started life as tools to make somebody else’s life easier. If your needs don’t line up perfectly with the needs of the original author, you’re likely to get a little &lt;em&gt;&lt;a href="http://www.dict.cc/deutsch-englisch/gereizt.html"&gt;gereizt&lt;/a&gt;&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;The fact is that nobody writes all their own stuff: we all use other people’s code all the time (and, as sharing becomes more and more ingrained in coding, that’s only going to increase). All that sharing means that we constantly have to work with libraries and APIs that are useful and free and for which we know we should be grateful… but – like that sticky barn door – they drive us absolutely&amp;nbsp;bonkers.  &lt;/p&gt;
&lt;h2&gt;Wrap&amp;nbsp;up&lt;/h2&gt;
&lt;p&gt;Not surprisingly, almost everybody ends up writing &lt;em&gt;wrappers&lt;/em&gt;: code to help ease those nice-but-imperferct tools and &lt;span class="caps"&gt;API&lt;/span&gt; into a something that feels a little more natural. If you spend a lot of time on &lt;a href="http://tech-artists.org/"&gt;&lt;span class="caps"&gt;TAO&lt;/span&gt;&lt;/a&gt; or coding forums where people swap tips and advertise their wares you’ll see a huge variety of wrappers for all sorts of tasks: indeed, the wrappers often seem to outnumber the actual functional bits. Whether you call the job making things ‘more pythonic’ or ‘more functional’ or ‘cleaner’, its something we all feel compelled to do (and to &lt;a href="https://github.com/theodox/mGui"&gt;share&lt;/a&gt;) from time to time.&lt;br&gt;
It’s also easy to get cynical about wrappers. You see so many – and so many of them just taste-driven syntactic variations on each other – that veteran coders often reflexively shrug and ignore them. This is particularly true in Python land, where the malleability of the language encourages a certain degree of experimentation and re-casting. Because you &lt;em&gt;can&lt;/em&gt; adapt Python to suit your tastes, the temptation to do so even when it’s not actually getting you much beyond style points is hard to resist. &lt;br&gt;
The net result of all this customization and adaptation is messier than Christmas morning: wrappers everywhere. Whatever simplifications each individual wrapper gives you, the aggregate effect of so many different extra layers is overwhelming. At several times in the last decade I’ve sworn off wrappers and vowed to stick with vanilla python, straight-up maya.cmds and simple, linear code. A good code archaeologist could troll through my history and find several repeated periods of growth and die-offs in the wrapper ecosystem, like fossils trapped in shale.&lt;br&gt;
&lt;img alt="where's pymel?" src="http://www.lparchaeology.com/prescot/images/156.jpg"&gt;&lt;br&gt;
&lt;em&gt;Where&amp;#8217;s pymel in&amp;nbsp;there?&lt;/em&gt;  &lt;/p&gt;
&lt;h2&gt;Wraptors&lt;/h2&gt;
&lt;p&gt;Wrappers, though, never really die off like the dinosaurs: they, in fact, more persistent as the cockroaches. And there’s a lesson in that. &lt;br&gt;
Consider a classic case of wrapper-iteis: a system for &lt;a href="rescuing_maya_gui_from_itself.html"&gt;making maya &lt;span class="caps"&gt;GUI&lt;/span&gt; less of a pain&lt;/a&gt;. Everybody writes that one at some point in their &lt;span class="caps"&gt;TA&lt;/span&gt; career (I’ve done it 4 times to my certain knowledge, not counting one-offs and half-assed, abandonware). When somebody feels compelled to spruce something up that much it’s a sign. &lt;br&gt;
Sure, most gui wrappers are just a reaction to the clunky, wordy way that Maya expects us to pop up a window or make a button. And sure, most of those wrappers (some of my own, I hasten to add) really aren’t much better: they’re just shortcuts that cut down on the carpal-tunnel of &lt;code&gt;cmds.textField(fieldname, q=True, text=True)&lt;/code&gt;.   &lt;/p&gt;
&lt;p&gt;Sure, saving keystrokes is nice, but over the life of a piece of code the time spent typing is a tiny fraction of that spent reading, debugging and refactoring: that you could (and probably should) just bit the bullet on. But so many persistent, repeated efforts to fix a problemare a symptom that something worse than wordiness is the problem. Wrapper-itis really runs rampant when the toolkit that is simply not adequate to the job at hand. If you have to spend a lot of time thinking about the implementation details &lt;em&gt;instead&lt;/em&gt; of the problem you really want to solve you’re not just wasting keystrokes: you’re wasting precious thought and&amp;nbsp;time.  &lt;/p&gt;
&lt;p&gt;So I’ve been trying to soften my anti-wrapper stance. Sometimes it’s better to actually solve a recurring problem instead of papering it over; sometimes it’s worth taking the time to be in a position to write the code you &lt;em&gt;need&lt;/em&gt; to write instead of the code you’re &lt;em&gt;forced&lt;/em&gt; to write. Sometimes.&lt;br&gt;
Which of course raises the question of how you can identify those situations and distinguish between a real need for better abstractions and a plain old peevish desire to avoid&amp;nbsp;boilerplate.   &lt;/p&gt;
&lt;h2&gt;Wraptitude&lt;/h2&gt;
&lt;p&gt;The prime way to distinguish between a ‘wrappable’ problem and a purely syntactic one is to consider the needs of the person who’ll be picking through your code after you’be been run over by a&amp;nbsp;bus.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.ytimg.com/vi/y_PrZ-J7D3k/maxresdefault.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;When your replacement comes to look at your code, will they see something that seems to clearly express the problems you were trying to solve? Or just code that clearly expresses your preferences for a particular set of formatting options and code&amp;nbsp;idioms?  &lt;/p&gt;
&lt;p&gt;Here’s a little bit of code that reads some information from a database in order to add some ‘credits’ to a time&amp;nbsp;account:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;replenish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;connect_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;repl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT replenished FROM users WHERE name LIKE ? AND DATE (replenished) &amp;lt;  DATE (&amp;#39;now&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;  
        &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;daynum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT strftime (&amp;#39;%w&amp;#39;, &amp;#39;now&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
            &lt;span class="n"&gt;daynum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;daynum&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;repl_amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  
                &lt;span class="s2"&gt;&amp;quot;SELECT sun, mon, tues, weds, thurs, fri, sat FROM replenish WHERE users_name LIKE ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;  
            &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;repl_amount&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="n"&gt;daynum&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
            &lt;span class="n"&gt;cap_amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT cap, balance FROM users WHERE name LIKE ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,))&lt;/span&gt;  
            &lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cap_amount&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
            &lt;span class="n"&gt;new_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UPDATE users SET balance = ? , replenished = DATE(&amp;#39;now&amp;#39;) WHERE name LIKE ?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_balance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;replenished with &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt; credits&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;new_balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the basic logic is pretty simple. Stripped all the fluff, you merely need&amp;nbsp;to:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;connect to the&amp;nbsp;database&lt;/li&gt;
&lt;li&gt;ask the database the last time the user was topped&amp;nbsp;off&lt;/li&gt;
&lt;li&gt;if the user hasn’t been replenished today, get the amount&amp;nbsp;due&lt;/li&gt;
&lt;li&gt;add the amount to the user’s&amp;nbsp;account&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s just four basic ideas. but it takes more than 20 lines to express them. &lt;br&gt;
Far worse, the key logical linkages of the operation are implied, not stated.For the code to make real sense you need to know or deduce that the &lt;em&gt;users&lt;/em&gt; table has a field called &lt;em&gt;replenished&lt;/em&gt; which stores the last day when the user was topped off; that the ‘replenish’ table has seven fields containing the top-off numbers, arranged Sunday throguh Saturday; and that the user table stores both the maximum number of credits to store and the current balance of credits. The implementation of our simple, 4-step idea only makes sense with all of that special knowledge. It’s further obscured by time saving shortcuts, like using the actual column index in a database table to check today’s value. That may save a couple of lines but it renders the code even harder to parse. And, of course, there are syntax quirks big and small, particularly relating to the creation and formatting of the &lt;span class="caps"&gt;SQL&lt;/span&gt;. &lt;br&gt;
This code works fine; it’s even fairly economical and readable for what it does (for a given value ‘economical’) But it’s not the kind of thing you’d ever want to &lt;em&gt;inherit&lt;/em&gt;; it makes sense to me, because I wrote it and I remember (at least today) what I was thinking about when I did. But some future inheritor (heck, even me a year from now) will have to think long and hard about what really ought to be a simple process. The whole thing is bogged down in implementation details that &lt;em&gt;obscure the intent&lt;/em&gt; of what’s going on. Really good code often reads almost like pseudo-code. This does not.&lt;br&gt;
To illustrate what a good wrapper can do, here’s the same code using an ‘&lt;a href="https://en.wikipedia.org/wiki/Object-relational_mapping"&gt;object relational mapper&lt;/a&gt;‘ called &lt;a href="https://github.com/coleifer/peewee"&gt;peewee&lt;/a&gt;: it’s a wrapper around the &lt;span class="caps"&gt;SQL&lt;/span&gt; backend that map database operations onto classes and allows you to focus on the logic instead of the&amp;nbsp;mechanics:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;replenish&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt;  
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;connect_db&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;atomic&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
        &lt;span class="n"&gt;today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;today_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%A&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;updatable_user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;User&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replenished&lt;/span&gt;  &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;today_update&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Replenish&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today_name&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;updatable_user&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt;  &lt;span class="n"&gt;today_update&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;today_update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;today_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;new_balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;updatable_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;refresh&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;updatable_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;updatable_user&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;balance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_balance&lt;/span&gt;  
            &lt;span class="n"&gt;Log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;replenished with &lt;/span&gt;&lt;span class="si"&gt;%i&lt;/span&gt;&lt;span class="s2"&gt; credits&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;new_balance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That’s a significantly cleaner bit of code to read. It still requires some outside knowledge but the intention is much more clearly expressed and the message isn’t drowned out in quotes and parens. An ‘offscreen’ benefit, given the way peewee is structured, is that backtracking to the &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;Replenish&lt;/code&gt; classes would tell the rest of the story pretty straightforwardly without a ton of comments. Only a handful of lines are needed to munge data into the right forms, and the code almost &lt;em&gt;reads&lt;/em&gt; like the summary. &lt;br&gt;
That’s a good example of how wrappers can help: saving keystrokes is nice but clarifying the real &lt;em&gt;meaning&lt;/em&gt; of the code is&amp;nbsp;priceless.  &lt;/p&gt;
&lt;h2&gt;Wrapola&lt;/h2&gt;
&lt;p&gt;Well, maybe not exactly price-&lt;em&gt;less&lt;/em&gt;. All wrapper code comes with a cost: there are new rules to learn and, probably, new bugs to encounter. If the wrapper uses odd conventions, unusual data formats or is simply slower than hand rolled code it may still be a bad bargain. Nonetheless, this example shows wrappers can be more than just a protest against awkward syntax and &lt;span class="caps"&gt;API&lt;/span&gt;’s that don’t match your taste. Ultimately wrappers are a perfect microcosm of what all coding is about: the search for a clearer understanding of the problem you’re trying to solve. &lt;br&gt;
So if you’re thinking about writing a wrapper, ask yourself this: does the code you want to write teach you something about the problem your solving? Or does it just save you a few keystrokes? Typing is a pain, but you’ll spend a lot more tine looking at your code than you ever will typing it. So don’t focus on just counting lines or syntax: focus on whether the wrapper helps you understand the problem better. If the wrapped code reads like a description of your thought process, you’re on the right track. If it’s just getting you back to &lt;a href="http://www.twitch.tv/undeadlabs"&gt;that TwitchTV stream&lt;/a&gt; on your second monitor a few minutes earlier it might not be worth your&amp;nbsp;time.  &lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;I used an &lt;span class="caps"&gt;ORM&lt;/span&gt; for my example because it provides such a powerful example of code that’s not bogged down in syntactic complexities. There is, however, a classic internet flame war about ORMs that I’m glossing over, with nerd rage aplenty for friends and foes of ORMs. Background &lt;a href="http://martinfowler.com/bliki/OrmHate.html"&gt;here&lt;/a&gt; if you&amp;nbsp;care. &lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Porting Spelchek to Boo</title><link href="https://theodox.github.io/2015/porting_spelchek_to_boo" rel="alternate"></link><published>2015-06-06T22:13:00-07:00</published><updated>2015-06-06T22:13:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-06-06:/2015/porting_spelchek_to_boo</id><summary type="html">&lt;p&gt;A port of the &lt;a href="https://github.com/theodox/spelchek"&gt;Spelchek&lt;/a&gt; spell checker to Boo, just to prove a&amp;nbsp;point.&lt;/p&gt;</summary><content type="html">&lt;p&gt;What could be more ghostly than a &lt;em&gt;post&amp;nbsp;mortem?&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;If &lt;a href="boo_who.html"&gt;my last post about Boo&lt;/a&gt; piqued your interest, but you haven’t had time to do a deep dive into the language to see for yourself, I’ve posted a version of the &lt;a href="https://github.com/theodox/spelchek"&gt;Spelchek&lt;/a&gt; Python spell checker module converted to Boo so you can see the similarities and differences between the two languages. &lt;br&gt;
The original Python version is &lt;a href="https://github.com/theodox/spelchek/issues"&gt;here&lt;/a&gt; and the Boo port is &lt;a href="https://github.com/theodox/BooSpell"&gt;here&lt;/a&gt;. As a good indication of what I’ve been saying about the economy of Boo syntax, the Boo version comes in at almost the same size as the Python original (5.05 kb for Boo and 4.95kb for Python) and pretty much the same number of lines – I haven’t done the excersize of converting it to C# for comparison but I’d guess the C# version would come in at about half again as much typing.&lt;br&gt;
Looking at the code, significant chunks are almost identical: the logic is pretty much the same and the type annotations are the only real difference. &lt;br&gt;&amp;nbsp;Thus  &lt;/p&gt;
&lt;p&gt;becomes   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;priority&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
&lt;span class="sd"&gt;    Adds &amp;lt;word&amp;gt; to the dictionary with the specified priority (default is 4)  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;_DICTIONARY&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;priority&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pri&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
&lt;span class="s2"&gt;Adds &amp;lt;word&amp;gt; to the dictionary with the specified priority.   &lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;_DICTIONARY&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToLower&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pri&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is pretty much identical.&lt;br&gt;
The tricky bit of the conversion was the routine which generates possible variants of the word - it generates variants of a word by transposition and deletions. In&amp;nbsp;Python:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;first_order_variants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
&lt;span class="sd"&gt;    return the obvious spelling variants of &amp;lt;word&amp;gt; with missing words, transpositions, or misplaced characters  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  
    &lt;span class="n"&gt;deletes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;transposes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;replaces&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_ALPHABET&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;inserts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_ALPHABET&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deletes&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;transposes&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;replaces&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;inserts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the first list comprehension, &lt;code&gt;splits&lt;/code&gt;, generates a lists of pairs representing places where the word could be broken up, so that ‘cat’ produces &lt;code&gt;[("c","at"), ("ca", "t")]&lt;/code&gt;. The other comprehensions use that list to try inserting, deleting or transposing letters to guess what the user might have really been typing.&lt;br&gt;
In Boo, the tricky bit was getting the compiler to recognize that the &lt;code&gt;splits&lt;/code&gt; list contained a pair of strings and that all the lists produced by it would also be lists of strings. Porting the python code directly wouldn’t work because Boo would see &lt;code&gt;splits&lt;/code&gt; as a list of type &lt;code&gt;object&lt;/code&gt; instead of deducing that it was a set of string pairs. &lt;br&gt;
Here’s the Boo version, which as you can see is recognizably the same but is clunkier than the Python, due to the need for&amp;nbsp;typing,   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;first_order_variants&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
&lt;span class="s2"&gt;return the obvious spelling variants of &amp;lt;word&amp;gt; with missing words, transpositions, or misplaced characters  &lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;_stringList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Boo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  
    &lt;span class="n"&gt;_strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Boo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Lang&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;cast&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="k"&gt;cast&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;  
    &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_stringList&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;  
    &lt;span class="n"&gt;deletes&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="n"&gt;transposes&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="n"&gt;replaces&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_ALPHABET&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="n"&gt;inserts&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_strings&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;splits&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_ALPHABET&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;HashSet&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;]()&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;chunk&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deletes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transposes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replaces&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inserts&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UnionWith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chunk&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To clean it up I added two ‘aliases’ up at the top, since the Boo syntax for declaring typed containers is hard to read (‘List[of string]’): so &lt;code&gt;_stringList&lt;/code&gt; is a shortcut for ‘list of string arrays’ and &lt;code&gt;_strings&lt;/code&gt; is a shortcut for ‘list of&amp;nbsp;strings’.  &lt;/p&gt;
&lt;p&gt;The variable &lt;code&gt;pair&lt;/code&gt; contains a lambda (ie, an inline function) using Boo’s idiosyncratic syntax: you could mentally rewrite it&amp;nbsp;as  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or in other words “give me a string and an integer, I’ll return a pair of strings split at the index you gave&amp;nbsp;me.”  &lt;/p&gt;
&lt;p&gt;With those helpers in place the logic is identical, but it is harder to follow because of all the type-mongering. I’m pretty sure there are more elegant ways to do this withgout being so wordy, but I’m not an&amp;nbsp;expert.   &lt;/p&gt;
&lt;h1&gt;&lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404&amp;amp;bpli=1&amp;amp;pli=1#so"&gt;&lt;/a&gt;So…&lt;/h1&gt;
&lt;p&gt;The point of the experiment was to see how hard the Python to Boo translation would be. This is an application where types actually matter a good deal, since all my values are strings and I need to be able to do string operations like joins on them – if all I was doing as asking questions of them things would have been more Pythonic (though probably slower as well: one of the reasons we need those types is to get the compiler to help us speed the code&amp;nbsp;up).   &lt;/p&gt;
&lt;p&gt;While this is hardly a demanding application, it is at least a proof-of-concept for the idea of prototyping in Python and then selectively porting to Boo isn’t completely&amp;nbsp;nuts.&lt;/p&gt;</content><category term="boo"></category><category term="spelcheck"></category></entry><entry><title>Boo Who?</title><link href="https://theodox.github.io/2015/boo_who" rel="alternate"></link><published>2015-05-31T22:02:00-07:00</published><updated>2015-05-31T22:02:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-05-31:/2015/boo_who</id><summary type="html">&lt;p&gt;A quick introduction to Boo, a python-like language for the &lt;span class="caps"&gt;CLR&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Boo!&lt;/h2&gt;
&lt;p&gt;Did I scare&amp;nbsp;you?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-OFk47U8-b9E/VWvmUwg7gII/AAAAAAABL6E/61gYBKYRRN4/s1600/medium.png"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-OFk47U8-b9E/VWvmUwg7gII/AAAAAAABL6E/61gYBKYRRN4/s400/medium.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Evidently somebody&amp;#8217;s scared: the &lt;a href="https://github.com/bamboo/boo/wiki"&gt;Boo language&lt;/a&gt;, which has been a part of Unity for several years, is going to be removed from the Unity documentation in favor of&amp;nbsp;C#. &lt;/p&gt;
&lt;p&gt;The reason is pretty simple, as this graph&amp;nbsp;explains:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://blogs.unity3d.com/wp-content/uploads/2014/09/graph3.png"&gt;&lt;/p&gt;
&lt;p&gt;For a lot of Unity developers (99.56% of them, apparently) this is non-news; Boo never really garnered much of a following in the Unity community. For new developers and recent grads, C# is an easy and very well documented option; for former web debs moving to mobile apps, UnityScript feels JavaScript-y enough to ease into a new environment. Boo, on the other hand, never got much traction: it&amp;#8217;s got a small but passionate community but it never garnered enough momentum to break out of its&amp;nbsp;niche. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Update 5/2016:  Since this post was first written the Boo community has been picking up some steam and is actively aiming at a 1.0 release of the language. They can be found in the &lt;a href="https://groups.google.com/forum/#!forum/boolang"&gt;Boo Languge Google&amp;nbsp;Group&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Boo&amp;nbsp;Hoo&lt;/h2&gt;
&lt;p&gt;Now, I&amp;#8217;m kind of a sucker for hopeless causes, so almost inevitably this news inclined me to revisit Boo, which I&amp;#8217;ve toyed with a few times but never really tried to learn. I had to write a lot of C# for &lt;a href="http://store.steampowered.com/app/351040/"&gt;Moonrise&lt;/a&gt; and it made me long for the clarity and concision of Python. Even though C# is a perfectly capable language with lots of modern features (closures, firest class functions, etc) it&amp;#8217;s still very chatty. The tantalizing promise of Boo - not completely fulfilled, but pretty close, is that it combines both: the performance, runtime type safety, and intimate access to Unity that C# offers in a language not deformed by punctuation and rendered ridiculous by overly wordy&amp;nbsp;syntax.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the aesthetic differences in a&amp;nbsp;nutshell:&lt;/p&gt;
&lt;h2&gt;Boo&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;UnityEngine&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;JumpingMovementController&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MonoBehaviour&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

 &lt;span class="n"&gt;_HORIZ&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Horizontal&amp;#39;&lt;/span&gt;  
 &lt;span class="n"&gt;_VERT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Vertical&amp;#39;&lt;/span&gt;  
 &lt;span class="n"&gt;_JUMP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Jump&amp;#39;&lt;/span&gt;  
 &lt;span class="n"&gt;_Momentum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;  
 &lt;span class="n"&gt;_Gravity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;  
 &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;_Speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;  
 &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;_JumpSpeed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.5&lt;/span&gt;

 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Update&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;   
  &lt;span class="n"&gt;frame_speed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_Speed&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deltaTime&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;  
   &lt;span class="n"&gt;_Momentum&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_JUMP&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_JumpSpeed&lt;/span&gt;

  &lt;span class="n"&gt;up&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;_Momentum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deltaTime&lt;/span&gt;  
  &lt;span class="n"&gt;left_right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_HORIZ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;frame_speed&lt;/span&gt;  
  &lt;span class="n"&gt;forward_back&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetAxis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_VERT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;frame_speed&lt;/span&gt;  
  &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Translate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_right&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;up&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forward_back&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Space&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

 &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;LateUpdate&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
   &lt;span class="n"&gt;_Momentum&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;_Gravity&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;deltaTime&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
  &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
   &lt;span class="n"&gt;_Momentum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
   &lt;span class="n"&gt;vp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
   &lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;C#&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;using UnityEngine;  
using System;

public class JumpingMovementController(MonoBehaviour)  
{

    const static string _HORIZ = &amp;quot;Horizontal&amp;quot;;  
    const static string _VERT = &amp;quot;Vertical&amp;quot;;  
    const static string _JUMP = &amp;quot;Jump&amp;quot;;  
    var _Momentum = 0.0f;  
    var _Gravity = 2.0f;  
    public var _Speed = 1.0f;  
    public var _JumpSpeed = 1.5f;


    void Update()  
    {  
        var frame_speed = _Speed * Time.deltaTime

        if (transform.position.y == 0)   
        {  
            _Momentum += Input.GetAxis(_JUMP) * _JumpSpeed;  
        }

        var up =  _Momentum * Time.deltaTime;  
        var left_right = Input.GetAxis(_HORIZ) * frame_speed;  
        var forward_back = Input.GetAxis(_VERT) * frame_speed;  
        transform.Translate(new (Vector3(left_right, up, forward_back)), Space.Self);  
    }

    void LateUpdate()  
    {  
        if (transform.position.y &amp;gt; 0)   
        {  
            _Momentum -= _Gravity * Time.deltaTime;  
        }  
        else   
        {  
            _Momentum = 0;  
            vp = new Vector3(transform.position.x, 0, transform.position.z);  
            transform.position = vp;  
        }  
    }  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I just can&amp;#8217;t shake the feeling that the first code is something I don&amp;#8217;t mind reading and writing while the latter is a chore. It&amp;#8217;s also a whopping 45% more typing for the same result. And that delta only gets bigger if you want to try something a little more complicated: Boo supports offers the same list comprehension syntax as Python, so you can&amp;nbsp;write:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    addresses = [(x,y) for x in range(3) for y in range(3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where in C# you&amp;#8217;d either get 6 lines of for-loops and nested brackets, or you&amp;#8217;d have to use Linq. Even in the most compact form I can manage it&amp;#8217;s still much&amp;nbsp;wordier:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;        var xs = Enumerable.Range(0, 3).ToList();  
        var ys = Enumerable.Range(0, 3).ToList();  
        var addresses = (from x in xs  
                         from y in ys  
                         select new Tuple&amp;lt;int,int&amp;gt;(x, y)).ToList();
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to get to the same&amp;nbsp;place. &lt;/p&gt;
&lt;h2&gt;Why&amp;nbsp;Boother?&lt;/h2&gt;
&lt;p&gt;A hardcore programmer might object that this is &amp;#8220;all just syntax&amp;#8221;. That&amp;#8217;s true - but since my everyday experience of working with a language is about 90% syntax I don&amp;#8217;t feel like it&amp;#8217;s fair to dismiss that concern as if it were irrelevant. That said, it can&amp;#8217;t be denied that modern C# 4 includes many language constructs that earlier versions of the language lacked: things like &lt;code&gt;var&lt;/code&gt; inferred variables, lambdas, closures, and named default arguments. These things all help make the code less chatty and more legilble: If you&amp;#8217;re a &lt;em&gt;good&lt;/em&gt; C# programmer you can write very terse, expressive code that&amp;#8217;s not absurdly&amp;nbsp;wordy. &lt;/p&gt;
&lt;p&gt;Apart from those stupid curly&amp;nbsp;brackets.&lt;/p&gt;
&lt;p&gt;On the other hand, the &amp;#8220;culture&amp;#8221; of the language was set in place before those kinds of features were added. The C# ethos definitely prefers the verbose to the understated, the extremely explicit to the implied.This isn&amp;#8217;t a terrible decision - like Java, it&amp;#8217;s a language designed to be used by huge teams of enterprise programmers working on titanic projects where only a few people see the whole project scope and most coders are locked away in cubicles on the 18th floor working on isolated modules to be used by other coders they will never meet.That&amp;#8217;s why C#&amp;#8217;s obssession with visibility management and highly-specified behavior makes sense.C# is a language that&amp;#8217;s all about apportioning blame: it forces everything to be very explicit so you know which of the 6000 drones working on your enterprise app to bleame when things go&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;In the context of a small game or a solo project, though, the Pythonic ethic of &amp;#8220;we&amp;#8217;re all adults here&amp;#8221; seems more natural and productive.Besides, for hobby projects and one offs fun is a totally legitimate concern: making minigames is something that gets crammed into nooks and crannies left over by work, kids and keeping the house from falling down around my ears.So fun is a totally legit criterion for selecting a&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;And Boo is definitely more &lt;em&gt;fun&lt;/em&gt; than&amp;nbsp;C#. &lt;/p&gt;
&lt;h2&gt;Boo&amp;nbsp;Who?&lt;/h2&gt;
&lt;p&gt;Like many Pythoneers, I&amp;#8217;ve always nursed a secret hunger for the magical button that would take all my tight, laconic Python code and magically make it perform like a &amp;#8220;real&amp;#8221; language. Boo is not the magic button, but it&amp;#8217;s a pretty good preview of what that might look like. As you can see from the code samples above, it looks and feels a lot like Python but under the hood is has similar performance and compile-time constraints to C#: in other words, Boo code can run as much as 20X faster than&amp;nbsp;Python.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s what makes Boo so tantalizing. It is &lt;em&gt;almost&lt;/em&gt; Python, but you can write Unity games, Winforms apps, or even cross-platform &lt;span class="caps"&gt;DLLS&lt;/span&gt; with it. Plus, since Boo runs on the same dotnet &lt;span class="caps"&gt;CLR&lt;/span&gt; as C#, it runs on any platform with the DotNet framework or Mono installed, so a compiled Boo program can run on Windows, Macs, or Linux boxes. There&amp;#8217;s even an interactice shell so you can do one-offs and experiment, just like Python. But - unlike Python - you get the performance gains that come from a compiled, statically typed&amp;nbsp;language.&lt;/p&gt;
&lt;p&gt;Typing and the compiler are the key difference between Boo and Python. The a compiler makes sure that all of your variables, return values and method signatures line up and uses that knowledge to optimize the final runtime code for you. You can do this in&amp;nbsp;Python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fred = 1   
fred = fred +  1  
print fred  
# 2  
fred = &amp;quot;fred&amp;quot;  
fred = fred + &amp;quot; flintstone&amp;quot;  
print fred  
# fred flintstone
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Boo, however, you&amp;#8217;ll get an error when you try to change &lt;code&gt;fred&lt;/code&gt; from an integer value to a&amp;nbsp;string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;fred = 1  
fred = fred +1   
fred = &amp;quot;fred&amp;quot;  
#------^  
#ERROR: Cannot convert `string` to `int`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In old-school C#, this was made obvious that all variables and to declare a&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;int fred = 1;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In more modern C# you can use the &lt;code&gt;var&lt;/code&gt; keyword to make the compiler guess what type you want based on the initial input: when you give&amp;nbsp;it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;var fred = 1;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;it sees that fred has an integer in it, and treats fred as an integer from then on. If you assign the variable with the result of a method call or another variable, C# uses the expected type of that return value to set the variable type. Boo does more or less the same thing: it uses the assignment value to guess the type of a variable. You can specify it explicitly if you prefer by using the &lt;code&gt;as&lt;/code&gt; keyword: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;barney as string  
barney = &amp;quot;barney&amp;quot;   #OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The same syntax is used to specify inputs in methods and&amp;nbsp;returns:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def bedrock (name as string) as string:  
    return name + &amp;quot;rock&amp;quot;

def inferred_return_type(name as string):  
    return name + &amp;quot;inferred&amp;quot;  
    # if the compiler can guess the output type  
    # you don&amp;#39;t need to &amp;#39;as&amp;#39; it
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once you get out of the habit of re-using variables with different types, this is usually not too bad: 95% of the time the inference &amp;#8220;just works&amp;#8221; and you can write code that focuses on logic and good design instead of worrying about the types. The other 5% of the time, however, is often very frustrating. It&amp;#8217;s particularly tough when Boo&amp;#8217;s Python-like, but not &lt;em&gt;exactly&lt;/em&gt; Python behavior trips you up. Consider this little&amp;nbsp;puzzle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sum (values as (int)) # expect an integer tuple  
    result = 0  
    for v in values:  
        result += v  
    return v

# works as expected for this case:  
example = (1,2,3)  
sum(example)  
# 6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However it can be broken if your input list isn&amp;#8217;t all of the same&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;example2 = (1,2,3,&amp;quot;X&amp;quot;)   
sum(example2)  
# ERROR: the best overload to the method sum((int)) is not compatible with the argument list &amp;#39;((object))&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s not entirely shocking: the compiler saw a mixed list in example2 and return and array of type &lt;code&gt;object&lt;/code&gt; (as in C#, &lt;code&gt;object&lt;/code&gt; is the base class of all types). So it is right to reject that as an argument for an int-specific function. Here&amp;#8217;s where it gets&amp;nbsp;odd:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#reassign  
example2 = (1,2,3,4)  
sum (example2)  
# 10
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This time the compiler &amp;#8220;helpfully&amp;#8221; casts that array to an array of ints because it can. This is not a crazy behavior, but it&amp;#8217;s definitely going to raise some issues where test code works fine but production code contans bad values. The only way to be sure that things are what they seem is to force them into the right types at declaration&amp;nbsp;time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;example3 as (int) == (1,2,3,4,5)  
sum(example3)  
# 15

example3 = (1,2,3,&amp;quot;one hundred&amp;quot;)  
#----------^  
# ERROR: Cannot convert `(object)` to `(int)`
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This example highlights both the usefulness and the limitations of type inference: If you want a statically typed language (and all the compiler tricks that make it speedier than Python) you do have to think about how to manage your types. There&amp;#8217;s no way around it. If you&amp;#8217;ve got enough C# experience, you can look at Boo as a neat way of writing speedy, statically typed code with less typing and more syntactic freedom - but if you&amp;#8217;re looking at it from the standpoint of loosey-goosey Pythonista it can seem like a lot of hurdles to&amp;nbsp;jump. &lt;/p&gt;
&lt;p&gt;My (unscientific) impression is that a lot of people from the Python world come over to Boo and the familiar look of the code gives them a false sense of security. It&amp;#8217;s easy to write simple bits of code until the subtleties of type management bite you in the behind, and then to give up in frustration when things seem to get cluttered and&amp;nbsp;uptight.&lt;/p&gt;
&lt;p&gt;It is, however, part of the territory: lots of other tools for speeding up Python such as &lt;a href="http://cython.org/"&gt;Cython&lt;/a&gt; expect the same kind of attention to variable types: here&amp;#8217;s a sample from&amp;nbsp;Cython&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def f(double x):  
    return x**2-x

def integrate_f(double a, double b, int N):  
    cdef int i  
    cdef double s, dx  
    s = 0  
    dx = (b-a)/N  
    for i in range(N):  
        s += f(a+i*dx)  
    return s * dx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is just as finicky as C# or&amp;nbsp;Boo.&lt;/p&gt;
&lt;p&gt;For me, at any rate, spending more than a year doing C# as a regular part of work made fiddling around with Boo much easier and more productive. The type management hassles strike me as inevitable, or even natural, after a year of typing verbose C# variable types. On the other hand the cleanliness of the layout, the lack of extraneous punctuation, and the clealiness of list comprehensions and Python style loops never gets&amp;nbsp;old.&lt;/p&gt;
&lt;p&gt;While there are plenty of minor gotchas, and a few important high-level rules that can&amp;#8217;t be forgotten, Boo development flows in with an almost Pythonic fluency. If you put in the time to figure out the type inference behavior and add the annotations, you can get code thats &lt;em&gt;almost&lt;/em&gt; as flexible as Python and &lt;em&gt;almost&lt;/em&gt; as performant as C# - which, for my kind of pet projects is a great&amp;nbsp;compromise. &lt;/p&gt;
&lt;h2&gt;Boo-ty is in the eye of the&amp;nbsp;beholder&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt;: I&amp;#8217;ve gotten pretty fond of Boo. Above all, it serves me well for noodling around in Unity where the &lt;span class="caps"&gt;API&lt;/span&gt; is mostly identical but the logic is cleaner, shorter and easier to read than the same code in C#. Translating the docs is rarely more than trivial, and the very narrow scope of a typical Unity code chunk keeps me from any of Boo&amp;#8217;s rough&amp;nbsp;edges.&lt;/p&gt;
&lt;p&gt;Another hurdle for many Pythonistas, though one which does not matter in the the context of Unity games, is the lack of the Python standard library. About 70% of what you can do with the &amp;#8216;batteries included&amp;#8217; in Python can, however, be replicated using the &lt;a href="https://msdn.microsoft.com/en-us/library/hfa3fa08%28v=vs.110%29.aspx"&gt;dotnet Base Class Library&lt;/a&gt; if you&amp;#8217;re running Boo on a Windows box (on Linux or &lt;span class="caps"&gt;OSX&lt;/span&gt; the percentage is lower: Mono has its own base class library but it&amp;#8217;s not a complete replica of the one from Microsoft). For many tools tasks and projects, this is more than enough: you&amp;#8217;ll be able to read and write &lt;span class="caps"&gt;XML&lt;/span&gt;, to decrypt &lt;span class="caps"&gt;JSON&lt;/span&gt;, to talk to an http server and so on although the function names and APIs will vary. I have to admit I prefer the Python toolkit to the dotnet one, which reflects the same bureaucratic mindset that I dislike in C#&amp;#8217;s design, but it&amp;#8217;s still a big, robust set of tools. You can also use anything that&amp;#8217;s available as a dotnet &lt;span class="caps"&gt;DLL&lt;/span&gt;. Almost anything advertised as a usable with C# will work with&amp;nbsp;Boo.&lt;/p&gt;
&lt;p&gt;All that said, I&amp;#8217;d definitely think twice before basing a commercial Unity project or a critical pipeline component on Boo. There does seem to be a small but measurable perfromance penalty compared to C# (the performance is, however, pretty much on par with that of UnityScript). More importantly, the Boo&amp;#8217;s biggest weakness is documentation: with a small community and (from now on) no docs on the Unity site, finding your way around in the language at first is pretty awkward. The &lt;a href="https://github.com/bamboo/boo/wiki"&gt;documentation&lt;/a&gt; is a sporadic, volunteer effort with some glaring holes - it doesn&amp;#8217;t help that Google still sends you to the moribund Boo site on &lt;a href="http://boo.codehaus.org/"&gt;codehaus&lt;/a&gt; instead of the current docs, which are in a &lt;a href="https://github.com/bamboo/boo/wiki"&gt;Github Wiki&lt;/a&gt;. The language is officially at version 0.9.4.9 and hasn&amp;#8217;t incremented in a long time: it&amp;#8217;s still getting commits from the original author and few other devs but it&amp;#8217;s a much smaller project than, say, IronPython. In short, it&amp;#8217;s a cool language that has not found it&amp;#8217;s audience yet, and unless it does it will remain a niche&amp;nbsp;player. &lt;/p&gt;
&lt;p&gt;Still, it&amp;#8217;s pretty cool too. If, after those caveats, it still sounds interesting, you&amp;#8217;ll be relieved to know that Boo is not really &amp;#8216;going away&amp;#8217;: For the forseeable future, the language will still work in Unity, Boo, like C# and UnityScript, runs on &lt;a href="http://www.mono-project.com/"&gt;Mono&lt;/a&gt;, much as Java runs on the &lt;span class="caps"&gt;JVM&lt;/span&gt;. Unity doesn&amp;#8217;t distinguish between the source of Mono assemblies: you can still use Boo, and even more exotic dotnet languages such as F# (though not, alas, IronPython!) in Unity today. The only practical result of Unity&amp;#8217;s decision to sunset Boo support is the disappearance of the Boo documentation from the Unity website - which , to be honest was rarely adequate - and the lack of a &amp;#8216;create Boo script&amp;#8217; menu item. Dropping a boo script into your assets folder, however still creates runnable code, and it should continue to do so for the forseeable&amp;nbsp;future. &lt;/p&gt;
&lt;p&gt;There&amp;#8217;s some question about how Unity&amp;#8217;s new cross-platform compiler technology, &lt;a href="http://blogs.unity3d.com/2014/05/20/the-future-of-scripting-in-unity/"&gt;&lt;span class="caps"&gt;IL2CPP&lt;/span&gt;&lt;/a&gt; will handle Boo. In principle, since it compiles the byte code produced by Mono rather than the original source, it too should work with any &lt;span class="caps"&gt;CLR&lt;/span&gt; language, be it Boo or F# or what have you. I&amp;#8217;ve been able to compile Boo code to Unity WebGL games, which use &lt;span class="caps"&gt;IL2CPP&lt;/span&gt;, without obvious problems although I haven&amp;#8217;t done anything like a scientific test. It&amp;#8217;s not beyond belief that bugs which occur only in non-C#, non-UnityScript &lt;span class="caps"&gt;IL&lt;/span&gt; code may go unfixed. And, of course, it&amp;#8217;s impossible to say what will happen after Unity 5 - technology, particularly in games, moves too fast for confident future predictions. However, It seems pretty clear Boo will be working in Unity for a while to come even though it is being demoted from &amp;#8220;officially supported&amp;#8221; status to the same kind of l33t hacker underworld as functional&amp;nbsp;languages. &lt;/p&gt;
&lt;h2&gt;Boo-Curious?&lt;/h2&gt;
&lt;p&gt;If you&amp;#8217;ve got Unity installed already, you&amp;#8217;ve already got everything you need to play with Boo. Just create a text file with a &amp;#8220;.boo&amp;#8221; extension inside a Unity project and you can write Unity components in Boo. If you don&amp;#8217;t have Unity, You can also &lt;a href="http://www.mono-project.com/download/"&gt;download Mono directly&lt;/a&gt;, which installs MonoDevelop and Boo&amp;nbsp;automatically. &lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re not fond of MonoDevelop - an editor for which I have… mixed… feelings - You can write Boo using &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt;, which has a Boo syntax higlighting package and can run Boo compiles for&amp;nbsp;you. &lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re curious but don&amp;#8217;t want to take the plunge, you can see the language for yourself and play with it online, using this &lt;a href="http://tryboo.pollinimini.net/"&gt;interactive&amp;nbsp;repl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The documentation - which (be warned!) is incomplete and not always up to date - is in the &lt;a href="https://github.com/bamboo/boo/wiki"&gt;Boo Project GitHub wiki&lt;/a&gt;. There&amp;#8217;s an older site at &lt;a href="http://boo.codehaus.org/"&gt;boo.codehaus.org&lt;/a&gt; which is tends to show up on the Google results but has &lt;em&gt;mostly&lt;/em&gt; been ported to the github. In cases of conflicting information, the GitGub wiki is likelier to be right. There&amp;#8217;s also a &lt;a href="https://groups.google.com/forum/#!forum/boolang"&gt;Google Group&lt;/a&gt; and a small pool of questions on &lt;a href="http://stackoverflow.com/questions/tagged/boo"&gt;StackOverflow&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re a hardcore type, you can also download and rebuild &lt;a href="https://github.com/bamboo/boo"&gt;the source for the entire Boo language&lt;/a&gt; yourself from GitHub. Lastly, you might want to check out &lt;a href="https://github.com/drslump/BooJS"&gt;BooJS&lt;/a&gt;, a project which aims to compile Boo into&amp;nbsp;JavaScript.&lt;/p&gt;</content><category term="programming"></category><category term="boo"></category></entry><entry><title>Moonrise Early Access is Live!</title><link href="https://theodox.github.io/2015/moonrise_early_access_is_live" rel="alternate"></link><published>2015-05-27T17:27:00-07:00</published><updated>2015-05-27T17:27:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-05-27:/2015/moonrise_early_access_is_live</id><summary type="html">&lt;p&gt;Moonrise is live on&amp;nbsp;Steam!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Moonrise is &lt;a href="http://store.steampowered.com/app/351040/"&gt;up on Steam now&lt;/a&gt;! It&amp;#8217;s a blast to see people logging in from all over and&amp;nbsp;playing.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://cdn.akamai.steamstatic.com/steam/apps/351040/ss_3e4a330e913cd4c8013c516deaaa87c2dc3cb4da.1920x1080.jpg?t=1432769730"&gt;&lt;img alt="" src="http://cdn.akamai.steamstatic.com/steam/apps/351040/ss_3e4a330e913cd4c8013c516deaaa87c2dc3cb4da.1920x1080.jpg?t=1432769730"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now that the cat is out of the bag I&amp;#8217;ll try to post some tech postmortems on the pipeline and some of the interesting shader work we&amp;nbsp;did.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;&lt;/strong&gt; If you get into the game, I share the username &amp;#8216;Alpha&amp;#8217; with my kids.  So try sending friend requests, but if you get turned down it might be the kids instead of me! Don&amp;#8217;t take it&amp;nbsp;personally.&lt;/p&gt;</content><category term="industry"></category><category term="moonrise"></category></entry><entry><title>Moonrise coming to Steam Early Access next week!</title><link href="https://theodox.github.io/2015/moonrise_steam_early_access" rel="alternate"></link><published>2015-05-21T17:15:00-07:00</published><updated>2015-05-21T17:15:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-05-21:/2015/moonrise_steam_early_access</id><summary type="html">&lt;p&gt;Moonrise coming to Steam early&amp;nbsp;access&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;m happy to note that &lt;a href="http://undeadlabs.com/2015/05/news/moonrise-coming-to-early-access-on-may-27/#more-7213"&gt;Moonrise&lt;/a&gt; will be debuting on Steam Early Access next&amp;nbsp;week! &lt;/p&gt;</content><category term="games"></category><category term="industry"></category></entry><entry><title>spelchek</title><link href="https://theodox.github.io/2015/spelchek" rel="alternate"></link><published>2015-05-16T17:45:00-07:00</published><updated>2015-05-16T17:45:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-05-16:/2015/spelchek</id><summary type="html">&lt;p&gt;A python spell check&amp;nbsp;module&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Spelchek&lt;/h2&gt;
&lt;p&gt;I’m planning one of the worst things that can happen to a &lt;span class="caps"&gt;TA&lt;/span&gt;: a big massive file move-and-rename operation. Much as I love my team, we have a poor record as a company when it comes to spelling, and it occurred to me that I’d like to at least have some degree of automatic spell checking on the names of the new files, folders and assets.&lt;br&gt;
It turns out that there’s no good spell checker for Python that doesn’t come with some kind of extension module (&lt;span class="caps"&gt;BTW&lt;/span&gt;, I’d love to be wrong about that - if you know one definitely post it in the comments). &lt;a href="http://pythonhosted.org/pyenchant/"&gt;PyEnchant&lt;/a&gt; for example is great, but it’s got 32-bit only Windows extensions that I can’t distribute without a&amp;nbsp;hassle.   &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://s-media-cache-ak0.pinimg.com/236x/55/2c/b5/552cb539fcc6b8addffb0eb19ec98298.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I did, however, find a very neat example of Python Power in a little post by Peter Norvig, who put together a simple spellchecker in a few dozen lines of plain, readable Python &lt;a href="http://norvig.com/spell-correct.html"&gt;code and great explanations here&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;I shamelessly borrowed his structure, with a couple of minor and not very creative tweaks. Norvig&amp;#8217;s original is built around Bayesian analysis: it guesses the correct word by looking at the relative frequencies with which variants show up – if ‘meet’ shows up 1000 times in your database but ‘mete’ shows up 5 times, that’s a good indication that ‘meet’ is the correct first&amp;nbsp;guess.   &lt;/p&gt;
&lt;p&gt;Since I’m in a rush, I didn’t use that functionality very much. I scrounged around for as many sources correctly scored words. Unfortunately the only free source I could rely on turned out to be the venerable ‘&lt;span class="caps"&gt;GSL&lt;/span&gt;’ or ‘General Service List’, which has great data but only for about 2000 words (I used the version found &lt;a href="http://jbauman.com/gsl.html"&gt;here&lt;/a&gt;, by &lt;a href="http://jbauman.com/index.html"&gt;John Bauman&lt;/a&gt; as a the core of the list, and then scrounged the internet for other free sources. Since all of these were less common words than the ones in the &lt;span class="caps"&gt;GSL&lt;/span&gt; I gave them pretty arbitrary Bayes scores (4’s and 5’s for common words, 3’s for variants, plurals and participles). This is not sophisticated linguistics, but it’s close enough for&amp;nbsp;horseshoes. &lt;/p&gt;
&lt;p&gt;The result is up on github as &lt;a href="https://github.com/theodox/spelchek"&gt;spelchek&lt;/a&gt;, which I affectionately refer to as the &lt;em&gt;cheap-ass spell checker.&lt;/em&gt;&lt;br&gt;
It is hardly rocket science, but it does work. You can do something&amp;nbsp;like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;spelchek&lt;/span&gt;  
&lt;span class="n"&gt;spelchek&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;correct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;vhicle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# &amp;#39;vehicle&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;spelchek&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;guesses&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;flied&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# [&amp;#39;filed&amp;#39;, &amp;#39;flied&amp;#39;, &amp;#39;flies&amp;#39;, &amp;#39;lied&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I would caution against using this for hard-core text work where perfect accuracy matters &amp;#8212; like database stuff, a customer-facing website, or a word processor &amp;#8212; since I did not go with high quality commercially or academically vetted word lists. I’m reasonably certain that there are some mis-spellings or oddballs in the 75,000 or so words I ended up with from various sources. Still, the module useful for my intended use, which is making sure that we don’t get things like ‘floder’, ‘frunishings’ and ‘vetegation’ (all of which shipped with in &lt;a href="http://www.ign.com/games/state-of-decay-year-one-survival-edition/xbox-one-20023993"&gt;State of Decay&lt;/a&gt;, I’m sorry to&amp;nbsp;admit). &lt;/p&gt;
&lt;p&gt;As always, &lt;span class="caps"&gt;MIT&lt;/span&gt; licensed so go to&amp;nbsp;town. &lt;/p&gt;</content><category term="boo"></category><category term="programming"></category><category term="python"></category></entry><entry><title>Tech art for art directors</title><link href="https://theodox.github.io/2015/tech_art_for_art_directors" rel="alternate"></link><published>2015-05-09T09:13:00-07:00</published><updated>2015-05-09T09:13:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-05-09:/2015/tech_art_for_art_directors</id><summary type="html">&lt;p&gt;The slides for my 2015 &lt;span class="caps"&gt;GDC&lt;/span&gt; talk, &lt;a href="http://www.gdcvault.com/play/1021806/Art-Direction-Bootcamp-Technical-Art"&gt;Technical Art For Art Directors&lt;/a&gt; are available on the &lt;span class="caps"&gt;GDC&lt;/span&gt;&amp;nbsp;Vault&lt;/p&gt;</summary><content type="html">&lt;p&gt;I see that the slides from my 2015 &lt;span class="caps"&gt;GDC&lt;/span&gt; talk, &lt;em&gt;Technical Art For Art Directors&lt;/em&gt; is now up on the &lt;a href="http://www.gdcvault.com/play/1021806/Art-Direction-Bootcamp-Technical-Art"&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt; Vault&lt;/a&gt;. &lt;strong&gt;paywall warning&lt;/strong&gt; Enjoy – and feedback in the comments is very welcome. I can post the slides if there is interest, but if you watch the video you’ll see that they don’t really work without the verbal context. I defy anybody who wasn&amp;#8217;t there to make sense of this image, for&amp;nbsp;example&amp;#8230;.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-XedE_j-dcHE/VUsCuvzzD_I/AAAAAAABLzM/VCbs1DtFLzM/s1600/21E0AD1CCD067F1F330E9BB69649A81C.jpeg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-XedE_j-dcHE/VUsCuvzzD_I/AAAAAAABLzM/VCbs1DtFLzM/s400/21E0AD1CCD067F1F330E9BB69649A81C.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I’ll say in passing that – despite the lack of text in the finished presentation – I had great luck putting this talk together in &lt;a href="markdown_wrapup.html"&gt;Markdown&lt;/a&gt; using &lt;a href="http://www.decksetapp.com/"&gt;DeckSet&lt;/a&gt;, which let me do the first 90% of the presentation without ever opening PowerPoint or Keynote. The slides were just one big plain text file, which let me &lt;a href="https://github.com/theodox/tadwtf/blob/master/tadwtf_slides.md"&gt;put them up on github&lt;/a&gt; so I could version them and track changes without getting bogged down in the finicky formatting nonsense that ultimately consumes all slide decks. I particularly liked this workflow because I could work as if it was text but still run it as a slide show very early on, which gave me a chance to get my patter down and listen to the words instead of getting hung up on formatting text. &lt;strong&gt;Plain text &lt;span class="caps"&gt;FTW&lt;/span&gt;!&lt;/strong&gt;&lt;/p&gt;</content><category term="games"></category><category term="industry"></category><category term="gdc"></category></entry><entry><title>Book Review</title><link href="https://theodox.github.io/2015/book_review" rel="alternate"></link><published>2015-05-06T22:38:00-07:00</published><updated>2015-05-06T22:38:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-05-06:/2015/book_review</id><summary type="html">&lt;p&gt;A few programming books that are worth reading&amp;#8230; unlike most programming&amp;nbsp;books.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Computer books are a very hit-or-miss affair. I go through them like comic books but – like comic books – they rarely have much of an impact on me: I read along, nod, and ten minutes after I close the covers I’ve either compressed the whole thing into a crunched-down, dried-up mental summary or filed it away as something to look at for a very specific kind of reference. &lt;br&gt;
It’s hard for a technical book to really &lt;em&gt;engage&lt;/em&gt; a reader. Clarity, clean exposition and simply not peddling misinformation by accident or oversight are hard enough and many tech books fail to even hit those mares. Engaging style and memorable insights are even tougher to conjure&amp;nbsp;up.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/gp/product/0596802293/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0596802293&amp;amp;linkCode=as2&amp;amp;tag=tecsurgui-20&amp;amp;linkId=CVEGONEA7DGRZKKD"&gt;&lt;img alt="" src="http://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=0596802293&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=tecsurgui-20"&gt;&lt;/a&gt;&lt;img alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=tecsurgui-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0596802293"&gt;&lt;/p&gt;
&lt;p&gt;My personal favorite in this regard is &lt;a href="http://amzn.to/1FQKwV6"&gt;The Art Of Readable Code&lt;/a&gt; by Dustin Boswell and Trevor Foucher. Unlike most tech books it’s not about technology, it’s about &lt;em&gt;you&lt;/em&gt;. By which I mean it’s about how to approach programming problems with a pragmatic, long term view that’s about making your life more productive and less stressful in the long run by adopting smart practices. It’s not about whiz-bang tech - in fact, the book hops around between languages and problem sets and doesn’t really teach anything about &lt;em&gt;programming&lt;/em&gt; per se; rather, it’s about &lt;em&gt;writing&lt;/em&gt;: about making your code clear, expressive and humane. Programmer machismo often encourages us to write super-efficient alien artifacts which can be extremely impressive but which nobody wants to touch for fear of getting the &lt;em&gt;Space Odyssey&lt;/em&gt; treatment. I’ve started forcing this book on all my new people: it’s better than a style guide because it teaches you things to think about, rather than giving you a list of things to memorize and follow.&lt;br&gt;
(hat tip to @Pat Corwin, by the way, who turned me on to this one)&lt;br&gt;
What got me thinking about tech books just now is the fact that I’ve recently found one that’s almost but not quite in that elite class of game changers. &lt;a href="http://amzn.to/1AGMvW1"&gt;Effective Python&lt;/a&gt;, by Brett Slatkin, is more technical and a bit less fluent than &lt;a href="http://amzn.to/1FQKwV6"&gt;The Art Of Readable Code&lt;/a&gt;. Still, it caught my eye because it seems like a great mile-marker on the road from “pretty good python user” to “real&amp;nbsp;Pythonista.”   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/gp/product/0134034287/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0134034287&amp;amp;linkCode=as2&amp;amp;tag=tecsurgui-20&amp;amp;linkId=CVFALVJQ7SEU6UMO"&gt;&lt;img alt="" src="http://ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;amp;ASIN=0134034287&amp;amp;Format=_SL250_&amp;amp;ID=AsinImage&amp;amp;MarketPlace=US&amp;amp;ServiceVersion=20070822&amp;amp;WS=1&amp;amp;tag=tecsurgui-20"&gt;&lt;/a&gt;&lt;img alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=tecsurgui-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0134034287"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://amzn.to/1AGMvW1"&gt;Effective Python&lt;/a&gt; does a great job of explaining and illustrating several features of the language which can be overlooked by folks coming from a scripting background rather than computer science. Many of the habits which separate the Python zen masters from the mere acolytes are explained neatly and clearly: the mysteries of the &lt;a href="http://stackoverflow.com/questions/231767/what-does-the-yield-keyword-do-in-python"&gt;yield keyword&lt;/a&gt;, the evils of the &lt;a href="http://eli.thegreenplace.net/2009/01/16/python-insight-beware-of-mutable-default-values-for-arguments"&gt;mutable default argument&lt;/a&gt;, and the unfathomable allure of &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;metaclasses&lt;/a&gt; are all dealt with clearly and in ways that don’t make you feel like a chump. Even better, the information is presented with a usable, practical slant: it’s neither an abstract set of rules to memorize nor a comp-sci nerdout about language features. Instead the book presents enough information for you to make good strategic choices: Perennial python puyzzlers like “list comprehension or loop?”, “Is it okay to use Try…except…else?” and “When to use propertites vs descriptors vs plain old fields” are all addressed in a reasonable, non-dogmatic way.&lt;br&gt;
So, I’ll definitely be adding that one to the new-hire reading list in the future.&amp;nbsp;Recommended!  &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt; if you haven’t checked out the &lt;a href="http://astore.amazon.com/tecsurgui-20"&gt;Tech Art Bookstore&lt;/a&gt; in a while, I’ve added a bunch of new items over the last few&amp;nbsp;months&lt;/p&gt;</content><category term="programming"></category><category term="industry"></category><category term="books"></category></entry><entry><title>Goddamit, stop messing around</title><link href="https://theodox.github.io/2015/stop_messing_around" rel="alternate"></link><published>2015-04-26T11:38:00-07:00</published><updated>2015-04-26T11:38:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-04-26:/2015/stop_messing_around</id><summary type="html">&lt;p&gt;A module for simple colored printing in a python&amp;nbsp;terminal&lt;/p&gt;</summary><content type="html">&lt;p&gt;It was inevitable, after I started noodling around with &lt;a href="eyeballs.html"&gt;terminal colors in ConEmu&lt;/a&gt;, that I’d waste an afternoon cooking up a way to color my Maya terminal sessions&amp;nbsp;automatically.  &lt;/p&gt;
&lt;p&gt;The actual code is &lt;a href="https://github.com/theodox/conemu"&gt;up on GitHub&lt;/a&gt; (under the usual &lt;span class="caps"&gt;MIT&lt;/span&gt; Open License -&amp;nbsp;enjoy!).   &lt;/p&gt;
&lt;p&gt;As implemented, its a module you can activate simply by importing &lt;code&gt;conemu&lt;/code&gt;. Ordinarily I don&amp;#8217;t like modules that &amp;#8216;do things&amp;#8217; on import, but this one is such a special case that it seems justifiable. Importing the module will replace &lt;code&gt;sys.stdout&lt;/code&gt;, &lt;code&gt;sys.stdin&lt;/code&gt;, and &lt;code&gt;sys.display_hook&lt;/code&gt; with ConEmu-specific classes that do a little color formatting to make it easier to work in &lt;code&gt;mayapy&lt;/code&gt;.  If for some reason you want to disable it, calling &lt;code&gt;conemu.unset_terminal()&lt;/code&gt; will restore the default&amp;nbsp;terminal.  &lt;/p&gt;
&lt;p&gt;Here are the main&amp;nbsp;features:  &lt;/p&gt;
&lt;h4&gt;Colored prompts and&amp;nbsp;printouts&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-AvNLhOBExmw/VT0sX69KZ2I/AAAAAAABLvo/Znt5WQHspns/s1600/conemu_2_1.jpg"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-AvNLhOBExmw/VT0sX69KZ2I/AAAAAAABLvo/Znt5WQHspns/s1600/conemu_2_1.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This helps de-emphasize the prompt, which is the least interesting but item on screen, and to emphasize command results or&amp;nbsp;printouts&lt;/p&gt;
&lt;h4&gt;Unicode objects&amp;nbsp;highlighted&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-ciIg7fGJIGw/VT0sxi0-F-I/AAAAAAABLvw/hlbGzLSFB5w/s1600/conemu_2_2.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-ciIg7fGJIGw/VT0sxi0-F-I/AAAAAAABLvw/hlbGzLSFB5w/s1600/conemu_2_2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since all Maya objects returned by commands are printed as unicode string (like &lt;code&gt;u'pCube1'&lt;/code&gt;, the terminal highlights unicode strings in a different color to make it easy to pick out Maya objects in return values. The annoying little &lt;code&gt;u&lt;/code&gt; is also&amp;nbsp;suppressed.  &lt;/p&gt;
&lt;h4&gt;Code objects&amp;nbsp;highlighted&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/--6vJNm-EdE8/VT0s-3SVHuI/AAAAAAABLv4/SRVJ-2ZCWMQ/s1600/conemu_2_3.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/--6vJNm-EdE8/VT0s-3SVHuI/AAAAAAABLv4/SRVJ-2ZCWMQ/s1600/conemu_2_3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Code objects (classes, functions and so on) are highlighted&amp;nbsp;separately  &lt;/p&gt;
&lt;h4&gt;Comment&amp;nbsp;colors&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-hUxg4Dc96vc/VT0tN5TF79I/AAAAAAABLwA/vUtHyrpuaXo/s1600/conemu_2_4.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-hUxg4Dc96vc/VT0tN5TF79I/AAAAAAABLwA/vUtHyrpuaXo/s1600/conemu_2_4.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Lines beginning with a &lt;code&gt;#&lt;/code&gt; or a &lt;code&gt;/&lt;/code&gt; will be highlighted differently, allowing you separate out ordinary command results from warnings and infos. &lt;strong&gt;In this version I have not isolated the path used by &lt;code&gt;cmds.warning&lt;/code&gt;, which makes this less useful. Does anybody out there know which pipe that uses? It appears to bypass &lt;code&gt;sys.stdout.write()&lt;/code&gt; and&amp;nbsp;sys.stderr.write()&lt;/strong&gt;   &lt;/p&gt;
&lt;h4&gt;Automatic&amp;nbsp;prettyprint&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-ua1kHl9PyQA/VT0txVSoYJI/AAAAAAABLwI/gL5CZb0MMjk/s1600/conemu_2_5.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-ua1kHl9PyQA/VT0txVSoYJI/AAAAAAABLwI/gL5CZb0MMjk/s1600/conemu_2_5.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If the result of a command is anything other than a string, it will be run through &lt;a href="https://docs.python.org/2/library/pprint.html"&gt;&lt;code&gt;prettyprint&lt;/code&gt; &lt;/a&gt;so that it will be formatted in a slightly more legible manner. This is particularly handy for commands like &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;listAttr&lt;/code&gt; which produce a lot of results: &lt;code&gt;pprint&lt;/code&gt; will arrange these vertically if they result would otherwise be wider than 80&amp;nbsp;characters.  &lt;/p&gt;
&lt;h2&gt;Utilities&amp;nbsp;submodule&lt;/h2&gt;
&lt;p&gt;The module contains some helper classes if you want to make your own display more elaborate, or to mess with it interactively during a console&amp;nbsp;session.  &lt;/p&gt;
&lt;h4&gt;Terminal&amp;nbsp;class&lt;/h4&gt;
&lt;p&gt;The &lt;em&gt;&lt;code&gt;Terminal&lt;/code&gt;&lt;/em&gt; class makes it less cumbersome to control the display. The main use is to color or highlight text. The 16 terminal colors are available as &lt;code&gt;Terminal.color[0]&lt;/code&gt; through &lt;code&gt;Terminal.color[15]&lt;/code&gt;, and you can highlight a piece of text like&amp;nbsp;so:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;this is &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Terminal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;colored text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The background colors are &lt;code&gt;Terminal.bg[0]&lt;/code&gt; through &lt;code&gt;terminal.bg[5]&lt;/code&gt; and work the same&amp;nbsp;way:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Terminal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;backgound text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;Terminal&lt;/code&gt; also has a helper for setting, coloring, and unsetting prompt&amp;nbsp;strings.  &lt;/p&gt;
&lt;h4&gt;Conemu: console&amp;nbsp;control&lt;/h4&gt;
&lt;p&gt;The &lt;em&gt;&lt;code&gt;Conemu&lt;/code&gt;&lt;/em&gt; class includes some limited access to the more elaborate functions offered by ConEmu (The methods in &lt;code&gt;Terminal&lt;/code&gt; might work in other &lt;span class="caps"&gt;ANSI&lt;/span&gt; terminals – I haven’t tried ! – but the ConEmu ones specific to ConEmu). The key methods&amp;nbsp;are:  &lt;/p&gt;
&lt;h5&gt;&lt;code&gt;ConEmu.alert(message)&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Pops up a &lt;span class="caps"&gt;GUI&lt;/span&gt; confirm dialog with ‘message’ in&amp;nbsp;it.&lt;/p&gt;
&lt;h5&gt;&lt;code&gt;ConEmu.set_tab(message)&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Sets the name of the current ConEmu tab to&amp;nbsp;‘message’.&lt;/p&gt;
&lt;h5&gt;&lt;code&gt;ConEmu.set_title(message)&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;Sets the name of the current ConEmu window to&amp;nbsp;‘message’.&lt;/p&gt;
&lt;h5&gt;&lt;code&gt;ConEmu.progress(active, progress)&lt;/code&gt;&lt;/h5&gt;
&lt;p&gt;if &lt;code&gt;active&lt;/code&gt; is True, draw a progress indicator in the window task bar at &lt;code&gt;progress&lt;/code&gt; percent. For example &lt;code&gt;ConEmu.progress(True, 50)&lt;/code&gt; overlays a 50% progress bar on the ConEmu task bar icon. If &lt;code&gt;active&lt;/code&gt; is false, the progress bar is hidden. This can be handy for long running batch&amp;nbsp;items&lt;/p&gt;</content><category term="programming"></category><category term="console"></category></entry><entry><title>The right profile</title><link href="https://theodox.github.io/2015/the_right_profile" rel="alternate"></link><published>2015-04-18T22:16:00-07:00</published><updated>2015-04-18T22:16:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-04-18:/2015/the_right_profile</id><summary type="html">&lt;p&gt;A brief, gentle introduction to the uses and abuses of profiling in Maya&amp;nbsp;Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lately I was working in one of those relatively rare &lt;span class="caps"&gt;TA&lt;/span&gt; tasks where performance really mattered. I had to do a lot of geometry processing and the whole thing was as slow as molasses, despite all my best guesses about clever little tricks to speed things&amp;nbsp;up. &lt;/p&gt;
&lt;p&gt;To break the logjam, I resorted to actual profiling, something I tend to avoid except in&amp;nbsp;emergencies. &lt;/p&gt;
&lt;p&gt;Now, you might wonder why I say I avoid profiling. If you skip ahead and see the trick I used here, and all the fiddly little bits of detailed performance data it provides, you may be particularly curious why anybody would want to pass up on all this cool, authoritative data. The reason, however, is really simple: Good profiling is so powerful that it can be overly seductive. Once you can see right down to the millisecond how tiny tweaks affect your code, the temptation to start re-working everything to shave a little bit off here and there is hard to&amp;nbsp;escape.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re working on a game engine, constant reference to the profiler might make sense. In regular &lt;span class="caps"&gt;TA&lt;/span&gt; work, however, milliseconds rarely matter: all that counts is the user&amp;#8217;s perception of responsiveness. Your users will care about the difference between a .1 second tool and a 1 second tool, or that between a 1 second tool and a 10 second tool. They are unlikely to care about - or even notice - the difference between a 1.3 second tool and a 1.1 second tool. The time you spend grinding out those extra fractions of a second may just not be worth it. As Donald Knuth, one of the great-grandaddies of all programming put&amp;nbsp;it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all&amp;nbsp;evil. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So a word of warning before we proceed. Optimize late, only after you&amp;#8217;ve got the problem solved and after you&amp;#8217;ve got what seems like solid, working code that&amp;#8217;s just too slow. Stay focused on clarity, reliability and ease of maintenance first; only reach for the profiler in code where the perf has really become an&amp;nbsp;issue. &lt;/p&gt;
&lt;h2&gt;Cheap-ass&amp;nbsp;profiling&lt;/h2&gt;
&lt;p&gt;Python includes some excellent native profiling tools. The easiest one to use (and the one that&amp;#8217;s most handy for people working in Maya) is the &lt;a href="https://docs.python.org/2/library/profile.html"&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt; module. It allows you to extract very detailed timing and call-count information from a run of a&amp;nbsp;function. &lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a basic example of profile in action. We&amp;#8217;ll start of with a couple of simple&amp;nbsp;functions. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cProfile&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_math&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  
        &lt;span class="n"&gt;some_math&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then we&amp;#8217;ll call them using &lt;code&gt;cProfile.run()&lt;/code&gt;. The run function takes a string which it will use &lt;code&gt;eval&lt;/code&gt; to execute. So in our&amp;nbsp;case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cProfile.run(&amp;#39;do()&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That will print out the following report, or something pretty like&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;     604 function calls in 2.096 seconds

Ordered by: standard name

ncalls  tottime  percall  cumtime  percall filename:lineno(function)  
    1    0.002    0.002    2.096    2.096 &amp;lt;maya console&amp;gt;:12(do)  
  200    0.003    0.000    0.003    0.000 &amp;lt;maya console&amp;gt;:6(some_math)  
  200    0.002    0.000    2.091    0.010 &amp;lt;maya console&amp;gt;:9(slow)  
    1    0.000    0.000    2.096    2.096 &amp;lt;string&amp;gt;:1(&amp;lt;module&amp;gt;)  
    1    0.000    0.000    0.000    0.000 {method &amp;#39;disable&amp;#39; of &amp;#39;_lsprof.Profiler&amp;#39; objects}  
    1    0.000    0.000    0.000    0.000 {range}  
  200    2.089    0.010    2.089    0.010 {time.sleep}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first line in the report prints out the total time, in this case a shade over 2 seconds. Each line in the report that follows lists the following information for a single function call (including nested&amp;nbsp;calls)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;ncalls&lt;/em&gt;
    The number of times a given function was called during this run. If the function is recursive, this number may show up as two numbers separated by a a slash, where the first is the true number of total calls and second the number of direct, non-recursive calls. As you can see here &lt;code&gt;do()&lt;/code&gt; itself was called only once, but the sub-functions &lt;code&gt;some_math()&lt;/code&gt; and &lt;code&gt;slow()&lt;/code&gt; were each called 200 times; &lt;code&gt;time.sleep()&lt;/code&gt; was called 200 times as well since it was called by every iteration of &lt;code&gt;slow()&lt;/code&gt;
&lt;em&gt;tottime&lt;/em&gt;
    the total amount of time spent executing this function for the entire run. As you can see the call to &lt;code&gt;time.sleep&lt;/code&gt; occupies the bulk of the time in this run. Not that this is the time it takes to process the function - &lt;em&gt;not&lt;/em&gt; the real-world time it takes to run! So our &lt;code&gt;do()&lt;/code&gt; function in the first line shows a &lt;code&gt;tottime&lt;/code&gt; of .002 seconds even though it clearly took more than two seconds to run. 
&lt;em&gt;percall&lt;/em&gt;
    The &lt;em&gt;average&lt;/em&gt; time spent executing the function on this line, if it was executed multiple times. Like &lt;code&gt;tottime&lt;/code&gt;, this measures processor time only and does not include things like network delays or (as in this case) thread sleeps.
&lt;em&gt;cumtime&lt;/em&gt;
    this is the real world time needed to complete the call, or more precisely the total real world time spent on all of the calls (as you can see, it&amp;#8217;s the sleep call and &lt;code&gt;do()&lt;/code&gt; which each take up about two seconds)
&lt;em&gt;percall&lt;/em&gt;
    the second percall column is the amount of average amount of real-world time spent executing the function on this line.
&lt;em&gt;filename&lt;/em&gt;
    this identifies the function and if possible the origin of the file where the function came from. Functions that originate in C or other extension modules will show up in curly&amp;nbsp;braces.&lt;/p&gt;
&lt;p&gt;As you can see this is &lt;em&gt;incredibly&lt;/em&gt; powerful right out of the box: it lets you see the relative importance of different functions to your overall perfomance and it effortlessly includes useful back-tracking information so you can find the&amp;nbsp;offenders.&lt;/p&gt;
&lt;h2&gt;Record&amp;nbsp;Keeping&lt;/h2&gt;
&lt;p&gt;If you want to keep a longer term record, you can dump the results of &lt;code&gt;cProfile.run()&lt;/code&gt; to disk. In this&amp;nbsp;form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cProfile.run(&amp;#39;do()&amp;#39;, &amp;quot;C:/do_stats.prf&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You&amp;#8217;ll get a dump of the performance data to disk instead of an on-screen printout. A minor irritant is the fact that the dumped stats are not the plain-text version of what you see when running the stats interactively: they are the pickled version of a &lt;code&gt;Stats&lt;/code&gt; object: just opened in a text editor they are&amp;nbsp;gibberish.&lt;/p&gt;
&lt;p&gt;To read them you need to import the &lt;code&gt;pstats&lt;/code&gt; module and create a new &lt;code&gt;Stats&lt;/code&gt; from the saved file. It&amp;#8217;s&amp;nbsp;easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pstats&lt;/span&gt;  
&lt;span class="n"&gt;disk_stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pstats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stats&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;C:/do_stats.prf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Calling the &lt;code&gt;print_stats&lt;/code&gt; method of your new &lt;code&gt;Stats&lt;/code&gt; object will print out the familiar report. You can also use the &lt;code&gt;sort_stats&lt;/code&gt; method on the object to reorganize the results (by call count, say, or cumulative&amp;nbsp;time). &lt;/p&gt;
&lt;p&gt;The details on the &lt;code&gt;Stats&lt;/code&gt; object are &lt;a href="https://docs.python.org/2/library/profile.html#pstats.Stats"&gt;in the&amp;nbsp;docs&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve already said that this kind of information can tempt you to cruise past to point of diminishing returns right on to squeezing-blood-from-a-stone-land. That said it&amp;#8217;s also worth noting that there is also bit of the Heisenberg uncertainty principle at work here: profiling slightly changes the performance characteristics of your code Game engine programmers or people who do embedded systems for guided missiles will care about that: you probably don&amp;#8217;t need&amp;nbsp;to.&lt;/p&gt;
&lt;p&gt;In any case, approaching this kind of profiling with the wrong mindset will drive you crazy as you chase micro-second scale will-o-the-wisps. The numbers give a good general insight into the way your code is working, but don&amp;#8217;t accord them any larger importance just because they seem seem so official and computer-y. They are guidelines, not&amp;nbsp;gospel.&lt;/p&gt;
&lt;h2&gt;Using the&amp;nbsp;data&lt;/h2&gt;
&lt;p&gt;When you actually do start optimizing, what do you want to do with all those swanky numbers? The art of optimizing code is &lt;em&gt;waaaay&lt;/em&gt; too deep to cover in a few paragraphs but there are a couple of rules of thumb that are handy to think about while learning how to read the profile&amp;nbsp;results:&lt;/p&gt;
&lt;h3&gt;Call Counts&amp;nbsp;Count&lt;/h3&gt;
&lt;p&gt;The first thing to look at is &lt;em&gt;not&lt;/em&gt; the times: it&amp;#8217;s the call&amp;nbsp;counts. &lt;/p&gt;
&lt;p&gt;If they seem wildly out of line, you may have inadvertently done something like call a more than you intended. If you have a script that does something to 500-vertex object but a particular vertex-oriented function shows up 2000 or 4000 times, that may mean you&amp;#8217;re approaching the data in an inefficient way. If it becomes something huge - like 250,000 calls - it sounds like you&amp;#8217;re doing an &amp;#8220;all against all&amp;#8221; or &amp;#8220;n-squared&amp;#8221; check: an algorithm that has to consider not just every vert, but every vertex-to-vertex relationship. These are generally something to avoid where possible, and the call count totals are a good way to spot cases where you&amp;#8217;ve let one slip in by&amp;nbsp;accident. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The evils of &amp;#8216;n-squared&amp;#8217; and so on are illustrated nicely &lt;a href="http://rob-bell.net/2009/06/a-beginners-guide-to-big-o-notation/"&gt;here&lt;/a&gt;. You might also want to check out &lt;a href="http://astore.amazon.com/tecsurgui-20/detail/1430232374"&gt;Python Algorithms&lt;/a&gt; if you&amp;#8217;re really getting in to waters where this kind of thing&amp;nbsp;matters!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Look for fat&amp;nbsp;loops&lt;/h3&gt;
&lt;p&gt;The second thing too look at is the balance of times and call counts. The most performant code is a mix of infrequent big calls and high-frequency cheap ones. If your stats show a high call count and a high &lt;code&gt;cumtime&lt;/code&gt; on the same line, that&amp;#8217;s a big red flag saying &amp;#8220;investigate me!&amp;#8221; As you can see in the report above, the real villains (&lt;code&gt;slow()&lt;/code&gt; and in turn &lt;code&gt;time.sleep()&lt;/code&gt;) are easily spotted by the combination of high call counts and high cumtime&amp;nbsp;numbers.&lt;/p&gt;
&lt;h3&gt;Use builtins where&amp;nbsp;possible&lt;/h3&gt;
&lt;p&gt;Next, you want to check the balance between your own code and built-ins or Maya &lt;span class="caps"&gt;API&lt;/span&gt; code, as indicated by the curly brackets around the function names in the last column. In general, &lt;span class="caps"&gt;API&lt;/span&gt; or built-in calls are going to be faster than anything you write yourself: doing things like a deriving the distance between two 3-D points will usually run about 8x faster in the &lt;span class="caps"&gt;API&lt;/span&gt; than it would in pure python. So, you&amp;#8217;d like to see lots of those kinds of calls, particularly inside loops with high call&amp;nbsp;counts. &lt;/p&gt;
&lt;h3&gt;High&amp;nbsp;cumtimes&lt;/h3&gt;
&lt;p&gt;Only after you&amp;#8217;ve sorted through the high call counts, and high call/cumtime combinations, and aggressive use of builtins do you want to start looking at high cumtimes on their own. Of course, you won&amp;#8217;t have a good idea when those high times are &lt;em&gt;justified&lt;/em&gt; if you don&amp;#8217;t know how the code actually works, which is why you want to do your optimizing passes on code that is already legible and well&amp;nbsp;organized. &lt;/p&gt;
&lt;h2&gt;Wrap&lt;/h2&gt;
&lt;p&gt;Naturally, these few notes just scratch the surface of how you optimize - this post is really about &lt;em&gt;profiling&lt;/em&gt; rather than optimizing. I&amp;#8217;m sure we&amp;#8217;ll hit that topinc some other day. In the meantime, it&amp;#8217;s worth spending some time mastering the slightly retro, programmer-esque interface of the cProfile module. Doug Hellman&amp;#8217;s &lt;a href="http://pymotw.com/2/profile/"&gt;&lt;em&gt;Python Module Of the Week&lt;/em&gt; article&lt;/a&gt; on profiling is a good if you want to get beyond the basic report i&amp;#8217;m using here. There&amp;#8217;s also a nice lightweight intro at &lt;a href="http://www.blog.pythonlibrary.org/2014/03/20/python-102-how-to-profile-your-code/"&gt;Mouse vs Python&lt;/a&gt;. The &lt;a href="https://docs.python.org/2/library/profile.html#"&gt;docs&lt;/a&gt; could be more friendly but they are&amp;nbsp;authoritative.&lt;/p&gt;
&lt;p&gt;In the meantime, readers of a certain age will certainly remember who &lt;em&gt;really&lt;/em&gt; had the right&amp;nbsp;profile&lt;/p&gt;</content><category term="python"></category><category term="programming"></category><category term="maya"></category></entry><entry><title>Didn’t need those eyeballs anyway!</title><link href="https://theodox.github.io/2015/eyeballs" rel="alternate"></link><published>2015-04-12T10:21:00-07:00</published><updated>2015-04-12T10:21:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-04-12:/2015/eyeballs</id><summary type="html">&lt;p&gt;Colorizing your terminal text for fun and&amp;nbsp;profit!&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, I admit this one is pretty much useless. But it’s still kind of cool&amp;nbsp;:) &lt;/p&gt;
&lt;p&gt;&lt;a href="con_job.html"&gt;Just the other day&lt;/a&gt; I discussed setting up &lt;a href="http://conemu.github.io/"&gt;ConEmu&lt;/a&gt; for use as a direct maya terminal. This is fun, but once you’ve got the console virus the next thing that happens is you start getting obsessed with stupid terminal formatting tricks. It’s almost as if going text modes sends you past the furthest apogee of spartan simplicity and starts you orbiting inevitably back towards &lt;span class="caps"&gt;GUI&lt;/span&gt; bells and&amp;nbsp;whistles.   &lt;/p&gt;
&lt;p&gt;At least, I know that about 15 minutes after I posted that last one, I was trying to figure out how to get colored text into my maya terminal window.&lt;br&gt;
It turns out it’s pretty easy. ConEmu supports &lt;a href="http://wiki.bash-hackers.org/scripting/terminalcodes"&gt;&lt;span class="caps"&gt;ANSI&lt;/span&gt; escape codes&lt;/a&gt;, those crazy 1970’s throwbacks that all the &lt;span class="caps"&gt;VIM&lt;/span&gt; kiddies use on their linux machines to make ugly termina color&amp;nbsp;schemes:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i.stack.imgur.com/79YI2.png"&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;all this beauty&amp;#8230; in &lt;em&gt;your&lt;/em&gt;&amp;nbsp;hands!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means any string that gets printed to ConEmu’s screen, if it contains color codes, will be in color! You can change background colors, foreground colors, even add bold, dim or (God help us) &lt;em&gt;blinking&lt;/em&gt; text to your printouts.&lt;br&gt;
Here’s a quick way to test this&amp;nbsp;out:  &lt;/p&gt;
&lt;p&gt;Start up a maya command shell in ConEmu (instructions &lt;a href="con_job.html"&gt;here&lt;/a&gt; if you missed them last time).&lt;br&gt;
In your maya session, try&amp;nbsp;this:      &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Maya&amp;gt; &amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This swaps in the custom prompt &lt;code&gt;Maya&amp;gt;&lt;/code&gt; for the generic &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;.&lt;br&gt;
&lt;img alt="console_prompt" src="http://3.bp.blogspot.com/-mBMHF410Wy0/VSqmy2QJCEI/AAAAAAABLnw/qu1P2pz15Do/s1600/color_1.png"&gt;&lt;br&gt;
Now, let’s try to make it a bit cooler: try setting &lt;code&gt;sys.sp1&lt;/code&gt; to&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ps1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[38;5;2mMaya&amp;gt;&lt;/span&gt;&lt;span class="se"&gt;\033&lt;/span&gt;&lt;span class="s2"&gt;[0m &amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="color_console" src="http://2.bp.blogspot.com/-2J0dLUc78MI/VSqmyxXLdsI/AAAAAAABLn0/4ERl34IdqTI/s1600/color_0.png"&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Whoa!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here’s what the gobbledygook means: &lt;br&gt;
&lt;strong&gt;&lt;code&gt;\033&lt;/code&gt;&lt;/strong&gt; is the ascii code for ‘escape’, which terminals use to indicate a non-printable character. The &lt;strong&gt;[number-m]&lt;/strong&gt; sequences are displayc ommands which will affect the output. In this case we said “set the text mode to color index 2’ (probably green on your system), type out ‘Maya&amp;gt; ‘, then revert to the default&amp;nbsp;color”.  &lt;/p&gt;
&lt;p&gt;Here’s a few of the formatting codes that ConEmu&amp;nbsp;supports:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**\033[0m**&lt;/code&gt; resets all escapes and reverts to plain&amp;nbsp;text.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**\033[1m**&lt;/code&gt; and &lt;code&gt;**\033[2m**&lt;/code&gt; start or end &lt;em&gt;bold&lt;/em&gt;&amp;nbsp;text&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**\033[4m**&lt;/code&gt; turns on ‘inverse’ mode, with foreground and background colors&amp;nbsp;reversed&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**\033[2J**&lt;/code&gt; clears the terminal screen and sets the prompt and cursor back to the top. You probably don’t want to use this as your prompt, since it clears the screen after every key press! However it can be useful for paging through long results, Unix-&lt;code&gt;more&lt;/code&gt; style.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**033[38;5;&amp;lt;index&amp;gt;m**&lt;/code&gt; sets the text color to the color &lt;code&gt;&amp;lt;index&amp;gt;&lt;/code&gt;. Colors are defined in the ConEmu settings dialog (&lt;em&gt;Features &amp;gt; Colors&lt;/em&gt;). There are 16 color; here you identify them by index number (Color #0 is the default background, color #15 is the default foreground) This allows you to swap schemes – several well known codiing color schemes such as Zeburn and Solarized are included in&amp;nbsp;ConEmu.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**033[48;5;&amp;lt;index&amp;gt;m**&lt;/code&gt; sets the background color to the color &lt;code&gt;&amp;lt;index&amp;gt;&lt;/code&gt;. The background colors are a bit hard to spot: if you check the colors dialog you’ll see a few items have two numbers next to them (such as ‘1/4’ or ‘3/5’). The second number is the background index. Yes, it’s wierd – it was the 70’s. What do you&amp;nbsp;expect?&lt;/li&gt;
&lt;li&gt;&lt;code&gt;**\033[39m**&lt;/code&gt; resets any color&amp;nbsp;settings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These codes work sort of like &lt;span class="caps"&gt;HTML&lt;/span&gt; tags; if you “open” one and don’t “close” it you’ll find it stays on, so while you’re experimenting you’ll probably experience a few odd color&amp;nbsp;moments.   &lt;/p&gt;
&lt;p&gt;But still… how cool is that? Now if we could only get it to syntax highlight… or recognize maya objects in return values… hmm. Things to think about&amp;nbsp;:)  &lt;/p&gt;
&lt;p&gt;The full list of escape codes supported by ConEmu is &lt;a href="http://conemu.github.io/en/AnsiEscapeCodes.html"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Con Job</title><link href="https://theodox.github.io/2015/con_job" rel="alternate"></link><published>2015-04-04T12:20:00-07:00</published><updated>2015-04-04T12:20:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-04-04:/2015/con_job</id><summary type="html">&lt;p&gt;How to be more productive with mayapy and a console&amp;nbsp;program.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you do a lot of tools work in maya – particularly if you’re working one something that integrates with a whole studio toolset, instead of being a one-off script – you spend a lot of time restarting. I think I know every pixel of the last five Maya splash screens by heart at this point. A good knowledge of the python &lt;code&gt;[reload()](https://docs.python.org/2/library/functions.html#reload)&lt;/code&gt; command can ease the pain a bit, but there are still a lot of times when you want to get in and out quickly and waiting for the &lt;span class="caps"&gt;GUI&lt;/span&gt; to spin up can be a real&amp;nbsp;drag.  &lt;/p&gt;
&lt;p&gt;If this drives you nuts, &lt;code&gt;mayapy&lt;/code&gt; &amp;#8212; the python interpreter that comes with Maya &amp;#8212; can be a huge time saver. There are a lot of cases where you can fire off a mayapy and run a few lines of code just to validate that things are working and you don’t need to watch as all the &lt;span class="caps"&gt;GUI&lt;/span&gt; widgets draw in. This is particularly handy if you do a lot of tools work or script development, but’s also a great environment for doing quickie batch work – opening a bunch of files to troll for out of date rigs, missing textures, and similar annoyances.&lt;br&gt;
All that said, the default mayapy experience is a bit too old-school if you’re running on Windows, where the python shell runs inside the horrendous &lt;code&gt;CMD&lt;/code&gt; prompt, the same one that makes using &lt;span class="caps"&gt;DOS&lt;/span&gt; so unpleasant. If you’re used to a nice &lt;span class="caps"&gt;IDE&lt;/span&gt; like &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; or a swanky text editor like &lt;a href="http://www.sublimetext.com/3"&gt;Sublime&lt;/a&gt;, the ugly fonts, the monochrome dullness, and above all the antediluvian lack of cut and paste are pretty&amp;nbsp;offputting.  &lt;/p&gt;
&lt;p&gt;However, it’s not too hard to put a much more pleasant face on mayapy and make it a really useful&amp;nbsp;tool.  &lt;/p&gt;
&lt;h2&gt;Con&amp;nbsp;Ed&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.top10films.co.uk/img/conair_cage.jpg"&gt;&lt;img alt="" src="http://www.top10films.co.uk/img/conair_cage.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;obligatory &amp;#8220;con&amp;#8221; joke&amp;nbsp;here.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The first thing to do is find a good &lt;em&gt;console program&lt;/em&gt;. A console provides the window and display services for command-line programs; &lt;code&gt;CMD.exe&lt;/code&gt; does the same thing, it just does it very &lt;em&gt;badly&lt;/em&gt;. There are several good options depending on your taste (good roundup &lt;a href="http://www.nextofwindows.com/4-better-windows-console-tools-alternatives-to-windows-built-in-command-prompt/"&gt;here&lt;/a&gt;)). I’m going to walk through the setup for my favorite emulator, &lt;a href="http://conemu.github.io/"&gt;ConEmu&lt;/a&gt;, but the same ideas should adapt to the other emulators pretty simply.&lt;br&gt;
First, here’s a quick round up of what &lt;a href="http://conemu.github.io/"&gt;ConEmu&lt;/a&gt; is going to be doing for us and&amp;nbsp;mayapay:  &lt;/p&gt;
&lt;h4&gt;Cut and&amp;nbsp;paste&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Ctrl+C&lt;/code&gt;, &lt;code&gt;Ctrl+V&lt;/code&gt;. Worth the price of admission all by&amp;nbsp;itself!&lt;/p&gt;
&lt;h4&gt;Customizable&amp;nbsp;fonts&lt;/h4&gt;
&lt;p&gt;A killer feature for those of us with old, weak eyes and/or aspirations to&amp;nbsp;style&lt;/p&gt;
&lt;h4&gt;Command&amp;nbsp;history&lt;/h4&gt;
&lt;p&gt;If you’re testing out a bit of syntax, or doing something that repetitive but not worth really automating you’ll get a lot of value out of the command history: you can use the up and down arrows to scroll through your recently issued commands and repeat them. Especially when you’re testing a script over and over this takes the bite out of those two or three lines of setup you need to enter again and&amp;nbsp;again.&lt;/p&gt;
&lt;h4&gt;Startup&amp;nbsp;options&lt;/h4&gt;
&lt;p&gt;We’ll want to pass a few flags and instructions to mayapy every&amp;nbsp;time.&lt;/p&gt;
&lt;h4&gt;Multiple consoles in one&amp;nbsp;window&lt;/h4&gt;
&lt;p&gt;ConEmu allows you to run different shells in different tabs. This can be invaluable if you’re doing things like checking the contents of multiple folders, but it’s also a great way to compare the results of your maya scripts side-by-side in two different&amp;nbsp;sessions&lt;/p&gt;
&lt;h4&gt;Transparency&lt;/h4&gt;
&lt;p&gt;A palliative for &lt;span class="caps"&gt;OSX&lt;/span&gt;&amp;nbsp;envy.&lt;/p&gt;
&lt;h2&gt;Setup&amp;nbsp;basics&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Again, these instructions are for ConEmu – if you try this with a different console, add your experience in the comments for&amp;nbsp;others!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ConEmu is a great little tool, and it’s free, but it is a bit… overeager?… in its efforts to let you control everything. The interface is a bit old school, so it’s worth walking through the setup process step by step.&lt;br&gt;
First you’ll want to download and install &lt;a href="http://conemu.github.io/"&gt;ConEmu&lt;/a&gt; (the installation instructions are down at the botton of the linked page, and the setup is basically ‘unzip into a&amp;nbsp;folder’).&lt;/p&gt;
&lt;p&gt;Once you’ve got ConEmu up and running, you’ll want to open the settings dialog and select the &lt;em&gt;Tasks&lt;/em&gt; option from the tree list at left. This will show you a dialog like&amp;nbsp;this:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-w0mbodm7rfY/VSAucMI2xPI/AAAAAAABLnI/0y0424YSh94/s1600/conemu_1.jpg"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-w0mbodm7rfY/VSAucMI2xPI/AAAAAAABLnI/0y0424YSh94/s1600/conemu_1.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Like I said, old&amp;nbsp;school.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For starters going to create a startup preset that launches mayapy. ConEmu calls these ‘tasks’. To create a new one, click that &lt;code&gt;+&lt;/code&gt; botton under the list of predefined tasks. That will create a blank preset with a name like “Group #”, you can rename it by typing a better name in the text box just to the left of the word&amp;nbsp;“Hotkey”.  &lt;/p&gt;
&lt;p&gt;The actual command you’ll type goes into the large text box on lower right. Just as test, enter the path to your mayapy &lt;em&gt;in quotes&lt;/em&gt;, (usually it’s in &lt;code&gt;Program files\Autodesk\MayaXXXX\bin\mayapy.exe&lt;/code&gt;) followed by a space and &lt;code&gt;-i&lt;/code&gt;. The &lt;code&gt;-i&lt;/code&gt; flag is important: it makes sure that mayaypy launches in interactive mode so you can actually use it – without the flag the application will launch and immediately quit! For maya 2015, for example, you can&amp;nbsp;do:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot;%ProgramFiles%/Autodesk/maya2015/bin/mayapy.exe&amp;quot; -i
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test out this minimal version by saving the settings (the &lt;em&gt;Save Settings…&lt;/em&gt;) button at lower right and making a new console using the green plus button at the upper right. Select the preset; if all goes right you’ll get a python prompt like&amp;nbsp;this:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-6SwtLYQpf7s/VSAuvIdPHDI/AAAAAAABLnQ/gtXK892tdFs/s1600/conemu_2.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-6SwtLYQpf7s/VSAuvIdPHDI/AAAAAAABLnQ/gtXK892tdFs/s1600/conemu_2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If it doesn’t work, go back and make sure that you surrounded the path to maypy.exe with quotes. &lt;strong&gt;&lt;code&gt;&amp;lt;insert rant about making an operating system with spaces in the paths that doesn't support spaces by default here!&amp;gt;&lt;/code&gt;&lt;/strong&gt;   &lt;/p&gt;
&lt;h2&gt;More&amp;nbsp;cowbell&lt;/h2&gt;
&lt;p&gt;With just these options, you’ve got a working python intepreter, but it’s doesn’t have any maya-specific features. To get an actual maya session you could manually start a &lt;a href="http://techartsurvival.blogspot.com/2014/04/earth-calling-mayastandalone.html"&gt;maya standalone&lt;/a&gt; by&amp;nbsp;typing  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.standalone&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;maya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;at the prompt. This works, but it’s a bit tedious. You can automate the process in ConEmu by editing your task description: Go back to the task settings in ConEmu add this to your&amp;nbsp;configuration:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%ProgramFiles%/Autodesk/maya2015/bin/mayapy.exe&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import maya.standalone; maya.standalone.initialize()&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;making sure again to check your&amp;nbsp;quotes.   &lt;/p&gt;
&lt;p&gt;When you launch a new ConEmu session for your preset you’ll probably notice a pause on startup: that’s Maya starting up in the backgrdound. If your maya loads tools or scripts at startup via &lt;code&gt;userSetup.py&lt;/code&gt;, you may see printouts or debug information scroll by as well. You should now be working in a standalone session, so you should be able to try something&amp;nbsp;like:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-ncaJyLvqczY/VSAuvALxi_I/AAAAAAABLnU/64gr2WRWkdo/s1600/conemu3.jpg"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-ncaJyLvqczY/VSAuvALxi_I/AAAAAAABLnU/64gr2WRWkdo/s1600/conemu3.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Avoiding&amp;nbsp;userSetup.py&lt;/h2&gt;
&lt;p&gt;If your startup scripts do something dependent on the maya &lt;span class="caps"&gt;GUI&lt;/span&gt; you may get an error instead. The &lt;em&gt;Right Thing&lt;sup&gt;&lt;span class="caps"&gt;TM&lt;/span&gt;&lt;sup&gt;&lt;/em&gt; to do is to fix that: you don’t want &lt;span class="caps"&gt;GUI&lt;/span&gt; in your startup routine because it hampers your ability to do batch jobs or&amp;nbsp;renders.   &lt;/p&gt;
&lt;p&gt;However as a stopgap measure you can &lt;a href="no-soup-for-you.html"&gt;suppress your userSetup.py&lt;/a&gt; and load a completely vanilla Maya. This requires setting an environment variable called &lt;code&gt;MAYA_SKIP_USERSETUP_PY&lt;/code&gt; to 0, which unfortunately is something ConEmu can’t do for you. However, you can work around that by creating a &lt;code&gt;.BAT&lt;/code&gt; file that sets the environment before launching mayapy. The bat will look like&amp;nbsp;this: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;MAYA_SKIP_USERSETUP_PY&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  
&lt;span class="s2"&gt;&amp;quot;%ProgramFiles%/Autodesk/maya2015/bin/mayapy.exe&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;import maya.standalone; maya.standalone.initialize()&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can point your ConEmu task at the .&lt;span class="caps"&gt;BAT&lt;/span&gt; file instead of directly at mayapy and you should get a no-userSetup&amp;nbsp;session.   &lt;/p&gt;
&lt;p&gt;This trick can also be used to launch mayapy with different environment variables – for example, I use to maintain different mayapy’s for different projects based on a set of project-specific env&amp;nbsp;vars.  &lt;/p&gt;
&lt;h2&gt;Con&amp;nbsp;Air&lt;/h2&gt;
&lt;p&gt;I’ve been using mayapy in the terminal window as a key part of my work for about a year now, and I’m sure I’ve saved many, many hours of waiting when I noodle on various bits of code, one-off batch tasks, and general noodling. In addition to speedier startup, running mayaPy in the console also gives you a more customizable view and command history, so it’s also a great replacement for many things you might otherwise want to do by starting up Maya and popping open the&amp;nbsp;listener.  &lt;/p&gt;
&lt;p&gt;Of course, on the meta-meta-level it is a bit odd to by running a text only version of the most powerful graphics tool on the planet. But hey, that’s how we roll in techart&amp;nbsp;land.&lt;/p&gt;</content><category term="tools"></category><category term="programming"></category><category term="maya"></category><category term="techart"></category></entry><entry><title>Maya Bug Watch: API2 and GetPoints()</title><link href="https://theodox.github.io/2015/api_2_getpoints_bug" rel="alternate"></link><published>2015-03-27T21:20:00-07:00</published><updated>2015-03-27T21:20:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-03-27:/2015/api_2_getpoints_bug</id><summary type="html">&lt;p&gt;A very irritating bug in Maya Python &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;2&lt;/p&gt;</summary><content type="html">&lt;p&gt;In general I’m more or less a &lt;a href="api_2_chance.html"&gt;fan of Maya Python &lt;span class="caps"&gt;API&lt;/span&gt; 2.0&lt;/a&gt;. It’s more pythonic and feels faster than the old version. However, it’s not without its quirks and I just found one that really bit me in the behind.&lt;br&gt;
If you want to get the vertices of an object in the api, the usual formula&amp;nbsp;is:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the dagPath of the&amp;nbsp;object&lt;/li&gt;
&lt;li&gt;Make an &lt;a href="http://help.autodesk.com/view/MAYAUL/2015/ENU/?guid=__py_ref_class_open_maya_1_1_m_fn_mesh_html"&gt;MFnMesh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Call the ‘GetPoints’ method of your&amp;nbsp;mesh&lt;/li&gt;
&lt;li&gt;Party on,&amp;nbsp;dudes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Something like this, which returns a list of &lt;a href="http://help.autodesk.com/view/MAYAUL/2015/ENU/?guid=__py_ref_class_open_maya_1_1_m_point_html"&gt;MPoint&lt;/a&gt; objects for the verts in the&amp;nbsp;mesh  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.api.OpenMaya&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;api&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_verts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;mobj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MGlobal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSelectionListByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mesh&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDagPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="c1"&gt;# that&amp;#39;s lazy, it assumes that the first child is the mesh shape.  &lt;/span&gt;
    &lt;span class="c1"&gt;# in practice you need to be more careful...  &lt;/span&gt;
    &lt;span class="n"&gt;mfn_mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MFnMesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mobj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;vert_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mfn_mesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPoints&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vert_array&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works fine and dandy…&amp;nbsp;except:  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;If the mesh has 256 or more verts, the first vertex comes back as garbage&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;
Here’s an example, using the same&amp;nbsp;function:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mesh, _ = cmds.polyCube(sw = 1, sh= 1, sd = 1)  
print get_verts(mesh)[:4]  
#&amp;gt; [maya.api.OpenMaya.MPoint(-0.50000000000009082, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(0.5, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.5, 0.5, 0.5, 1), maya.api.OpenMaya.MPoint(0.5, 0.5, 0.5, 1)]

# this looks good... Here&amp;#39;s the same thing for a 226 vert cube:  
mesh, _ = cmds.polyCube(sw = 8, sh= 8, sd = 3)  
print get_verts(mesh)[:4]  
#&amp;gt; [maya.api.OpenMaya.MPoint(-0.50000000000005185, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.375, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.25, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.125, -0.5, 0.5, 1)]

# but up the vert count to 258:  
mesh, _ = cmds.polyCube(sw = 8, sh= 8, sd = 4)  
print get_verts(mesh)[:4]  
#&amp;gt; [maya.api.OpenMaya.MPoint(5.0277956463997711e-315, 5.0313386899592279e-315, 0.5, 1), maya.api.OpenMaya.MPoint(-0.375, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.25, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.125, -0.5, 0.5, 1)]

# that first point is gibberish: python can&amp;#39;t go to the -315th power!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I’ll leave it to wiser heads to figure out &lt;em&gt;why&lt;/em&gt; it works out like this. My guess is that something is borked in pointer math going on inside the wrapper around &lt;code&gt;MfnMesh&lt;/code&gt;, but I don’t know. Luckily, there’s a workaround: if you create &lt;em&gt;new&lt;/em&gt; MPoints out of the items coming back from the &lt;code&gt;GetPoints()&lt;/code&gt; call, you get good data. I’m not sure why but this should be so but it appears to be reliable on my machine (Windows 7, 64 bit maya 2015). Here’s the&amp;nbsp;workaround:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def safe_get_verts(mesh):  
    mobj = api.MGlobal.getSelectionListByName(mesh).getDagPath(0)  
    mfn_mesh =  api.MFnMesh(mobj)  
    vert_array = mfn_mesh.getPoints()  
    return [api.MPoint(i) for i in vert_array]  # creating new MPoints fixes the issue

mesh, _ = cmds.polyCube(sw = 10, sh= 10, sd = 10)  
print safe_get_verts(mesh)[:4]  
#&amp;gt; [maya.api.OpenMaya.MPoint(-0.5, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.40000000596046448, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.30000001192092896, -0.5, 0.5, 1), maya.api.OpenMaya.MPoint(-0.20000001788139343, -0.5, 0.5, 1)]
&lt;/pre&gt;&lt;/div&gt;</content><category term="maya"></category><category term="bugs"></category><category term="python"></category><category term="api"></category></entry><entry><title>Markdown Wrapup</title><link href="https://theodox.github.io/2015/markdown_wrapup" rel="alternate"></link><published>2015-03-17T23:47:00-07:00</published><updated>2015-03-17T23:47:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-03-17:/2015/markdown_wrapup</id><summary type="html">&lt;p&gt;An experiment with plain-text blogging in&amp;nbsp;markdown.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Since this was written I&amp;#8217;ve moved the whole blog to a &lt;a href="http://docs.getpelican.com"&gt;Pelican&lt;/a&gt; based static site generated entirely from Markdown. It&amp;#8217;s a vastly nicer way to work than the old Blogger editor!  I&amp;#8217;ve left this along for historical reasons but as of &amp;#8216;today&amp;#8217; (spring 2016) I&amp;#8217;m all Pelican, all the&amp;nbsp;time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A &lt;a href="wygwys.html"&gt;while back&lt;/a&gt; I blogged about how much I longed for a good &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt; based blogging platform. Since a couple of people inquired about how that’s gone, I thought I’d mention my (meager) findings since&amp;nbsp;then.  &lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;options&lt;/h2&gt;
&lt;p&gt;There are several different ways you could get Markdown-based onto a&amp;nbsp;blog:   &lt;/p&gt;
&lt;h3&gt;Static site&amp;nbsp;generators&lt;/h3&gt;
&lt;p&gt;I looked at a number of static generators, like &lt;a href="https://github.com/gollum/gollum/wiki"&gt;Gollum&lt;/a&gt; from github and &lt;a href="http://getnikola.com/blog/"&gt;Nikola&lt;/a&gt;. Both of these were conceptually appealing, but suffered from similar issues, most notably the usual run of configuration and install issues the come with any web-world endeavor these days. I had a hell of time getting either one working install on the macbook I use for most of my writing and eventually decided that I wasn’t that interested in wrestling with those kind of things into the future. More importantly, I’m too busy to really admin my own server - I want a hosted service. If you’re more into running your own server – and you don’t mind sleuthing out things like getting the right Ruby package manager setup running – they could both work&amp;nbsp;fine. &lt;/p&gt;
&lt;h4&gt;Markdown-based&amp;nbsp;blogs&lt;/h4&gt;
&lt;p&gt;There are a few markdown based blogging hosts out there. The one I looked at most carefully was &lt;a href="https://www.silvrback.com/"&gt;Silvrback&lt;/a&gt;, and I enjoyed it a good deal. The writing was clean and simple and it came with a built-in syntax highlighting: the biggest damn hassle about all these posts has been getting the code samples into a reasonable format without hopping around between multiple sites and pasting a lot of esoteric formatting codes in &lt;span class="caps"&gt;HTML&lt;/span&gt; by hand. So, I had a good experience with Silvrback and I seriously considered switching. If you’re just getting started it’s definitely worth a look, particulary for technical blogs like this one.
&lt;img alt="silverback" src="http://knolzone.com/wp-content/uploads/2014/03/silvrback.jpg"&gt;  &lt;/p&gt;
&lt;h4&gt;Custom&amp;nbsp;markdown&lt;/h4&gt;
&lt;p&gt;The last option would be trying to take control of the markdown to &lt;span class="caps"&gt;HTML&lt;/span&gt; conversion process and spit out a minimal set of &lt;span class="caps"&gt;HTML&lt;/span&gt; that would play nice with Blogger but need no hand-work to make it pretty (you’ll recall that I bitched about my earlier efforts getting bogged down in &lt;code&gt;&amp;lt;p/&amp;gt;&lt;/code&gt; vs &lt;code&gt;&amp;lt;br/&amp;gt;&lt;/code&gt; and other &lt;span class="caps"&gt;HTML&lt;/span&gt; nonsense I don’t want to think about. There are lots of Markdown generators out there at varying levels of sophistication, but I also don’t want to think too much about micromanaging&amp;nbsp;those.&lt;/p&gt;
&lt;p&gt;After a few bouts of intense googling, I ended deciding to stick with Blogger for two reasons. First, I didn’t see an obvious way to port my old stuff – more than a hundred posts with all sorts of special formatting and so on – and I felt it would be bad for the site to be split across two hosts. Also, I worried about losing readers if I switched URLs (if I do this again, I’m going to set up a custom domain early so people know the site by a redirect I can switch at will!). I will admit that I also wondered if using Google for hosting has anything to do with search results - I’ve noticed that a significant portion of traffic comes through Google searches and I wonder if other hosts are quite as well covered by whatever magic algorithm Google uses.&lt;br&gt;
Sticking with Blogger for hosting means figuring out to reconcile my markdown text and Blogger’s style sheets. Luckily, it turns out that &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; has a nicely configurable &lt;a href="https://github.com/revolunet/sublimetext-markdown-preview"&gt;Markdown preview plugin&lt;/a&gt;. I love Sublime anyway – it’s my go-to text editor for everything except heavy-duty C# and Python &lt;strong&gt;(&lt;span class="caps"&gt;VS&lt;/span&gt; and &lt;a href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt;, respectively, btw)&lt;/strong&gt;.   &lt;/p&gt;
&lt;p&gt;In ordinary use, MarkdownPreview “bakes” your Markdown info nicely formatted &lt;span class="caps"&gt;HTML&lt;/span&gt; with all sorts of swanky &lt;span class="caps"&gt;CSS&lt;/span&gt; formatting – which is precisely what makes things hard for Blogger. With a little extra work, however, you can get it to produce a stripped-down &lt;span class="caps"&gt;HTML&lt;/span&gt; with the right tags and links but without all the extra &lt;span class="caps"&gt;CSS&lt;/span&gt; that conflicts with the Blogger template. &lt;br&gt;
It took a bunch of fiddling to figure out how it works, but once I got over the n00bishness it turns out to be very simple. Here’s a step-by-step to setting it up for&amp;nbsp;yourself.  &lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;1. Install the MarkdownEditing and MarkdownPreview packages for Sublime&amp;nbsp;Text.&lt;/h3&gt;
&lt;p&gt;This is pretty simple using Sublime’s excellent Package Manager, so I’ll skip the details &lt;strong&gt;(&lt;a href="http://www.granneman.com/webdev/editors/sublime-text/packages/how-to-install-and-use-package-control/"&gt;here’s some help&lt;/a&gt; if you need&amp;nbsp;it.)&lt;/strong&gt;  &lt;/p&gt;
&lt;h3&gt;2. Create a simplified &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;template&lt;/h3&gt;
&lt;p&gt;You want to make a simple &lt;span class="caps"&gt;HTML&lt;/span&gt; template that Sublime can render Markdown into. You can add some customisations if you like but the main business of the template is to prevent MarkdownPreview from filling in all of it’s own &lt;span class="caps"&gt;CSS&lt;/span&gt;&amp;nbsp;styles.   &lt;/p&gt;
&lt;p&gt;Luckily, it’s easy to do this: if you don’t add a placeholder for the &lt;span class="caps"&gt;HTML&lt;/span&gt; &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag, MardownPreview can’t stick all the styles in there. This means you can force Sublime to give you a stripped-down output that won’t override your Blogger&amp;nbsp;template.  &lt;/p&gt;
&lt;p&gt;If all you want to do is get uncluttered &lt;span class="caps"&gt;HTML&lt;/span&gt;, you can just&amp;nbsp;use   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;Body&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as your template. That will let you past your Markdown &lt;span class="caps"&gt;HTML&lt;/span&gt; into blogger while keeping your Blogger theme&amp;nbsp;intact.  &lt;/p&gt;
&lt;p&gt;Since I do a lot of code samnples in this blog, I opted to include a little bit of custom &lt;span class="caps"&gt;CSS&lt;/span&gt; to pretty it up. MarkdownPreview uses &lt;a href="http://pygments.org/"&gt;Pygments&lt;/a&gt; to generate highlighted code. Pygments marks up the html with a bunch of custom &lt;span class="caps"&gt;HTML&lt;/span&gt; classes for different language parts, and you just need to provide some &lt;span class="caps"&gt;CSS&lt;/span&gt; that will decorate those guys. There are plenty of examples that work with Pygments which you can cut-and-paste like &lt;a href="https://github.com/richleland/pygments-css"&gt;this set from Rich Leland&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;For myself, I grabbed a free one that looked a lot like the highlighting style on Github – to keep my template simple I put it in a public folder on DropBox and used an &lt;span class="caps"&gt;HTML&lt;/span&gt; link to include it in the blog. &lt;strong&gt;Feel free to use it if you’d like, but don’t link to it: I may keep fiddling with it and you don’t want my changes!. You can also get it &lt;a href="https://gist.github.com/theodox/4fefeb539f1d8ec341b0"&gt;here&lt;/a&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://dl.dropboxusercontent.com/u/2977490/github.css&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;  
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;  
&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;BODY&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dropbox files contains the &lt;span class="caps"&gt;CSS&lt;/span&gt; styles for highlighting code, but none of the zillions of other styles that usually come out of the Markdown &amp;gt; &lt;span class="caps"&gt;HTML&lt;/span&gt; translation. This way, my Blogger template will control the appearance of everything and keep the general style of the blog – but the code coming out of Markdown will be highlighted. Plus, I can tweak old entries by just changing the shared file. &lt;strong&gt;One caution: Blogger is finicky about which links it will allow in the head tag: I would rather have linked to the Gists or a &lt;span class="caps"&gt;CSS&lt;/span&gt; file on github, but wasn’t able to get that to&amp;nbsp;work.&lt;/strong&gt;  &lt;/p&gt;
&lt;h3&gt;3. Customize the MarkdownPreview&amp;nbsp;package.&lt;/h3&gt;
&lt;p&gt;Open up the user settings for MarkdownPreview (&lt;strong&gt;Package Settings &amp;gt; Markdown Preview &amp;gt; Settings – User&lt;/strong&gt;). This will be a blank file the first time you open it, but like all Sublime settings files it’s a &lt;span class="caps"&gt;JSON&lt;/span&gt; file. We just need to tell the MarkdownPreview plugin to use our&amp;nbsp;template:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{  
    &amp;quot;enable_highlight&amp;quot; : true,  
    &amp;quot;enable_pygments&amp;quot; : true,  
    &amp;quot;html_template&amp;quot; : &amp;quot;C:/path/to/blog_template.html&amp;quot;,  
    &amp;quot;skip_default_stylesheet&amp;quot;: true  
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key thing values here are the &lt;code&gt;html_template&lt;/code&gt;, which is the path to the template file from step 2, and &lt;code&gt;skip_default_stylesheet&lt;/code&gt;, which tells MarkdownPreview not to insert all those other&amp;nbsp;styles.   &lt;/p&gt;
&lt;h3&gt;4. Build your&amp;nbsp;blog!&lt;/h3&gt;
&lt;p&gt;With the template and settings in place, create some Markdown. In Sublime, generating the &lt;span class="caps"&gt;HTML&lt;/span&gt; uses the same ‘build’ model as compiling code. So you first set the build system to Markdown (&lt;strong&gt;Tools &amp;gt; Build System &amp;gt; Markdown&lt;/strong&gt;). Then you build it (&lt;strong&gt;&lt;span class="caps"&gt;CMD&lt;/span&gt; + B or Tools &amp;gt; Build&lt;/strong&gt;), which by default will create an &lt;span class="caps"&gt;HTML&lt;/span&gt; file alongside your markdown file. You can view the results in a browser directly or just open the &lt;span class="caps"&gt;HTML&lt;/span&gt; file in Sublime. &lt;br&gt;
What you should have at this point is nicely formed &lt;span class="caps"&gt;HTML&lt;/span&gt; without tons of extra &lt;span class="caps"&gt;CSS&lt;/span&gt; (and, if you added code-highlight styles, some colorful highlited text as well). You can just cut the &lt;span class="caps"&gt;HTML&lt;/span&gt; and paste it straight into the &lt;span class="caps"&gt;HTML&lt;/span&gt; view in Blogger and you should have a perfect, Blogger friendly but Markdown-clean and easy blog entry. Once you’ve done the setup steps once, your only job is a single cut-and-paste (you can even configure MarkdownPreview to copy the &lt;span class="caps"&gt;HTML&lt;/span&gt; to the clipboard instead of writing to a&amp;nbsp;file!).   &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Wrapup&lt;/h2&gt;
&lt;p&gt;This is not the perfect blogging system, by a long shot – but it’s a whole lot better than Blogger’s slow &lt;span class="caps"&gt;GUI&lt;/span&gt;, and it offers flexible code highlighting for all of the languages that Pygments supports. Once all the spadework is done, posting is as simple as writing in Markdown, hitting the build button, then pasting into Blogger. So far I’m finding it a huge&amp;nbsp;improvement.   &lt;/p&gt;
&lt;p&gt;But of course, &lt;span class="caps"&gt;TA&lt;/span&gt;’s are &lt;em&gt;never&lt;/em&gt; satisfied so I bet this will come up again some other&amp;nbsp;time…&lt;/p&gt;</content><category term="blogging"></category><category term="markdown"></category></entry><entry><title>Site updates</title><link href="https://theodox.github.io/2015/site_updates" rel="alternate"></link><published>2015-03-14T11:43:00-07:00</published><updated>2015-03-14T11:43:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-03-14:/2015/site_updates</id><summary type="html">&lt;p&gt;pending&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve finally gotten around to re-hosting the slides from the &lt;a href="http://theodox.github.io/#!cookbook/index.md"&gt;Character Rigger&amp;#8217;s Cookbook&lt;/a&gt; talk.  You can also get the &lt;a href="http://www.gdcvault.com/search.php#&amp;amp;category=free&amp;amp;firstfocus=&amp;amp;keyword=character+rigging%2Bbest%2Bpractices&amp;amp;conference_id="&gt;original audio on the &lt;span class="caps"&gt;GDC&lt;/span&gt; Vault&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://dl.dropboxusercontent.com/u/2977490/presentations/cookbook/img5.jpg"&gt;&lt;img alt="" src="https://dl.dropboxusercontent.com/u/2977490/presentations/cookbook/img5.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the tiny handfull of you how were using my Unity course notes, I&amp;#8217;m in the process of moving them to a new host.  So the old link at &lt;em&gt;theodox.com&lt;/em&gt; is no longer correct (if you follow it you&amp;#8217;ll get a work-in-progress page; I&amp;#8217;m experimenting with a cool new &lt;a href="http://dynalon.github.io/mdwiki/#!index.md"&gt;markdown based wiki&lt;/a&gt; that is much nicer than the old one at &lt;a href="http://tryscribble.com/"&gt;tryscribble.com&lt;/a&gt;, but I have yet to make &amp;#8216;real&amp;#8217; pages).  I&amp;#8217;ll announce it here when they go live&amp;nbsp;again.  &lt;/p&gt;
&lt;p&gt;While moving things around I also added redirect so you can find this blog at &lt;a href="http://blog.theodox.com/"&gt;blog.theodox.com&lt;/a&gt; as well as the usual blogspot&amp;nbsp;link. &lt;/p&gt;</content><category term="blog"></category></entry><entry><title>GDC on the horizon</title><link href="https://theodox.github.io/2015/gdc_on_the_horizon" rel="alternate"></link><published>2015-02-24T22:49:00-08:00</published><updated>2015-02-24T22:49:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-02-24:/2015/gdc_on_the_horizon</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt; talk coming&amp;nbsp;up&lt;/p&gt;</summary><content type="html">&lt;p&gt;For folks who&amp;#8217;ll be attending &lt;a href="http://www.gdconf.com/"&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt;&lt;/a&gt; this year, I&amp;#8217;ll be doing a talk on &lt;strong&gt;Technical Art for Art Directors &lt;/strong&gt; at the &lt;a href="http://schedule.gdconf.com/session/art-direction-bootcamp-technical-art-direction"&gt;Art Director&amp;#8217;s bootcamp&lt;/a&gt; on Monday at 2:15.  Hope to see some of you&amp;nbsp;there!  &lt;/p&gt;</content><category term="gdc"></category><category term="industry"></category></entry><entry><title>What The…?</title><link href="https://theodox.github.io/2015/ls_float3" rel="alternate"></link><published>2015-02-05T22:57:00-08:00</published><updated>2015-02-05T22:57:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-02-05:/2015/ls_float3</id><summary type="html">&lt;p&gt;A nice little trick for filtering components in Maya using &lt;code&gt;cmds.ls()&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Like many Maya heads I have long wrestled with the problem of filtering lists to get what I&amp;#8217;m interested in.  You&amp;#8217;re probably familiar with the use of  the &lt;strong&gt;type&lt;/strong&gt; flag in cmds.ls() to filter on types: for example this will give you only the transforms in your current&amp;nbsp;selection:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmds.ls(sl=True, type = &amp;#39;transform&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This works for any node type (the list is quite long: it&amp;#8217;s basically the whole maya node class hierarchy) and is a handy way to find only once class of objects.  However there&amp;#8217;s no equivalent command for components: so if you&amp;#8217;ve got a mixed list of objects and components it&amp;#8217;s hard to extract just the components without resorting to cumbersome string&amp;nbsp;processing.&lt;/p&gt;
&lt;p&gt;However I just found a partial workaround today that helps with component selections.  For some reason known only to &lt;a href="https://en.wikipedia.org/wiki/Xibalba"&gt;Xibalba&lt;/a&gt;,  Maya 2014+ seems to treat faces, edges and vertices as if they were nodes of a &amp;#8220;float3&amp;#8221; type (uv&amp;#8217;s are &amp;#8220;float2&amp;#8221;s) .  This means you can get the components from a mixed selection&amp;nbsp;with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmds.ls(sl=True, type = &amp;#39;float3&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not the most earth-shattering discovery of the 21st century, but handy&amp;nbsp;nonetheless.&lt;/p&gt;</content><category term="maya"></category><category term="python"></category></entry><entry><title>Race to the bottom?</title><link href="https://theodox.github.io/2015/race_to_the_bottom" rel="alternate"></link><published>2015-01-26T00:04:00-08:00</published><updated>2015-01-26T00:04:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-01-26:/2015/race_to_the_bottom</id><summary type="html">&lt;p&gt;A gloomy note on the decline of 3-d artist&amp;nbsp;salaries&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;m notorious for issuing gloomy pronouncements at &lt;span class="caps"&gt;GDC&lt;/span&gt; and elsewhere about the long term decline in artist pay.  I often point out that my starting salary in 1995 was about what an 6-year veteran makes today.  Maybe I&amp;#8217;m just trying to scare the fainthearted out of the business and drive prices back&amp;nbsp;up.  &lt;/p&gt;
&lt;p&gt;Still, my complaints are nothing compared to what&amp;#8217;s been going in the &lt;span class="caps"&gt;VFX&lt;/span&gt; industry.  The latest victim is &lt;a href="http://www.cartoonbrew.com/business/breaking-dreamworks-animation-will-shut-down-pdidreamworks-studio-over-500-jobs-will-be-eliminated-108161.html"&gt;&lt;span class="caps"&gt;PDI&lt;/span&gt;&lt;/a&gt;, which will be laying off 500 people.  While games has had it&amp;#8217;s ups and downs the last few years, &lt;span class="caps"&gt;VFX&lt;/span&gt; has had a brutal time with lots of closures and&amp;nbsp;disruptions.   &lt;/p&gt;
&lt;p&gt;In that connection I came across &lt;a href="https://vfxsoldier.wordpress.com/"&gt;VFXSoldier &lt;/a&gt;, a site which has been fighting for more unionization in the &lt;span class="caps"&gt;VFX&lt;/span&gt; world.  While I&amp;#8217;m deeply ambivalent about unionizing in &lt;span class="caps"&gt;CG&lt;/span&gt; &amp;#8212; I don&amp;#8217;t know if it&amp;#8217;s really &lt;em&gt;possible,&lt;/em&gt; much less if it&amp;#8217;s a good idea &amp;#8212; but it&amp;#8217;s certainly not something to dismiss without thinking about and it is hard to see how it could make life worse for the poor &lt;span class="caps"&gt;VFX&lt;/span&gt; folks.  It&amp;#8217;s a worthwhile read just to see how the other half lives. I&amp;#8217;m curious to hear what others&amp;nbsp;think.  &lt;/p&gt;</content><category term="industry"></category></entry><entry><title>Dang</title><link href="https://theodox.github.io/2015/dang" rel="alternate"></link><published>2015-01-10T16:09:00-08:00</published><updated>2015-01-10T16:09:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-01-10:/2015/dang</id><summary type="html">&lt;p&gt;An irritating behavior in &lt;code&gt;cmds.ls()&lt;/code&gt; that can really ruin your&amp;nbsp;day.&lt;/p&gt;</summary><content type="html">&lt;p&gt;You know the old saying, &amp;#8220;you learn something new every day?&amp;#8221; Well it&amp;#8217;s true. Usually, it&amp;#8217;s something like &amp;#8220;I don&amp;#8217;t know where I left my keys,&amp;#8221; but sometimes you run into something that you realized you should have known all along and yet somehow it takes you by&amp;nbsp;surprise.   &lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s a little nugget that I stumbled onto today.  If you know Maya, you probably know that cmds.ls() with no arguments gives you a list of every entity in your current maya scene.  However if you pass in a list, ls() will filter it down.  It&amp;#8217;s very common to do something&amp;nbsp;like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pCubeShape1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;persp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;camera&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as a cheap way of filtering a list of objects by type,&amp;nbsp;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to get long names and so on.  All pretty&amp;nbsp;101.&lt;/p&gt;
&lt;p&gt;Now, if you&amp;#8217;re an old Pythonista, you&amp;#8217;ve probably tried it like this&amp;nbsp;too:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and gotten the same result.  Usually, &lt;strong&gt;*args&lt;/strong&gt; is a great help in writing simpler code, since you write functions that take an arbitrary number of arguments without forcing the callers to create lists or tuples. Your code can use loops or comprehensions knowing that the &lt;strong&gt;*args&lt;/strong&gt; will be iterable even if it&amp;#8217;s&amp;nbsp;empty:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;starargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;


&lt;span class="n"&gt;starargs&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# prints nothing&lt;/span&gt;

&lt;span class="n"&gt;starargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# 0  a&lt;/span&gt;

&lt;span class="n"&gt;starargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;j&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# 0  i  &lt;/span&gt;
&lt;span class="c1"&gt;# 1  j  &lt;/span&gt;
&lt;span class="c1"&gt;# 2 k&lt;/span&gt;

&lt;span class="n"&gt;starargs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="c1"&gt;# 0    x  &lt;/span&gt;
&lt;span class="c1"&gt;# 1    y  &lt;/span&gt;
&lt;span class="c1"&gt;# 2    z&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately this nice behavior can bite you if you use it with cmds.ls().  It&amp;#8217;s easy to miss the difference&amp;nbsp;between&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;especially because most functions will treat these&amp;nbsp;interchangeably.  &lt;/p&gt;
&lt;p&gt;However (!) the &lt;em&gt;no arguments means list everything&lt;/em&gt; behavior means that the first one returns and empty list, but the second returns &lt;strong&gt;a list of everything in Maya&lt;/strong&gt;.  If you were using the ls() as a filter or a long-name-converter you are likely to be very surprised by the results. I was using it as part of a cleanup routine, and I suddenly discovered I was &amp;#8216;cleaning&amp;#8217; everything in my&amp;nbsp;scenes.   &lt;/p&gt;
&lt;p&gt;Like I said, you learn something new everyday &amp;#8212; in this case, new curse&amp;nbsp;words!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;You can work around this behavior  simply enough by not passing *-formatted args to ls(), or at least by not doing so without checking if the argument is&amp;nbsp;valid:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_xforms&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not an earth-shaking discovery, just another one of the many mysteries of the&amp;nbsp;Maya.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www-tc.pbs.org/wgbh/nova/assets/img/posters/cracking-maya-code-vi.jpg"&gt;&lt;img alt="" src="http://www-tc.pbs.org/wgbh/nova/assets/img/posters/cracking-maya-code-vi.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="maya"></category><category term="bugs"></category><category term="techart"></category></entry><entry><title>To Scale!</title><link href="https://theodox.github.io/2015/to_scale" rel="alternate"></link><published>2015-01-04T22:08:00-08:00</published><updated>2015-01-04T22:08:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2015-01-04:/2015/to_scale</id><summary type="html">&lt;p&gt;The math review continues with a thrilling look at scale&amp;nbsp;matrices!&lt;/p&gt;</summary><content type="html">&lt;p&gt;In our &lt;a href="adventures_in_4th_dimension.html"&gt;last visit to 3-d math land&lt;/a&gt;, we moved from the 2x2 and 3x3 matrices we used to learn how matrices function to the full 4x4 matrix that we all know and love to hate from 3d applications. This time I’d like to add support for scaling to our matrices so we can round out the ways matrices&amp;nbsp;work.   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This might be a good time to back and breeze throught the &lt;a href="adventures_in_4th_dimension.html"&gt;last installment in our math series&lt;/a&gt; if you’re a little fuzzy on how 4X4 matrices work, or just rusty after the&amp;nbsp;holidays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The 4x4 matrix encodes both rotations and scales very elegantly. If that matrix represented a transfrom, the first three rows of the matrix would be correspond to the local coordinates of the transform, while the fourth row is the 3-D point where the origin of the transform sits (if you’re wondering where things like the pivot offset or maya’s joint orient come from, those are actually a series of matrices that are multiplied together: the &lt;a href="http://download.autodesk.com/us/maya/2009help/CommandsPython/xform.html"&gt;maya docs&lt;/a&gt; go into much more&amp;nbsp;detail.).  &lt;/p&gt;
&lt;p&gt;Of course, we all know that transforms can also be scaled up or down. So what does that look like in matrix&amp;nbsp;form?  &lt;/p&gt;
&lt;p&gt;Here’s our old friend the identity&amp;nbsp;matrix:  &lt;/p&gt;
&lt;p&gt;|  |  |&lt;br&gt;
&amp;#8212;-|&amp;#8212;-|&amp;#8212;-|&amp;#8212;-
1| 0| 0| 0&lt;br&gt;
0| 1| 0| 0&lt;br&gt;
0| 0| 1| 0&lt;br&gt;
0| 0| 0|&amp;nbsp;1  &lt;/p&gt;
&lt;p&gt;and a sample&amp;nbsp;point:  &lt;/p&gt;
&lt;p&gt;|  |  |&lt;br&gt;
&amp;#8212;-|&amp;#8212;-|&amp;#8212;-|&amp;#8212;-
1| 1| 1|&amp;nbsp;1  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&amp;#8217;re wondering why we need 4 points instead of three, you might want to check back after reviewing the last article in the&amp;nbsp;series. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We want to figure out what to do to this matrix so that it returns points and vectors scaled: we’d like to turn our &lt;code&gt;[1,1,1]&lt;/code&gt; into &lt;code&gt;[2,2,2]&lt;/code&gt;&lt;br&gt;
The natural first guess is just to scale up the whole thing by 2: in other words, we could try just changing the 1’s in our matrix to&amp;nbsp;2’s:  &lt;/p&gt;
&lt;p&gt;|  |  |&lt;br&gt;
&amp;#8212;-|&amp;#8212;-|&amp;#8212;-|&amp;#8212;-
2| 0| 0| 0&lt;br&gt;
0| 2| 0| 0&lt;br&gt;
0| 0| 2| 0&lt;br&gt;
0| 0| 0|&amp;nbsp;2  &lt;/p&gt;
&lt;p&gt;Easy - but let&amp;#8217;s do the math just to be&amp;nbsp;sure:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,1] dot [2,0,0,0] = 2  
[1,1,1,1] dot [0,2,0,0] = 2  
[1,1,1,1] dot [0,0,2,0] = 2  
[1,1,1,1] dot [0,0,0,2] = 2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This looks right at first, but there’s a problem. If you cast your mind back to the &lt;a href="adventures_in_4th_dimension.html"&gt;brain bending vortex&lt;/a&gt; of &lt;a href="http://deltaorange.com/2012/03/08/the-truth-behind-homogenous-coordinates/"&gt;homogeneous coordinates&lt;/a&gt;, you’ll remember that the point &lt;code&gt;[2,2,2,2]&lt;/code&gt; is actually quite different from &lt;code&gt;[2,2,2,1]&lt;/code&gt;: in fact, it’s the same as [1,1,1,1] , since homogenous coordinates are divided by their last (W) coordinate when turned into plain old 3-D&amp;nbsp;points. &lt;/p&gt;
&lt;p&gt;So, the naive approach turns out to be wrong: &lt;em&gt;we can’t just scale up every number in the matrix&lt;/em&gt;!  &lt;/p&gt;
&lt;p&gt;The culprit is that very last 2: it’s scaling up the W of the output &amp;#8212; which is equivalent to scaling the actual 3-D point &lt;strong&gt;down&lt;/strong&gt;. Scaling that last W component is &lt;em&gt;negating&lt;/em&gt; all of the other&amp;nbsp;scales.  &lt;/p&gt;
&lt;p&gt;Of course, that suggests that if we just reset that last row, we&amp;#8217;ll get the result we&amp;nbsp;expected:  &lt;/p&gt;
&lt;p&gt;|  |  |  &lt;br&gt;
&amp;#8212;-|&amp;#8212;-|&amp;#8212;-|&amp;#8212;-
2| 0| 0| 0&lt;br&gt;
0| 2| 0| 0&lt;br&gt;
0| 0| 2| 0&lt;br&gt;
0| 0| 0|&amp;nbsp;1  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,1] dot [2,0,0,0] = 2  
[1,1,1,1] dot [0,2,0,0] = 2  
[1,1,1,1] dot [0,0,2,0] = 2  
[1,1,1,1] dot [0,0,0,1] = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you take off your math hat momentarily, and resume your usual &lt;span class="caps"&gt;TA&lt;/span&gt; hat for a moment, you can we have to treat that last row differently from the others. Scaling a transform node up or down may move the children, but the origin of the transform isn’t changing. Scaling doesn’t need to touch that last matrix row, any more than the rotation&amp;nbsp;does.  &lt;/p&gt;
&lt;p&gt;This is consistent with what we discovered last time while deriving the translation matrix: that last row is a slightly different beast than the others and gets handled separately. The upshot is quite simple: &lt;strong&gt;scale information in your matrix is encoded only in the upper left-hand 3x3 subsection.&lt;/strong&gt; It doesn’t affect the last row in any&amp;nbsp;way.  &lt;/p&gt;
&lt;h2&gt;Uniformity&lt;/h2&gt;
&lt;p&gt;So, we know know how to apply a uniform scale to a matrix. If you keep that Max/Maya transform node in mind for just another moment, you can probably get a good intuition about what non-uniform scales will look like in matrix form. We know that applying a non-uniform scale to enlarges everything along the local axes of the node; we also know that the first three rows of our matrix correspond to the local axes of a transform. This suggests that we should be able to apply non-uniform scales by simply scaling those rows differently.&lt;br&gt;
Here’s a matrix that scales up by 2 in the X axis, by 3 in Y, and by 4 in&amp;nbsp;Z:  &lt;/p&gt;
&lt;p&gt;|  |  |&lt;br&gt;
&amp;#8212;-|&amp;#8212;-|&amp;#8212;-|&amp;#8212;-
2| 0| 0| 0 
0| 3| 0| 0&lt;br&gt;
0| 0| 4| 0&lt;br&gt;
0| 0| 0|&amp;nbsp;1  &lt;/p&gt;
&lt;p&gt;And as you can see it scales our point as we&amp;#8217;d&amp;nbsp;like:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,1] dot [2,0,0,0] = 2  
[1,1,1,1] dot [0,2,0,0] = 3  
[1,1,1,1] dot [0,0,2,0] = 4  
[1,1,1,1] dot [0,0,0,1] = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Scale and&amp;nbsp;rotation&lt;/h2&gt;
&lt;p&gt;It’s probably a good idea to try this with a more complex matrix as well, just to prove out what happens when the matrix isn’t neatly lined up with the world. Here’s a matrix that rotates 45 degrees in X and 30 in&amp;nbsp;Z   &lt;/p&gt;
&lt;p&gt;|  |  |&lt;br&gt;
&amp;#8212;-|&amp;#8212;-|&amp;#8212;-|&amp;#8212;-
.866| .5| 0| 0&lt;br&gt;
-.353| .612| .707| 0&lt;br&gt;
.353| -.612| .707| 0&lt;br&gt;
0| 0| 0|&amp;nbsp;1  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can check back to our discussion of &lt;a href="dot_matrix.html"&gt;rotation matrices&lt;/a&gt; to see the pattern behind those&amp;nbsp;numbers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Our test point&amp;nbsp;becomes       &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,1] dot [.866,-.353,.353,0] = .866  
[1,1,1,1] dot [.5, .612,-.612, 0] = .5  
[1,1,1,1] dot [0,.707,.707,0] = 1.414  
[1,1,1,1] dot [0,0,0,1] = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or &lt;code&gt;[.866, .5, .1.414]&lt;/code&gt; (I’ve done a little rounding for readability).  To make this a little less abstract, heres&amp;#8217; a unit cube in Maya with that matrix&amp;nbsp;applied:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-3MHZFxXQeMY/VKohUK39ItI/AAAAAAABLgQ/VSQCT-mKkns/s1600/45_30.png"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-3MHZFxXQeMY/VKohUK39ItI/AAAAAAABLgQ/VSQCT-mKkns/s1600/45_30.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since those first three rows represent the local axes of our transform, we have to multiply the whole row in order to apply a local scale. If we wanted to scale this matrix up by 2 along it’s local X, we’d&amp;nbsp;get  &lt;/p&gt;
&lt;p&gt;1.732| 1| 0| 0&lt;br&gt;
-.353| .612| .707| 0&lt;br&gt;
.353| -.612| .707| 0&lt;br&gt;
0| 0| 0|&amp;nbsp;1  &lt;/p&gt;
&lt;p&gt;(note how both .866 and .5 are doubled). Our new dots&amp;nbsp;become:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,1] dot [1.732,-.353,.353,0] = 1.732  
[1,1,1,1] dot [1, .612,-.612, 0] = 1  
[1,1,1,1] dot [0, .707, .707, 0] = 1.414  
[1,1,1,1] dot [0,0,0,1] = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can see how the X and Y dimensions have both scaled up, since the original X axis is pointing partially into world X and world Y. Here’s the same transformation in Maya for comparison - you can see that the orientation is preserved but the unit cube is scaled double along it&amp;#8217;s local X&amp;nbsp;axis.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-xQrr4BXBAI0/VKolH8cyJcI/AAAAAAABLgY/TDc1GUziqRo/s1600/scaled_and_rotated.png"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-xQrr4BXBAI0/VKolH8cyJcI/AAAAAAABLgY/TDc1GUziqRo/s1600/scaled_and_rotated.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This demonstrates how you apply non-uniform scales: by scaling the contents of your X, Y or Z rows of your matrix.  You&amp;#8217;ll notice that we had to scale the entire row to get the correct&amp;nbsp;results.   &lt;/p&gt;
&lt;p&gt;One important side-effect of this strategy is that not all of your row vectors will be normalized: if the matrix is scaled the vectors will have unpredictable lengths.  If you are using the matrix rows as vectors (for example, in a look-at equation) you&amp;#8217;ll have to remember to re-normalized them or you&amp;#8217;ll get wonky&amp;nbsp;results.   &lt;/p&gt;
&lt;p&gt;On the other hand, the length of your row vectors actually encodes the local scales of your matrix. The local X scale of your matrix is the length of the first row, the local Y is the length of the second, and the local Z scale is the length of the third&amp;nbsp;row.  &lt;/p&gt;
&lt;p&gt;In the examples above you can see that the rows of our (2,3,4) scale matrix are 2, 3 and 4 respectively  This is also true for the last example, despite the rotations. In case you’ve forgotten the formula, the length of a vector is the &lt;a href="http://www.netcomuk.co.uk/~jenolive/vect5.html"&gt;square root of the sum of it’s squared contents&lt;/a&gt;, or in more readable&amp;nbsp;form:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def vector_length(v):  
   square_length = [i * i for i in v]  
   return math.sqrt(sum(square_length))
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;As you can see the vector length formula works for any length vector: Just add up the squares and take the square roots! A useful trick for many applications, though is not to bother getting square roots unless you need them: for example, if you want to sort vectors by length, you can just collect the sum of the component squares without getting the roots: the ordering is the same, but you don&amp;#8217;t have to do a bunch of expensive square roots since you only care about relative lenghts, not&amp;nbsp;absolutes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With that in mind, the lenght of the X row of our tilted-and-scaled matrix&amp;nbsp;is   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sqrt ( 1.732**2 + 1**2 + 0**2 )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in other words 2, as expected (with allowance for my rounding,&amp;nbsp;anyway).  &lt;/p&gt;
&lt;p&gt;This is a particularly neat trick &amp;#8212; as always, working through my stuff has left me in awe of the geniuses who devised this system! &amp;#8212; because the scales are embedded in the matrix and easily recovered even though they don&amp;#8217;t show up as single&amp;nbsp;numbers.  &lt;/p&gt;
&lt;p&gt;Pretty slick, huh?  But it also explains why you frequently get objects in Max and Maya reporting themselves with scale values that seem off, like 3.99999997 or the like:  that&amp;#8217;s floating point error accumulating in the calculation of the length of those row&amp;nbsp;vectors.   &lt;/p&gt;
&lt;h2&gt;Next&amp;nbsp;up&lt;/h2&gt;
&lt;p&gt;Scaling, it turns out, is quite pleasantly simple after the mad 4-D adventures involved in adding translation. It remains happily parked in the upper-left-hand corner of the matrix, doing its thing in a predictable&amp;nbsp;way.  &lt;/p&gt;
&lt;p&gt;Next time out we’ll take a look at shears - a way to skew a matrix which usually happens by accident but which is sometimes useful to know about. In the meantime, Happy New Year and keep on&amp;nbsp;dotting!  &lt;/p&gt;
&lt;h2&gt;Posts in this&amp;nbsp;series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="bagels_and_coffee.html"&gt;Bagels and Coffee (intro to dot&amp;nbsp;products)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="dots_all_folks.html"&gt;Dots All Folks (dot product&amp;nbsp;uses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="dot_matrix.html"&gt;Dot Matrix (intro to&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="adventures_in_4th_dimension.html"&gt;Adventures in the 4th Dimension (translation&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="to_scale.html"&gt;To Scale! (scale&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="math"></category></entry><entry><title>Comments requested</title><link href="https://theodox.github.io/2014/comments_requested" rel="alternate"></link><published>2014-12-21T10:03:00-08:00</published><updated>2014-12-21T10:03:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-12-21:/2014/comments_requested</id><summary type="html">&lt;p&gt;seeking input for an upcoming talk on technical art at &lt;span class="caps"&gt;GDC&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;m working a talk for &lt;a href="http://www.gdconf.com/"&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt;&lt;/a&gt; , tentatively entitled &amp;#8220;&lt;em&gt;Technical&lt;/em&gt; Art Director? What the heck does that&amp;nbsp;mean?&amp;#8221;  &lt;/p&gt;
&lt;p&gt;I&amp;#8217;d love to hear thoughts from all you industry types on what the role means. That could be what you think it means for your company, or what you think it means when other people hear it, or what you think it ought to&amp;nbsp;mean. &lt;/p&gt;
&lt;p&gt;Good anecdotes are particularly appreciated and may be shamelessly stolen&amp;nbsp;:)&lt;/p&gt;
&lt;p&gt;So please comment below and let me know what you think while I&amp;#8217;m trying to figure out what I&amp;nbsp;think&amp;#8230;  &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt; for future readers coming here via Google or whatnot, &lt;a href="submit.html"&gt;this link goes to my perennial &lt;em&gt;how to write  a &lt;span class="caps"&gt;GDC&lt;/span&gt; talk&lt;/em&gt; post&lt;/a&gt;. Physician, heal&amp;nbsp;thyself!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href="http://www.gdcvault.com/play/1021806/Art-Direction-Bootcamp-Technical-Art"&gt;Here is the talk as it was finally delivered&lt;/a&gt; at &lt;span class="caps"&gt;GDC&lt;/span&gt;&amp;nbsp;2015.&lt;/p&gt;</content><category term="industry"></category><category term="gdc"></category><category term="techart"></category></entry><entry><title>Adventures in the 4th dimension</title><link href="https://theodox.github.io/2014/adventures_in_the_4th_dimension" rel="alternate"></link><published>2014-12-15T23:35:00-08:00</published><updated>2014-12-15T23:35:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-12-15:/2014/adventures_in_the_4th_dimension</id><summary type="html">&lt;p&gt;Matrices and how they can be used to transform 3-d&amp;nbsp;points&lt;/p&gt;</summary><content type="html">&lt;p&gt;In &lt;a href="dot_matrix"&gt;our last discussion of 3d math&lt;/a&gt;, we started to plumb the mysteries of the matrix. Along the way we discovered two important facts: First, that it’s possible to write an article about matrices with only the merest smidge of a Keanu Reeves mention and second (almost as important), that &lt;strong&gt;matrices are just a convention for applying dot products in series.&lt;/strong&gt; We walked through the derivation of matrices for a series of dot products and shows how hat simple operation allows you to do rotations in two and three&amp;nbsp;dimensions.  &lt;/p&gt;
&lt;p&gt;Naturally, any &lt;span class="caps"&gt;TA&lt;/span&gt; reading this will be knows there&amp;#8217;s more. We all know that the matrices we’re most familiar with — the transform matrices that drive animation and modeling — do more than rotate. So this this time out we’re going talk about how &lt;strong&gt;translation&lt;/strong&gt; — spatial offsets — can be packed into matrices.  And we&amp;#8217;re going to do it in a truly brain bending way.  Sort&amp;nbsp;of.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;If none of this sounds familiar, you may want to return to the &lt;a href="dot_matrix"&gt;previous post in the series&lt;/a&gt; before&amp;nbsp;continuing.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;After all of the time we’ve spent with dot products in this series, one thing we should remember is that dots are &lt;strong&gt;additive&lt;/strong&gt; — if you dot two vectors, you sum up all of the products. “Additive” is a nice quality to have if we’re thinking about adding translations to our matrices  It suggests that maybe we can use the additive-ness of dot products to teach our matrices how to do translations as well as&amp;nbsp;rotations.  &lt;/p&gt;
&lt;p&gt;Multiplying a vector against a matrix, &lt;a href="dot_matrix.html"&gt;you’ll recall&lt;/a&gt;, is nothing more than stringing together a set of dot products between the vector and the columns of the matrix. So, putting together the fact that dots are additive and the fact that matrix multiplication uses dots, it seems logical that we can just stick our translation right onto the bottom of the matrix.  By dropping it down at the end of the matrix columns, we&amp;#8217;ll add it add it to our results. One important side effect that we’ll have to worry about is that this will break the pretty symmetry we noted last time whereby every matrix row is an axis in the matrix&amp;#8217;s local coordinate system.  However we’ll deal with that after we know it&amp;nbsp;works.  &lt;/p&gt;
&lt;p&gt;To keep things simple, let’s start with a rotate matrix that doesn’t do any, you know, &lt;em&gt;rotating&lt;/em&gt; — a matrix that works but leaves incoming data unchanged. That&amp;#8217;ll make it easier to see when our translations kick in. The correct math moniker for this do-nothing matrix is an &lt;em&gt;identity&lt;/em&gt; matrix (as in the otherwise-inexplicable &lt;code&gt;MakeIdentity()&lt;/code&gt; command in Maya) and it’s just a set of rows that match the default &lt;span class="caps"&gt;XYZ&lt;/span&gt;&amp;nbsp;axes:  &lt;/p&gt;
&lt;p&gt;|   |   | 
|&amp;#8212;-|&amp;#8212;-|&amp;#8212;-|  &lt;br&gt;
1| 0| 0&lt;br&gt;
0| 1| 0&lt;br&gt;
0| 0|&amp;nbsp;1  &lt;/p&gt;
&lt;p&gt;I won’t bother with the math here, but if your work it out for yourself you’ll quickly see that dotting the columns of this matrix in turn against any vector returns the original vector&amp;nbsp;unchanged.   &lt;/p&gt;
&lt;p&gt;Next, we’d like to add some extra information to this matrix to include a translation. Since we know our dots are going down the columns, if we tack on an extra row we should be getting a new value added to the output: hopefully, the translation we want. Adding an extra row for translation gives us a 4X3 matrix like this (with an example translation of &lt;code&gt;[1,2,3]&lt;/code&gt; :  &lt;/p&gt;
&lt;p&gt;|   |   | 
|&amp;#8212;-|&amp;#8212;-|&amp;#8212;-|
1| 0| 0&lt;br&gt;
0| 1| 0&lt;br&gt;
0| 0| 1&lt;br&gt;
1| 2|&amp;nbsp;3  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;For future reference, matrices are usually described as ‘rows by columns’; in the last article we derived our matrix first as a 2X2 then as a 3X3 matrx. Most transformation matrices in 3d software are 4X4, for reasons that will become apparent shortly, but Max users will find this 4X3 format familiar — Maxscript makes extensive use of 4x3 matrices for object&amp;nbsp;transforms.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So now we’ve got a test matrix that should offset our initial value by  &lt;code&gt;[1,2,3]&lt;/code&gt;. However, we immediately run into a problem: as we try to multiply our vector against this matrix. The columns now have 4 items but our vector only has 3. How can we sum up? Dot products require that both vectors being dotted have the same number of products, as you can see&amp;nbsp;here:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1] dot [1,0,0,1] = (1 * 1) + (1 * 0) + (1 * 0) + (??? * 1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make this work, we are going to need to extend our vector to grab the translation values from the new matrix row. It needs to become a 4-dimensional vector. &lt;em&gt;The fourth dimension! Trippy! Cue &lt;a href="https://www.youtube.com/watch?v=4wQsWL-lMJw"&gt;theremin music&lt;/a&gt;&amp;#8230;.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;We&amp;#8217;ve actually dimension jumped before, while working through rotation matrices. We could borrow the same tactic we used in the last post when we moved from a 2-D matrix to a 3-D matrix by just taking on a zero to our vector. This seems like a natural idea, since we know that the 2-D vector &lt;code&gt;[X,Y]&lt;/code&gt; is equivalent to the 3-D vector &lt;code&gt;[X,Y,0]&lt;/code&gt;. So let’s see what happens if we do the dot&amp;nbsp;products:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,1,1,0] dot [1,0,0,1] = (1 * 1) + (1 * 0) + (1 * 0) + (0 * 1) = 1  
[1,1,1,0] dot [0,1,0,2] = (1 * 0) + (1 * 1) + (1 * 0) + (0 * 2) = 1  
[1,1,1,0] dot [0,0,1,3] = (1 * 0) + (1 * 0) + (1 * 1) + (0 * 3) = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not what we were hoping for: our result is still  &lt;code&gt;[1,1,1]&lt;/code&gt;. What&amp;nbsp;happened?  &lt;/p&gt;
&lt;p&gt;The extra zero has allowed us to &lt;em&gt;do&lt;/em&gt; the dot product — but it&amp;#8217;s  also zeroing out the translation we are trying to add. Evidently zero is not what we want here (this is not just an misstep, though: we&amp;#8217;ll come back to those zeroes&amp;nbsp;later).   &lt;/p&gt;
&lt;p&gt;For now, the fix is pretty obvious, even though it’s much less obvious how to what the fix is supposed to mean. If we turn that final zero into a one, we’ll get our translation added to the original&amp;nbsp;value:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1,1,1,1 dot 1,0,0,1 = (1 * 1) + (1 * 0) + (1 * 0) + (1 * 1) = 2  
1,1,1,1 dot 0,1,0,2 = (1 * 0) + (1 * 1) + (1 * 0) + (1 * 2) = 3  
1,1,1,1 dot 0,0,1,3 = (1 * 0) + (1 * 0) + (1 * 1) + (1 * 3) = 4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There, at last, is the translation we are looking for; our vector &lt;code&gt;[1,1,1,1]&lt;/code&gt;has become &lt;code&gt;[2,3,4]&lt;/code&gt;, reflecting the offset in the last row of the&amp;nbsp;matrix.  &lt;/p&gt;
&lt;p&gt;Well, it’s nice to get the right result, but this still leaves us with a bit of a conundrum.  I know what [2,3,4] means. But what the heck is that last coordinate doing there? Did we just make it&amp;nbsp;up?  &lt;/p&gt;
&lt;h2&gt;X,Y,Z,&lt;span class="caps"&gt;WTH&lt;/span&gt;?&lt;/h2&gt;
&lt;p&gt;You may remember from our &lt;a href="bagles_and_coffee.html"&gt;original discussion of dot products&lt;/a&gt; that &lt;em&gt;vector&lt;/em&gt; is actually a very general term, encompassing any bundle of numbers. In tech art we’re used to thinking of vectors as &lt;span class="caps"&gt;XYZ&lt;/span&gt; bundles in 3-D space, but a vector can just as easily be something else — such as your weekly Starbucks expenditure, which is how we started down this road in the first place. 3-D points can be represented by vectors — but so could any bundle of 3 numbers which formed part of a linear equation; say, the value of the dollar, the euro and the yen on a given day. Dot products and matrices work the same way regardless of the subject matter. So, one thing we know already is that all 3-D points are vectors, so to speak, but _not _all vectors are&amp;nbsp;3-D. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://micro.magnet.fsu.edu/optics/timeline/people/antiqueimages/euclid.jpg"&gt;&lt;img alt="" src="http://micro.magnet.fsu.edu/optics/timeline/people/antiqueimages/euclid.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not only did he pioneer analytical geometry, he seems to have invented the Mall Santa look&amp;nbsp;too.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The vectors we use in graphics, of course are usually &lt;a href="https://www.princeton.edu/~achaney/tmve/wiki100k/docs/Euclidean_vector.html"&gt;Euclidean vectors&lt;/a&gt;: a set of 3 numbers which represent a spatial offset in the X,Y and Z spatial dimensions. The word &lt;em&gt;vector&lt;/em&gt; comes from the Latin word for &lt;em&gt;one who carries&lt;/em&gt;: the vector is the spatial difference between two positions. We get misled by the fact that programming languages usually use the &lt;em&gt;algebraic&lt;/em&gt; name vector (as “bundle of numbers”) for the data type we use to hold the &lt;em&gt;geometric&lt;/em&gt; Euclidean vector. &lt;em&gt;The fact that algebraic vectors and Euclidean vectors share the same noun while meaning different things is, to put it mildly, _annoying.  _With the goofy stuff we&amp;#8217;re getting in to, I personally would be happy to skip these minor&amp;nbsp;surprises.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;To understand what that weird extra number, however, we have to add in a third concept: the Euclidean &lt;strong&gt;point&lt;/strong&gt;._ _Which is also frequently represented in code by something called &amp;#8220;vector&amp;#8221; but which is represents a different idea. Sigh. We will have to distinguish between two things which look similar when written down or stored as vectors in computer memory but which actually _mean _two different things. Up till now we&amp;#8217;ve talked about vectors and points as if they were interchangeable, but to make the translation matrix work we need to differentiate&amp;nbsp;them.  &lt;/p&gt;
&lt;p&gt;The default Euclidean vector is a purely relative quantity. It represents a &lt;em&gt;&lt;strong&gt;change&lt;/strong&gt;&lt;/em&gt; in position. That&amp;#8217;s why the vector that gets you from &lt;code&gt;[0,0,0]&lt;/code&gt; to &lt;code&gt;[1,1,1]&lt;/code&gt; and the vector that gets you from &lt;code&gt;[8,8,8]&lt;/code&gt; to &lt;code&gt;[9,9,9]&lt;/code&gt; are the same: the vector proper has no location of it&amp;#8217;s own. You can think of it as a surface normal, which tells you which way a surface is facing without telling you anything about where the surface actually &lt;em&gt;is&lt;/em&gt;, or the direction of a directional light which illuminates along a direction and which doesn&amp;#8217;t actually reside anywhere in 3-D&amp;nbsp;space.  &lt;/p&gt;
&lt;p&gt;On the other hand a Euclidean point _is _an actual location in space. The point &lt;code&gt;[1,1,1]&lt;/code&gt; is just that : the location &lt;code&gt;[1,1,1]&lt;/code&gt;. it has no &amp;#8216;facing&amp;#8217; or &amp;#8216;direction&amp;#8217; the way a surface normal does - and it&amp;#8217;s not the same as any other 3-D point. It&amp;#8217;s an _address, _while a regular vector is an&amp;nbsp;offset.  &lt;/p&gt;
&lt;p&gt;That&amp;#8217;s where our fourth coordinate comes in. The fourth coordinate in our example &lt;strong&gt;tells us if we’re dealing with a Euclidean point or a Euclidean vector&lt;/strong&gt;; that is, if we are dealing with something that can be translated or not.  If the last coordinate is a &lt;strong&gt;1&lt;/strong&gt;, the data is a &lt;strong&gt;point &lt;/strong&gt;which can be transformed (moved, rotated and scaled). If the last coordinate is a &lt;strong&gt;0&lt;/strong&gt;, the data is a &lt;strong&gt;vector&lt;/strong&gt;, which can be rotated and scaled but not moved. The last number is known as the &lt;a href="http://en.wikipedia.org/wiki/Homogeneous_coordinates"&gt;homogeneous coordinate&lt;/a&gt;, although most people refer to it as the “W” component by analogy with X Y and Z.  &lt;em&gt;Although I kind of wish they had just wrapped it around back to A, or started at W, or something. &lt;span class="caps"&gt;XYZW&lt;/span&gt;? Like I said, I&amp;#8217;d like to concentrate on the mind-warping concepts more and the annoying terminology less.  Oh&amp;nbsp;well.&lt;/em&gt;  &lt;/p&gt;
&lt;h2&gt;Homegeneophobia&lt;/h2&gt;
&lt;p&gt;If you’re practically minded, all you &lt;em&gt;really _need to know today is that a W of 1 is a point and a W of 0 is a direction. If you are especially literal minded, in fact, this next bit may be a bit&amp;#8230; bizarre. You can probably skip it without missing much practical information, but try to stick it out. It will give you an appreciation of the abstract beauty the underlies matrix math.  I&amp;#8217;m going to try to explain of the ‘meaning’ of the W coordinate but take this with a grain of salt, since this one goes a bit beyond my limited mathematical imagination.&lt;br&gt;
We&amp;#8217;ve already suggested that the W component represents a 4th dimension.  While that&amp;#8217;s kind of hard to visualize, we can see the results by &amp;#8216;projecting&amp;#8217; onto the &lt;span class="caps"&gt;XYZ&lt;/span&gt; space that we are used to. Got that? Just like we project a 3-D set of points onto the 2-D screen of our computers, we can project a 4-D quantity into 3 dimensions.&lt;br&gt;
Another way to think about it is that an &lt;span class="caps"&gt;XYZW&lt;/span&gt; vector is _one point along a 4-dimensional line that intersects 3-space&lt;/em&gt;.  In this image, engraver/ math whiz / literal Renaissance Man &lt;a href="http://www.albrecht-durer.org/"&gt;Albrecht Durer&lt;/a&gt; is using a perspective scrim to do his life drawing: projecting a 3-D reality on the 2-D silk screen by keeping his eye in one location and then seeing how the 3-D lady lines up with his 2-D&amp;nbsp;grid.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://relativity.net.au/gaming/java/images/DurerFrustum.png"&gt;&lt;img alt="" src="http://relativity.net.au/gaming/java/images/DurerFrustum.png"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A decent analogy for projecting 4-D down to 3, here a 3-D world projected  down to&amp;nbsp;2:   &lt;/p&gt;
&lt;p&gt;In this word, each 2-D point on the scrim corresponds to a 3-D line running from Durer&amp;#8217;s eye through the plane of the scrim and beyond.  In a matrix, each 3-D point is on a similar line that runs into the fourth dimension.  While it&amp;#8217;s hard to visualize, it&amp;#8217;s mathematically consistent - which is why the mathematicians like&amp;nbsp;it.  &lt;/p&gt;
&lt;p&gt;How cool – or confusing – is&amp;nbsp;that?    &lt;/p&gt;
&lt;p&gt;The point where our mystical 4-D vector intersects our plain old 3-D space corresponds to the point where Durer&amp;#8217;s eyeline passes through the scrim.  In our case, the point is  &lt;code&gt;[X,Y,Z]&lt;/code&gt; divided by &lt;code&gt;W&lt;/code&gt;. One side effect of this is that there are many different 4-D points that correspond to the same 3-D point: &lt;code&gt;[1,1,1,1]&lt;/code&gt;, &lt;code&gt;[2,2,2,2]&lt;/code&gt; and &lt;code&gt;[-1,-1,-1,-1]&lt;/code&gt; all represent the same point.  In the illustration above, you can see how each of the orange lines hits one _point _in 2-D, but that the point lies on a 3-D _line. _Going from 4-D space down to 3-D works the same way - except that the extra dimension is brain-bendingly hard to&amp;nbsp;visualize.  &lt;/p&gt;
&lt;p&gt;A W value of 1 represents the projection of our 4-D vector onto boring old 3-D reality, sort of like the plane of the perspective scrim in the image above.  W values less than one approach the &amp;#8216;eye point&amp;#8217;, while values larger than 1 extend past the scrim into the scene.  To understand how the W changes the projected value in 3-D, imagine picking a point on Durer&amp;#8217;s 2-D screen and pushing back through the screen. As the distance (the W) increases, the projected point will get closer to the center of the screen.  In fact, this is plain old 1-point perspective in action:  A W approaches infinity, any coordinate translates into the perspective vanishing point, which in this case is the center of the&amp;nbsp;scrim.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.robinurton.com/history/Renaissance/perspective.jpg"&gt;&lt;img alt="" src="http://www.robinurton.com/history/Renaissance/perspective.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All lines converge at W=infinity, at least according to Piero Della&amp;nbsp;Francesca&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you’re still unable to wrap your brain around this - and I am not sure I really can, so don’t feel bad about it, you might find this YouTube from Jamie King helpful. You can relate it to the Durer image by imagining Jamie&amp;#8217;s example image is taken looking down on Durer&amp;#8217;s little perspective machine from&amp;nbsp;above:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extra points for the gratuitous Bill and Ted reference,&amp;nbsp;btw.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This same analogy also explains, sort of, why W=0 vectors don’t move. As W increases, the points will converge on the center of his scrim, that is, the perspective vanishing point. On the other hand as W gets smaller they move away: the effect is like a camera zooming in:  everything on the image plane moves &lt;em&gt;away&lt;/em&gt; from the vanishing point. As W reaches zero the &amp;#8216;zoom&amp;#8217; is now infinite: In math, all of your 4-D points would have become &lt;em&gt;impossible to convert back to 3-D&lt;/em&gt; because you&amp;#8217;d be dividing their &lt;span class="caps"&gt;XYZ&lt;/span&gt; positions by zero.  It&amp;#8217;s sort of the inverse of a black hole: instead of all points collapsing down into a singularity, they are instead all smeared out infinitely &amp;#8212; which makes them effectively the same anyway. There&amp;#8217;s no difference between &lt;code&gt;[1,1,1,0]&lt;/code&gt; and &lt;code&gt;[999,999,999,0]&lt;/code&gt; in position, since they are both &amp;#8216;located&amp;#8217; at  &lt;code&gt;[undefined,undefined,undefined]&lt;/code&gt; in 3&amp;nbsp;dimensions.  &lt;/p&gt;
&lt;p&gt;Since movement has no meaning in this bizarro singularity world, translations don&amp;#8217;t do anything. But — brain bend alert —  rotations still work. Of course, we already know from our earlier experiments with W&amp;#8217;s set to zero: the dots against the first 3 rows of the 4X3 matrix haven&amp;#8217;t changed, but a W=0 input vector won&amp;#8217;t translate.  Put another way, since dot products are a way of projecting one vector on to another, projecting a any 4-D vector onto a different 4-D vector with a W of 0 will keep you right at the &amp;#8216;eye point&amp;#8217; out of which all those 4-D rays are shooting, so you won&amp;#8217;t have any W-ness to project yourself out into the 3-D&amp;nbsp;world.  &lt;/p&gt;
&lt;p&gt;It&amp;#8217;s simultaneously baffling and awe-inspring. Like &lt;em&gt;&lt;a href="http://www.goat-simulator.com/"&gt;Goat Simulator&lt;/a&gt;.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;If you&amp;#8217;ve stuck it out this far, the whole visualization actually has one imporant side benefit. It explains the _other _reason we need homogeneous coordinates: they allow us to handle perspective projections and regular geometry using the same set of rules. W coordinates that aren’t 0’s or 1’s generally crop up only when you’re working with the perspective matrix of a camera or trying to transform points from world space to screen space. However that’s a matter for another&amp;nbsp;time.   &lt;/p&gt;
&lt;p&gt;For now, however, I need to relax my frontal&amp;nbsp;lobe.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.lovingmystuff.co.uk/wp-content/uploads/2013/08/543.jpg"&gt;&lt;img alt="" src="http://www.lovingmystuff.co.uk/wp-content/uploads/2013/08/543.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Why did they wear those hankies on their heads,&amp;nbsp;anyway?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Turning something nice and obvious like a 3-D point into an in infinite line in a dimension where parallel lines can intersect is just the sort of thing that gives mathematicians a bad name. Thankfully we don’t really need to understand all the metaphysics: we can just rely happily on the fact that this extra abstraction lets us handle translations using the same math we use for rotations. And we should be grateful that the kind of folks who do understand the way 4-dimensional vectors are projected into our 3-D world left us the 4X4 matrix which (despite this little exercise in gimcrackery) is a remarkably elegant and handy tool for practical purposes and can still be done with junior high school math&amp;nbsp;skills.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Gottfried Chen’s blog also makes &lt;a href="http://deltaorange.com/2012/03/08/the-truth-behind-homogenous-coordinates"&gt;an heroic attempt to explain this to mere mortals&lt;/a&gt;. The great-grandaddy of all these discussions is Edwin Abbot’s classic novella (you read that right - it’s &lt;strong&gt;fiction&lt;/strong&gt;) &lt;a href="http://www.amazon.com/mn/search/?_encoding=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;field-keywords=flatland&amp;amp;linkCode=ur2&amp;amp;tag=tecsurgui-20&amp;amp;url=search-alias%3Daps&amp;amp;linkId=AIHJQXYL5IWCSXN6"&gt;Flatland&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Homogenius!&lt;/h2&gt;
&lt;p&gt;Alright, let&amp;#8217;s get our feet back on the ground (which involves setting our Z coordinate to 0 and our W coordinate to&amp;nbsp;1).  &lt;/p&gt;
&lt;p&gt;If you just skipped over the mental gymnastics above —or if you just need to be brought back down to earth — let’s remind ourselves where we are:&lt;br&gt;
We&amp;#8217;ve got a nice, easy to manage system for packing spatial translations and rotations into a single operation, in the form of the 4X3 matrix. By adding a W coordinate — the ~~&lt;em&gt;mysterious&lt;/em&gt;~~ homogeneous coordinate – to the end of our original vector, we have gained the ability to do translations. We&amp;#8217;ve also shown how we can toggle back and forth between rotation-only vector operations and rotate-and-translate point operations by changing the W coordinate from 0 to 1.&lt;br&gt;
There is one little flaw to this nifty system, however: it’s lossy. Our 4-part vectors let us distinguish between points and pure vectors, but our 4x3 matrix is only giving us back 3 components not 4. This is fine if all we want is the points, but it’s throwing away information we might need to keep if, for example, if we wanted to multiply a point by several matrices in series. &lt;br&gt;
If we want to get a 4—way vector back from the matrix we are going to need an extra column. Luckily, we know what we want from that extra column — we just need to preserve that W value and nothing else. So how do we get there?&lt;br&gt;
We already know from &lt;a href="http://techartsurvival.blogspot.com/2014/12/dot-matrix.html"&gt;last time&lt;/a&gt; that the first 3 rows of our matrix are supposed to be the axes of the coordinate system which our matrix defines. By definition, an axis can’t move: it’s a direction, not a position. That suggests that it’s going turn into a vector with a W of 0 when we expand it into the next column. After all, you can’t &lt;em&gt;move&lt;/em&gt; the X axis or the Y axis: no matter how you rotate it around it is only an &lt;em&gt;axis&lt;/em&gt; if it passes through origin. The last row, on the other hand, is a &lt;em&gt;translation&lt;/em&gt;: it is actually intended to enforce a change of location: In other words, it’s a &lt;em&gt;point&lt;/em&gt; with a W value of 1, rather than a vector with a W of 0.&lt;br&gt;
In other words our 4x3 matrix turns into a 4 x 4 matrix that looks like this:&lt;br&gt;
1| 0| 0| 0&lt;br&gt;
&amp;#8212;-|&amp;#8212;-|&amp;#8212;-|&amp;#8212;-&lt;br&gt;
0| 1| 0| 0&lt;br&gt;
0| 0| 1| 0&lt;br&gt;
0| 0| 0|&amp;nbsp;1  &lt;/p&gt;
&lt;p&gt;The first 3 rows are the vectors defining our coordinate system and the last row is a point defining the spatial offset. Any &lt;span class="caps"&gt;TA&lt;/span&gt; should be able to visualize this as transform node — a group, a joint, a null or whatever you prefer — aligned so that it’s axes line up with the first 3 rows and it’s origin sits at the &lt;span class="caps"&gt;XYZ&lt;/span&gt; position of the fourth&amp;nbsp;row.   &lt;/p&gt;
&lt;p&gt;The nice bit is that, despite all the 4-dimensional mumbo-jumbo this 4X4 matrix (just like the 3X3 and 4X3 versions we’ve touched on before) is &lt;strong&gt;still just a plain old set of dot products&lt;/strong&gt; when you clear away all the verbiage, special typography and extra dimensions. Dot your 4-D point or vector against the columns of this 4-D matrix and you’ll get back a rotated vector, just like we did when learning how matrices work. If your incoming W is set to 0, you’ll get just a rotation; if it’s set to 1, you’ll get a rotation and a translation at the same time. With plain old bagels-and-coffee math. &lt;br&gt;
Petty slick, huh? &lt;br&gt;
So, after a consciousness-expanding (and headache-inducing) journey into other dimensions, we’ve finally sort of arrived at the full 4X4 matrix that powers every graphics application under the sun. And, amazingly enough, we’ve just scratched the surface (&lt;em&gt;What is the surface of a 4-D object anyway? My brain hurts.&lt;/em&gt;)&lt;br&gt;
Next time out we’ll talk about how a 4x4 matrix can encode scale as well, which luckily is a little less Timothy Leary than what we’ve already gone through.  Until then here&amp;#8217;s an animated gif of a 4-dimensional cube (which in this case is a 2-D projection of the 3-D physical extrusion of the 4-D object&amp;#8230;. piece of&amp;nbsp;cake!)  &lt;/p&gt;
&lt;p&gt;Me, I need a good stiff&amp;nbsp;drink.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://24.media.tumblr.com/tumblr_m3dy5zVFhq1qgnjgmo1_400.gif"&gt;&lt;img alt="" src="http://24.media.tumblr.com/tumblr_m3dy5zVFhq1qgnjgmo1_400.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Posts in this&amp;nbsp;series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="bagels_and_coffee"&gt;Bagels and Coffee (intro to dot&amp;nbsp;products)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="dots_all_folks"&gt;Dots All Folks (dot product&amp;nbsp;uses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="dot_matrix"&gt;Dot Matrix (intro to&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="adventures-in-4th-dimension"&gt;Adventures in the 4th Dimension (translation&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="to-scale"&gt;To Scale! (scale&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="math"></category></entry><entry><title>All we are saying is give API 2.0 a chance</title><link href="https://theodox.github.io/2014/api_2_chance" rel="alternate"></link><published>2014-12-12T19:42:00-08:00</published><updated>2014-12-12T19:42:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-12-12:/2014/api_2_chance</id><summary type="html">&lt;p&gt;Maya&amp;#8217;s api version 2.0 is finally coming of&amp;nbsp;age&lt;/p&gt;</summary><content type="html">&lt;p&gt;Doing all this math-related posting has reminded me of something I&amp;#8217;ve been meaning to write&amp;nbsp;up:  &lt;/p&gt;
&lt;p&gt;Maya&amp;#8217;s &lt;a href="http://knowledge.autodesk.com/search-result/caas/CloudHelp/cloudhelp/2015/ENU/Maya-SDK/py-ref/index-html.html"&gt;python &lt;span class="caps"&gt;API&lt;/span&gt; 2.0,&lt;/a&gt; first introduced in the 2013 version, got off to a rocky start. People complained about &lt;a href="http://stackoverflow.com/questions/20232835/maya-python-api-2-0-has-no-mitdag-so-how-traverse-dag-graph"&gt;missing functions&lt;/a&gt; and &lt;a href="http://jeremyyk.com/tutorials/maya-s-python-api-2-0-"&gt;missing modules&lt;/a&gt;.  It uses (mostly) the same function and class names as the original OpenMaya Python, which is a recipe for confusion. The documentation is pretty confusing too, since it points at the original C++ docs and leaves it up to you to do much of the translation in your head.&amp;nbsp;However&amp;#8230;.  &lt;/p&gt;
&lt;p&gt;One thing that &lt;span class="caps"&gt;API&lt;/span&gt; 2 definitely does right is to eliminate the dreaded &lt;a href="python_api_crash"&gt;&lt;code&gt;MScriptUtil&lt;/code&gt;&lt;/a&gt;, with its ugly and confusing interface and all of the opportunities for failures that it includes.  I&amp;#8217;ve been busy porting over a bunch of geometry utilities to the new &lt;span class="caps"&gt;API&lt;/span&gt; and I&amp;#8217;m routinely finding that stuff like&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;APIVector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    return an iterable as an OpenMaya MVector&lt;/span&gt;

&lt;span class="sd"&gt;    if iterable is an openMaya MVector, returns untouched  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OpenMaya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MVector&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;o_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;  
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;argument to APIVector must have 3 entries&amp;quot;&lt;/span&gt;  
        &lt;span class="n"&gt;v_util&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OpenMaya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MScriptUtil&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;v_util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createFromDouble&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;o_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OpenMaya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MVector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;v_util&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asDoublePtr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;o_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;o_vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;o_vector&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Turns into to&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;APIVector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;


    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MVector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MVector&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
    &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;normal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In other words, one reasonable line for 4 icky&amp;nbsp;ones.  &lt;/p&gt;
&lt;p&gt;Plus, the new versions are generally more pythonic - the &lt;span class="caps"&gt;API&lt;/span&gt; 2 version of &lt;code&gt;MVector&lt;/code&gt;, for example supports both dot-access, bracket access, and iteration over the vector components (though, annoyingly, &lt;em&gt;not&lt;/em&gt;&amp;nbsp;slicing).  &lt;/p&gt;
&lt;p&gt;It&amp;#8217;s certainly not all perfect. You do have to be very careful about mixing &lt;span class="caps"&gt;API&lt;/span&gt; 1 and &lt;span class="caps"&gt;API&lt;/span&gt; 2 code in the same functions - even though they are both wrapping the same C++ underpinnings they are are mutually incompatible.  Some things are still cumbersome &amp;#8212; converting strings to MSelectionList items to MObjects to MFNs is still a waste of good brain cells &amp;#8212; but it&amp;#8217;s a step in the right direction. I&amp;#8217;ll post more as I know&amp;nbsp;more.  &lt;/p&gt;
&lt;p&gt;By the way, I spent several minutes surfing around for a funny image to wrap up on, I even did a meme-generator.com thing with The Most Interesting Man In The World saying something dismissive about MScriptUtil.  And then I thought&amp;#8230; &amp;#8220;What&amp;#8217;s the&amp;nbsp;point.&amp;#8221;  &lt;/p&gt;
&lt;p&gt;See? Progress &lt;em&gt;is&lt;/em&gt; possible.   Or maybe I&amp;#8217;m just getting old. In Internet Years I&amp;#8217;m already like&amp;nbsp;7,303.  &lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="programming"></category><category term="api"></category></entry><entry><title>Dot Matrix</title><link href="https://theodox.github.io/2014/dot_matrix" rel="alternate"></link><published>2014-12-06T12:22:00-08:00</published><updated>2014-12-06T12:22:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-12-06:/2014/dot_matrix</id><summary type="html">&lt;p&gt;Understanding the graphics matrix, with some help from dot&amp;nbsp;products.&lt;/p&gt;</summary><content type="html">&lt;p&gt;We started our math review with a look at the &lt;a href="http://techartsurvival.blogspot.com/2014/11/bagels-and-coffee-or-vector-dot-product.html"&gt;dot product&lt;/a&gt;, and started out by showing how dots work in a minimalist way. This time out we’ll do the same thing the most basic component of 3d math - the&amp;nbsp;matrix.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://images.macworld.com/images/news/graphics/150845-apple_imagewriter_original.jpg"&gt;&lt;img alt="" src="http://images.macworld.com/images/news/graphics/150845-apple_imagewriter_original.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There was a time when this was &amp;#8216;computer&amp;nbsp;graphics&amp;#8217;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once you start looking closely, you&amp;#8217;/ll find that  dot product and a matrix actually have a lot in common. As an older gentleman once told me when I proudly showed hin a 72 dpi dithered picture printed on my 1986 vintage Apple 2, &lt;em&gt;&amp;#8220;Wait a minute&amp;#8230; it&amp;#8217;s all just&amp;#8230;.&amp;nbsp;dots?&amp;#8221;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;In fact, matrix multiplication really is done just using dot products, as we’ll see shortly.  However, matrices are more complicated, both in concept and execution. For that reason we&amp;#8217;ll devote this post through how matrices work in the simplest possible way, so that it’s easy to see both the how and why of what they do. This post will be primarily about the most minimal example of how a matrix functions. I’ll do it in 2-d to keep the math a bit less wordy, though  the same thing works in 3 or even more dimensions. I’ll also be sticking to a simple rotate-only matrix to start with so the workings are simple - I’ll add in translations and scales next time out to keep the focus on the&amp;nbsp;basics.  &lt;/p&gt;
&lt;h2&gt;First things&amp;nbsp;first&lt;/h2&gt;
&lt;p&gt;So, starting with the bare minimum, let’s suppose we&amp;#8217;ve got a simple unit-length vector &lt;code&gt;[1,0]&lt;/code&gt; and we’d like to figure out how to rotate it. Rotating that unit vector 45 degrees should end up as &lt;code&gt;[.707, .707], as you can see below:&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://freespace.virgin.net/hugo.elias/routines/rotate01.gif"&gt;&lt;img alt="" src="http://freespace.virgin.net/hugo.elias/routines/rotate01.gif"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We&amp;#8217;re trying to figure out an operation that will give these values as we rotate from [1,0] to&amp;nbsp;[0,1]    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;(If the numbers seem surprising, you might want to hop back to the discussion of the unit circle  in our earlier &lt;a href="http://we%27re%20trying%20to%20figure%20out%20an%20operation%20that%20will%20give%20these%20values%20as%20we%20rotate%20from%20[1%2C0]%20to%20[0%2C1]/"&gt;discussion of dot products&lt;/a&gt;.)&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;The question is, what kind of operations do we need to do to perform that rotation? What tools do we have to make it work - and, even more importantly, to make it work for any vector and not just this one&amp;nbsp;example?  &lt;/p&gt;
&lt;p&gt;First, just to clear the decks, let&amp;#8217;s check off things that &lt;em&gt;wont’&lt;/em&gt;&amp;nbsp;work.  &lt;/p&gt;
&lt;p&gt;We can see that difference between the first vector and the second is &lt;code&gt;[-.293, .707]&lt;/code&gt; – but it’s pretty obvious that simple addition is not the same thing as performing a rotation. If you’re not convinced, just note that adding the same vector again will get you &lt;code&gt;[.121, 1.414]&lt;/code&gt; rather than the expected &lt;code&gt;[0,1]&lt;/code&gt;.   &lt;/p&gt;
&lt;p&gt;Plain old multiplication doesn&amp;#8217;t work  either - there is no number we can multiply against the original &lt;code&gt;[1,0]&lt;/code&gt; that will get a non-zero result in the Y&amp;nbsp;component.  &lt;/p&gt;
&lt;p&gt;So what can we do?  Fortunately, our old friend the &lt;a href="http://techartsurvival.blogspot.com/2014/11/dots-all-folks.html"&gt;dot product &lt;/a&gt;comes to the rescue. If you recall how we introduced dots, you should remember that one of the uses of the dot product is to project one vector on to&amp;nbsp;another.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://gregegan.customer.netspace.net.au/ORTHOGONAL/02/004.png"&gt;&lt;img alt="" src="http://gregegan.customer.netspace.net.au/ORTHOGONAL/02/004.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So suppose what would happen if we tried to project our first vector onto another vector that looked like a rotated coordinate system. In other words, we could hold our original vector constant and ‘rotate’ the X-axis counterclockwise by 45 degrees. It’s a theory-of-relativity kind of thing: rotating our vector N degrees clockwise and rotating the world N degrees counter-clockwise are the same&amp;nbsp;thing. &lt;/p&gt;
&lt;p&gt;By projecting our X-axis against the rotated vector, though, we get the X component we want from a 45 degree angle:&lt;br&gt;
&lt;a href="http://2.bp.blogspot.com/-qbl5CZAwTN8/VH9FE9epOoI/AAAAAAABLZA/ZXbLLOU2qTU/s1600/rotate%2Bcoordfs.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-qbl5CZAwTN8/VH9FE9epOoI/AAAAAAABLZA/ZXbLLOU2qTU/s1600/rotate%2Bcoordfs.png"&gt;&lt;/a&gt;   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Rotating a vector (left) is the same as counter-rotating the coordinate system&amp;nbsp;(right)  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We can use the &lt;a href="https://www.blogger.com/link"&gt;unit circle&lt;/a&gt; (or the chart of angle values above) to figure out what the right vector for the counter rotated X-axis is. In the rotated-X-axis world we will be dotting &lt;code&gt;[1,0]&lt;/code&gt; against the vector &lt;code&gt;[.707, -.707]&lt;/code&gt;.  Drawing on what know from &lt;a href="http://techartsurvival.blogspot.com/2014/11/bagels-and-coffee-or-vector-dot-product.html"&gt;last time&lt;/a&gt;, we know&amp;nbsp;that   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dot ([1,0], [.707, -.707])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;equals  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(1 * .707) + (0 * -.707) = .707
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That operation gives us a good X-component - it represents how much of the original X is left when projected onto an X axis that has been rotated. If we do it again - remember, we’re trying to get a repeatable operation - we&amp;nbsp;get  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dot ([.707, .707], [.707, -.707])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;equals  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(.707 * .707) + (.707 * -.707) = 0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is what we want for the X component after two rotations. This dot product thing seems to be paying off (&lt;strong&gt;and I should know – I’ve been milking it for posts for a while&lt;/strong&gt;).  &lt;/p&gt;
&lt;p&gt;Of course, this only gives us half of the rotated vector! However, analogy suggests that we can get the Y component of the vector by projecting onto a rotated Y axis, just as we did for the X. The Y axis, rotated clockwise 45 degrees, is &lt;code&gt;[.707, .707]&lt;/code&gt;. Dotting against our original vector gives&amp;nbsp;us  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dot ([1,0], [.707, .707])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in other&amp;nbsp;words  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(1 * .707) + (0 * .707) = .707
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is the Y component we want after one application. The same operation on the rotated vector gives&amp;nbsp;us  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dot ([.707, .707], [.707, .707])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;namely  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(.707 * .707) + (.707 * .707) = 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, this gives us the Y value we expect for a 90 degree&amp;nbsp;rotation.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://basementrejects.com/wp-content/uploads/2011/11/the-matrix-billboard.jpg"&gt;&lt;img alt="" src="http://basementrejects.com/wp-content/uploads/2011/11/the-matrix-billboard.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An example matrix showing a 90 degree&amp;nbsp;rotation  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Dots to&amp;nbsp;Matrix&lt;/h2&gt;
&lt;p&gt;So, that shows &lt;strong&gt;we can rotate a vector by using two dot products&lt;/strong&gt;: dot the X component of the vector against a counter-rotated X axis and the Y component of the vector against a counter-rotated Y axis, and you get the rotated result. &lt;em&gt;(Remember, the axes are rotated against the rotation you’re actually applying, because you want the projection of the rotated vector and you’re moving the universe instead of the data,&amp;nbsp;Einstein-style).&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;Now that we know how it works, it would be nice to have a simple way of saying “just do that two-dot thing” - in other words, we&amp;#8217;d like to define an operation that will apply the two dot products at the same time, giving us the rotation we&amp;#8217;re after. And that’s all that the matrix - the mysterious whatchamacallit at the heart of 3-D math – really boils down to this:  it’s simply a convention for saying &lt;strong&gt;“make a new vector out of these dot&amp;nbsp;products”.&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.papercraftsquare.com/wp-content/uploads/2014/09/Spaceballs-Dot-Matrix-Cube-Craft-Paper-Toy.jpg"&gt;&lt;img alt="" src="http://www.papercraftsquare.com/wp-content/uploads/2014/09/Spaceballs-Dot-Matrix-Cube-Craft-Paper-Toy.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I kind of hate the internet&amp;#8230; but  I must admit, the mere existence of a &lt;em&gt;pepakura&lt;/em&gt; Minecraft character for Dot Matrix from &lt;a href="http://www.imdb.com/title/tt0094012/"&gt;Spaceballs &lt;/a&gt;warms my&amp;nbsp;heart.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So here&amp;#8217;s the notation that is commonly used for saying &amp;#8220;make a new vector out of dot products.&amp;#8221; We can re-write the whole mess above very simply&amp;nbsp;as  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[1,0] * [  .707,  .707]  
        [ -.707,  .707]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where the first column of the matrix is the X-axis of our counter-rotated coordinate system and the second column is the Y-axis of the same. It&amp;#8217;s just a convention for&amp;nbsp;saying:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;x = [1,0] dot [ .707, -.707]  
y = [1,0] dot [ .707,  .707]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is exactly the same thing we took a couple of paragraphs above to explain in&amp;nbsp;words.  &lt;/p&gt;
&lt;p&gt;So in the end it’s amazingly – almost embarrassingly – simple: you &lt;em&gt;&lt;strong&gt;dot your vector against each of the columns in the matrix in turn&lt;/strong&gt;&lt;/em&gt; and voila! you’ve got a new vector which applies the matrix transform. The big, scary matrix monster turns out not to be so scary - once you pull off this mask it turns out to be nothing but Old Man Dot Product in&amp;nbsp;disguise!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://static.tvtropes.org/pmwiki/pub/images/rsz_1meddlingkids_1686.jpg"&gt;&lt;img alt="" src="http://static.tvtropes.org/pmwiki/pub/images/rsz_1meddlingkids_1686.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It would have worked, too, if it wasn&amp;#8217;t for you meddling&amp;nbsp;kids!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this example we’re only covering rotations : scales and translations we’ll touch on in a later outing &amp;#8212; however they work the same way. Translation and scale are encoded into matrices a bit differently - but the mechanics are identical: &lt;strong&gt;Just dot the vector against each column in the matrix and you have your&amp;nbsp;transformation.&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;The big takeaway from this exercise is that the basic math is the same and it requires no skills you didn’t learn by seventh grade (or at least the first post in this series).  Matrices just aren&amp;#8217;t that hard once you know what they are actually&amp;nbsp;doing.  &lt;/p&gt;
&lt;p&gt;As I&amp;#8217;ve said several times, all of this power is really based on simple math (addition and multiplication) disciplined by conventions such as normalized vectors in dot products or the row-column arrangement I’ve shown here. A convention, however, is to some degree arbitrary. In matrices, for example, you could get the same results by representing what I’ve written as rows to be columns and vice versa, and then dotting your vectors against the rows rather than the columns. The arrangement I’ve use here is known as ‘&lt;em&gt;row major&lt;/em&gt;’, and the alternate arrangement is ‘&lt;em&gt;column major&lt;/em&gt;’. You can usually recognize row-major systems because row-major operations tend to be written as &amp;#8220;vector times matrix&amp;#8221; where column major operations are usually written &amp;#8220;matrix times vector.&amp;#8221;  The actual math is the same, apart from the convention used to write it&amp;nbsp;down.&lt;/p&gt;
&lt;p&gt;The choice between row-major and column-major matrices is  typically made for you by the the environment you’re working in, so you will rarely have to worry about it. Still, we will revisit this in future discussion of matrices.  I&amp;#8217;ll be using row-major throughout to keep things consistent, and also because that is how Maya - my usual go-to app - is&amp;nbsp;organized.&lt;/p&gt;
&lt;h2&gt;Matrix&amp;nbsp;Fun&lt;/h2&gt;
&lt;p&gt;Working through this stuff one piece at a time should give even the most hardened and results oriented &lt;span class="caps"&gt;TA&lt;/span&gt; an dim appreciation for what the mathematicians mean by ‘elegance’. Here’s what’s so beautiful about this setup: Written out the way we&amp;#8217;ve done it, the rows of the matrix correspond to the coordinate system you’d get by applying the matrix. Thus, after a 45 degree rotation your X-axis is now pointing at &lt;code&gt;[.707, .707]&lt;/code&gt; and your Y is now pointing at &lt;code&gt;[-.707, .707].&lt;/code&gt;So far we&amp;#8217;ve stuck to 2-D examples, but the same is true in higher dimensions as well: the 4x4 matrices that we use everywhere in graphics, the local coordinate system is encoded the same way.&lt;br&gt;
This is almost perfect in it’s elegance. Consider this little piece of gibberish from&amp;nbsp;Maya:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cmds.xform(&amp;#39;persp&amp;#39;, q=True, m=True)  
[0.7071067811865475,  
 -2.7755575615628907e-17,  
 -0.7071067811865476,  
 0.0,  
 -0.3312945782245394,  
 0.8834522085987726,  
 -0.3312945782245393,  
 0.0,  
 0.6246950475544245,  
 0.46852128566581774,  
 0.6246950475544244,  
 0.0,  
 240.0,  
 180.0,  
 240.0,  
 1.0] #
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That doesn’t appear to mean much beyond ‘&lt;span class="caps"&gt;WTH&lt;/span&gt;?’. However, when rearranged into a matrix (and truncated to fewer digits for legibility),&amp;nbsp;it’s:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[ 0.707, 0.000,-0.707, 0.000]  
[-0.331, 0.883,-0.331, 0.000]  
[ 0.625, 0.468, 0.625, 0.000]  
[ 240.0, 180.0, 240.0, 1.000]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which means the the &lt;em&gt;persp&lt;/em&gt; camera in my Maya scene has an X axis pointing at &lt;code&gt;[0.707, 0.000,-0.707]&lt;/code&gt;, a Y axis pointing at &lt;code&gt;[-0.331, 0.883,-0.331]&lt;/code&gt; and a Z axis pointing at &lt;code&gt;[0.625, 0.468, 0.625]&lt;/code&gt; (we’ll talk about the meaning of those zeros in the 4th column and the last row next time out). While it’s still a bit tough to visualize, it’s actually meaningful - not just some magic computer-y stuff you have to take on&amp;nbsp;faith. &lt;/p&gt;
&lt;p&gt;As a side benefit, the matrix-rows-are-local-axes scheme allows you to extract the cardinal axes of a matrix without doing anything fancier than grabbing a row. In the camera example, we can tell the camera is ‘aiming’ along &lt;code&gt;[-0.625, -0.468, -0.625]&lt;/code&gt; (Maya cameras aim down their own negative Z axis, so I’ve just taken that third row and multiplied by -1). You could use use this to figure out if the camera &amp;#8220;sees&amp;#8221; something by dotting that vector against a vector from the camera&amp;#8217;s position to the target, as we discussed &lt;a href="dots_all_folks.html"&gt;last time&lt;/a&gt;. Extracting local axes this way is the key to many common applications, such as look-at constraints and camera&amp;nbsp;framing.  &lt;/p&gt;
&lt;p&gt;Of course,anybody who knows any 3d graphics at all, of course, knows matrices are used for a lot more than just rotations, and that we’ve just scratched the surface. I’ve walked through the derivation this way for two reasons: first, to show how the matrix is really nothing more than &lt;strong&gt;a convention for applying dot products in series.&lt;/strong&gt; Second, because I want to underline the importance of the fact that &lt;strong&gt;matrix rows are axes of a local coordinate system&lt;/strong&gt;&lt;sup&gt;*&lt;/sup&gt;. Next time out we’ll explain how matrices can also represent scale and translation, and how to put matrices together for even more matrix-y&amp;nbsp;goodness.   &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;* in a &lt;em&gt;row major&lt;/em&gt; matrix, anyway.  And subject to some interesting qualifications we&amp;#8217;ll talk about in a later&amp;nbsp;post&amp;#8230;.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;: The Rotation Matrix&amp;nbsp;Formula&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s one last topic to cover on rotation matrices: how to apply a generic rotation for any value and not just our 45 degree example. Keeping in mind what we&amp;#8217;ve learned &amp;#8212; that the rows (of our &lt;em&gt;row major&lt;/em&gt; matrix, anyway) are the axes of the rotated coordinate system &amp;#8212;  The 2-D example we&amp;#8217;ve used all along generalizes very easily.  The unit circle tells us that the X and Y axes of a rotated coordinate system will look like this (where X is the first row and Y is the&amp;nbsp;second)  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cos(theta)&lt;/td&gt;
&lt;td&gt;sin(theta)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sin(theta)&lt;/td&gt;
&lt;td&gt;cos(theta)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The cosine / sin in the first row takes the X and Y values from the unit circle, where the X axis is [1,0] and the Y axis is [0,1] You can check those values for a 0 rotation, and you&amp;#8217;ll see how that lines up with the default X and Y&amp;nbsp;axes:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Using the same formula for a  30 degree rotation would give&amp;nbsp;us  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.866&lt;/td&gt;
&lt;td&gt;.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-.5&lt;/td&gt;
&lt;td&gt;.866&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;since the cosine of 30 degrees is .866 and the sine is .5.  This also shows how that  negative sine works: the Y axis starts rotating backwards into negative-X as the coordinate system rotates&amp;nbsp;counter-clockwise).   &lt;/p&gt;
&lt;p&gt;Although we haven&amp;#8217;t covered 3-D rotations this time out, it&amp;#8217;s not hard to see how this 2-D &lt;span class="caps"&gt;XY&lt;/span&gt; rotation should be the same thing as a rotation around the Z axis in 3 dimensions. A row-major Z rotation matrix looks like&amp;nbsp;this:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cos(theta)&lt;/td&gt;
&lt;td&gt;sin(theta)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-sin(theta)&lt;/td&gt;
&lt;td&gt;cos(theta)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This makes perfect sense when you remember that the rows of the matrix correspond to the axes of the rotated coordinate system in the matrix: in this example the X and Y axes are being rotated on the &lt;span class="caps"&gt;XY&lt;/span&gt; plane, but the Z axis still points straight at &lt;code&gt;[0,0,1]&lt;/code&gt; and neither X nor Y is rotating into the Z at all (hence the zeros tacked on to the first two rows).&lt;br&gt;
Knowing that, it makes sense that an X rotation matrix &amp;#8212; with the X axis held constant and Y and Z rotating on the &lt;span class="caps"&gt;YZ&lt;/span&gt; plane &amp;#8212; looks like&amp;nbsp;this:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;cos(theta)&lt;/td&gt;
&lt;td&gt;sin(theta)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-sin(theta)&lt;/td&gt;
&lt;td&gt;cos(theta)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The Y rotation matrix is a bit trickier. We know that the Y axis will be &lt;code&gt;[0,1,0]&lt;/code&gt;, but the sin-cos rotations have to be split among the X and Z axes like this so that the rotation is limited to the &lt;span class="caps"&gt;XZ&lt;/span&gt;&amp;nbsp;plane:  &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;cos(theta)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;-sin(theta)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sin(theta)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;cos(theta)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;These 3X3 matrices will do 3-D rotations, but you&amp;#8217;ll rarely see them alone. In most practical uses these matrices will be embedded into a 4X4 transformation matrix (for reasons we&amp;#8217;ll be talking about in a future post) but they will work the same way (for example, you can see them quite clearly in the &lt;a href="http://download.autodesk.com/us/maya/2011help/CommandsPython/xform.html"&gt;list of matrixes that accompanies the Maya xform command&lt;/a&gt;.  Next time out we&amp;#8217;ll talk about why these 3X3 matrixes turn into 4X4&amp;#8217;s and how that difference is key to including translations as well as&amp;nbsp;rotations. &lt;/p&gt;
&lt;p&gt;Until then - keep dotting! And &lt;em&gt;&lt;a href="http://www.avclub.com/article/and-now-theres-spaceballs-edition-episode-vii-trai-212450"&gt;May the Schwartz Be With You!&lt;/a&gt; (Dot Matrix sighting at&amp;nbsp;0:30)&lt;/em&gt;  &lt;/p&gt;
&lt;h2&gt;Posts in this&amp;nbsp;series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="bagels_and_coffee.html"&gt;Bagels and Coffee (intro to dot&amp;nbsp;products)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="dots_all_folks.html"&gt;Dots All Folks (dot product&amp;nbsp;uses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="dot_matrix.html"&gt;Dot Matrix (intro to&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="adventures-in-4th-dimension.html"&gt;Adventures in the 4th Dimension (translation&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="to-scale.html"&gt;To Scale! (scale&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="math"></category><category term="matrix"></category></entry><entry><title>Dot’s all, folks</title><link href="https://theodox.github.io/2014/dots_all_folks" rel="alternate"></link><published>2014-11-29T00:12:00-08:00</published><updated>2014-11-29T00:12:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-11-29:/2014/dots_all_folks</id><summary type="html">&lt;p&gt;Some ways to use the vector dot product in &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;nbsp;programming&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last time out I went on (probably a bit too long) on the virtues of the dot product - the operation which takes two lists of numbers and multiplies them to create a single product. The highlight of the whole thing was the &lt;em&gt;cosine dot product&lt;/em&gt; - the handy fact that the dot product of two normalized vectors is the cosine of the angle between&amp;nbsp;them.  &lt;/p&gt;
&lt;p&gt;Now that the theory is out of the way, it’s time to highlight some of the zillions of applications for this handy little&amp;nbsp;operation.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If none of this sounds familiar you might want to &lt;a href="bagels_and_coffee.html"&gt;revisit the first post in the series&lt;/a&gt; before&amp;nbsp;continuing.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The dot product is incredibly useful for a &lt;span class="caps"&gt;TA&lt;/span&gt; for two reasons. First, dots allow you to &lt;em&gt;convert between geometric measures and angles&lt;/em&gt; without the need for matrices or complex formulae. Second, dots provide an efficient way to &lt;em&gt;project one vector on to another&lt;/em&gt;, allowing you to measure distances and quantities relative to an arbitrary axis or vector - a great tool for anything from color conversions in a pixel shader to measuring motion in a complex rig.&lt;br&gt;
Before getting down to cases, a quick reminder of one important side fact we pointed out last time. A cosine dot product can only tell you &lt;em&gt;how different&lt;/em&gt; the angle between two vectors is - &lt;strong&gt;not&lt;/strong&gt; what rotations would transform one vector into the other. If you try out this example you’ll see that the dot of &lt;code&gt;[1,0,0]&lt;/code&gt; against both &lt;code&gt;[.5, .866, 0]&lt;/code&gt; and &lt;code&gt;[.5, -.866, 0]&lt;/code&gt; is .5, which (if you remember your sines and cosines) means the relative angle is 30 degrees. However one of those two vectors is clockwise from &lt;code&gt;[1,0,0]&lt;/code&gt; and the other is counter-clockwise from it. The dot, by itself, can’t tell you which one is which. &lt;em&gt;Don’t forget that&amp;nbsp;bit!&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As I mentioned in the last article, the math for dots is trivially simple. Maxscript &lt;a href="http://www.scriptspot.com/bobo/mel2mxs/arithmetic.htm"&gt;includes vector math functions&lt;/a&gt; by default, as does &lt;span class="caps"&gt;MEL&lt;/span&gt;, but vanilla maya.cmds does not. If you want to experiment with examples mentioned here in Maya python, you can import &lt;code&gt;pymel.core.datataypes&lt;/code&gt; and use the &lt;code&gt;Vector&lt;/code&gt;. I’ve also put a &lt;a href="https://github.com/theodox/vector"&gt;simple vector module up on Github&lt;/a&gt; that works in &lt;code&gt;Maya.cmds&lt;/code&gt;. I’ll be using that for these examples but translating between &lt;span class="caps"&gt;MXS&lt;/span&gt;, Pymel, and cmds should be a&amp;nbsp;no-brainer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Rigging&lt;/h2&gt;
&lt;p&gt;One of the most common tasks in rigging is wrangling information into the correct frame of reference.This is particularly tough when dealing with angular data, since angles are often presented in the form of Euler angles whose numeric values can vary unpredictably and which are therefore hard to use in expressions or code. Here are a few examples of how dot’s can help riggers get angular information while avoiding the Euler&amp;nbsp;blues  &lt;/p&gt;
&lt;h4&gt;The&amp;nbsp;Bends&lt;/h4&gt;
&lt;p&gt;Dot’s are an excellent way to measure the extension of a limb, without relying on an Euler value which might be affected by local axis orientations, joint orients, or rotated local axes. Here’s an example that gets a reliable value for the extension of an arm (note: this is vanilla maya, you could do it more succintly with Pymel but it’s a better illustration to do it from&amp;nbsp;scratch)  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;shoulder_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r_shoulder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;elbow_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r_elbow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;wrist_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r_wrist&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;bicep_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;elbow_pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shoulder_pos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;forearm_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;wrist_pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;elbow_pos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;elbow_bend&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bicep_vector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;forearm_vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then &lt;code&gt;arm_extension&lt;/code&gt; will be 1 at full extension and 0 when the arm is bent back completely on itself (&lt;em&gt;ouch!&lt;/em&gt;). You can map use this extension value to drive muscle deformations, blendshapes, or other behaviors without worrying about th underlying Euler values or converting from angles to linear&amp;nbsp;ranges.  &lt;/p&gt;
&lt;h4&gt;Leaning&amp;nbsp;In&lt;/h4&gt;
&lt;p&gt;It’s often useful to have a general idea what a character’s whole body is doing, rather than focusing entirely on individual joint positions and orientations. For example, you might want to have rig behaviors turn on when a character is ‘upright’ and off when it it is ‘prone’, or vice-versa. Figuring out the gross orientation is often hard because there are so many bones cooperating to produce the visual effect – and because different animators may use different controls in different ways: animator A may prefer to put all of the big rotations onto a center-of-gravity control while animator B does everything on the&amp;nbsp;pelvis.  &lt;/p&gt;
&lt;p&gt;Dots are great for extracting pose info from the world space position of key bones instead of trying to intuit them from rotation values. For&amp;nbsp;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;head_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;pelvis_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pelvis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# how upright is the character’s body?  &lt;/span&gt;
&lt;span class="n"&gt;body_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head_pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pelvis_pos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;upright&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body_vector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# for a y-up world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here upright will be close to 1 for an upstanding character, close to 0 for a prone character, and close to -1 for an upside down character (eg, during a handstand). This version tracks the pelvis-to-head vector so it will respond to things like a hunched-over spine; but one of the nice side effects of vector math it that you can easily ‘weight’ different elements as you put together your vectors. For&amp;nbsp;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;chest_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spine_3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;head_and_chest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;chest_pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head_pos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;  
&lt;span class="n"&gt;body_vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head_and_chest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pelvis_pos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;upright&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;body_vector&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;would include bias the uprightness vector towards ‘spine_3’, diminishing the influence of the head on the final&amp;nbsp;results.  &lt;/p&gt;
&lt;h4&gt;Looky&amp;nbsp;here&lt;/h4&gt;
&lt;p&gt;You don’t always have to use positions to drive dot-product calculations. You can always get the local orientation of a transform by looking at it’s matrix (the exact reason for this will be shown in a later posting, for now take it on faith). This allows you to see how closely a given object is oriented towards a given&amp;nbsp;vector.   &lt;/p&gt;
&lt;p&gt;For example, something like this will help you figure out if a character’s body is oriented in roughly the same direction as the character’s root&amp;nbsp;bone:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# assuming that the bones are constructed with positive z as &amp;#39;forward&amp;#39;  &lt;/span&gt;
&lt;span class="n"&gt;world_forward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.worldMatrix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="n"&gt;root_forward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;world_forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;pelvis_forward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;world_forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pelvis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;shoulders_forward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;world_forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;spine_3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;head_forward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;world_forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="c1"&gt;# get a weighted average of the pelvis, shoulder and head directions  &lt;/span&gt;
&lt;span class="n"&gt;composite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;pelvis_forward&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shoulders_forward&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;head_forward&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;5.0&lt;/span&gt;  
&lt;span class="c1"&gt;# flatten the composite and root vectors into 2 dimensions:  &lt;/span&gt;
&lt;span class="n"&gt;composite&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;composite&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;root_forward&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root_forward&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;composite&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root_forward&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A value of 1 would have the character facing precisely along the same direction as it’s root bone in 2D. This kind of thing is especially useful when you’re trying to manage a lot of animations which need to begin and end in similar poses - you can quickly check the overall posture of a lot of characters without too much detailed analysis to spot problems before going in and looking at the troublesome ones for hand&amp;nbsp;fixing.  &lt;/p&gt;
&lt;h2&gt;shaders&lt;/h2&gt;
&lt;p&gt;Even more than rigging, shader authoring frequently involves a return to the math fundamentals. The most familiar example of the dot product in shader writing is the &lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404"&gt;Lambert rendering equation&lt;/a&gt; which we discussed in the last post. However, you can get a variety of other handy effects from the dot inb shaders. The key is to find the right set of vectors to work with. &lt;br&gt;
For example, if you dot a surface normal against the vector along which the camera is looking, the result will tell you how directly surface is facing the camera. This allows you to create a &lt;a href="http://kylehalladay.com/blog/tutorial/2014/02/18/Fresnel-Shaders-From-The-Ground-Up.html"&gt;fresnel&lt;/a&gt; or edge-highlighting&amp;nbsp;effect.   &lt;/p&gt;
&lt;p&gt;Here’s a snippet of a very minimal Unity shader that illustrates the&amp;nbsp;principle:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;surf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Input&lt;/span&gt; &lt;span class="n"&gt;IN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inout&lt;/span&gt; &lt;span class="n"&gt;SurfaceOutput&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  
        &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;hacky&lt;/span&gt; &lt;span class="n"&gt;way&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;camera&lt;/span&gt; &lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;  
        &lt;span class="n"&gt;float3&lt;/span&gt; &lt;span class="n"&gt;cam_vect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UNITY_MATRIX_IT_MV&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xyz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cam_vect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
        &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Albedo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;float3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;pow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FresnelPower&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
        &lt;span class="n"&gt;o&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The only thing worth noting here is the way the result value is being inverted: we want the result number to be close to 1 at the horizon and close to zero where the camera normal and the surface normal are aligned, which is the reverse of what the dot would normally give us. By raising the result value to a higher or lower power (using &lt;code&gt;pow&lt;/code&gt;) we can sharpen or soften the effect; since it the result value should always be 1 or lower a higher power will result in a smaller result value and thus a tighter highlight as you can see in the&amp;nbsp;images.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-CPrevKORkfE/VHl_alL2OkI/AAAAAAABLWg/N9jWYdWum-4/s1600/fresnel.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-CPrevKORkfE/VHl_alL2OkI/AAAAAAABLWg/N9jWYdWum-4/s1600/fresnel.jpg"&gt;&lt;/a&gt;    &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The dotting the camera vector against the surface normal produces an edge highlight fresnel-style&amp;nbsp;effect.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The size of the effect can be tweaked by raising the dot product value to a higher or lower&amp;nbsp;power.  &lt;/p&gt;
&lt;p&gt;You can re-map that dot product in other ways as well. The popular Team Fortress 2 shader, for example, takes the dot between the light and the surface normal - which, of course, will range in value from -1 to 1 - and re-maps it onto the range 0 to 1 so it can be used to lookup a color value from a texture. That’s how the game achieves it’s distinctive ‘wrap-around’&amp;nbsp;lighting:  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.maginot.eu/space/mgto/projects/mods/tf2_lightwarp/mgto_lightwarp_mod.jpg"&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Team Fortress shader uses a shifted dot-product to look up lighting values from a hand-authored color ramp, creatng a distinctive illustrational&amp;nbsp;look. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both of those uses use the ‘cosine falloff’ intepretation of the dot product, that is, they represent angular differences. However dots have another mathematical meaning: they represent the projection of one vector onto another. One really cool aspect the projective use of the dot is that the logic works in color spaces as well as physical space. For example, a shader writer of can get the luminance of a pixel elegantly like&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="n"&gt;luma&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;float3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.2126&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.7152&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.0722&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;pixel_color&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is essentially projecting the color onto a ‘luminance vector’ dominated by green (numbers derived from &lt;a href="https://en.wikipedia.org/wiki/Relative_luminance"&gt;this&lt;/a&gt;) You could use the same trick to identify ‘warm’ colors by dotting against a warm rgb value like (.707, .707, 0) - high dot values will be warm and low dot values will be cool. It takes some meditation to really grok what’s going on (try parsing what’s happening in &lt;a href="http://makc3d.wordpress.com/2011/04/06/matching-colors-in-rgb/"&gt;this example&lt;/a&gt;!) but dots can be a very handy trick for navigating color space as well as 3-d space.&lt;br&gt;
Shader writers have one more sneaky use for dots - they can be a cheap substitute for selection functions. Shader authors often have to pack data into vectors for efficiency, but accessing one component of a vector would need an expensive if-then branch in theshader. Dots, however, can let you pick one component out of your vector without using branches. Since the dot of any vector composed of all zeros is of course zero. If one component is a one and the rest are zeros, the result will be the corresponding component of the other vector.&amp;nbsp;Thus:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;float3&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;float3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="n"&gt;float3&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;float3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="n"&gt;float3&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;float3&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;866&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="c1"&gt;// dot(x,val) == val.x = .5;  &lt;/span&gt;
&lt;span class="c1"&gt;// dot(y,val) == val.y = .866;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is more compiler friendly than inserting a branch into the shader code to conditionally pick one component or another. I’ve found it especially useful in Unity, where ShaderLab limits your ability to pass custom data types to shaders and it’s often necessary to pack data into vectors or matrices just to get it from the game to the&amp;nbsp;shader.  &lt;/p&gt;
&lt;h2&gt;tools&lt;/h2&gt;
&lt;p&gt;It’s easy to see who the kinds of tricks we’ve already laid out for shaders and rigging generalize for tool writing. The dot of a surface normal and a vector is a great proxy for whether or not the a surface is facing something, dots are great for analyzing geometry. For example, A tree-and-rock scattering script can dot the normal of a terrain against gravity to figure out which slopes are too steep for trees, or which areas are bottomland where there ought to be lots of bushes. A terrain editing tool could against a sun vector to identify exposed areas where the grass is yellowed and shady spots where it’s lush and&amp;nbsp;green.   &lt;/p&gt;
&lt;p&gt;As with rigging , the dot also provides a way to check relative orientations. For example, you might need to know if an object has been where another object can ‘see’ it. If you dot a reference vector - such the object’s local X or Z axs - against the vector to a target, you can figure out if the target is ‘ahead’ or ‘behind’ the reference object. For example this function would tell you if the target was within some angle of the forward axis of the&amp;nbsp;observer:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;target_visible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reference&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cone&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Is target within &amp;lt;coneangle&amp;gt; when viewed on references&amp;#39; local Z axis?&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;reference&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reference&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.worldMatrix&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;target_pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;reference&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reference&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ws&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;reference&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;reference&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normalized&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;cone&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;angle&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could restrict that to one or two axes using the same trick in the rigging example, or use the full cone angle as done&amp;nbsp;here.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As an aside, this brings up the issue of converting between dots and angles. Since the geometric dot product (as always, assuming you’ve got normalized vectors) is a cosine, you can convert it to an angle by using the arc-cosine function (&lt;code&gt;acos&lt;/code&gt; in Python and most other languages) like&amp;nbsp;so:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cosine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;angle_in_radians&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;acos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cosine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;angle_in_degrees&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;degrees&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;angle_in_radians&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The projective function of dots is also useful in tools. For example, you can use a dot to clamp a line to the position of the mouse, even if the line is constrained so that the mouse doesn’t physically rest on the&amp;nbsp;line:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;line_vector&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;(.&lt;/span&gt;&lt;span class="m"&gt;707&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="m"&gt;707&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="m"&gt;45&lt;/span&gt; &lt;span class="n"&gt;degree&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;  
&lt;span class="n"&gt;line_origin&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="n"&gt;drawing&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;pixel&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mouse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;down&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;  
    &lt;span class="n"&gt;line_end&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Vector2&lt;/span&gt;&lt;span class="p"&gt;(*&lt;/span&gt;&lt;span class="n"&gt;mouse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="n"&gt;line_origin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;draw_line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line_origin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_origin&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;line_end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Further&amp;nbsp;reading&lt;/h2&gt;
&lt;p&gt;If this one whetted your appetite and you need to know more, here’s a few links I found handy while reading&amp;nbsp;up:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.chrisevans3d.com/pub/_blog/maya-python-vector-math-primer/"&gt;Chris Evans’ vector math&amp;nbsp;tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A &lt;a href="http://mathinsight.org/dot_product"&gt;page on projective dot products&lt;/a&gt;, along with an applet that helps you visualize how the projection&amp;nbsp;works&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-2/"&gt;This post from Wolfire&lt;/a&gt;, developers of &lt;a href="http://www.wolfire.com/overgrowth"&gt;Overgrowth&lt;/a&gt; includes some nice examples of how dots are used in &lt;span class="caps"&gt;AI&lt;/span&gt; and game code (plus a peek at some other concepts I’ll be covering later in this&amp;nbsp;series)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Update&lt;/strong&gt;: &lt;a href="https://plus.google.com/105359351421932966635"&gt;+Paul Vosper&lt;/a&gt;  put me on to the excellent &lt;a href="http://scratchapixel.com/"&gt;Scratchapixel.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;ll be back on the math trail again as soon as I emerge from my &lt;a href="http://www.webmd.com/food-recipes/features/the-truth-about-tryptophan"&gt;mythical tryptophan&amp;nbsp;coma.&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Posts in this&amp;nbsp;series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="bagels_and_coffee.html"&gt;Bagels and Coffee (intro to dot&amp;nbsp;products)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="dots_all_folks.html"&gt;Dots All Folks (dot product&amp;nbsp;uses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="dot_matrix.html"&gt;Dot Matrix (intro to&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="adventures-in-4th-dimension.html"&gt;Adventures in the 4th Dimension (translation&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="to-scale.html"&gt;To Scale! (scale&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="math"></category><category term="techart"></category></entry><entry><title>Bagels and Coffee, or, the vector dot product and you</title><link href="https://theodox.github.io/2014/bagels_and_coffee" rel="alternate"></link><published>2014-11-22T11:46:00-08:00</published><updated>2014-11-22T11:46:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-11-22:/2014/bagels_and_coffee</id><summary type="html">&lt;p&gt;An introduction to the vector dot product, and how it&amp;#8217;s used in computer&amp;nbsp;graphics.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ve been boning up on my math&amp;nbsp;lately.   &lt;/p&gt;
&lt;p&gt;Like most &lt;span class="caps"&gt;TA&lt;/span&gt;’s I’ve cobbled together a bag of tricks from different situations I’ve dealt with over the years, but I’ve never really gone back to shore up my shaky high school trigonometry and pre-calculus. It’s certainly possible (at least, I hope it is!) to be a good &lt;span class="caps"&gt;TA&lt;/span&gt; with only seat-of-the-pants math skills — after all, we have parenting and scaling and all the other cool tricks in our apps to do the heavy lifting for us. Still, I’ve been finding that paying more attention to the math fundamentals is helping me solve problems more efficiently and elegantly than my patented hack-and-slash techniques did.&lt;br&gt;
So, I’m starting an occasional series on some basic math concepts that I hope will be useful to other &lt;span class="caps"&gt;TA&lt;/span&gt;’s. I know it’s been helpful to me - there’s nothing that concentrates the mind like putting something out there on the internet for public commentary - it’s really forces you to think things through… &lt;em&gt;At least, as long as you’re not on Twitter&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;To kick off the series, I want to start off with a simple operation that I use all the time, the humble &lt;a href="http://en.wikipedia.org/wiki/Dot_product"&gt;dot product&lt;/a&gt;. Also known as the &amp;#8216;scalar&amp;#8217; product, the dot is an operation for turning lists of numbers into a single number. It’s also astonishingly useful for graphics. I’ve used it for years, but only recently did I try to see how and &lt;em&gt;why&lt;/em&gt; it works instead of just relying on the second-hand assurance &lt;em&gt;that&lt;/em&gt; it&amp;nbsp;works.  &lt;/p&gt;
&lt;p&gt;The dot is all about combining operations on lists. We always run into it in the context of geometric vectors, but in the pure math world vector is just another way of saying “list of similar numbers.” If you go to the coffee shop every day and buy a $5 latte, its obviously going to cost $25 a week (Tote that up over 48 work weeks a year - it&amp;#8217;s a lot of money! I bring instant. But I digress). If you buy a $2 bagel on monday and a $3 cookie on Wednesday and Friday, how much will it&amp;nbsp;cost?:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;5 * 5 = $25 for coffee  
2 * 1 = $2 for bagel  
3 * 2 = $6 for cookies
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes $33 total a week (you really should bring in your snacks from home. You&amp;#8217;ll save a&amp;nbsp;ton!)   &lt;/p&gt;
&lt;p&gt;Besides helping you save money on lunch, this is a classic (though non-3-d related) example of the dot product in action. Dots are nothing more than a structured way of multiplying two lists of numbers. In this case we have list of&amp;nbsp;prices:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[5, 2, 3]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and a list of&amp;nbsp;quantities:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[5, 1, 2]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dot operation merely multiplies the numbers in the same position in the list and adds them together. As you can see, this is trivial&amp;nbsp;math:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(5 * 5) +  (2 * 1) + (3 * 2)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Despite it&amp;#8217;s humble origins, however, this trick &amp;#8212; multiplying ordered pairs of numbers and adding them up - is absolutely basic in 3-D graphics. The lists of prices and quantities become vectors (in fact, general purpose algebra calls any list a &amp;#8216;vector&amp;#8217;) and with a simple convention the dot product takes on a very interesting and useful set of properties for &lt;span class="caps"&gt;TA&lt;/span&gt;’s to exploit.&lt;br&gt;
The most famous example of the dot product in graphics is &lt;a href="http://en.wikipedia.org/wiki/Lambertian_reflectance"&gt;the original Lambert shading equation&lt;/a&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;N dot L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where N is a surface normal and L is the angle of the incident&amp;nbsp;light.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://upload.wikimedia.org/wikipedia/commons/thumb/0/03/VisualPhotometry_Fig2_from_Lambert'sPhotometria.jpg/2880px-VisualPhotometry_Fig2_from_Lambert'sPhotometria.jpg"&gt;&lt;img alt="" src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/03/VisualPhotometry_Fig2_from_Lambert'sPhotometria.jpg/2880px-VisualPhotometry_Fig2_from_Lambert'sPhotometria.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &amp;#8216;Lambert shader&amp;#8217; is based on this math textbook from 1760. How cool is&amp;nbsp;that?  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Lambertian shading is probably the single most common operation in computer graphics, but it’s the same math as figuring out your coffee budget. Here’s how the magical translation from bagels and coffee to shaded pixels works:&lt;br&gt;
Imagine a sphere being lit by a directional light from straight above, in classic &lt;span class="caps"&gt;CG&lt;/span&gt; fashion. The vector to the light would&amp;nbsp;be   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0, 0, 1]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;On top of the sphere, the normal vector would point the same way - it too would point up&amp;nbsp;towards  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[0, 0, 1]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dot of these two&amp;nbsp;is:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(0 * 0) + (0 * 0) + (1 * 1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in other words, 1. This makes sense: our light is directly overhead, so the sample point on top of the sphere receives the full incoming light. Compare this to a point halfway down the sphere. A a normal point 45 degrees from the vertical might&amp;nbsp;be   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[.707, 0, .707]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And the dot would&amp;nbsp;be  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(0 *.707) + (0 * 0) + (1 * .707)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or .707. That means this sample point is getting about 70% of the incoming light. At the horizon of the sphere the dot will be &lt;code&gt;[0,0,1] dot [1, 0, 0]&lt;/code&gt;. This dots out&amp;nbsp;to   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(1 * 0) + (0 * 0) + (0 * 1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or 0. This makes sense - at the horizon of the sphere the light is parallel to the surface and imparts no light.&lt;br&gt;
Or, in pretty picture&amp;nbsp;form:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.upvector.com/pages/Tutorials/Intro%20to%20Shaders/images/lambert1.gif"&gt;&lt;img alt="" src="http://www.upvector.com/pages/Tutorials/Intro%20to%20Shaders/images/lambert1.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Wherefore art thou&amp;nbsp;cos(theta)?&lt;/h2&gt;
&lt;p&gt;So, it appears of this fancy-pants rendering is coming from the same bagels-and-coffee trick. How come? Lambert’s law isn’t some simple interpolation - it’s based on cosines, which give it the characteristic soft falloff around the horizon. How does this work?&lt;br&gt;
The sharp-eyed reader might notice that all of the vectors in this example are &lt;em&gt;normalized&lt;/em&gt;, that is to say the length of all of the vectors in this example are 1. That’s is the special convention that turns a plain-vanilla dot product into a geometric proposition. As long as the vectors are normalized &amp;#8212; but &lt;strong&gt;only&lt;/strong&gt; if they are normalized &amp;#8212; the dot product of the light vector and the normal vector is the cosine of the angle between the two vectors. That’s what makes the nice soft falloff on a Lambert-lit object, but it has lots of other properties as well.&lt;br&gt;
To understand how this bagels-and-coffee math turns into trigonometry, remember that ‘normalizing’ a vector just means setting its length to one. Visualize what happens if you sweep a 1-unit long line segment around in a circle, starting from the horizontal. As the segment rotates, you can draw a right triangle from it’s end point up or down to the horizontal axis, as in the example&amp;nbsp;below:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mathsisfun.com/geometry/images/circle-unit-sct.gif"&gt;&lt;img alt="" src="http://www.mathsisfun.com/geometry/images/circle-unit-sct.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you recall your high-school trigonometry you’ll remember that the cosine of an angle in a right triangle is the ratio between the side of a right triangle next to the angle and the hypotenuse of the same triangle &lt;em&gt;(the “&lt;span class="caps"&gt;CAH&lt;/span&gt;” in “&lt;a href="http://www.mathwords.com/s/sohcahtoa.htm"&gt;&lt;span class="caps"&gt;SOHCAHTOA&lt;/span&gt;&lt;/a&gt;,” if you learned it the way I did)&lt;/em&gt;. In this case, our hypotenuse is always 1 (it’s a unit line). so  the cosine is just the width of our right triangle. All of this works as described &lt;em&gt;only&lt;/em&gt; if the vectors are normalized,however - when your dots give you wonky results, non-normalized vectors are always the first thing to look for.&lt;br&gt;
&lt;em&gt;&lt;a href="https://www.youtube.com/watch?v=ZffZvSH285c"&gt;This video from Khan Academy&lt;/a&gt; gives you a more in-depth derivation if this description isn’t clear.&lt;/em&gt;&lt;br&gt;
Once you grasp the unit-circle-cosine setup, it’s easy to see how dotting unit vectors creates cosine values rather than lunch budgets. See what happens when you dot a random vector against &lt;code&gt;[1,0,0]&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;example = [.866, .5, 0]  
reference = [1, 0, 0]  
example dot reference = (.866 * 1) + (.5 * 0) + (0 * 0) = .866
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the X component of the example vector has been preserved, but the other two are zeroed out. (This illustrates the meaning of the dot project - it’s the &lt;em&gt;projection&lt;/em&gt; of one vector on to another. We’ll touch on that more in the next&amp;nbsp;post).   &lt;/p&gt;
&lt;p&gt;In this case, projecting that 60 degree line segment onto the vector &lt;code&gt;[1,0,0]&lt;/code&gt;creates a line segment from &lt;code&gt;[0,0,0]&lt;/code&gt;to &lt;code&gt;[.866,0,0]&lt;/code&gt; and the same kind of right triangle we described above. The ratio of the hypotenuse vector to this new ‘adjacent’ vector is .866 / 1, that is, plain old .866 — which we we know from the unit circle is the cosine of 60 degrees and the answer we were looking&amp;nbsp;for.   &lt;/p&gt;
&lt;p&gt;This is how the dot of two normalized (!) vectors is alway the cosine of the angle between&amp;nbsp;them.  &lt;/p&gt;
&lt;h2&gt;Dot&amp;#8217;s all,&amp;nbsp;folks&lt;/h2&gt;
&lt;p&gt;So that&amp;#8217;s the basic theory of the dot product. Of course what the ruthlessly practical &lt;span class="caps"&gt;TA&lt;/span&gt; will want to know about is uses, not theory. Some of the applications will be obvious but there is a &lt;a href="https://www.youtube.com/watch?v=-mTUmczVdik"&gt;plethora&lt;/a&gt; of less obvious ways the dot product can make your life eaiser. I’ll hit those in my next post.  In the meantime, bring instant coffee instead of paying for that venti tripple mocchachino every day. That stuff’ll totally blow your&amp;nbsp;budget.  &lt;/p&gt;
&lt;h2&gt;Posts in this&amp;nbsp;series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="bagels_and_coffee.html"&gt;Bagels and Coffee (intro to dot&amp;nbsp;products)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="dots_all_folks.html"&gt;Dots All Folks (dot product&amp;nbsp;uses)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="dot_matrix.html"&gt;Dot Matrix (intro to&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="adventures-in-4th-dimension.html"&gt;Adventures in the 4th Dimension (translation&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="to-scale.html"&gt;To Scale! (scale&amp;nbsp;matrices)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="math"></category></entry><entry><title>Big (?) Python bucks!</title><link href="https://theodox.github.io/2014/big_python_bucks" rel="alternate"></link><published>2014-11-16T21:43:00-08:00</published><updated>2014-11-16T21:43:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-11-16:/2014/big_python_bucks</id><summary type="html">&lt;p&gt;So wait, knowing Maya and Python is worth &lt;em&gt;less&lt;/em&gt; than knowing just Python?! I knew&amp;nbsp;it.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve frequently commented in the past on the &lt;a href="http://www.gamasutra.com/view/news/221533/Game_Developer_Salary_Survey_2014_The_results_are_in.php"&gt;Game Developers Salary Survey&lt;/a&gt;.  For you Pythonistas out there, there&amp;#8217;s some nice data (amateur grade, but still pretty good) to be found at the &lt;a href="http://nbviewer.ipython.org/github/agilevic/pystreet/blob/master/notebooks/PyStreet%20Python%20Developer%20Salary%20Survey%20Results.ipynb"&gt;Python Developer Salary Survey&lt;/a&gt;.  No mention of what you get for knowing Max / Maya, however, but by crunching the numbers I&amp;#8217;d guess it &lt;em&gt;subtracts&lt;/em&gt; about $30k per&amp;nbsp;year.   &lt;/p&gt;
&lt;p&gt;Or maybe that&amp;#8217;s just because we&amp;#8217;re all lousy&amp;nbsp;programmers.  &lt;/p&gt;</content><category term="industry"></category><category term="programming"></category><category term="python"></category></entry><entry><title>Dot Net is Open?</title><link href="https://theodox.github.io/2014/dot_net_is_open" rel="alternate"></link><published>2014-11-13T00:38:00-08:00</published><updated>2014-11-13T00:38:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-11-13:/2014/dot_net_is_open</id><summary type="html">&lt;p&gt;Interesting news from the dotnet&amp;nbsp;world,&lt;/p&gt;</summary><content type="html">&lt;p&gt;Courtesy of &lt;a href="https://plus.google.com/116275833090172173559"&gt;+Robert Butterworth&lt;/a&gt;  comes the news that &lt;a href="http://blogs.msdn.com/b/dotnet/archive/2014/11/12/net-core-is-open-source.aspx"&gt;.Net is now open source&lt;/a&gt;.  Future development will be done out of GitHub (!).  Is the timing - on the anniversary of the fall of the Berlin Wall - just a&amp;nbsp;coincidence?  &lt;/p&gt;
&lt;p&gt;In the short term this probably only means that some projects which have avoided .Net for being closed-source may consider using C# or other .Net languages. Over the medium term it probably presages a 3-6% decline in the use of the dollar sign in derisive online references to Micro$oft.  What&amp;#8217;s most interesting, though, is what it might mean for Unity, which is hard to predict but tantalizing to speculate&amp;nbsp;on.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://logomentor.com/logos/dot-net-logo.gif"&gt;&lt;img alt="" src="http://logomentor.com/logos/dot-net-logo.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Mono is an impressive effort but it&amp;#8217;s always been rough around the edges (particularly in the supporting toolsets - nothing makes you appreciate Visual Studio like a few hours with MonoDevelop!  Since &lt;span class="caps"&gt;MS&lt;/span&gt; picked up SyntaxTree and made &lt;a href="http://unityvs.com/"&gt;UnityVS&lt;/a&gt; available to all, the editor situation has been a lot better. But the guesswork around different DotNet subsets (and some general wonkiness in the deep-down internals of building big Unity projects) is a blemish on Unity&amp;#8217;s otherwise nicely polished cross-platform&amp;nbsp;credentials.   &lt;/p&gt;
&lt;p&gt;A lot of the reason for that is that Mono was developed in a &amp;#8216;clean room&amp;#8217; - for legal reasons neither the Mono team nor the &lt;span class="caps"&gt;MS&lt;/span&gt; .Net team were allowed to actually look at each other&amp;#8217;s code. It&amp;#8217;s quite impressive that the result works as well as it does. but throwing open the curtains has got to have some benefits as we move forward.  It&amp;#8217;s particularly cool that the .Net tean are actually working with de Izcaza and Xamarin on creating future cross-platform&amp;nbsp;implementations,  &lt;/p&gt;
&lt;p&gt;It&amp;#8217;s even possible that this will benefit Maya, by making it possible to do a full-stack .Net port for Maya&amp;#8217;s running on Linux and &lt;span class="caps"&gt;OSX&lt;/span&gt;.  And maybe, just maybe, this might make things better for the &lt;a href="https://code.google.com/p/trypython/"&gt;Silverlight IronPython web tech&lt;/a&gt;, which would be pretty cool, given the lame state of &lt;a href="http://techartsurvival.blogspot.com/2013/12/python-in-browsers.html"&gt;Python in the browser&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Of course, it&amp;#8217;s hard to see how any of these things will really play out. It&amp;#8217;s not like no big company has ever &amp;#8220;Open-Sourced&amp;#8221; something before as a &lt;span class="caps"&gt;PR&lt;/span&gt; friendly way of ending support for it. But it&amp;#8217;s always more fun to be an&amp;nbsp;optimist.  &lt;/p&gt;
&lt;p&gt;Interesting side note: even &lt;em&gt;they&lt;/em&gt; don&amp;#8217;t use &lt;span class="caps"&gt;TFS&lt;/span&gt; for version control. See, optimism is sometimes justified - every tyranny falls some&amp;nbsp;day.  &lt;/p&gt;</content><category term="industry"></category><category term="programming"></category></entry><entry><title>WYG &gt; WYS</title><link href="https://theodox.github.io/2014/wygwys" rel="alternate"></link><published>2014-11-01T11:00:00-07:00</published><updated>2014-11-01T11:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-11-01:/2014/wygwys</id><summary type="html">&lt;p&gt;The first step on the long road to a streamlined, markdown based blogging&amp;nbsp;platform&amp;#8230;&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Update 4/4/2015:  I&amp;#8217;ve got a much improved pipeline for markdown blogging using Sublime Text, as detailed &lt;a href="markdown-wrapup.html"&gt;here&lt;/a&gt;.  I&amp;#8217;m also having a lot of luck with &lt;a href="http://dynalon.github.io/mdwiki/#!index.md"&gt;MDWiki &lt;/a&gt;for static sites on &lt;a href="http://github.io/"&gt;github.io&lt;/a&gt;&lt;br&gt;
Update 5/1/2016:  If you&amp;#8217;re reading this, I&amp;#8217;ve finally transitioned over to all-markdown, all-the-time using &lt;a href="http://docs.getpelican.com/en/3.6.3/index.html"&gt;Pelican&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First off, a confession. I’ve become a plaintext nazi. 30 years since I first hit &lt;em&gt;Ctrl+I&lt;/em&gt; to italicise a piece of text, I’ve pretty much abandoned fancy-pants text edtors for the hardcore geek chic of plain text and &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;To be honest, this makes me uncomfortable, because plain-text-chauvinism is the techie equivalent of skinny jeans and ironical facial hair; it’s definitely a thing for the Cool Kids&lt;sup&gt;tm&lt;/sup&gt;, a demographic which is not really my native&amp;nbsp;habitat.  &lt;/p&gt;
&lt;p&gt;But I’m willing to be cool if that’s what it&amp;nbsp;takes.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt; is just a great tool for writing web or wiki content. If you spend a lot of time typing - particularly if you’re a &lt;span class="caps"&gt;TA&lt;/span&gt; who spends a lot of typing Python! – it becomes natural really quickly.&lt;br&gt;
The great thing about markdown is that it’s not dependent on the vagaries of a particular editor or application. There’s no need to worry about the layout of the menus or the mnemonics of the hotkeys - you just type. You just tap away without taking your hands off the keyboard to hit special key combinations for formatting (eg &lt;strong&gt;bold&lt;/strong&gt;, &lt;em&gt;italic&lt;/em&gt;), so you go a lot faster. &lt;br&gt;
In markdown, the emphasis is on the structure of what you’re writing instead of the presentation. You don’t format, you ‘mark up’ - that is you indicate what the job of a particular bit of text, is but you don’t describe it’s appearance. You can create headings, lists, block quotes, and even code snippets just using some simple conventions. Moreover the conventions are pretty readable in plain text. For example, you this little snippet of&amp;nbsp;text  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heading  
========  
This is some plain text

### subheading  
    * list item  
    * other list item
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Produces this formatted&amp;nbsp;output:  &lt;/p&gt;
&lt;h1&gt;heading&lt;/h1&gt;
&lt;p&gt;text goes&amp;nbsp;here  &lt;/p&gt;
&lt;h3&gt;subheading&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;list&amp;nbsp;item&lt;/li&gt;
&lt;li&gt;other list&amp;nbsp;item&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The actual look of the output is going to be controlled down stream something else. Most markdown is processed into &lt;span class="caps"&gt;HTML&lt;/span&gt; using &lt;span class="caps"&gt;CSS&lt;/span&gt; to control things like fonts, line-spacing, and&amp;nbsp;alignment.   &lt;/p&gt;
&lt;p&gt;I’ve found that markdown makes me a lot more productive than traditional &lt;span class="caps"&gt;WYSWIG&lt;/span&gt; editing. In part that’s because I can write markdown in a very stripped-down editor like &lt;a href="http://www.sublimetext.com/"&gt;Sublime Text&lt;/a&gt; on the &lt;span class="caps"&gt;PC&lt;/span&gt; or &lt;a href="http://www.ulyssesapp.com/"&gt;Ulysses&lt;/a&gt; on the Mac. These stripped-down editors are really qick and responsive, since they do so much next to nothing in the realm of document layout. Most important for me, they include far fewer distractions than Word or even Google Docs, so I can focus on the job at hand instead of fiddling around with styles and&amp;nbsp;formatting.   &lt;/p&gt;
&lt;p&gt;In cases where the layout actually matters I can take the finished text and export it via &lt;span class="caps"&gt;HTML&lt;/span&gt; or &lt;span class="caps"&gt;PDF&lt;/span&gt; to a traditional layout program, but nowadays that almost never happens: I literally cannot remember the last time I worried about the layout of words and images on a printed page (which is a pretty odd reflection for me, since I only got into computers because of &lt;a href="http://www.opticentre.net/FAQ/Desktop-publishing-%28DTP%29/History-of-Desktop-publishing/"&gt;desktop publishing&lt;/a&gt;, back when that was a thing.). Some flavors of markdown include the ability to inline html directly in the text for special purposes - for example, I got the superscript after Cool Kids tm by&amp;nbsp;typing  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Cool Kids &lt;span class="nt"&gt;&amp;lt;sup&amp;gt;&lt;/span&gt;tm&lt;span class="nt"&gt;&amp;lt;/sup&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;99 times out of 100, however, this level of specificity isn’t important until the real work of writing is done and I’m just polishing up - I’m much happier focusing on the actual content and tweaking the visuals at the very last minute. That’s what a lifetime of game devlopment does to a&amp;nbsp;person. &lt;/p&gt;
&lt;p&gt;Nowadays I do all my writing in plain text and markdown, with two exceptions. The wiki we use at work, &lt;a href="https://www.atlassian.com/software/confluence?_mid=2c4fae43fb6d045f4fbe6afdba94a6fe&amp;amp;gclid=Cj0KEQjwt7KiBRD9lOePpe_BhrgBEiQAHaS_19HAtXBp54afa2VUzVBDBXsvpGSZWav3m92wizJ8DZsaAtPB8P8HAQ"&gt;Confluence&lt;/a&gt;, doesn’t support markdown and to be perfectly frank it drives me nuts: The editor feels sluggish and the workflow constantly distracts me from what I’m supposed to be actually writing. And, unfotunately, Blogger doesn’t support md either. Blogger is at least not quite as sluggish as Confluence, but it definitely feels like wearing a deep-sea diver suit compared to blazing away in a plain text editor with&amp;nbsp;markdown.  &lt;/p&gt;
&lt;p&gt;Luckily I’ve found an option that at least looks pretty good. This post was written entirely in &lt;a href="https://stackedit.io/"&gt;StackEdit&lt;/a&gt;, a free online markdown editor which also allows publishing directly to Blogger. I followed &lt;a href="http://www.g14n.info/2013/12/how-to-use-markdown-to-edit-blogger.html"&gt;these instructions&lt;/a&gt; by Gianluca Casati which seem to work pretty&amp;nbsp;well.   &lt;/p&gt;
&lt;p&gt;On the upside, this feels a lot more productive and focused than the usual Blogger writing process. In particular, it’s way easier to include short bits of code in markdown. Including code snippets into blogger, on the other hand, is a huge pain in the patootie; In the past I’ve used &lt;a href="https://help.github.com/articles/about-gists/"&gt;Gists&lt;/a&gt;, which are not to hard to embed and produce nicely highlighted code in lots of languages. For long format code it’s still a great tool. However it’s not ideal for small snippets of a few lines - there’s a lot of hopping around between editors and it’s very disjointed, which tends to get in the way of good flow when writing. For short jobs I will often just hand-edit the &lt;span class="caps"&gt;HTML&lt;/span&gt; produced by Blogger, which works but is, frankly, &lt;span class="caps"&gt;BS&lt;/span&gt;.   &lt;/p&gt;
&lt;p&gt;One the downside, the StackEdit &amp;gt; markdown &amp;gt; html &amp;gt; Blogger pipeline is precisely the sort of jury-rigged song and dance that drives me crazy in my day job. Translations are rarely perfect in any case, and inserting three of them along the way to do a single job offends my sense of Pipeline Fu. I have yet to figure out how to tweak the final results to stay in line with the established style of the blog, and it’s particularly tough to tweak the final results directly in Blogger if I need to make a tweak. The last straw is blogger&amp;#8217;s maddening habit of replacing &amp;lt;p&amp;gt; tags with &amp;lt;br/&amp;gt; tags, even if you paste &lt;span class="caps"&gt;HTML&lt;/span&gt; right into the &lt;span class="caps"&gt;HTML&lt;/span&gt; editor.  It all feels a lot like a complex &lt;span class="caps"&gt;MEL&lt;/span&gt; pipeline. It works&amp;#8230; but it feels&amp;nbsp;wrong.  &lt;/p&gt;
&lt;p&gt;So, apologies for any wierd fomatting here - this is a very beta version of a new process. I’m still not satisfied that this is the ‘right’ way to write for the web (Santa, if you’re reading this, I’d &lt;em&gt;kill&lt;/em&gt; for a good markdown blogging platform that also did Python syntax&amp;nbsp;highlighting!).&lt;/p&gt;</content><category term="blogging"></category><category term="markdown"></category></entry><entry><title>The Dog Ate My Homework</title><link href="https://theodox.github.io/2014/dog_ate_my_homework" rel="alternate"></link><published>2014-10-30T09:55:00-07:00</published><updated>2014-10-30T09:55:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-10-30:/2014/dog_ate_my_homework</id><summary type="html">&lt;p&gt;a cheap-ass way to specialize Maya unit tests for different Maya&amp;nbsp;versions.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had an interesting issue at work the other day. While the details are unit-test specific, I learned a useful general idea that’s worth&amp;nbsp;sharing.  &lt;/p&gt;
&lt;p&gt;We run all of our various Maya tools through a single build system which runs unit tests and compiles code for our different targets (currently Maya 2011 and 2015). Ordinarily, since I’m very allergic to using binaries when I don’t have to, this multi-maya setup doesn’t cause us a lot of headaches. I have a little extractor routine which unzips the few binaries we do distribute in the right places, and all the rest of the code is blissfully unaware of which Maya version it’s running (with the exception of the nasty &lt;a href="http://techartsurvival.blogspot.com/2014/09/2015-bug-watch-ls.html"&gt;ls bug I mentioned a few weeks ago&lt;/a&gt;.)  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://rs1img.memecdn.com/how-many-times-have-you-heard-amp-quot-my-dog-ate-my-homework-amp-quot_fb_2216011.jpg"&gt;&lt;img alt="" src="http://rs1img.memecdn.com/how-many-times-have-you-heard-amp-quot-my-dog-ate-my-homework-amp-quot_fb_2216011.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Last week, however, we added a new tool and accompanying test suite to the toolkit. It works fine in 2015 (where we do all of our actual development right now), but crashes in 2011. After a bit of head-scratching we eventually realized that this one was absurdly simple: the test uses a saved Maya so that it can work with known, valid data. Of course the file was saved from Maya 2015, so when the Maya 2011 version of the tests tries to run boot up, it falls over because 2011 won’t read a 2015 file.&lt;br&gt;
Or, as the checkin comment has it,&amp;nbsp;“Doh!”  &lt;/p&gt;
&lt;h2&gt;Test&amp;nbsp;cancelled!&lt;/h2&gt;
&lt;p&gt;The obvious fix is just to skip the test in Maya 2011 - a test that can never pass is hardly generating much useful information, and the likelihood that our small pool of 2011 customers actually need this tool is low anyway. Skipping a test is easy enough if you’re running the tests manually in an &lt;span class="caps"&gt;IDE&lt;/span&gt; – but a lot more complex if you’re got a build server that’s trying to auto-detect the tests. Plus, designing a system that makes it &lt;em&gt;too&lt;/em&gt; easy to skip tests is a Bad Thingtm; - you generally want all of your tests running all the time, since “I’ll re-enable that test after I deal with this problem” is right up there with “the check is in the mail” and “it’s not you, it’s me” in the probity department. &lt;br&gt;
So, the goal is to allow us to conditionally disable tests based on a hard constraint - in this case, when they are running on an inappropriate version of Maya - without compromising the tests as a whole . Secondarily it would be nice to do this without any kind of central registry file - we’d really just like the tests to just run, except when they &lt;em&gt;can’t&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://i1.wp.com/lotsofhumor.com/wp-content/uploads/2013/04/didnt-study-for-test-test-cancelled.jpg"&gt;&lt;img alt="" src="http://i1.wp.com/lotsofhumor.com/wp-content/uploads/2013/04/didnt-study-for-test-test-cancelled.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now, typically a test runner will detect tests by looking for classes that derive from &lt;a href="https://docs.python.org/2/library/unittest.html"&gt;unittest.TestCase&lt;/a&gt;. The easiest way to skip the test, therefore, is simply not to define it at all - if the test runner doesn’t see the class when it imports your test modules, we’ll be fine. &lt;em&gt;Note: this strategy won’t work if you have some kind of hand-rolled test harness that finds tests by string parsing file contents or something like that! However, you probably want to be doing the standard thing anyway… As they say in Python land, &lt;a href="http://legacy.python.org/dev/peps/pep-0020/"&gt;“There should be one– and preferably only one –obvious way to do&amp;nbsp;it.”&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;In C++ or C# you could do this with a “preprocessor directive”, aka a “#define” - a conditional check that runs at compile time to include or exclude certain parts of a&amp;nbsp;file.   &lt;/p&gt;
&lt;p&gt;In Python we don’t even need that: you can just inline the check in your file and it will execute when the module is imported. Here’s a simple example which conditionally use Raymond Hettinger’s &lt;a href="https://pypi.python.org/pypi/ordereddict"&gt;ordereddict module&lt;/a&gt; in Python 2.6 and the equivalent built-in version in Python&amp;nbsp;2.7:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version_info&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ordereddict&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OrderedDict&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;_(If you are total #&lt;span class="caps"&gt;IFDEF&lt;/span&gt; addict there is also the &lt;a href="http://stackoverflow.com/questions/482014/how-would-you-do-the-equivalent-of-preprocessor-directives-in-python"&gt;pypredef module&lt;/a&gt;. Not my cup of tea, but the author does make some good points about the utility of his approach).&amp;nbsp;_  &lt;/p&gt;
&lt;p&gt;The inline approach works fine in small amounts, but it’s aesthetically unappealing - it forces a bunch of module-level definitions away from the left margin, visually demoting them from important names to generic code blocks. More importantly, it’s easy to mess up: a misplaced indentation can radically change the contents of your file, and even though I’m a big fan of indentations over cur lies, I miss my indents with depressing&amp;nbsp;regularity.  &lt;/p&gt;
&lt;p&gt;Fortunately, Python has an elegantly succinct way of annotating code for higher-level purposes without messing up the visual cleanliness and logical flow: &lt;a href="http://www.artima.com/weblogs/viewpost.jsp?thread=240808"&gt;decorators&lt;/a&gt;. Decorators are handy here for two reasons: first off, they express your intent very clearly by telling future readers something unambiguous about the structure of your code. Secondly, they can execute code (even fairly complex code, though frankly it’s a bad idea for what I’m describing here!) without compromising the layout and readability of your module.&lt;br&gt;
The particularly nice thing about decorators in this case is that the way decorators work in any case is a natural match for the problem we&amp;nbsp;have.   &lt;/p&gt;
&lt;h2&gt;The substitute&amp;nbsp;teacher&lt;/h2&gt;
&lt;p&gt;A decorator is just a function (or a callable class) which takes another function or class as an argument. When Python finds a decorated function or class, it calls the decorator function and passes the target – that is, the decorated bit of code – as an argument Whatever comes out of the decorator function is then swapped in for the original code. &lt;br&gt;
Here’s a simple example, using functions for&amp;nbsp;simplicity:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;decorated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;replacement_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="c1"&gt;# this function replaces the original  &lt;/span&gt;
        &lt;span class="c1"&gt;# it only knows what the original does  &lt;/span&gt;
        &lt;span class="c1"&gt;# because that was passed in when the  &lt;/span&gt;
        &lt;span class="c1"&gt;# decorator was called....  &lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;calling original&amp;quot;&lt;/span&gt;  
        &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;original says : &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;replacement_func&lt;/span&gt;   
    &lt;span class="c1"&gt;# return our new replacement function  &lt;/span&gt;
    &lt;span class="c1"&gt;# but bind it to the name of the original&lt;/span&gt;

&lt;span class="nd"&gt;@decorated&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="c1"&gt;# calling original  &lt;/span&gt;
&lt;span class="c1"&gt;# original says : 3  &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
&lt;span class="c1"&gt;# 3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The decorator can completely replace the original code if it wants&amp;nbsp;to:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;override&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;completely_different&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;and now for something completely different&amp;quot;&lt;/span&gt;

&lt;span class="nd"&gt;@override&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parrot&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I’d like to make a complaint about a parrot&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;parrot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="c1"&gt;# and now for something completely different&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or, it could leave it untouched&amp;nbsp;too:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;untouched&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;original_func&lt;/span&gt;

&lt;span class="nd"&gt;@untouched&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;spam!&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="c1"&gt;#spam!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The essential thing here is that the decorator sort of like one of those elves who swap out children for changelings. Officially nothing has changed - the name you defined in the un-decorated code is right there - but under the hood it may be&amp;nbsp;different.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://bartsblackboard.com/files/2009/11/The-Simpsons-05x11-Homer-The-Vigilante.jpg"&gt;&lt;img alt="" src="http://bartsblackboard.com/files/2009/11/The-Simpsons-05x11-Homer-The-Vigilante.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Mandatory&amp;nbsp;testing&lt;/h2&gt;
&lt;p&gt;Once you understand the decorator-as-changeling idea, it becomes pretty easy to see how the decorator can allow code swaps based on some condition. You might, for example, try to patch around a function which returns an empty list in Maya 2014, but &lt;a href="https://www.blogger.com/blogger.g?blogID=3596910715538761404"&gt;crashes in Maya 2015&lt;/a&gt;(link):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;safe_2015&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2015&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="c1"&gt;# wrap it for safety in 2015  &lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;safe&lt;/span&gt;\&lt;span class="n"&gt;_ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;original_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]()&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;safe_ls&lt;/span&gt;  
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="c1"&gt;# send it back unchanged in non-2015  &lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;original_func&lt;/span&gt;

&lt;span class="nd"&gt;@safe_2015&lt;/span&gt;    
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;do_something&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
   \&lt;span class="c1"&gt;#....&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Disclaimer: I wouldn’t use this code in practice! It’s a good example of the principle, but not a wise way to patch around the 2015 ls&amp;nbsp;bug.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Returning at long last to the problem of suppressing tests: we just need to harness the power of decorators to replace the class definition of our test classes with something else that won’t get run by our test suite. And, luckily, that’s really easy to do since we don’t have to return&amp;nbsp;anything:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Only2015&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2015&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="c1"&gt;# untouched!  &lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="c1"&gt;# the decorated class is now just object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if your do something like this in your&amp;nbsp;tests:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.standalone&lt;/span&gt;  
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;maya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="nd"&gt;@Only2015&lt;/span&gt;  
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test2015Only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_its_2015&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2015&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestOtherVersions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_any_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you’d expect, both of these test will run and pass when run on a Maya 2015 python. However, under any other version of Maya the file really looks like&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;  
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.standalone&lt;/span&gt;  
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;maya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;standalone&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="c1"&gt;# in 2014 &amp;lt;, this TestCase class has been replaced by a dumb object() class  &lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test2015Only&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestOtherVersions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;\&lt;span class="n"&gt;_any&lt;/span&gt;\&lt;span class="n"&gt;_version&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;20&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;about&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Because &lt;code&gt;Test2015Only()&lt;/code&gt; is now an &lt;code&gt;object()&lt;/code&gt; instead of a &lt;code&gt;TestCase()&lt;/code&gt;, the test runner doesn’t even see it and doesn’t try to run&amp;nbsp;it.  &lt;/p&gt;
&lt;h2&gt;Makeup&amp;nbsp;work&lt;/h2&gt;
&lt;p&gt;This is a lovely example of why Python can be so much fun. The language has the magical ability to extend itself on the fly - in this case, change the meaning of whole blocks of otherwise conventional code - but at the same time it offers simple, conservative mechanisms that keep that process for degenerating into mere anarchy (or, worse, into &lt;em&gt;&lt;a href="http://qph.is.quoracdn.net/main-qimg-eb6eb210fd4116ef10fee083428ed482?convert_to_webp=true"&gt;JavaScript&lt;/a&gt;&lt;/em&gt;).  &lt;/p&gt;
&lt;p&gt;This particular gimmick was a great way to clean up our messy test set. Predictably, about 30 seconds I verified that it worked I was starting to brainstorm all sorts of cool new uses for this&amp;nbsp;tactic.   &lt;/p&gt;
&lt;p&gt;A few more minutes of reflection, however, brought me to see that this kind of trick should be reserved for special occasions. The ability to swap the contents of a name based on runtime condition is definitely cool - but it’s hardly a good practice for readability and maintenance down the road. It happens to be a nice fit for this problem because a test is never going to be used by anything other than the test suite. Trying the same thing with, say, a geometry library that gets imported all over the place would be a nightmare to&amp;nbsp;debug.  &lt;/p&gt;
&lt;p&gt;Magic is wonderful but, best used &lt;em&gt;sparingly&lt;/em&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://pad2.whstatic.com/images/thumb/f/f5/Get-out-of-Class-Step-6.jpg/670px-Get-out-of-Class-Step-6.jpg"&gt;&lt;img alt="" src="http://pad2.whstatic.com/images/thumb/f/f5/Get-out-of-Class-Step-6.jpg/670px-Get-out-of-Class-Step-6.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category><category term="python"></category><category term="maya"></category></entry><entry><title>Laziness and cleanliness and MEL, Oh My.</title><link href="https://theodox.github.io/2014/maya_plugin_commands" rel="alternate"></link><published>2014-10-26T00:18:00-07:00</published><updated>2014-10-26T00:18:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-10-26:/2014/maya_plugin_commands</id><summary type="html">&lt;p&gt;Don&amp;#8217;t use Mel.  But if you have to, do it like this: with a pythonic wrapper to clean up your&amp;nbsp;strings&lt;/p&gt;</summary><content type="html">&lt;p&gt;The other day I was following a &lt;a href="http://tech-artists.org/forum/showthread.php?5077-FBX-Exporting-from-Maya"&gt;thread on Tech-Artists&lt;/a&gt; which reminded me of one of those little Maya things that doesn&amp;#8217;t really matter, but which drives me bonkers: busted front ends for Maya&amp;nbsp;plugins.  &lt;/p&gt;
&lt;p&gt;When a developer makes a plugin for Maya, they can create new Mel commands as well as new nodes. The new commands will ultimately use the same basic strategy to parse their incoming arguments: Maya will give them an &lt;a href="http://knowledge.autodesk.com/support/maya/learn-explore/caas/CloudHelp/cloudhelp/2015/ENU/Maya-SDK/py-ref/class-open-maya-1-1-m-arg-list-html.html"&gt;MArgList&lt;/a&gt; object and they will have to parse out what that means. If the plugin uses an &lt;a href="http://knowledge.autodesk.com/support/maya/getting-started/caas/CloudHelp/cloudhelp/2015/ENU/Maya-SDK/py-ref/class-open-maya-1-1-m-syntax-html.html"&gt;MSyntax&lt;/a&gt; and an &lt;a href="http://knowledge.autodesk.com/support/maya/getting-started/caas/CloudHelp/cloudhelp/2015/ENU/Maya-SDK/py-ref/class-open-maya-1-1-m-arg-parser-html.html"&gt;MArgParser&lt;/a&gt; to pull the values out then the plugin will behave just like the functions in maya.cmds.  Flags and arguments will be checked the same way that we&amp;#8217;re used to in the rest of Maya&amp;nbsp;Python.  &lt;/p&gt;
&lt;p&gt;Unfortunately, there&amp;#8217;s no law that says the plugin has to do it &amp;#8216;correctly&amp;#8217;.  There are more than a few plugins that don&amp;#8217;t use the standard MSyntax/MArgParser combo and just pull values out of the argument list directly.  The most notorious offender is the &lt;span class="caps"&gt;FBX&lt;/span&gt; Plugin, which generates a ton of commands which all fail to use the standard parsing mechanism.  And, of course, there are also bits of &lt;span class="caps"&gt;MEL&lt;/span&gt; lying around from other sources as well that are a bit painful to call from Python, That&amp;#8217;s why you see tons of hairy beasts like&amp;nbsp;this:      &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.mel&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;mel&lt;/span&gt;  
&lt;span class="n"&gt;mel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FBXExportBakeComplexStart -v &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start_frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;  
&lt;span class="n"&gt;mel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FBXExportBakeComplexEnd -v &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;end_frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;  
&lt;span class="n"&gt;mel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FBXExport -f &lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;get_export_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.fbx&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While this is workable, it&amp;#8217;s fragile: composing strings inline inside a function call is an invitation to bugs like forgetting an escaped quote (tell me you&amp;#8217;d notice that last escape in the final line if it was borked!) or a bit of significant whitespace. It&amp;#8217;s also harder to meta-program anything that&amp;#8217;s written like this - you can&amp;#8217;t create a dictionary of options or a variable length list of arguments when you call the function. Last - but not least, at least not for lousy typists like myself - you can&amp;#8217;t rely on autocompletion in your &lt;span class="caps"&gt;IDE&lt;/span&gt; to make things quicker and less error&amp;nbsp;prone.  &lt;/p&gt;
&lt;p&gt;In cases like this it&amp;#8217;s handy to be able to fall back on a wrapper that will feed the plugin a correctly formatted &lt;span class="caps"&gt;MEL&lt;/span&gt;-style argument but which looks and codes like regular Maya Python. Luckily, you can usually rely on the &lt;span class="caps"&gt;MEL&lt;/span&gt; syntax, even when the plugin&amp;#8217;s argument parsing is as Python-unfriendly as the &lt;span class="caps"&gt;FBX&lt;/span&gt; plugins: If the &lt;span class="caps"&gt;MEL&lt;/span&gt; version doesn&amp;#8217;t work either, the whole thing isn&amp;#8217;t worth rescuing ! &amp;#8212; but if it does then you can Python-ify the front end with a little bit of Python magic to make sure the arguments are passed&amp;nbsp;correctly.  &lt;/p&gt;
&lt;p&gt;One thing we can do to make this a simple job is to use what&amp;#8217;s known as &lt;em&gt;&lt;span class="caps"&gt;MEL&lt;/span&gt; function syntax&lt;/em&gt;.  This is a little-used &lt;span class="caps"&gt;MEL&lt;/span&gt; behavior that lets you call &lt;span class="caps"&gt;MEL&lt;/span&gt; more or less like a traditional computer function, rather than the shell-style script format you usually see. Function syntax uses parentheses and a comma-delimited list of arguments rather than white space. It means that these two calls are&amp;nbsp;identical:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;spaceLocator -p 1 2 3 -n &amp;quot;fred&amp;quot;;  
spaceLocator(&amp;quot;-p&amp;quot;, &amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;,  &amp;quot;3&amp;quot;,  &amp;quot;-n&amp;quot;,  &amp;quot;fred&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While you probably don&amp;#8217;t want to type that second one, it&amp;#8217;s a lot easier to manage if you&amp;#8217;re trying to turn a bunch of flags and arguments into a &lt;span class="caps"&gt;MEL&lt;/span&gt; command string.  What we&amp;#8217;ll be doing is creating a function that generates argument strings in the function syntax style and then passes them to &lt;span class="caps"&gt;MEL&lt;/span&gt; for you, allowing you to use the familiar cmds-style arguments and keywords instead of doing all the string assembly in-line with your other&amp;nbsp;code.  &lt;/p&gt;
&lt;p&gt;The rest of the relevant &lt;span class="caps"&gt;MEL&lt;/span&gt; syntax rules are pretty simple, with one exception we&amp;#8217;ll touch on&amp;nbsp;later:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Everything&lt;/em&gt; is a&amp;nbsp;string!&lt;/li&gt;
&lt;li&gt;Flags are preceded by a&amp;nbsp;dash&lt;/li&gt;
&lt;li&gt;Flags come&amp;nbsp;first&lt;/li&gt;
&lt;li&gt;Non-flag arguments follow&amp;nbsp;flags&lt;/li&gt;
&lt;li&gt;Multipart values are just a series of single&amp;nbsp;values&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That first one may suprise you but it&amp;#8217;s true - and in our case it&amp;#8217;s extremely useful. If you&amp;#8217;re dubious, though, try this in your &lt;span class="caps"&gt;MEL&lt;/span&gt;&amp;nbsp;listener:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;polyCube (&amp;quot;-name&amp;quot;, &amp;quot;hello&amp;quot;, &amp;quot;-width&amp;quot;, &amp;quot;999&amp;quot;);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Implementing these rules in a function turns out to be pretty&amp;nbsp;simple.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.mel&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_mel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="c1"&gt;# makes every value into a tuple or list so we can string them together easily  &lt;/span&gt;
    &lt;span class="n"&gt;unpack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__iter__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;  
    &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;   
        &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="c1"&gt;# if the flag value is True of False, skip it   &lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unpack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;arg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;quoted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;maya&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;,&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;quoted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This function will correctly format a &lt;span class="caps"&gt;MEL&lt;/span&gt; call for almost all circumstances (see the note below for the exception).  For example the irritating &lt;span class="caps"&gt;FBX&lt;/span&gt; commands above&amp;nbsp;become  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;run_mel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FBXExportBakeComplexStart&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start_frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="n"&gt;run_mel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FBXExportBakeComplexEnd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end_frames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
&lt;span class="n"&gt;run_mel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;FBXExport&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_export_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.fbx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s a big improvement over all that string assembly (not leastaways because it pushes all the string nonsense into one place where it&amp;#8217;s easy to find and fix bugs!)   However it&amp;#8217;s still a bit ugly. Wouldn&amp;#8217;t it be cleaner and more readable to nudge these guys another step towards looking like real&amp;nbsp;Python?  &lt;/p&gt;
&lt;p&gt;Luckily that&amp;#8217;s quite easy to do. After all, the run_mel(&amp;#8220;command&amp;#8221;) part of this is the same except for the command names. So why not make a second function that makes functions with the right command names?  This is basically just a tweak on the way decorators work. For&amp;nbsp;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mel_cmd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wrap&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;run_mel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrap&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This takes a &lt;span class="caps"&gt;MEL&lt;/span&gt; command name (&amp;#8220;cmd&amp;#8221;) and makes a new function which calls run_mel using that command. So you can create objects which look and work like Python commands but do all the nasty mel stuff under the hood like&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FBXExport = mel_cmd(&amp;quot;FBXExport&amp;quot;)      
FBXExportBakeComplexStart = mel_cmd(&amp;quot;FBXExportBakeComplexStart&amp;quot;)  
FBXExportBakeComplexEnd = mel_cmd(&amp;quot;FBXExportBakeComplexEnd&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And call them just like real&amp;nbsp;Python:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;FBXExport&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;this_is_a_lot_nicer.fbx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All this might seem like a bit of extra work &amp;#8212; and it is, though its not much more work than all those laboriously hand-stitched string concatenations you&amp;#8217;d have to do&amp;nbsp;otherwise.&lt;/p&gt;
&lt;p&gt;More importantly, this actually is a case where code cleanliness is next to Godliness: keeping rogue &lt;span class="caps"&gt;MEL&lt;/span&gt; from invading your python code is a big boon to long term maintenance.  String assembly is notoriously bug prone: it&amp;#8217;s way too easy to miss a closing quote, or to append something that&amp;#8217;s not a string and bring the whole rickety edifice crashing down.  Moreover, exposing all of that stringy stuff to other code makes it impossible to do clever python tricks like passing keyword arguments as dictionaries.  So in this case, a little upfront work is definitely worth&amp;nbsp;it.  &lt;/p&gt;
&lt;p&gt;Plus, if you&amp;#8217;re lazy like me you can import these functions in a module and they&amp;#8217;ll autocomplete. Fat Fingers &lt;span class="caps"&gt;FTW&lt;/span&gt;!   &lt;/p&gt;
&lt;p&gt;So, if you find this useful, the complete code is &lt;a href="https://gist.github.com/theodox/9a2e2b92867fa82ea328"&gt;up on&amp;nbsp;Github.&lt;/a&gt;  &lt;/p&gt;
&lt;h3&gt;Note&lt;/h3&gt;
&lt;p&gt;If you&amp;#8217;re a real mel-head you may have noticed one limitation in the &lt;code&gt;run_mel()&lt;/code&gt;implementation above.  &lt;span class="caps"&gt;MEL&lt;/span&gt; allows multi-use flags, for commands&amp;nbsp;like  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -type transform -type camera
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However the function here doesn&amp;#8217;t try to figure format arguments that way. In part because it&amp;#8217;s a relatively rare feature in &lt;span class="caps"&gt;MEL&lt;/span&gt;, but mostly because it doesn&amp;#8217;t occur in the places I&amp;#8217;ve needed to wrap &lt;span class="caps"&gt;MEL&lt;/span&gt; commands.  It would not be hard to extend the function so you could annotate some flags as being multi-use - if you give it a whirl let me know and I&amp;#8217;ll post it for others to&amp;nbsp;see.  &lt;/p&gt;
&lt;h3&gt;Bonus&amp;nbsp;Round&lt;/h3&gt;
&lt;p&gt;The &lt;a href="https://gist.github.com/theodox/2b83b1c47a18448d3cbf"&gt;Github also has another module&lt;/a&gt; which uses the same basic idea (but a slightly different code structure) to wrap that stupid &lt;span class="caps"&gt;FBX&lt;/span&gt;&amp;nbsp;plugin.&lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="programming"></category></entry><entry><title>2015 Bug watch: ls()</title><link href="https://theodox.github.io/2014/2015_bug_watch_ls" rel="alternate"></link><published>2014-09-04T12:15:00-07:00</published><updated>2014-09-04T12:15:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-09-04:/2014/2015_bug_watch_ls</id><summary type="html">&lt;p&gt;A nasty little changed in maya&amp;#8217;s &lt;code&gt;ls()&lt;/code&gt; command for&amp;nbsp;2015&lt;/p&gt;</summary><content type="html">&lt;p&gt;For people switching to Maya 2015 here&amp;#8217;s an irritating bug in the 2015 Maya python&amp;nbsp;layer.  &lt;/p&gt;
&lt;p&gt;In all Mayas before 2015 (as far as I can check, anyway), calling cmds.ls() with a string that was not a valid Maya object name was allowed. You could for example,&amp;nbsp;call  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and you&amp;#8217;d get back an empty array. In 2015, however, it looks like they have changed the way maya.cmds is converting the string into a dag node reference; it you call the same thing in 2015 you&amp;#8217;ll get this&amp;nbsp;instead:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Error: Syntax error: unexpected end @ at position 1 while parsing:  &lt;/span&gt;
&lt;span class="c1"&gt;# ; ; @  &lt;/span&gt;
&lt;span class="c1"&gt;# ; ; ^  &lt;/span&gt;
&lt;span class="c1"&gt;# : @  &lt;/span&gt;
&lt;span class="c1"&gt;# Traceback (most recent call last):  &lt;/span&gt;
&lt;span class="c1"&gt;# ; File &amp;quot;&amp;quot;, line 1, in   &lt;/span&gt;
&lt;span class="c1"&gt;# RuntimeError: Syntax error: unexpected end @ at position 1 while parsing:  &lt;/span&gt;
&lt;span class="c1"&gt;# ; ; @  &lt;/span&gt;
&lt;span class="c1"&gt;# ; ; ^  &lt;/span&gt;
&lt;span class="c1"&gt;# : @ #&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a bit more serious than it seems at first glance, because ls is such a common command. Any ls operation which includes a string that starts with anything other than a letter or a number with raise an exception, so there are a lot of places which used to just chug along silently that are going to start raising&amp;nbsp;exceptions.  &lt;/p&gt;
&lt;p&gt;My workaround is to patch cmds.ls on startup so that it safely renames any bad string before passing them to Maya.  I do this in my bootstrap routine so I don&amp;#8217;t have to chase down every occurrence of ls anywhere in my code  (1,001 of them, or so PyCharm tells&amp;nbsp;me&amp;#8230;).  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.cmds&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cmds&lt;/span&gt;

&lt;span class="n"&gt;VALID_OBJECT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;^[|]?([^a-zA-Z_\?\*\:\|])|([^a-zA-Z0-9_\?\*\:\|\.\[\]])&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;as_u&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;addPrefix&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;safe_ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Patches maya 2015 cmds.ls so that it does not except when passed illegal name characters.  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_BASE_LS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__iter__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
       &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;test_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;VALID_OBJECT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;as_u&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_BASE_LS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;safe_ls&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This makes sure that existing code works as it did before and I don&amp;#8217;t &lt;em&gt;think&lt;/em&gt; it will break anything, since the invalid character strings were never going to be ls&amp;#8217;ed into anything anyway.  Ordinarily I&amp;#8217;m not a big fan of magical behind the scenes fixes but this is a pretty serious change to the behavior of ls which doesn&amp;#8217;t seem like an intentional upgrade so much as an oversight on Autodesk&amp;#8217;s part. So, at least until the old behavior comes back I&amp;#8217;m gonna try&amp;nbsp;it.  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update:&lt;/strong&gt; Hat tip to +Robert White for pointing out that the original regex I posted did not handle namespaces. Code above includes the fix.  Never would have figured it out without &lt;a href="https://pythex.org/"&gt;Pythex!&lt;/a&gt;&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update 2:&lt;/strong&gt; Updated the &lt;code&gt;safe_ls&lt;/code&gt; procedure to handle more of the allowable syntax in older&amp;nbsp;mayas&lt;/em&gt;  &lt;/p&gt;</content><category term="maya"></category><category term="programming"></category><category term="bugs"></category></entry><entry><title>Sony’s Open Source Toolset</title><link href="https://theodox.github.io/2014/sony_open_source_toolset" rel="alternate"></link><published>2014-09-03T23:34:00-07:00</published><updated>2014-09-03T23:34:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-09-03:/2014/sony_open_source_toolset</id><summary type="html">&lt;p&gt;pending&lt;/p&gt;</summary><content type="html">&lt;p&gt;I noticed on &lt;a href="http://www.gamasutra.com/view/news/224682/Sony_releases_level_editor_thats_open_source_and_engineagnostic.php"&gt;Gamasutra &lt;/a&gt;(hat tip &lt;a href="https://plus.google.com/114297709081673565436"&gt;+Jon Jones&lt;/a&gt; ) that Sony is open-sourcing its &lt;a href="https://github.com/SonyWWS/ATF"&gt;Authoring Tools Framework&lt;/a&gt;.    &lt;/p&gt;
&lt;p&gt;&lt;a href="https://raw.githubusercontent.com/wiki/SonyWWS/ATF/images/LBP_PSP_2.png?raw=true"&gt;&lt;img alt="" src="https://raw.githubusercontent.com/wiki/SonyWWS/ATF/images/LBP_PSP_2.png?raw=true"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is an interesting idea and I&amp;#8217;m a big fan of putting this sort of thing out there - not only does it provide people a good starting point for their own projects, it also allows the curious to see what&amp;#8217;s going on even if they aren&amp;#8217;t actually using the code.  I&amp;#8217;m sure I&amp;#8217;ll be poking around in it even if I never use a line of C#.  It&amp;#8217;s a goodwill gesture, a community service, and a nice way of asking people to fix your bugs for you for free. A&amp;nbsp;win-win!  &lt;/p&gt;
&lt;p&gt;I am curious as to where the tools are actually pitched. The blurb clains the &lt;span class="caps"&gt;ATF&lt;/span&gt; is used in Naughty Dog&amp;#8217;s level editor and shader editor for &lt;em&gt;The Last of Us&lt;/em&gt;, a sequence editor for &lt;em&gt;Killzone&lt;/em&gt;, an animation blending tool for &lt;em&gt;God of War&lt;/em&gt;, and  a visual state machine editor for Quantic Dream among other things. That&amp;#8217;s a pretty broad palette for a single toolkit.  Overly-tight coupling between particular games and particular tools is one reason why game production advances in fits and starts: we have to choose between the completely generic, one-size-fits-all solutions (&amp;#8220;Let&amp;#8217;s just make our level editor in Maya!&amp;#8221; or &amp;#8220;Just make the particle system &lt;span class="caps"&gt;UI&lt;/span&gt; look like Max&amp;#8217;s&amp;#8221;) and tools that can only do a very specific job for a very specific project. The middle ground between these extremes is, I think, fertile territory to explore if you&amp;#8217;re interested in game toolsets that don&amp;#8217;t&amp;nbsp;suck.  &lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be curious to see what&amp;#8217;s in Sony&amp;#8217;s toybox. I&amp;#8217;m especially curious to hear from anybody who has actually worked with this code &amp;#8212; comment&amp;nbsp;away!  &lt;/p&gt;
&lt;p&gt;The project is available for cloning on &lt;a href="https://github.com/SonyWWS/ATF"&gt;github&lt;/a&gt;.&lt;/p&gt;</content><category term="tools"></category><category term="industry"></category></entry><entry><title>Size is the enemy: an oldie but a goodie</title><link href="https://theodox.github.io/2014/size_is_the_enemy" rel="alternate"></link><published>2014-09-01T22:39:00-07:00</published><updated>2014-09-01T22:39:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-09-01:/2014/size_is_the_enemy</id><summary type="html">&lt;p&gt;While googling my way around some strategy issues lately I rediscovered &lt;a href="http://blog.codinghorror.com/size-is-the-enemy/"&gt;this 2007 post from Jeff Atwood&lt;/a&gt; which neatly sums up a few important things that have been factoring very large in my thinking lately:  Plus, I&amp;#8217;ve spent the last 4 days in the madness that is Pax (shout out to all the great folks who came by the booths, by the way!) so I&amp;#8217;m a little grumpy.  And it led me to a list things that have been bugging me for a&amp;nbsp;while.&lt;/p&gt;</summary><content type="html">&lt;h2&gt;#1: Maintain &amp;gt;&amp;nbsp;Build&lt;/h2&gt;
&lt;p&gt;Maintaining any codebase is way harder than making it. Waaaaaay&amp;nbsp;harder.  &lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve been presiding over a rewrite of my own toolset - one that is only 2.5 years or so of my own work - and I&amp;#8217;m amazed and appalled at how crufty it is. Lots of important things are held together with spit and bailing wire. Lots of trivial things are massively over-engineered. And &amp;#8212; though I pride myself on being good about code reuse, _there&amp;#8217;s-only-one-way-to-do-it, _and extending earlier solutions instead of reinventing things &amp;#8212; it&amp;#8217;s full of pointless&amp;nbsp;duplication.   &lt;/p&gt;
&lt;p&gt;And even though it&amp;#8217;s 90% my own work it&amp;#8217;s full of conflicting style choices and paradigms.  I guess it shows I&amp;#8217;m still learning, so I haven&amp;#8217;t gotten totally stale&amp;nbsp;yet.  &lt;/p&gt;
&lt;h2&gt;#2: Dynamic &amp;gt;&amp;nbsp;Static&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;ve been looking a lot at possible language alternatives to Python for future tools. I love Python. I mean, in a totally unhealthy, creepy, even stalker-y way. But I don&amp;#8217;t like being to beholden to any one tech or approach. I&amp;#8217;d love to get beyond Python&amp;#8217;s erratic distribution mechanisms, and Id&amp;#8217; &lt;em&gt;really&lt;/em&gt; like to get my hands on a decent &lt;span class="caps"&gt;GUI&lt;/span&gt; toolkit that didn&amp;#8217;t make me program C++ indirectly ( &lt;a href="http://shoesrb.com/"&gt;Python Shoes&lt;/a&gt;, where are&amp;nbsp;you?)  &lt;/p&gt;
&lt;p&gt;So, while tinkering with &lt;a href="http://boo.codehaus.org/"&gt;Boo&lt;/a&gt;, &lt;a href="http://cobra-language.com/"&gt;Cobra&lt;/a&gt;, &lt;a href="http://nimrod-lang.org/documentation.html"&gt;Nimrod &lt;/a&gt;and a few other options I&amp;#8217;ve been revisiting the old theological debate about dynamic vs static languages; working on &lt;a href="http://moonrise-game.com/"&gt;Moonrise &lt;/a&gt; (in Unity) has made me realise that C# was designed with the express intention of driving me insane. It seems routinely true that I write 4 times as many lines of C# as I do in Python. I&amp;#8217;m sure I&amp;#8217;m saving a few bugs because of all the clunky type management stuff, but I think I&amp;#8217;d rather just fix the bugs than suffer through the oceans of boilerplate that C#&amp;nbsp;induces.   &lt;/p&gt;
&lt;p&gt;To be fair, it&amp;#8217;s a little worse in Unity than in the rest of the world: you can do a lot to make C# suck less using attributes and reflection and other meta-techniques, but those are tougher to do in Unity&amp;#8217;s special flavor of&amp;nbsp;C#.   &lt;/p&gt;
&lt;p&gt;Still, I think I&amp;#8217;ve finally made up my mind on this one: I&amp;#8217;d rather take the risks that come with dynamic code over the sheer, mind-numbing boredom that comes with obsessive type safety.  Especially in a world where overhauling and updating and refactoring code is the &lt;em&gt;real&lt;/em&gt; work: building it is just the first&amp;nbsp;chapter.  &lt;/p&gt;
&lt;h2&gt;#3 I hate curly&amp;nbsp;braces.&lt;/h2&gt;
&lt;p&gt;I&amp;#8217;m not even trying to deny it anymore. I hate the little bastards.  What a waste of&amp;nbsp;space.  &lt;/p&gt;
&lt;h2&gt;#4  I&amp;#8217;m&amp;nbsp;Screwed&lt;/h2&gt;
&lt;p&gt;The interesting problem - if I end up just getting cozy with my prejudices and preferences - is now how to pick a decent dynamic environment for tools development while (A) not having the code base degenerate into mush and  (B) having decent &lt;span class="caps"&gt;GUI&lt;/span&gt; options.   And if at all possible, (C), no goddam curly&amp;nbsp;brackets.  &lt;/p&gt;
&lt;p&gt;For most of my work - managing files, talking to databases, and dealing with data on disk performance is not really the most important problem: I tend to deal in minute-scale problems not hour-scale problems, so cutting them down by a factor of 5 is a nice plus rather than a live-or-die necessity.  While this means a bit more freedom, it also removes a sorting criterion from the&amp;nbsp;problem.  &lt;/p&gt;
&lt;p&gt;The stinky part is that, for the given problem set there really is &lt;strong&gt;no obvious winner&lt;/strong&gt;.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I could imagine that the combination of &lt;a href="https://www.ruby-lang.org/en/"&gt;Ruby &lt;/a&gt;and &lt;a href="http://shoesrb.com/"&gt;Shoes&lt;/a&gt; would be super productive, even though the Shoes &lt;span class="caps"&gt;GUI&lt;/span&gt; is pretty limited compared to &lt;span class="caps"&gt;QT&lt;/span&gt; or &lt;span class="caps"&gt;WPF&lt;/span&gt;.  I could probably tolerate those block ending markers in Ruby, and there is a good set of standard library code out there. The perf is not great but that&amp;#8217;s my least important problem. I don&amp;#8217;t think it&amp;#8217;s much easier to distribute Ruby apps to users than it is to do with Python,&amp;nbsp;however.&lt;/li&gt;
&lt;li&gt;Nimrod looks like a cool little language, but has no equivalent of the Python&amp;nbsp;standardlib.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boo and Cobra both use the same &lt;span class="caps"&gt;CLR&lt;/span&gt; as C#, so theoretically you can use them to drive &lt;span class="caps"&gt;GUI&lt;/span&gt; apps with &lt;span class="caps"&gt;WPF&lt;/span&gt; or winforms, but that puts you right back into programming a clunky language through the medium of a nicer one: if I wanted that I&amp;#8217;d stick with&amp;nbsp;PyQT.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Javascript is actually super powerful, in the sense that has the same kind of high level fluidity that Python does. It&amp;#8217;s also got the best (or at least the most broadly available and flexible) &lt;span class="caps"&gt;GUI&lt;/span&gt; out there in the form of  &lt;span class="caps"&gt;HTML&lt;/span&gt; + &lt;span class="caps"&gt;CSS&lt;/span&gt;. Unfortunately it&amp;#8217;s got the security sandbox so you need a special infrastructure to do even really mundane stuff like trolling the files on a hard disk &amp;#8212; to say nothing of it&amp;#8217;s famously bad issues with local vs global variables and scoping.  &lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; can eleminate a lot of the worst syntactic pain (and the blankety-blank curly brackets) but it&amp;#8217;s hard to maintain code which is written in one language but actually &lt;em&gt;run&lt;/em&gt; in another: &amp;#8220;compiles to Javascript&amp;#8221; is pretty cool until you have to actually debug something which is only genetically related to the code you actually &lt;em&gt;wrote.&lt;br&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(update 9/3) You can do an &lt;span class="caps"&gt;HTML&lt;/span&gt; front end for a python app with the &lt;a href="https://code.google.com/p/cefpython/"&gt;Chromium Embedded Framework for python&lt;/a&gt;. That actually works pretty well, and lets you keep &lt;span class="caps"&gt;JS&lt;/span&gt; for the light weight &lt;span class="caps"&gt;UI&lt;/span&gt; manipulation while passing the heavy lifting off to Python fairly transparently. The only caveat: the day after I discovered this I went to work, installed the Maya 2015 trial &amp;#8212; and promptly found that &lt;em&gt;their&lt;/em&gt; shiny new &lt;span class="caps"&gt;HTML&lt;/span&gt; gui front end had a Javascript error and did not work, thereby preventing me from logging iu to the trial. It&amp;#8217;s the new thing altight, but it&amp;#8217;s not quite there.  And It&amp;#8217;s still a 2-language solution, albeit a nice&amp;nbsp;one.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(update 9/3):  For completeness sake I should mention the combination of Jytron and &lt;span class="caps"&gt;AWT&lt;/span&gt; or Swing. This works right out of the box - if you have Jython, you have a complete &lt;span class="caps"&gt;GUI&lt;/span&gt; toolkit with no downloads, installs or DLLs to manage. You can also &lt;a href="http://stackoverflow.com/questions/16701979/packaging-a-jython-program-in-an-executable-jar"&gt;compiile Jython to executables&lt;/a&gt;, buit it&amp;#8217;s not a completely transparent process and it seems a bit fiddly. Still, could be an&amp;nbsp;optiom&amp;#8230;.  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(ipdate 9/3)::  I&amp;#8217;ve also been experimenting a lot with compiling IronPython to exes using the &lt;span class="caps"&gt;IL&lt;/span&gt; compiler that comes with IronPython. So far it actually looks pretty good: the exes are smaller than similar Py2Exes or PyInstaller projects and they seem to be less prone to obscure compilation problems too&amp;#8230;. maybe some light at the end of the&amp;nbsp;tunnel?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;_&lt;strong&gt;&lt;span class="caps"&gt;TLDR&lt;/span&gt;: &lt;/strong&gt; _There really is nothing that fills the niche of a powerful, flexible language with good &lt;span class="caps"&gt;GUI&lt;/span&gt; and distribution options right now.&amp;nbsp;Sigh.  &lt;/p&gt;
&lt;p&gt;Please, prove me wrong&amp;nbsp;!&lt;/p&gt;</content><category term="programming"></category></entry><entry><title>Pax!</title><link href="https://theodox.github.io/2014/pax" rel="alternate"></link><published>2014-08-28T23:04:00-07:00</published><updated>2014-08-28T23:04:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-08-28:/2014/pax</id><summary type="html">&lt;p&gt;Pax 2014 on the&amp;nbsp;horizon!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ear plugs? &lt;strong&gt;Check&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Throat lozenges? &lt;strong&gt;Check&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Hand sanitizer? &lt;strong&gt;Check&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Let the games&amp;nbsp;begin!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be working the &lt;strong&gt;Moonrise&lt;/strong&gt; booth Friday, and manning the &lt;strong&gt;State of Decay&lt;/strong&gt; booth Sunday and Monday. Stop&amp;nbsp;by!&lt;/p&gt;</content><category term="games"></category><category term="industry"></category><category term="moonrise"></category></entry><entry><title>Pax Dev State of Decay Post-mortem</title><link href="https://theodox.github.io/2014/sod_post_mortem" rel="alternate"></link><published>2014-08-25T20:13:00-07:00</published><updated>2014-08-25T20:13:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-08-25:/2014/sod_post_mortem</id><summary type="html">&lt;p&gt;A &lt;span class="caps"&gt;PAX&lt;/span&gt; panel covering State of Decay and how it was&amp;nbsp;made.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://undeadlabs.com/wp-content/uploads/2012/01/mural.jpg"&gt;&lt;img alt="" src="http://undeadlabs.com/wp-content/uploads/2012/01/mural.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be &lt;a href="http://dev.paxsite.com/schedule/panel/state-of-decay-postmortem"&gt;on a panel this Thursday at Pax Dev,&lt;/a&gt; along with a bunch of my &lt;a href="https://plus.google.com/108326676864227822131"&gt;+Undead Labs&lt;/a&gt;  colleagues to talk about how we shipped a big open world game with a teensy tiny team.  Since we&amp;#8217;re also debuting &lt;a href="http://moonrise-game.com/"&gt;Moonrise &lt;/a&gt;at the show, and hanging out with &lt;a href="http://undeadlabs.com/about-state-of-decay/"&gt;State of Decay&lt;/a&gt; fans as well, it&amp;#8217;s gonna be a busy, busy week. Hope to see you&amp;nbsp;there!  &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;. You know we&amp;#8217;re looking for some serious senior tech-artists,&amp;nbsp;right?  &lt;/p&gt;</content><category term="games"></category><category term="industry"></category><category term="tools"></category></entry><entry><title>SIGGRAPH 2014 Short Review</title><link href="https://theodox.github.io/2014/siggraph_2014_short_review" rel="alternate"></link><published>2014-08-20T12:28:00-07:00</published><updated>2014-08-20T12:28:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-08-20:/2014/siggraph_2014_short_review</id><summary type="html">&lt;p&gt;pending&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s been &lt;a href="http://moonrise-game.com/"&gt;crazy times at Undead Labs&lt;/a&gt; as we &lt;a href="http://undeadlabs.com/2014/08/news/pinny-arcade-now-featuring-moonrise-pin/"&gt;get ready for Pax&lt;/a&gt;.  I did sneak in a lightning visit to &lt;span class="caps"&gt;SIGGRAPH&lt;/span&gt;, since it drive-able in Vancouver, but I had to cut it pretty&amp;nbsp;short.   &lt;/p&gt;
&lt;p&gt;The highlight of the show was the &lt;a href="http://tech-artists.org/forum/showthread.php?4885-Siggraph-2014-TA-Meetup"&gt;&lt;span class="caps"&gt;TA&lt;/span&gt; beer night at the Butcher and Bullock&lt;/a&gt;  &amp;#8212; hats off to &lt;a href="https://plus.google.com/116275833090172173559"&gt;+Robert Butterworth&lt;/a&gt;  for putting together &amp;#8212; but there was some other stuff going on as well. Here&amp;#8217;s a very partial and completely unscientific brain dump of what I saw. The important caveat here is that my limited schedule kept me on a very short leash:  I spent all day Monday in the &lt;em&gt;Advances in Real Time Graphics&lt;/em&gt; course, which I&amp;#8217;m pleased to say has become a &lt;span class="caps"&gt;SIGGRAPH&lt;/span&gt; institution (go Natasha!) and then all day Tuesday talking to vendors, so I&amp;#8217;m 100% certain to have missed a lot of cool and interesting stuff. This was an all business visit, so most of what I have to report is general impressions rather than new cutting edge research.  My impressions are after the&amp;nbsp;jump&amp;#8230;  &lt;/p&gt;
&lt;h2&gt;Have a &lt;span class="caps"&gt;PBR&lt;/span&gt;!&lt;/h2&gt;
&lt;p&gt;The trend towards &lt;a href="http://www.marmoset.co/toolbag/learn/pbr-theory"&gt;physically based rendering&lt;/a&gt; is getting even more pronounced: I think there&amp;#8217;s no question this will be this year&amp;#8217;s buzzword of the year, at least in games.  I&amp;#8217;ve been working with &lt;span class="caps"&gt;PBR&lt;/span&gt; renderers at work (mostly, but not only Marmoset) and it really is a better way to work, at least if your working with realistic subject matter.  I&amp;#8217;ve got an article in the works for 3D World about exactly this - lost somewhere in the labyrinth that is print production - and the takeaway is that it&amp;#8217;s a good thing for anybody in game art to be boning up&amp;nbsp;on.  &lt;/p&gt;
&lt;p&gt;The standard textbook, &lt;a href="http://www.amazon.com/gp/product/0123750792/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=0123750792&amp;amp;linkCode=as2&amp;amp;tag=tecsurgui-20&amp;amp;linkId=HDVQMGQOD6MKGOCB"&gt;Physically Based Rendering, Second Edition: From Theory To Implementation&lt;/a&gt;&lt;img alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=tecsurgui-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0123750792"&gt;, is a bit of a slog. It has great info but very coder-centric. The Marmoset site linked above has some great intro level material.  For a deeper dive there&amp;#8217;s &lt;a href="http://seblagarde.wordpress.com/2011/08/17/feeding-a-physical-based-lighting-mode/"&gt;this post from Sebastian Lagarde&lt;/a&gt;. There&amp;#8217;s also a couple of decent video intros:| &lt;br&gt;
&amp;#8212;-|&amp;#8212;-&lt;br&gt;
Hat tip : +Robert-Jan Brems  &lt;br&gt;
I think there&amp;#8217;s a near-future blog post in all this somewhere&amp;nbsp;:)  &lt;/p&gt;
&lt;p&gt;One side note: the need for high quality specular light samples - usually cubemaps - in a &lt;span class="caps"&gt;PBR&lt;/span&gt; pipeline has the nice side-effect that you can usually count on a reflection map for lots of areas which might not have gotten one traditionally. Combine with depth buffer reflections for fun and profit!  There were good talks from the &lt;em&gt;Killzone&lt;/em&gt; and _Thief _teams about real-time depth buffer reflections which I think are going to make a noticeable difference in tone from last gen graphics as it becomes more&amp;nbsp;common.  &lt;/p&gt;
&lt;h2&gt;Free&amp;nbsp;samples&lt;/h2&gt;
&lt;p&gt;One of the side effects of the new console generation is that everybody is revisiting antialiasing and sampling.  From 720p to 1080p means pushing more than 2X the pixels. This makes &lt;span class="caps"&gt;MSAA&lt;/span&gt; a worrisome burden: you&amp;#8217;ve to do a lot of sampling at that&amp;nbsp;res.  &lt;/p&gt;
&lt;p&gt;Not surprisingly there was a lot of interest in alternatives to brute force antialiasing at this year&amp;#8217;s graphics course. I particularly liked the paper from Michel Drobot of Guerilla on &amp;#8216;Hybrid Reconstructive &lt;span class="caps"&gt;AA&lt;/span&gt;&amp;#8217;, which to my less-than-wizardly ears sounded like a variant of temporal &lt;span class="caps"&gt;AA&lt;/span&gt; (in which you accumulate &lt;span class="caps"&gt;AA&lt;/span&gt; over a few frames by varying the precise sampling point in the 3d world a little bit on each render) spiced up by oversampling just the coverage buffer of the graphics card to get enough data to do higher quality sample weighting on the &lt;span class="caps"&gt;AA&lt;/span&gt; for edges. ~~ I know that&amp;#8217;s kind of a sketchy description, unfortunately the paper is not up yet for linking so I can&amp;#8217;t go through it more academically;  however it will eventually show up on the course website at ~~  The slide with all the gory details are now up at &lt;a href="http://advances.realtimerendering.com/"&gt;advances.realtimerendering.com&lt;/a&gt;.  &lt;/p&gt;
&lt;h2&gt;Fabric&amp;nbsp;50&lt;/h2&gt;
&lt;p&gt;What does it say about me in my old age that one of the pulse-pounders of the show was a change in licensing terms? The &lt;a href="http://fabricengine.com/fabric50/"&gt;Fabric 50 program&lt;/a&gt; is a new idea from the makers of the &lt;a href="http://fabricengine.com/"&gt;Fabric Engine&lt;/a&gt;. Fabric is a high performance, highly parallel computing engine that is intended to be used inside &lt;span class="caps"&gt;DCC&lt;/span&gt; tools like Maya or as the core of a standalone app. The key goal is to put lots and lots of power in a package that is usable by mortals so you can write a pretty beefy tool without having to go back to school and learn all the dark arts of multiprocessing and parallelism. The 50 program allows studios up to 50 licenses for free in an effort to get more tool makers using and evangelising for the tech. I&amp;#8217;m pretty sure I&amp;#8217;ll be dropping this one on my tech director&amp;#8217;s desk&amp;nbsp;soon.   &lt;/p&gt;
&lt;h2&gt;The Dismal&amp;nbsp;Science&lt;/h2&gt;
&lt;p&gt;Business-wise this felt like a slow year to  me. Not sure how much of that comes from the size of the venue, how much comes from Hollywood types skipping out on the cross-border travel, and how much is the result of the slow implosion of the big-budget &lt;span class="caps"&gt;FX&lt;/span&gt; industry but the overall vibe among vendors was fairly&amp;nbsp;mellow.   &lt;/p&gt;
&lt;p&gt;The advances in capture and acquisition tech are kind of like those in cell phones: we&amp;#8217;re so jaded that we don&amp;#8217;t even notice the miracles anymore. I saw a lot of mocap demos - it&amp;#8217;s the siggraph show floor, so ball suits abound - and I was struck by how clean and lag-less the captured images were all round; even the bargain stuff looks pretty damn good these&amp;nbsp;days.  &lt;/p&gt;
&lt;p&gt;There&amp;#8217;s no big 3d application booths anymore - the market has gotten so mature (or monopolized, depending on your mood) that big stage shows and high power demos you used to see are gone - the Autodesk booth was literally a 10 foot cube featuring primarily  abstract&amp;nbsp;artwork.   &lt;/p&gt;
&lt;p&gt;One 3d app demo I did catch was a &lt;a href="http://www.thefoundry.co.uk/products/modo/latest-version/"&gt;Modo 801&lt;/a&gt; animation demo. I&amp;#8217;ve been ambivalent about Modo&amp;#8217;s efforts to compete head on with the Max/Maya juggernaught, but I was quite impressed by their animation workflow (here&amp;#8217;s a video from their site, which covers a lot of the ground I saw in a more bullet-pointy&amp;nbsp;fashion:)  &lt;/p&gt;
&lt;p&gt;I&amp;#8217;m usually a bit suspicious of efforts to port the pen-and-paper workflow to &lt;span class="caps"&gt;CG&lt;/span&gt;, since I don&amp;#8217;t see the point in mimicking the artifacts of one medium in another. However the timing chart workflow is a fresh take on an aspec of animation which has been badly overshadowed by the minutia of rigging, and I hope it inspires everybody to kickstart the moribund business of animation software. Speaking of which, I had an interesting talk with the founder of French startup &lt;a href="http://www.nukeygara.com/"&gt;Nukeygara&lt;/a&gt;, who was showing an interesting and unconventional standalone animation package called Akeytsu (no, I&amp;#8217;m not sure how to pronounce it either. It&amp;#8217;s &lt;em&gt;French&lt;/em&gt;. Just roll with it!) This vid gives a pretty good idea where this is&amp;nbsp;going:  &lt;/p&gt;
&lt;p&gt;I&amp;#8217;m very curious to see how this one works out: I&amp;#8217;m still waiting for somebody &amp;#8212; please! &amp;#8212; to shake up animation the way Zbrush has (and continues to) shake up modelling. Like recent &lt;span class="caps"&gt;GDC&lt;/span&gt;&amp;#8217;s it seemed like schools and training programs took up as much floor space as vendors, which is a little scary: call me selfish but I kind of miss the days when  our skills were rare and esoteric.  Of course, the kids coming out of these programs are all waaaay more sophisticated technically and artistically than I was at the same point in my career, so it&amp;#8217;s good for the art form I&amp;nbsp;suppose.  &lt;/p&gt;
&lt;p&gt;Not for my ego,&amp;nbsp;though.  &lt;/p&gt;
&lt;h2&gt;The Meet&amp;nbsp;Market&lt;/h2&gt;
&lt;p&gt;The Job fair was a tad small this year &amp;#8212; like the show floor, it might just be the distance from &lt;span class="caps"&gt;LA&lt;/span&gt;, but I&amp;#8217;d say there were only about two dozen booths.  Many of these seemed to be &lt;span class="caps"&gt;BC&lt;/span&gt; based &lt;span class="caps"&gt;VFX&lt;/span&gt; houses as well: the hurly burly of the old days with 4 hour lines at &lt;span class="caps"&gt;ILM&lt;/span&gt; and Pixar was not much in evidence, at least not while I was there. I saw a handful of game companies (biggies like Blizzard and smaller ones) but things seemed a bit subdued. Here&amp;#8217;s hoping that&amp;#8217;s just an artifact of the time and place of the show.  Maybe there was more action in private suites and hotel rooms, perhaps the internet has taken some of the flesh-pressing out of the process. Still, a bit&amp;nbsp;worrisome.  &lt;/p&gt;</content><category term="siggraph"></category><category term="industry"></category></entry><entry><title>Moonrise announcement</title><link href="https://theodox.github.io/2014/moonrise_announcement" rel="alternate"></link><published>2014-08-06T22:20:00-07:00</published><updated>2014-08-06T22:20:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-08-06:/2014/moonrise_announcement</id><summary type="html">&lt;p&gt;The product announcement for&amp;nbsp;Moonrise&lt;/p&gt;</summary><content type="html">&lt;p&gt;So, we just took the wraps off &lt;a href="http://undeadlabs.com/2014/08/news/moonrise/"&gt;our latest project&lt;/a&gt;:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://undeadlabs.com/wp-content/uploads/2014/08/Moonrise02.jpg"&gt;&lt;img alt="" src="http://undeadlabs.com/wp-content/uploads/2014/08/Moonrise02.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll be showing the beta at &lt;a href="http://prime.paxsite.com/"&gt;Pax Prime&lt;/a&gt; (booth 6103).  It&amp;#8217;s been a really fun project to work on (for a grizzled ancient like yrs. truly, working on mobile is kind of liberating. It&amp;#8217;s like the old days of limited budgets and tiny teams.  Its so nice to get something from concept to execution in 18 months instead of 4 or 5 years, and with a team that can meet in a lunch room instead of needing a whole&amp;nbsp;theater.  &lt;/p&gt;
&lt;p&gt;&amp;#8230;the game looks a lot nicer than they did in the old days though. I used to sneer at mobile graphics, but nowadays it&amp;#8217;s pretty awesome what you can accomplish with a little&amp;nbsp;care.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-_fZyKqsKkGs/U-MKvBP9dcI/AAAAAAABIZk/hZpIULBgxLw/s1600/town.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-_fZyKqsKkGs/U-MKvBP9dcI/AAAAAAABIZk/hZpIULBgxLw/s1600/town.jpg"&gt;&lt;/a&gt;
&lt;a href="http://2.bp.blogspot.com/-X4uma6gxdB4/U-MKvJe7UPI/AAAAAAABIZo/CLjG8PIOglg/s1600/combat.jpg"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-X4uma6gxdB4/U-MKvJe7UPI/AAAAAAABIZo/CLjG8PIOglg/s1600/combat.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;&lt;/strong&gt;. In case you&amp;#8217;re wondering: It&amp;#8217;s not a zombie game.  But we&amp;#8217;re not out of the zombie business, not by a long shot. Check out article linked above for more from &lt;span class="caps"&gt;HQ&lt;/span&gt;.  But trust me, there&amp;#8217;s a lot of zombies in our future&amp;nbsp;too. &lt;/p&gt;</content><category term="industry"></category><category term="games"></category></entry><entry><title>Rob G’s Maya Python book is finally out</title><link href="https://theodox.github.io/2014/rob_g_sale" rel="alternate"></link><published>2014-07-30T22:28:00-07:00</published><updated>2014-07-30T22:28:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-07-30:/2014/rob_g_sale</id><summary type="html">&lt;p&gt;Rob&amp;#8217;s Maya Python book is on&amp;nbsp;sale&lt;/p&gt;</summary><content type="html">&lt;p&gt;I see Rob Galanakis&amp;#8217;s new book is finally available for realz on&amp;nbsp;Amazon.   &lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve added it &amp;#8212; and a few more new  books &amp;#8212; to the &lt;a href="http://astore.amazon.com/tecsurgui-20"&gt;Techart bookstore page&lt;/a&gt;&amp;nbsp;too!  &lt;/p&gt;</content><category term="industry"></category><category term="maya"></category><category term="python"></category></entry><entry><title>Pythonistas need Pythonista!</title><link href="https://theodox.github.io/2014/pythonista" rel="alternate"></link><published>2014-07-27T13:07:00-07:00</published><updated>2014-07-27T13:07:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-07-27:/2014/pythonista</id><summary type="html">&lt;p&gt;&lt;a href="http://omz-software.com/pythonista/"&gt;Pythonista&lt;/a&gt;, a remarkably slick Python interpreter for&amp;nbsp;iOS&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you consider yourself a Pythonista, you&amp;#8217;ve probably been frustrated by the difficulty involved in getting to work in Python on iOS devices.  I just stumbled upon a really cool answer to your prayers in the form of &lt;a href="http://omz-software.com/pythonista/"&gt;Pythonista&lt;/a&gt;. It&amp;#8217;s not brand new - it looks like it came out last year - but I just found out about it and flipped my proverbial&amp;nbsp;wig.  &lt;/p&gt;
&lt;p&gt;Pythonista is a sandboxed Python 2.7 development environment for iOS.  It borrows a page from the playbook of earlier sandboxes like &lt;a href="http://twolivesleft.com/Codea/"&gt;Codea&lt;/a&gt;. and manages to skirt Apple&amp;#8217;s rules for what you can do on the device while still allowing plenty of power.  It includes a script editor (a pretty slick one for iOS, by the way) ,an interactive environment, and a bunch of libraries to make development really useful.  Among the &amp;#8216;batteries&amp;#8217; included are heavy hitters like &lt;code&gt;pil&lt;/code&gt;,&lt;code&gt;numpy&lt;/code&gt; and &lt;code&gt;matplotlib&lt;/code&gt;, along with a few cool little things like a text-to-speech module and tools for dealing with the iOS&amp;nbsp;console.&lt;/p&gt;
&lt;p&gt;The most impressive inclusions are the &lt;code&gt;scene&lt;/code&gt; and &lt;code&gt;ui&lt;/code&gt; modules: custom modules devoted to iOS drawing and &lt;span class="caps"&gt;UI&lt;/span&gt;.  Ironically, it&amp;#8217;s easier to develop a &lt;span class="caps"&gt;GUI&lt;/span&gt; application on your iPad using Pythonista than it is to do it on a desktop machine - the app even comes with a &lt;span class="caps"&gt;UI&lt;/span&gt; builder tool similar to &lt;span class="caps"&gt;QT&lt;/span&gt;&amp;#8217;s interface builder (not nearly as deep or complex, of course, but iOS &lt;span class="caps"&gt;UI&lt;/span&gt; is less complex than desktop). You can read multiple touches.  You can even do hardware accelerate drawing - nice for things like a finger-sketching program.  Since Pythonista includes &lt;code&gt;pil&lt;/code&gt;, you can even do stuff like image&amp;nbsp;processing:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://a1.mzstatic.com/us/r30/Purple2/v4/11/f3/e5/11f3e59b-90f9-68e2-fc61-c6f440bfccf7/screen568x568.jpeg"&gt;&lt;img alt="" src="http://a1.mzstatic.com/us/r30/Purple2/v4/11/f3/e5/11f3e59b-90f9-68e2-fc61-c6f440bfccf7/screen568x568.jpeg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pythonista&amp;#8217;s main limitation is that it&amp;#8217;s not possible to add external modules to the library in the usual ways: &lt;code&gt;setuptools&lt;/code&gt; and &lt;code&gt;pip&lt;/code&gt; aren&amp;#8217;t available.  You can manually install pure-python modules by copy-paste-save, and there are few installation tools floating around on the web such as &lt;a href="https://gist.github.com/pudquick/4116558"&gt;pipista&lt;/a&gt; and &lt;a href="https://gist.github.com/anonymous/5243199"&gt;Pypi&lt;/a&gt;.  (As an aside: here&amp;#8217;s a &lt;a href="http://randomfoo.net/2013/12/08/pythonista-and-ios-automation"&gt;handy collection of Pythonista snippets and links&lt;/a&gt;).  Modules with binary dependencies &amp;#8212; such as the perforce api &amp;#8212; are off-limits; I&amp;#8217;m not sure it it would be possible to use .pyd&amp;#8217;s that were properly compiled for iOS or if the security sandbox won&amp;#8217;t allow arbitrary binary code at&amp;nbsp;all.  &lt;/p&gt;
&lt;p&gt;All in all, it&amp;#8217;s pretty cool stuff for any Pythonerd.  My big project right now is a touch based inteface on the iPad to control a &lt;a href="http://www.dexterindustries.com/BrickPi/"&gt;BrickPi&lt;/a&gt; Mindstorms robot, but at some point I think an asset-database / issue tracker client on the iPad would be a handy tool for our production team&amp;nbsp;.  &lt;/p&gt;
&lt;p&gt;All in all, pretty cool for&amp;nbsp;$6.99!&lt;/p&gt;</content><category term="python"></category><category term="web"></category></entry><entry><title>Pipeline book out in Japan (!)</title><link href="https://theodox.github.io/2014/pipeline_book_japan" rel="alternate"></link><published>2014-07-11T21:57:00-07:00</published><updated>2014-07-11T21:57:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-07-11:/2014/pipeline_book_japan</id><summary type="html">&lt;p&gt;&lt;a href="http://www.borndigital.co.jp/book/5160.html"&gt;Production Pipeline Fundamentals&lt;/a&gt; is on sale in&amp;nbsp;Japan!&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just heard that &lt;a href="http://www.borndigital.co.jp/book/5160.html"&gt;the Production Pipeline book is out in Japan&lt;/a&gt; as of today.&amp;nbsp;Wowsers!  &lt;/p&gt;
&lt;p&gt;This is actually my second time being published in Japan. I also contributed a chapter to &lt;a href="http://webcatplus.nii.ac.jp/webcatplus/details/book/25610405.html"&gt;97 Things Every Game Creator Should Know.&lt;/a&gt;  But still. Japan. I&amp;nbsp;mean&amp;#8230;    &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;:  The books is still up for sale on Amazon:  And it&amp;#8217;s also on the &lt;a href="http://astore.amazon.com/tecsurgui-20"&gt;Tech Art Bookstore&lt;/a&gt;&amp;nbsp;page.&lt;/p&gt;</content><category term="industry"></category></entry><entry><title>Handy link: Python string format cookbook</title><link href="https://theodox.github.io/2014/python_str_format_cookbook" rel="alternate"></link><published>2014-07-09T23:51:00-07:00</published><updated>2014-07-09T23:51:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-07-09:/2014/python_str_format_cookbook</id><summary type="html">&lt;p&gt;A great cheat-sheet for Maya string&amp;nbsp;formatting&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you&amp;#8217;re like me and addicted to using the old-school percent-symbol based string format, the newer bracket-based formatting is probably a bit mysterious. The &lt;a href="https://docs.python.org/2/library/string.html#format-specification-mini-language"&gt;python docs&lt;/a&gt; certainly don&amp;#8217;t help, they seem to be written for C programmers on meth (a help document entitled &amp;#8216;string format specification mini language&amp;#8217; does not scream &amp;#8216;usability&amp;#8217; to me, at any&amp;nbsp;rate).  &lt;/p&gt;
&lt;p&gt;So, many props to Marcus Kazmierczak for his handy &lt;a href="http://mkaz.com/2012/10/10/python-string-format/"&gt;Python String Formatting Cookbook&lt;/a&gt; page. It&amp;#8217;s already saved me a ton of profanity. Here&amp;#8217;s to elevating the discourse of the&amp;nbsp;internet!&lt;/p&gt;</content><category term="python"></category><category term="programming"></category></entry><entry><title>Save The Environment 2: I am the .Egg Man</title><link href="https://theodox.github.io/2014/egg_man" rel="alternate"></link><published>2014-07-05T23:00:00-07:00</published><updated>2014-07-05T23:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-07-05:/2014/egg_man</id><summary type="html">&lt;p&gt;In my last, &lt;a href="save_the_environment"&gt;bumper-sticker-laden post&lt;/a&gt; I offered to share a little bit about the way I pack up my tools for users.  This time I&amp;#8217;ll try to actually describe the process. &lt;img alt="" src="https://s-media-cache-ak0.pinimg.com/736x/28/f5/d8/28f5d8fdf2b0c820e8be553319dbdaec.jpg"&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my last, &lt;a href="save_the_environment"&gt;bumper-sticker-laden post&lt;/a&gt; I offered to share a little bit about the way I pack up my tools for users.  This time I&amp;#8217;ll try to actually describe the&amp;nbsp;process.  &lt;/p&gt;
&lt;p&gt;After a all the buildup, I wish I could make this sound more high tech and impressive. Basically, I just pack up what I have and send it all out to my users in a big ol&amp;#8217; zip file.  The zip ends up on their Maya&amp;#8217;s &lt;span class="caps"&gt;PYTHONPATH&lt;/span&gt;, and gives them exactly the same stuff I had when I created the zip.  That&amp;#8217;s kind of it.  It&amp;#8217;s basically a simplified version of a &lt;a href="http://mrtopf.de/blog/en/a-small-introduction-to-python-eggs/"&gt;python egg&lt;/a&gt;; however since I&amp;#8217;m distributing an entire ecosystem in one shot I&amp;#8217;ve opted to do the packaging myself instead of relying on &lt;a href="https://pypi.python.org/pypi/setuptools"&gt;setuptools&lt;/a&gt; and all of its complex dependency management&amp;nbsp;arrangements.  &lt;/p&gt;
&lt;p&gt;Simple as it is, this system has saved me a huge amount of time and energy over the last few years. It&amp;#8217;s been a long time since I&amp;#8217;ve had to worry about a mysterious import failure or the wrong version of a module.  Simplicity and robustness are very important, especially in the foundation of a pipeline. Of course, they don&amp;#8217;t always make for the most engaging blog posts  But I&amp;#8217;ll do what I can, even if it means resorting to some pretty lame egg&amp;nbsp;puns.  &lt;/p&gt;
&lt;h2&gt;You can&amp;#8217;t make an omelette&amp;nbsp;without&amp;#8230;&lt;/h2&gt;
&lt;p&gt;There actually are some details worth discussing, but before I get into them, I should talk about why this works for the special case of Maya tools - and why it might not work as well for other forms of application&amp;nbsp;development.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://gabrielutasi.com/copyright/gabrielutasi/052307.egg.gif"&gt;&lt;img alt="" src="http://gabrielutasi.com/copyright/gabrielutasi/052307.egg.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My primary problem - the thing I worry most about - is &lt;strong&gt;making sure that all my users are running the same code at the same time&lt;/strong&gt;.  Maya tools are hard enough - it&amp;#8217;s tough to really nail things down when your data structures are just lying around in the scene where users can poke at them.  Between that and the inexorable tick-tock of the game development  clock, I&amp;#8217;ve gotten very resistant to  debugging problems I already solved a week or a month ago and which are only showing up because Jane/Joe Artist doesn&amp;#8217;t like downloading the latest&amp;nbsp;tools.  &lt;/p&gt;
&lt;p&gt;Similarly, it needs to be &lt;strong&gt;hard for an end user to delete or mangle vital stuff&lt;/strong&gt;.  I&amp;#8217;ve had artists at a former company who decided to &amp;#8220;speedup their startup time&amp;#8221; by deleting the file that downloaded the latest tools - a fact which only came to light when their out-of-date data started bringing down nightly builds.  Most users have a few scripts or tools of their own, but I&amp;#8217;m not keen on having unvetted stuff from the intenet being dumped into the same folder where all my tools live - there are lots of ways that can go&amp;nbsp;wrong.  &lt;/p&gt;
&lt;p&gt;Another thing that&amp;#8217;s also important is that the system needs to be &lt;strong&gt;clean&lt;/strong&gt;: it has to be easy to install and to uninstall, and easy for users to switch between toolsets.  I&amp;#8217;ve got to support multiple teams in house and outsources and I don&amp;#8217;t want to worry about micromanaging hundreds of files on other people&amp;#8217;s&amp;nbsp;disks.  &lt;/p&gt;
&lt;p&gt;The last  thing I need  to do is to keep this system &lt;strong&gt;independent of our internal source control&lt;/strong&gt;. Source control&amp;#8217;s real job &amp;#8212; managing change over time &amp;#8212; is hard enough.  Using it as a cheapo distribution service is pushing it into a role it&amp;#8217;s not intended for.  For one thing, many users have reasons (sometimes good, sometimes bad) for opting out of the daily sync ritual.  I don&amp;#8217;t want my users dropping out of sync with the rest of the team on purpose or by accident &amp;#8212; but I&amp;#8217;m also leery of forcing them to sync at a time they didn&amp;#8217;t choose, since I don&amp;#8217;t know what they&amp;#8217;re up to or what other people may have checked in.  Plus, we don&amp;#8217;t always give outsourcers direct access to source control and I don&amp;#8217;t want to have to maintain different systems in and out of&amp;nbsp;house.  &lt;/p&gt;
&lt;p&gt;Besides,  I want to be able to use source control selfishly, to make my own job easier.  I want to track my development and have the ability to debug or roll back or branch as I need while working, without worrying that checking in the wrong file will bring my whole team to a halt.  I once had a team of 80 artists brought to a screeching halt by a guy who checked in a maxScript file that was auto-synced by everybody in the building. Unfortunately, he did it from a unicode text editor - and Max hates unicode in maxScript. The auto-sync, keep-everybody-current system gave everybody the crashing file straight from his incautious checkin &amp;#8212; and, of course, it broke their auto-syncing as well as killing their Maxes. Since then I&amp;#8217;ve been pretty leery of using source control to get things into users&amp;#8217;&amp;nbsp;hands.  &lt;/p&gt;
&lt;h2&gt;How to lay an&amp;nbsp;egg&lt;/h2&gt;
&lt;p&gt;It&amp;#8217;s the sum of all these considerations that gives rise to the method I use &amp;#8212; which is, as I said, just zipping up a complete environment and distributing that directly to users via a net share or an http&amp;nbsp;server.  &lt;/p&gt;
&lt;p&gt;The zip comes with a userSetup.py that checks the shared drive for newer versions and grab it if needed and then adds the zip file to the user&amp;#8217;s &lt;span class="caps"&gt;PATH&lt;/span&gt;.  &lt;em&gt;Rocket Science &lt;span class="caps"&gt;FTW&lt;/span&gt;!&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;This system satisfies most of my key concerns at a&amp;nbsp;shot:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;#8217;s all one piece (well, two if you count _userSetup.py). _That means that every user has exactly the same code - and there are no out-of-date .pyc files lying in wait to confuse&amp;nbsp;things.&lt;/li&gt;
&lt;li&gt;Keeping people up to date is&amp;nbsp;automatic&lt;/li&gt;
&lt;li&gt;It can be delivered to a user&amp;#8217;s personal maya directory - no need to touch the base Maya&amp;nbsp;install&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s outside of source&amp;nbsp;control&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s easy to adapt for multiple projects.  userSetup can check an environment variable to decide between multiple zips, and the zips can coexist happily with each&amp;nbsp;other.&lt;/li&gt;
&lt;li&gt;It&amp;#8217;s trivial to remove: there are no permanent alterations to the local filesystem or the maya&amp;nbsp;installation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most complicated bit - and &amp;#8220;complicated&amp;#8221; here is a pretty relative term - is making sure that the zip file is exactly equivalent to the folder structure I use when I&amp;#8217;m developing. My project folder looks more or less like&amp;nbsp;this:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-1Z9srlWTbMA/U7YY-sLus2I/AAAAAAABIZI/7f4yysrcJA4/s1600/folders.png"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-1Z9srlWTbMA/U7YY-sLus2I/AAAAAAABIZI/7f4yysrcJA4/s1600/folders.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Most of this is what you&amp;#8217;d expect: the .py files are modules, and the folders with the little dots in them are python packages. As long as my project folder is on the Python path, these are all available for import in the usual way.  The mildly interesting bit are the folders highlighted in green; those are external modules like PyMySql and Perforce, which I keep separately so I can manage the legal mumbo-jumbo that comes with redistributing and licensing.  In this example &amp;#8216;external&amp;#8217; is not a package (note the blue parent folder - my &lt;span class="caps"&gt;IDE&lt;/span&gt; paints them blue if they aren&amp;#8217;t on the python path) so none of these packages are going to be on the python path or available for import without a smidge of extra&amp;nbsp;work.  &lt;/p&gt;
&lt;p&gt;On my own machine, where I&amp;#8217;m running from loose files, I add project to my Python path using the wonderful, and often overlooked standard library module site.  site is an alternative method of managing your Python search path - instead of appending paths onto sys.path, you can add directories using using &lt;a href="https://docs.python.org/2/library/site.html"&gt;site.addsitedir()&lt;/a&gt;.  The truly excellent feature of site, though, that it&amp;#8217;s data-driven: when you add a directory with site.addsitedir(), the module will search the folder for text files with the .pth extension and then add any directories specified there as well.   That UL_maya.pth file down near the bottom of the picture is my .pth file: it includes entries for my external modules so that they are automatically included when my project folder is added to the&amp;nbsp;path.  &lt;/p&gt;
&lt;p&gt;Unfortunately, site does not know how to deal with pth files inside a zip file.  So, my startup code includes a little shim which duplicates the functionality of &lt;code&gt;addsitedir&lt;/code&gt;. Luckily it&amp;#8217;s pretty&amp;nbsp;simple:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
&lt;span class="sd"&gt;ul.paths.py&lt;/span&gt;

&lt;span class="sd"&gt;mimics the site module: process .pth files identically for zip and loose file distributions  &lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;zipfile&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_pth_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;yield&lt;/span&gt;

    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;read_pth_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
                &lt;span class="k"&gt;continue&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
                &lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  
                &lt;span class="k"&gt;continue&lt;/span&gt;  
            &lt;span class="n"&gt;new_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{0}/{1}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;new_path&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FolderSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dirs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.pth&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
                    &lt;span class="n"&gt;clean_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;roots&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
                    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clean_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ZipSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SiteProcessor&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pth_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;archive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ZipFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;all_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;namelist&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;all_names&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;pth_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;all_names&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.pth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pthfile&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pth_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;local_pth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pthfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;contents&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;archive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pthfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;U&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;local_pth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;contents&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;include_site_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;  &lt;/span&gt;
&lt;span class="sd"&gt;    for every .pth file in or under each root, process the pth file  &lt;/span&gt;
&lt;span class="sd"&gt;    in the same way as site.addsitedir()  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;bootstrap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path shim&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_root&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;zipfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_zipfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;ZipSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;FolderSiteProcessor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;each_root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This way, adding the whole environment just requires calling &lt;code&gt;include_site_files()&lt;/code&gt;. Under the hood the Processor classes will read the .pth files and process them the same way &lt;code&gt;site.addsitedir&lt;/code&gt; does: adding named folders to the python path, ignoring comments, and executing&amp;nbsp;imports.  &lt;/p&gt;
&lt;p&gt;I don&amp;#8217;t use that auto-import functionality right now but it would work nicely if you wanted to create a self-registering plugin system where each plugin was a zip of its own.  If you were feeling adventurous, you could bootstrap your whole Maya toolset by adding an import statement to the end of a .pth file in the zip.  As I said, that&amp;#8217;s not what I do right now -  I currently call my main bootstrap routine from userSetup.py,  since I&amp;#8217;m habitually averse to relying the side effects of imports for important&amp;nbsp;jobs.  &lt;/p&gt;
&lt;h2&gt;If (eggs) in&amp;nbsp;one_basket:&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://stylebook-p.s3.amazonaws.com/prod/assets/5018bfdd15121/5018bfdd15121-large.jpg"&gt;&lt;img alt="" src="http://stylebook-p.s3.amazonaws.com/prod/assets/5018bfdd15121/5018bfdd15121-large.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s userSetup.py that provides the  actual link between the zip file and a running copy of Maya. I like to keep it as simple as I can, since it&amp;#8217;s the hardest part of the system to update.  All it really needs to do is download the latest zip file (from a shared network drive  or via http)  and shim it in with site.addsitedir.  Here&amp;#8217;s a very simple&amp;nbsp;example:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;This is an example userSetup.py. It should be copied into  &lt;/span&gt;
&lt;span class="sd"&gt;one of the  user&amp;#39;s MAYA_SCRIPT_DIR folders (typically, the one for the   &lt;/span&gt;
&lt;span class="sd"&gt;current version, like &amp;#39;2014x64&amp;#39;,  but it works in the generic one as well)  &lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;site&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;ZIP_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAYA_ZIP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mayatools.zip&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_startup_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_globals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;tools_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAYA_DEV&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tools_root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
         &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addsitedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expandvars&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tools_root&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;script_dirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAYA_SCRIPT_PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;script_dirs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;tools_root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sep&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ZIP_NAME&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tools_root&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
                &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addsitedir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tools_root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
                &lt;span class="k"&gt;break&lt;/span&gt;  
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;ul.bootstrap&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;bootstrap&lt;/span&gt;  
    &lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bootstrap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_globals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;_startup_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;globals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  
    &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;_startup_&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You&amp;#8217;ll note that nothing is really going on here: just download the zip, add it to the path, and call the bootstrap module. End of&amp;nbsp;story.  &lt;/p&gt;
&lt;p&gt;This is because you want to keep all the real work inside your bootstrap module. If you try to do anything fancy in userSetup itself, you have to worry about version drift: what happens if the contractor machine in the corner gets turned on after a year of downtime, with a userSetup that&amp;#8217;s many versions behind?  Moreover, you have no way of preventing users from messing with userSetup for their own reasons: if the code is simple, it&amp;#8217;s much less likely to be broken by an adventurous&amp;nbsp;artists.   &lt;/p&gt;
&lt;p&gt;The bootstrapper module itself is where all of the complex work takes place:  it knows how to unpack the binary resources like plugins or icons from the zip file if they have changed,  how to turn on persistent scriptJobs , and how to load menu items &amp;#8212; all the zillions of things you want to do when you set up you environment. Since it provides a single entry point, it&amp;#8217;s a great opportunity to put some order and discipline into your setup process: it&amp;#8217;s far safer than importing dozens of tools or modules in a long userSetup that&amp;#8217;s not versioned or updated&amp;nbsp;centrally.  &lt;/p&gt;
&lt;p&gt;You might notice that all the information needed by userSetup is stashed into environment variables. That makes it easy to boot different environments by launching Maya with the right settings; it&amp;#8217;s easy to give the users batch files which launch the correct versions of the tools by just setting the variables correctly. This has the nice side effect of supporting nonstandard locations transparently - there&amp;#8217;s always that one artist who insists on keeping things on an X: drive to consider.  It&amp;#8217;s easy to see how this could be done with config files rather than env vars, the logic is so simple that the details hardly&amp;nbsp;matter.  &lt;/p&gt;
&lt;p&gt;One evolutionary step forward I haven&amp;#8217;t used in production is to move the userSetup / zip pair to a &lt;a href="http://techartsurvival.blogspot.com/2014/01/mayas-mildy-magical-modules.html"&gt;Maya module&lt;/a&gt;.  That would allow for more complex arrangements such as a shared core environment with branch or project specific additions; it would also mean that toolset management would be done by enabling or disabling modules rather than swapping environment variables.  The main hassle would be the fact that a user could simultaneously enable more than one toolset and get random results, since you could never be sure which version of a given module you were getting. It might work better as an outsource-friendly mod than as a replacement for the variable-swapping&amp;nbsp;setup.  &lt;/p&gt;
&lt;h2&gt;Hot times in the hen&amp;nbsp;house&lt;/h2&gt;
&lt;p&gt;The zipped environment is created by a simple Python build program.  There&amp;#8217;s not much magic here either.  The build script runs unit tests and aborts the packaging process if they fail.  If the tests pass, the builder gets the latest versions of any external resources (like icons, or binary plugins), and strips out some stuff like unit tests that doesn&amp;#8217;t need to get to the users.   I add a little bit of metadata &amp;#8212; basically, a text file &amp;#8212; to the zip so I can quickly find out which distribution is running; this is a great way avoid those headsmacking &amp;#8220;I fixed that bug a week ago, but user X hasn&amp;#8217;t restarted Maya in two weeks&amp;#8221;&amp;nbsp;mysteries.   &lt;/p&gt;
&lt;p&gt;One nice refinement that we discovered almost by accident is using the &lt;a href="https://docs.python.org/2/library/py_compile.html"&gt;py_compile &lt;/a&gt;module to pre-compile the whole shebang before packing.  Our system ships only pyc files instead of pys.  This speeds up load times and slims down the zip file by a noticeable amount. However the most important thing it does is make sure that every module - even those with no unit tests, which are alas too numerous - is at least minimally importable. py_compile will complain if it encounters a module with a syntax error that cannot be compiled. Over the years this has saved me countless small humiliations by making sure that stupid typos and oversights don&amp;#8217;t result in a busted&amp;nbsp;Maya.  &lt;/p&gt;
&lt;p&gt;These days I use a little python program which polls my GitHub repositories for changes and tries to create a new build when a checkin is pushed to the master branch.  The server handles running multiple builds for different Maya versions: When Autodesk rev&amp;#8217;ed the version of Python inside Maya, it meant that we needed different .pyc&amp;#8217;s for different versions of Maya. For most of the last several years, though,  I simply used a zip script from a command line or as an external tool in my &lt;span class="caps"&gt;IDE&lt;/span&gt; and that answered fine for most purposes.  Moving to a server is just a way of making it more painless for a team to do the right thing automatically instead of appointing one person as &amp;#8216;build master&amp;#8217; and making them sync and push the button to start a&amp;nbsp;build. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Extra credit: Can you guess who the build master was, and why he decided to write the&amp;nbsp;server?   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Hatchlings&lt;/h2&gt;
&lt;p&gt;One problem I don&amp;#8217;t have to solve for this application - but one which looms very large in the setuptools-distutils-easy_install end of Pythonland - is dealing with a diversity of &lt;span class="caps"&gt;OS&lt;/span&gt;&amp;#8217;s and hardware.  I&amp;#8217;m happy not to try to deal with things like recompiling a slew of C extension modules for &lt;span class="caps"&gt;DEC&lt;/span&gt;-Alpha chips running &lt;span class="caps"&gt;OS&lt;/span&gt;/2 or whatever. I&amp;#8217;ve only got Windows users currently (though pretty much everything I write works on &lt;span class="caps"&gt;OSX&lt;/span&gt;, since I often develop on my laptop).  This removes, for me, the primary appeal of the traditional python distribution pipeline, which is the option of automatically creating whatever esoteric binaries you need just by typing a few lines at the command&amp;nbsp;prompt.  &lt;/p&gt;
&lt;p&gt;The price for not letting users compile on their machines is that I have to pre-package the right binaries. To the extent that I can, I end-run around the problem by using pure python modules in preference to binary alternatives, such as using &lt;a href="https://github.com/PyMySQL/PyMySQL"&gt;PyMySql&lt;/a&gt; in preference to MySQLdb, or elementTree instead of &lt;a href="http://lxml.de/"&gt;lXml&lt;/a&gt;. Inevitably, this does give away some performance (rarely so much that I&amp;#8217;m bothered by it) but it hugely enhances portability.  The unavoidable exceptions are things like Maya plugins or the Perforce &lt;span class="caps"&gt;API&lt;/span&gt;, both very finicky about &lt;span class="caps"&gt;OS&lt;/span&gt; and bit-depth; these have to be distributed as part of my zip files and extracted at startup time.  The bootstrapper module includes a manifest which tells it which files to use for which Maya/&lt;span class="caps"&gt;OS&lt;/span&gt;/bit-depth combination, and uses that info to makes sure that things get delivered to the right&amp;nbsp;place.   &lt;/p&gt;
&lt;p&gt;The only complication I&amp;#8217;ve run into is that a user (often, me) is may be running multiple maya sessions, and a later one may want to unpack a new version of a binary plugin while an older session is still using a previous version. Unsurprisingly, you can&amp;#8217;t overwrite the old one since Maya is using it. I haven&amp;#8217;t quite figured out what to do in that situation, beyond displaying an error dialog and suggesting that the user restarts all of the Maya instances using the same plugin.  For the time being the overlap between tool changes and multiple Maya sessions is rare enough that I tolerate it. It would be possible to dump things into a temp directory in that case, but honestly it sounds like overkill even to&amp;nbsp;me.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://stylebook-p.s3.amazonaws.com/prod/assets/4ff82077d338e/4ff82077d338e-large.jpg"&gt;&lt;img alt="" src="http://stylebook-p.s3.amazonaws.com/prod/assets/4ff82077d338e/4ff82077d338e-large.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Counting your&amp;nbsp;chickens&lt;/h2&gt;
&lt;p&gt;So, that&amp;#8217;s kind of it. It&amp;#8217;s not very sexy but it&amp;#8217;s been extremely useful for me over the last 4 years - the amount of mystery which this system removed from my life is uncountable.  Because the actual code I use is pretty tied up with work-specific problems, I have not ventured to make a cleaned up, genericised version for public consumption so far, though if there were a lot of interest I could probably whip up a cleanroom&amp;nbsp;version.  &lt;/p&gt;
&lt;p&gt;Hope other folks find this one useful. I know it&amp;#8217;s certainly ~~accompanied~~ saved my bacon&amp;nbsp;!  &lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="distribution"></category><category term="tools"></category></entry><entry><title>Binary bonanza!</title><link href="https://theodox.github.io/2014/binary_bonanza" rel="alternate"></link><published>2014-06-26T20:21:00-07:00</published><updated>2014-06-26T20:21:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-06-26:/2014/binary_bonanza</id><summary type="html">&lt;p&gt;Some useful links to pre-compiled python binaries for&amp;nbsp;Maya&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here&amp;#8217;s a &lt;a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/"&gt;very complete source for a variety of python package binary distributions&lt;/a&gt;, covering a pretty broad variety of platforms, python versions and bit depths.  A good page to bookmark next time your scrounging for a rare extension module you can&amp;#8217;t&amp;nbsp;compile.&lt;/p&gt;</content><category term="maya"></category><category term="python"></category></entry><entry><title>mGui updates</title><link href="https://theodox.github.io/2014/mgui_updates_1" rel="alternate"></link><published>2014-06-24T22:10:00-07:00</published><updated>2014-06-24T22:10:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-06-24:/2014/mgui_updates_1</id><summary type="html">&lt;p&gt;Some new features for &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt;, including progress bars, menu loading from &lt;span class="caps"&gt;YAML&lt;/span&gt; files and&amp;nbsp;scriptJobs&lt;/p&gt;</summary><content type="html">&lt;p&gt;For anybody whos been following the mGui Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; construction kit posts, I&amp;#8217;ve added a few fixes and tweaks to the GitHub project in the last couple of&amp;nbsp;weeks:&lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/theodox/mGui/blob/master/mGui/progress.py"&gt;mGui.progress&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The progress module wraps Maya&amp;#8217;s &lt;code&gt;progressBar&lt;/code&gt; command for mGui style coding of progress&amp;nbsp;bars.   &lt;/p&gt;
&lt;p&gt;There are two classes in the module;  &lt;code&gt;ProgressBar&lt;/code&gt; is the generic version and &lt;code&gt;MainProgressBar&lt;/code&gt; always points at Maya&amp;#8217;s main progress bar.  Both classes have &lt;code&gt;start()&lt;/code&gt;, &lt;code&gt;update()&lt;/code&gt; and &lt;code&gt;end()&lt;/code&gt; methods instead of Maya&amp;#8217;s clunky &lt;code&gt;cmds.progressBar(name, e=True, beginProgress=1)&lt;/code&gt; and so on.  They also both have an &lt;code&gt;iter()&lt;/code&gt; method, which will loop over a generator expression and update the progress bar for each yield then pass along the value. This allows simple idioms&amp;nbsp;like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGui.progress&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MainProgressBar&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;list_files&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="c1"&gt;# pretend this is as long, slow function...  &lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listdir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;

&lt;span class="n"&gt;pb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MainProgressBar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each_file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list_files&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;each_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="c1"&gt;# here&amp;#39;s where you do something with the results&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So you can update the progress bar without unduly intertwining the &lt;span class="caps"&gt;GUI&lt;/span&gt; update and the program&amp;nbsp;logic.  &lt;/p&gt;
&lt;h4&gt;&lt;a href="https://github.com/theodox/mGui/blob/master/mGui/menu_loader.py"&gt;mGui.menu_loader&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The menu_loader module will create menus from a &lt;a href="http://pyyaml.org/wiki/PyYAMLDocumentation"&gt;&lt;span class="caps"&gt;YAML&lt;/span&gt;&lt;/a&gt; data file.  It does a little bit of introspection to figure out how to create the items and attach their handlers to functions. This makes it easy to set up a menu with several items from a single setup&amp;nbsp;routine.&lt;/p&gt;
&lt;p&gt;The menu data is a text-based &lt;span class="caps"&gt;YAML&lt;/span&gt; file that looks like&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;MMenu&lt;/span&gt;  
    &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="n"&gt;UndeadLabs&lt;/span&gt;  
    &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Undead&lt;/span&gt; &lt;span class="n"&gt;Labs&lt;/span&gt;  
    &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;MMenuItem&lt;/span&gt;  
            &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;About&lt;/span&gt;  
            &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;About&lt;/span&gt; &lt;span class="n"&gt;Undead&lt;/span&gt; &lt;span class="n"&gt;Labs&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;  
            &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;About this UndeadLabs tool setup&amp;quot;&lt;/span&gt;  
            &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aboutDialog&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;

        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="n"&gt;MMenuItem&lt;/span&gt;  
            &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;RemoteDebugger&lt;/span&gt;  
            &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="n"&gt;Remote&lt;/span&gt; &lt;span class="n"&gt;Debugger&lt;/span&gt;  
            &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;Stop&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;debugger&lt;/span&gt;  
            &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remoteDebug&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remote_debugger_dialog&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And loading the menu is as simple&amp;nbsp;as:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mGui.menu_loader&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;loader&lt;/span&gt;  
&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_menu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path/to/undeadlabs.YAML&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;a href="https://github.com/theodox/mGui/blob/master/mGui/scriptJobs.py"&gt;mGui.scriptJobs&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The scriptJobs module adapts the event model for use with scriptJobs. A ScriptJobEvent is a derivative of Event which allows you to hook multiple handlers to a single scriptjob (in the same way that the other Event classes allow for multicast&amp;nbsp;delegates):  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGui.scriptJobs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_selected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="n"&gt;sj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptJobEvent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SelectionChanged&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;sj&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;print_selected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As with all the mGui Event classes, you can add multiple handlers to  single&amp;nbsp;event:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sj&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;some_other_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The module also includes named subclasses to simplify setup. That way you can do things&amp;nbsp;like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;closing_sj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RecentCommandChanged&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;closing_sj&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;close_handler&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is a bit nicer and less typo prone if you use an autocompleting &lt;span class="caps"&gt;IDE&lt;/span&gt;.  &lt;/p&gt;</content><category term="mGui"></category><category term="Maya"></category></entry><entry><title>From the annals of bug subtlety</title><link href="https://theodox.github.io/2014/subtle_bug" rel="alternate"></link><published>2014-06-20T11:39:00-07:00</published><updated>2014-06-20T11:39:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-06-20:/2014/subtle_bug</id><summary type="html">&lt;p&gt;An object lesson in the way real bugs&amp;nbsp;happen.&lt;/p&gt;</summary><content type="html">&lt;p&gt;From the annals of the truly screwed up comes an object lesson in why &lt;strong&gt;it&amp;#8217;s really nice to have a debugger&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m porting a biggish python codebase to support multiple OSs  and maya versions.  As I move things around I try to use the opportunity to shore up test coverage.  And it always feels like the most boring chore imaginable, until something like this crops&amp;nbsp;up.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve got an exporter framework that I share between projects and files, and I have to move it from Maya 2011-only to support multiple versions.  It&amp;#8217;s important code, so it&amp;#8217;s tested - but the test is really dumb: it creates a test scene, imports the test framework, and calls one&amp;nbsp;function. &lt;/p&gt;
&lt;p&gt;But, for some reason, running the tests in 2014 never works - even though I can manually execute the exact steps in a regular copy of maya and all is&amp;nbsp;well.&lt;/p&gt;
&lt;p&gt;So I threw it under the debugger &amp;#8212; &lt;a href="http://www.jetbrains.com/pycharm/"&gt;_PyCharm &lt;span class="caps"&gt;FTW&lt;/span&gt;!__&lt;/a&gt; &amp;#8212; and started stepping through. No dice, everything seemed &lt;span class="caps"&gt;OK&lt;/span&gt; but still the test failed: it could not find my test objects. Finally, in desperation, I started stepping though the test and issuing an ls() after every step&amp;#8230; and I found that the break wasn&amp;#8217;t caused by running code - it was caused by importing my module.  I didn&amp;#8217;t call it - just &lt;em&gt;imported&lt;/em&gt; it.  &lt;span class="caps"&gt;WTF&lt;/span&gt;?&lt;/p&gt;
&lt;p&gt;It turns out that &lt;em&gt;importing PyMel was wiping my test scene&lt;/em&gt; in 2014! The tests all run under maya.standalone, and the bug only shows up there, which is why just doing it by hand in maya wasn&amp;#8217;t showing the same&amp;nbsp;symptoms.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s my repro&amp;nbsp;case:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.cmds&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cmds&lt;/span&gt;
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# [u&amp;#39;pCube1&amp;#39;, u&amp;#39;polyCube1&amp;#39;]&lt;/span&gt;

&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# [u&amp;#39;front&amp;#39;, u&amp;#39;pCube1&amp;#39;, u&amp;#39;persp&amp;#39;, u&amp;#39;side&amp;#39;, u&amp;#39;top&amp;#39;]&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymel.core&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pm&lt;/span&gt;
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# [u&amp;#39;front&amp;#39;, u&amp;#39;persp&amp;#39;, u&amp;#39;side&amp;#39;, u&amp;#39;top&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a 100% repro in maya.standalone - but &lt;em&gt;not&lt;/em&gt; in &lt;span class="caps"&gt;GUI&lt;/span&gt; maya, where the bug does not&amp;nbsp;occur.&lt;/p&gt;
&lt;p&gt;Is this true for everybody&amp;nbsp;else?  &lt;/p&gt;
&lt;p&gt;The workaround is to import pymel earlier so that the destruction doesn&amp;#8217;t affect anything&amp;nbsp;important. &lt;/p&gt;
&lt;p&gt;But&amp;#8230; &lt;strong&gt;ouch!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://i0.wp.com/www.therefinedgeek.com.au/wp-content/uploads/2013/09/Picard-Facepalm.jpg"&gt;  &lt;/p&gt;</content><category term="programming"></category><category term="maya"></category><category term="python"></category><category term="bugs"></category></entry><entry><title>I think this does not count as a meme gif :)</title><link href="https://theodox.github.io/2014/not_a_meme_gif" rel="alternate"></link><published>2014-06-14T12:34:00-07:00</published><updated>2014-06-14T12:34:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-06-14:/2014/not_a_meme_gif</id><summary type="html">&lt;p&gt;Says it&amp;nbsp;all&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://ft.trillian.im/358c43ab64c4c31c809b49887dda431711fc5c26/6q3MtgQ520CBZbqz6G6Sum7r2HTDr.jpg"&gt;&lt;img alt="" src="http://ft.trillian.im/358c43ab64c4c31c809b49887dda431711fc5c26/6q3MtgQ520CBZbqz6G6Sum7r2HTDr.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="techart"></category></entry><entry><title>Chromosaurus!</title><link href="https://theodox.github.io/2014/chromosaurus" rel="alternate"></link><published>2014-06-06T21:54:00-07:00</published><updated>2014-06-06T21:54:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-06-06:/2014/chromosaurus</id><summary type="html">&lt;p&gt;An homage to Chromosaurus, a classic of early &lt;span class="caps"&gt;CG&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This 1985 short from Pacific Data Images (&lt;a href="http://en.wikipedia.org/wiki/Pacific_Data_Images"&gt;the X chromosome in the &lt;span class="caps"&gt;DNA&lt;/span&gt; of Dreamworks Animation&lt;/a&gt;) was extremely popular in the late 80&amp;#8217;s / early 90&amp;#8217;s &lt;span class="caps"&gt;CG&lt;/span&gt; compilation &lt;span class="caps"&gt;VHS&lt;/span&gt; market, frequently accompanied by trippy&amp;nbsp;electronica.   &lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/zwKNmGNWNwQ" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Of special note: this is well before the the popularization of our mesh skinning techniques: all the moving parts are jointed, and the ripples in the tail are all damped sine waves instead of skeletal animation.  I&amp;#8217;m pretty sure these aren&amp;#8217;t raytraced, it looks to me like a tweaked reflection&amp;nbsp;map.  &lt;/p&gt;
&lt;p&gt;One of the saddest generation gap experiences of my life is trying to explain to my 14 year old son, who&amp;#8217;s never known a world without casually photoreal &lt;span class="caps"&gt;CG&lt;/span&gt;, why this set a generation of nerdly hearts afire.  At least he appreciated the&amp;nbsp;soundtrack.  &lt;/p&gt;</content><category term="cg"></category></entry><entry><title>Save the environment!</title><link href="https://theodox.github.io/2014/save_the_environment" rel="alternate"></link><published>2014-06-03T10:30:00-07:00</published><updated>2014-06-03T10:30:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-06-03:/2014/save_the_environment</id><summary type="html">&lt;p&gt;A grumpy look at the state of python tools&amp;nbsp;distribution&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://plus.google.com/112207898076601628221"&gt;+Rob Galanakis&lt;/a&gt;  posted this on Google+, and as I started to reply I realized this would be a useful thing to put out to a wider audience.  Or maybe useful isn&amp;#8217;t the right word - it&amp;#8217;s just something that bugs me so I want to bloviate about&amp;nbsp;it.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey +Cory Mogk , +Brad Clark, +Steve Theodore , and whoever else in #techart . Has anyone figured out a viable model for reusing Python libraries in Maya, like other Python applications with pip/virtualenv/requirements.txt do? Is there a conversation&amp;nbsp;anywhere?﻿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The short answer to Rob&amp;#8217;s question is : I&amp;#8217;ve tried to go this route, but I couldn&amp;#8217;t get a virtualenv-based approach to match for my needs.   For the long answer, read&amp;nbsp;on&amp;#8230;  &lt;/p&gt;
&lt;h2&gt;If You&amp;#8217;re Not Outraged, You&amp;#8217;re Not Paying&amp;nbsp;Attention&lt;/h2&gt;
&lt;p&gt;Like &lt;a href="http://lucumr.pocoo.org/2014/1/27/python-on-wheels/"&gt;a lot of people&lt;/a&gt;, I&amp;#8217;m pretty unhappy about &lt;a href="http://www.simplistix.co.uk/presentations/python_package_management_08/python_package_management_08.pdf"&gt;the state of python environment management&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.faithvillage.com/files/galleries/acf1e1575cba5c2dcbb9966017bab1622c3bfee9-7aaec91bedc07579a475225ff6467f07/thumbs/acf1e1575cba5c2dcbb9966017bab1622c3bfee9-7aaec91bedc07579a475225ff6467f07-hero_image-resize-260-620-fill.jpg"&gt;&lt;img alt="" src="http://www.faithvillage.com/files/galleries/acf1e1575cba5c2dcbb9966017bab1622c3bfee9-7aaec91bedc07579a475225ff6467f07/thumbs/acf1e1575cba5c2dcbb9966017bab1622c3bfee9-7aaec91bedc07579a475225ff6467f07-hero_image-resize-260-620-fill.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There&amp;#8217;s no dependable, low-maintenance way for people to distribute things &amp;#8212; or to cleanly install things that depend on other things. Even the best tools are wonky, jacked up scaffolding on layers of older, crummier&amp;nbsp;code.  &lt;/p&gt;
&lt;p&gt;The boundaries of any particular piece of Python are porous to begin with, both because of cross imports and also python&amp;#8217;s magical morphing and monkey patching abilities - but the messy state of the distribution ecosystem makes things far worse than they should be. Figuring out how to correctly set up a new module in this ambiguous environment is treacherous. It&amp;#8217;s not for nothing that the &amp;#8220;easy&amp;#8221; installation tools, pip and easy_install between them have 17,000+ questions on&amp;nbsp;StackOverflow!  &lt;/p&gt;
&lt;p&gt;The typical &lt;a href="http://stackoverflow.com/questions/4750806/how-to-install-pip-on-windows"&gt;easy_install / pip route&lt;/a&gt; is tolerable, more or less, if you&amp;#8217;re coder, and you live in a *nixy everybody-is-a-coder and everybody-has-a-compiler environment. When you&amp;#8217;re busy experimenting with different frameworks and shiny new toys that show up on &lt;a href="https://pypi.python.org/pypi"&gt;the cheeseshop&lt;/a&gt;, it&amp;#8217;s great to get all that cool free stuff with just a a few keystrokes.  But this is &amp;#8220;easy&amp;#8221; only in the sense that hand editing config files to set up a web server is &amp;#8220;easy&amp;#8221;: if you&amp;#8217;re technically confident, willing to debug anomalies, and have enough background knowledge to sort of the hiccups you&amp;#8217;ll be fine. But that&amp;#8217;s not &amp;#8220;easy&amp;#8221; for 99% of humanity, that&amp;#8217;s easy for hardcore&amp;nbsp;nerds.   &lt;/p&gt;
&lt;p&gt;The Python distribution ecosystem just isn&amp;#8217;t&amp;#8230; well&amp;#8230; Pythonic.  It embarrassingly fails the &lt;a href="http://legacy.python.org/dev/peps/pep-0020/"&gt;pythonic&amp;nbsp;principle&lt;/a&gt;  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;There should be one-- and preferably only one --obvious way to do it.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;since there are &lt;a href="http://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2"&gt;at least 4 big toolsets&lt;/a&gt; (setuptoools, distutils, distribute and distribute 2) and none of them is perfect. All rely on a mixture of static data and scripts that react to the state of your local machine, so installing stuff can provide different results from different orders of operation or different environment settings.  It also fails&amp;nbsp;both  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Simple is better than complex.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and     &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    Complex is better than complicated.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since the operations you need to perform are often obscure and obscurely interdependent.  Even on a mac, which (being *nixy) should be a much friendlier environment for the live-install approach, I&amp;#8217;ve had serious nightmares &amp;#8212; &lt;a href="http://techartsurvival.blogspot.com/2013/12/and-i-thought-we-had-it-bad.html"&gt;trying to set up Django was like a &amp;amp;!*^#&amp;amp;^$ Kafka novel.&lt;/a&gt;  To some degree my bad luck there reflects failure to live up&amp;nbsp;to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    In the face of ambiguity, refuse the temptation to guess.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;because many of the problems come from a welter of competing installation scripts and tools that are constantly trying to make things &amp;#8220;easy&amp;#8221; for one application in ways that make them harder for&amp;nbsp;others.  &lt;/p&gt;
&lt;p&gt;To be fair, the Python universe is so diverse that it&amp;#8217;s almost beyond the possibility of rational management : a big product like &lt;a href="http://plone.org/documentation/manual/upgrade-guide/version/upgrading-plone-4.2-to-4.3/updating-package-dependencies"&gt;Plone &lt;/a&gt;can involve literally hundreds of dependencies including a mix of python and compiled code that has to run on dozens of platforms.  Even if 99% of them install flawlessly, the remainders still add up to (at best ) a long, frustrating afternoon of  head-scratching, doc-reading forensics.  It&amp;#8217;s &lt;span class="caps"&gt;DLL&lt;/span&gt; hell all over&amp;nbsp;again.  &lt;/p&gt;
&lt;p&gt;It&amp;#8217;s enough to make you long for a blankety-blank InstallShield&amp;nbsp;wizard.   &lt;/p&gt;
&lt;p&gt;On the receiving end, things are just as confusing and intimidating.  Because Python is so multi-platform, lots of packages expect you to be able to compile your own binaries, which is rarely a trivial undertaking even for coders (at least, for people who don&amp;#8217;t do much non-python programming) and is petrifying for end users. More dangerous, though, is the fact that not everybody does a great job of tracking their own dependencies or knowing their own requirements.  If package X will works with version 2.1 of package Y, but not with 2.2  upgrading Y to 2.35 will break X.  And  of course Y 2.35 might have come along after the author of package X has moved on to other projects.  And Y 2.2 may be required by package Z, and get upgraded automatically when you grab Z to check it&amp;nbsp;out.  &lt;/p&gt;
&lt;p&gt;All of this puts us in the rotten position where installing something new has the potential to break existing code. The user is the one who has to figure that out and work around it, and the fix is often &amp;#8220;you can&amp;#8217;t do this and that in the same install unless you write a patch&amp;nbsp;yourself.&amp;#8221;   &lt;/p&gt;
&lt;p&gt;&lt;a href="https://pip.readthedocs.org/en/1.0.1/"&gt;pip&lt;/a&gt; and &lt;a href="http://stackoverflow.com/questions/6344076/differences-between-distribute-distutils-setuptools-and-distutils2"&gt;buildout&lt;/a&gt; do a heroic job of trying to organize all this chaos. However the underlying problem is _extremely _hard, because the foundations are shaky. You&amp;#8217;ve got decades&amp;#8217; worth of code, full of shadowy, hard-to-track dependencies, made by hundreds of different hands with widely varying levels of care and forethought.  The  requirements for packages may not even be clear to their authors: do you know every nuance of the version differences in the packages you rely on? Do you always know when you&amp;#8217;re exploiting a behavior that the developers don&amp;#8217;t like and want to&amp;nbsp;change?   &lt;/p&gt;
&lt;p&gt;Hell, I cannot honestly say that for my &lt;em&gt;own&lt;/em&gt; code all the&amp;nbsp;time.  &lt;/p&gt;
&lt;p&gt;The short version of all this: being able to install stuff is not the same as maintaining a healthy environment.  Just ask all your older relatives whose machines sport seventeen different internet&amp;nbsp;toolbars.  &lt;/p&gt;
&lt;h2&gt;Habitat&amp;nbsp;Crisis!&lt;/h2&gt;
&lt;p&gt;If that all sounds bad&amp;#8230; well, in the technical art / Maya context, it&amp;#8217;s &lt;em&gt;worse&lt;/em&gt;.  For a couple of&amp;nbsp;reasons:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://rlv.zcache.com/habitat_for_two_manatees_bumper_sticker-r4dabf424d562476183df7d3644afd8f8_v9wht_8byvr_512.jpg"&gt;&lt;img alt="" src="http://rlv.zcache.com/habitat_for_two_manatees_bumper_sticker-r4dabf424d562476183df7d3644afd8f8_v9wht_8byvr_512.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First, and most importantly, artist users are aren&amp;#8217;t going to accept a &amp;#8220;real&amp;#8221; command-line-and-text-file based system on their own, even if we had one. That means the TAs have to do it ~~automagically~~ remotely, which is a non-trivial tech challenge.  All too often &amp;#8216;remote installation&amp;#8217; translates to &amp;#8216;send some poor sucker running around typing stuff for the artists while they everybody stands around waiting to get back to work.&amp;#8217;   And wait till the next big update happens when somebody&amp;#8217;s on vacation; suddenly they&amp;#8217;re out of sync with the rest of the team and generating weird issues that are hard to debug. A first class ticket to &amp;#8216;It works on my machine&amp;#8217;&amp;nbsp;land!  &lt;/p&gt;
&lt;p&gt;All tech support is made more difficult by a diversity of environments: that&amp;#8217;s why console games are easier to make than &lt;span class="caps"&gt;PC&lt;/span&gt; games even though the underlying tech is the same.  Asking your artists to maintain their own Python ecosystem is like asking your teenage kids to clean their rooms: if they do it at all, it won&amp;#8217;t be done that well enough to justify the arguing you need to get it done at all. It&amp;#8217;s hard enough to get a big art team to stay in sync with simple stuff like &amp;#8216;always get latest in perforce&amp;#8217; or &amp;#8216;set this environment variable&amp;#8217;.   So&amp;#8230; managing a complex programming&amp;nbsp;environment?  &lt;/p&gt;
&lt;p&gt;In a shell&amp;nbsp;window?  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Seriously?&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;To some degree this is a moot point: no matter your preferences, you might not have the kind of access you need to use python&amp;#8217;s admin level tools anyway.  If you have to work with outsourcers, as I do,  you don&amp;#8217;t have the option of ~~forcing your users at gunpoint~~ empowering your users to manage their own setups. In a lot of places (China especially) you can&amp;#8217;t count on the end user having admin privileges (thus, no writing into the Maya directory) or always-on internet access (thus, no&amp;nbsp;pip/easy_install).   &lt;/p&gt;
&lt;p&gt;Even if you have the rights, it might not be a good idea.  Outsource teams don&amp;#8217;t like having to reconfigure their whole workspace to accommodate a client who is here today and gone tomorrow. They want a clean, disposable, drop-in setup that they can turn on and off quickly.  A nice discrete footprint removes a lot of hassle from the relationship.  Done properly, it also saves a lot of remote support time and money.  Simplicity&amp;nbsp;pays.  &lt;/p&gt;
&lt;p&gt;That&amp;#8217;s true even for pure in-house development: any company that supports multiple teams needs the same flexibility to swap out toolsets easily without going deep into machine- or user-level configuration. At work I have people hopping between two or three distinct toolsets during an ordinary day, and it&amp;#8217;s vital that they can do this without wasting time or thought on how things like setting setting all sorts of environment variables or remembering to launch Maya from the right command&amp;nbsp;line.  &lt;/p&gt;
&lt;h2&gt;Save the Endangered&amp;nbsp;Pythons!&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.kingsnake.com/blog/uploads/zombie.JPG"&gt;&lt;img alt="" src="http://www.kingsnake.com/blog/uploads/zombie.JPG"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All this adds up to a some pretty stark requirements for Maya python&amp;nbsp;tools:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You want a Python environment that&amp;#8217;s uniform for all your&amp;nbsp;users&lt;/li&gt;
&lt;li&gt;You want to be able to have more than one environment side by&amp;nbsp;side&lt;/li&gt;
&lt;li&gt;You want your environments to be easy to distribute - and easy to&amp;nbsp;delete &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the wider Python world, this would automatically make you think &lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://pypi.python.org/pypi/virtualenv"&gt;virtualenv&lt;/a&gt; is the most popular solution to the messy round-robin of versioning, dependency management, and distribution.  While it&amp;#8217;s all sorts of sophisticated under the hood (here&amp;#8217;s some &lt;a href="http://blip.tv/pycon-us-videos-2009-2010-2011/pycon-2011-reverse-engineering-ian-bicking-s-brain-inside-pip-and-virtualenv-4899496"&gt;details here&lt;/a&gt;) it&amp;#8217;s conceptually very simple: cut all the crap and just make a separate Python for every project, containing exactly what we need!  Throw in &lt;a href="http://www.dabapps.com/blog/introduction-to-pip-and-virtualenv-python/"&gt;pip &lt;/a&gt;- the best-of-a-bad-lot installer tool that makes installing new modules as good as it&amp;#8217;s likely to get - and you can quickly create and populate lots of clean environments and populate them. Or use &lt;a href="http://www.buildout.org/en/latest/"&gt;buildout &lt;/a&gt;to create precisely controlled setups that have exactly what you need this time.  It&amp;#8217;s brilliant, Gordian-knot-cutting solution that replaces the incredible complexity of package management tools &amp;#8212;  albeit at the cost of lots of duplicated code on disk. Disk space, however, is far cheaper than debugging time and tech-support hand&amp;nbsp;holding.  &lt;/p&gt;
&lt;p&gt;Unfortunately, I&amp;#8217;ve never been able to figure out how to get a running Maya to use a virtualenv at runtime. The Maya application appears to be it&amp;#8217;s own python interpreter (you can verify this by checking _sys.executable _in your command window, or just by renaming mayapy.exe and noting that Maya still works fine).  Which means that virtualenv&amp;#8217;s main trick &amp;#8212; recursing up from the physical location of the python executable &amp;#8212; isn&amp;#8217;t going to work correctly.  We don&amp;#8217;t want to try copying Maya itself and all of it&amp;#8217;s zillions of dependencies  &amp;#8212; a hefty half-gigabyte or so &amp;#8212;for every new project.  And even if we do, the licensing engine does actually care if you&amp;#8217;re running from the default install directory (at least, it&amp;#8217;s never let me get away with copying maya to a new location even on a licensed&amp;nbsp;machine).  &lt;/p&gt;
&lt;p&gt;Effectively, Maya already &lt;em&gt;is&lt;/em&gt; it&amp;#8217;s own virtualenv . That&amp;#8217;s why you can have other versions of Maya running independently of other Pythons installed on your machine.  Which is nice and all  &amp;#8212; but no help for the problem of creating a cleanly isolated toolsets for your Maya&amp;nbsp;users.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://rlv.zcache.com/our_product_use_sustainable_buzzwords_bumper_sticker-r2e739ef8d9874e7f90d354212bf488aa_v9wht_8byvr_324.jpg"&gt;&lt;img alt="" src="http://rlv.zcache.com/our_product_use_sustainable_buzzwords_bumper_sticker-r2e739ef8d9874e7f90d354212bf488aa_v9wht_8byvr_324.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After banging my head against this for a while - I&amp;#8217;m &lt;a href="http://stackoverflow.com/questions/16678334/virtualenv-and-maya"&gt;not the only one who&amp;#8217;s tried it&lt;/a&gt; - I&amp;#8217;ve switched to a tactic that has most of the same properties as the virtualenv but is more Maya-friendly.  I try to replicate the same level of isolation with a rather higher level of uniformity (&lt;span class="caps"&gt;OK&lt;/span&gt;, let&amp;#8217;s be honest here: I mean &lt;em&gt;fascistic control&lt;/em&gt;) over what my users&amp;nbsp;get.  &lt;/p&gt;
&lt;p&gt;While I&amp;#8217;m not convinced its the distribution system to end all systems, I&amp;#8217;m fairly happy with it - it&amp;#8217;s definitely been the least troublesome, lowest maintenance setup I&amp;#8217;ve administered over the years, and it&amp;#8217;s worked pretty reliably for me both in and out of house.  I&amp;#8217;ll describe it a soon-to-be-completed followup&amp;nbsp;post.  &lt;/p&gt;
&lt;p&gt;In the meantime, allow me to say that looking at lots of bumper stickers while seeking funny graphics for your blog is a speedy way to dim your faith in humanity. &lt;em&gt;Not&amp;nbsp;recommended.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://rlv.zcache.com/im_not_cynical_im_just_experienced_bumper_sticker-rf1ba55c5e6df4016859176f200d32d0f_v9wht_8byvr_324.jpg"&gt;&lt;img alt="" src="http://rlv.zcache.com/im_not_cynical_im_just_experienced_bumper_sticker-rf1ba55c5e6df4016859176f200d32d0f_v9wht_8byvr_324.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="distribution"></category><category term="programming"></category><category term="tools"></category></entry><entry><title>Channeling Gerry Anderson</title><link href="https://theodox.github.io/2014/channeling_gerry_anderson" rel="alternate"></link><published>2014-05-30T10:00:00-07:00</published><updated>2014-05-30T10:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-05-30:/2014/channeling_gerry_anderson</id><summary type="html">&lt;p&gt;The world&amp;#8217;s greatest Thunderbirds&amp;nbsp;imitator&lt;/p&gt;</summary><content type="html">&lt;p&gt;Utterly off topic.  And brilliant.  This guy is totally channeling Gerry Anderson and Derek Meddings of Thunderbirds fame - not only is the home model animation work pretty cool, it&amp;#8217;s a pitch-perfect reproduction of the original aesthetic right down to the music choices and ponderous &lt;span class="caps"&gt;VO&lt;/span&gt;.  &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/ZSQ1hZzeItA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/channel/UCXrNQKFtJYX63eJtUQz1jJA"&gt;Mr. Greg Martin&lt;/a&gt;, I salute&amp;nbsp;you!  &lt;/p&gt;</content><category term="thunderbirds"></category></entry><entry><title>Your weekly moment of Python-is-awesome</title><link href="https://theodox.github.io/2014/python_is_awesome" rel="alternate"></link><published>2014-05-27T22:58:00-07:00</published><updated>2014-05-27T22:58:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-05-27:/2014/python_is_awesome</id><summary type="html">&lt;p&gt;A trick that lets you load python modules directly over the&amp;nbsp;web.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I stumbled across a cool little idea while working on a refactor of my python tools build system, and although it is not really ready for prime-time it&amp;#8217;s fun enough I had to share.  With a little bit of work you can &lt;em&gt;load Python modules directly over the web via http!&lt;/em&gt;  How cool is&amp;nbsp;that?  &lt;/p&gt;
&lt;p&gt;In the past I&amp;#8217;ve always gave users a userSetup.py which automatically downloads a zip file containing all the rest of my code from a net share. While this works quite well, the userSetup file itself is a bit of a weak link. Although it changed pretty rarely, it was a bit more complex than I liked. In an ideal world, the user setup would be just a couple of lines, highly resistant to breakage and easy to leave untouched for months or years.  All the changeable stuff should happen off in the ether, so users always get the latest&amp;nbsp;hotness.  &lt;/p&gt;
&lt;p&gt;While pondering how to improve this, I was trolling Doug Hellman&amp;#8217;s invaluable &lt;a href="http://pymotw.com/2/"&gt;Python Module of the Week&lt;/a&gt; site and stumbled onto his discussion of &lt;a href="http://pymotw.com/2/sys/imports.html"&gt;custom Python module finders&lt;/a&gt;. Basically, a module finder is a class which you can register with python to tell it how to look for modules. The key word there is &amp;#8216;how&amp;#8217;, not where&amp;#8217; &amp;#8212; a module finder can do anything it wants to find or create a module, as long as it has returns an object with a load_module method that python can use to actually pop the code into sys.modules. It&amp;#8217;s particularly cool because the process is &lt;em&gt;completely transparent&lt;/em&gt; to the calling code: if you&amp;nbsp;call  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;import XXX&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;you&amp;#8217;ll get &lt;span class="caps"&gt;XXX&lt;/span&gt;, even if your custom finder/loader had to generate it by consulting the _I Ching _and waiting for the right phase of the&amp;nbsp;moon.  &lt;/p&gt;
&lt;p&gt;That sounds like fun (jeez, my sense of fun has gotten pretty esoteric). So, I hacked up a highly experimental example of a module loader that will look on the web for a python module being served up via http and import it as if it were&amp;nbsp;local.  &lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the first bit, the module finder which is in charge of looking for the code when somebody says &lt;code&gt;import xxx&lt;/code&gt;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;web_shim.py&lt;/span&gt;

&lt;span class="sd"&gt;Exposes a custom module loader and importer which allow for download, cache and  &lt;/span&gt;
&lt;span class="sd"&gt;load of python modules stored on an HTTP server&lt;/span&gt;

&lt;span class="sd"&gt;To activate, add the class to sys.path_hooks:&lt;/span&gt;

&lt;span class="sd"&gt;    sys.path_hooks.append(WebFinder)  &lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imp&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib2&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;binascii&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebFinder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    A custom module finder (background: http://pymotw.com/2/sys/imports.html)  &lt;/span&gt;
&lt;span class="sd"&gt;    that will find and load modules via http connections, as long as the  &lt;/span&gt;
&lt;span class="sd"&gt;    module file&amp;#39;s parent http path is on the system path&lt;/span&gt;

&lt;span class="sd"&gt;    The module file is downloaded to the users temp directory. When it changes, it  &lt;/span&gt;
&lt;span class="sd"&gt;    will be replaced with the latest version from the server. Returns a WebLoader  &lt;/span&gt;
&lt;span class="sd"&gt;    for the cached file.  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;CACHE_DIR&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gettempdir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path_entry&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;path_entry&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path_entry&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CACHE_DIR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;expanded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;target_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;target_url&lt;/span&gt;  
            &lt;span class="n"&gt;dl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urllib2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
            &lt;span class="n"&gt;crc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crc32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;  
            &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;  
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
                &lt;span class="n"&gt;disk_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
                &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
                &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;binascii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crc32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;disk_date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;  
            &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;old&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;crc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="n"&gt;handle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
                &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writelines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
                &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WebLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;  
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;WebLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;target_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expanded&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The module finder&amp;#8217;s job is to be pointed at a path (in this case, &amp;#8216;self.url&amp;#8217;) If the path is not something this finder knows how to handle, it raises an ImportError. Otherwise, it sticks around until Python calls find_module with a module name, at which point it will return a module loader object (see below) or None if it doesn&amp;#8217;t know what to&amp;nbsp;do.  &lt;/p&gt;
&lt;p&gt;In this case, we do everything as simply as possible. The finder only works on a path with &amp;#8216;http&amp;#8217; in it (note that&amp;#8217;s not really the right way to check for a url! It&amp;#8217;s enough for proof of concept, though). The finder just fills out the path with the name of the module (plus &amp;#8220;.py&amp;#8221;) and tries to download it into the user&amp;#8217;s temp directory. The business with the hex numbers is just a crc check to make sure that the downloaded module is the latest version. If this is the first time you&amp;#8217;ve grabbed the file &amp;#8212; or if the code on the server has changed  &amp;#8212; the cached copy will be&amp;nbsp;refreshed.  &lt;/p&gt;
&lt;p&gt;The second half of the operation is the WebLoader, which loads the cached&amp;nbsp;module:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# usess the same imports as WebFinder.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WebLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Import loader (see http://pymotw.com/2/sys/imports.html for background)  &lt;/span&gt;
&lt;span class="sd"&gt;    which loads modules cached by a WebFinder using imp.load_source  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;load_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;  
            &lt;span class="c1"&gt;# bail now so we don&amp;#39;t mislead users  &lt;/span&gt;
            &lt;span class="c1"&gt;# if mod was found somewhere else!  &lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;imp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_source&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
            &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__file__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;  
            &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fullname&lt;/span&gt;  
            &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__path__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
            &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__loader__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;  
            &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__package__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullname&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A moduleloader can do all sorts of fancy things (the test code on PyMOTW, for example, loads a module from a python shelf database) but in this case I&amp;#8217;m doing the simplest thing possible, which is to use imp.load_source on our cached python file. imp, if you&amp;#8217;re not familiar with it, is a super useful built-in module which provides access to most of the internals of python&amp;#8217;s import process). Actually using the code is the cool part. All you need to do is to register the finder with sys.path_hooks and then add the web server with your modules on in to your&amp;nbsp;path:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path_hooks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WebFinder&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.inference.phy.cam.ac.uk/mackay/python/compression/huffman&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# with the url on the path, just use import  &lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;Example&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;Example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__path__&lt;/span&gt;  
&lt;span class="c1"&gt;#[&amp;#39;http://www.inference.phy.cam.ac.uk/mackay/python/compression/huffman/Example.py&amp;#39;]&lt;/span&gt;

&lt;span class="c1"&gt;# the module&amp;#39;s __path__ will point at the url, but __file__ points at the cached  &lt;/span&gt;
&lt;span class="c1"&gt;# file on disk&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This isn&amp;#8217;t really something I&amp;#8217;d be comfortable using in production without more work.  There&amp;#8217;s no security and no authentication, so not only is your code up on the web for anybody to see, you&amp;#8217;re also executing code off the web with no idea what it will do. It would be &lt;span class="caps"&gt;OK&lt;/span&gt; for an intranet if you were pretty sure none of your coworkers fancies him/herself a master prankster, but I&amp;#8217;d slather on the security before trying this over long&amp;nbsp;distances!  &lt;/p&gt;
&lt;p&gt;Another obvious improvement would be to figure out a how to diff the local version of the file against the version on the http server without actually downloading the whole thing; that would be simple if the server could be asked for the &lt;span class="caps"&gt;CRC&lt;/span&gt; directly, but it would mean a tighter coupling between the finder and the server (which might be a good thing, security wise).  Another improvement might be to hack the loader so it force reloaded the module if the server version had changed, although that could have unintended side&amp;nbsp;effects.&lt;/p&gt;
&lt;p&gt;The point, however &amp;#8212; assuming there is one &amp;#8212;  is how freaking awesome python&amp;#8217;s infrastructure is. Live loading of code over the net, transparent to all your other code, in about 50 lines?  Hats off to&amp;nbsp;Guido.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.wired.com/wp-content/uploads/blogs/wiredenterprise/wp-content/uploads/2012/06/beard-programmers-final-two.png"&gt;&lt;img alt="" src="http://www.wired.com/wp-content/uploads/blogs/wiredenterprise/wp-content/uploads/2012/06/beard-programmers-final-two.png"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="programming"></category><category term="python"></category></entry><entry><title>Maya binaries list</title><link href="https://theodox.github.io/2014/maya_binaries_list" rel="alternate"></link><published>2014-05-25T13:27:00-07:00</published><updated>2014-05-25T13:27:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-05-25:/2014/maya_binaries_list</id><summary type="html">&lt;p&gt;A list of handy Python binary repositories, courtesy of &lt;a href="https://plus.google.com/112207898076601628221"&gt;+Rob&amp;nbsp;Galanakis&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://plus.google.com/112207898076601628221"&gt;+Rob Galanakis&lt;/a&gt;  just posted &lt;a href="http://www.robg3d.com/maya-windows-binaries/"&gt;a handy list of Maya binaries &lt;/a&gt;for people who need the correct version of &lt;span class="caps"&gt;QT&lt;/span&gt; or Perforce to go with their Maya versions.  Great one-stop shop for navigating this annoying&amp;nbsp;maze&amp;#8230;.&lt;/p&gt;</content><category term="maya"></category><category term="python"></category></entry><entry><title>Subjective truth</title><link href="https://theodox.github.io/2014/subjective_truth" rel="alternate"></link><published>2014-05-16T20:38:00-07:00</published><updated>2014-05-16T20:38:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-05-16:/2014/subjective_truth</id><summary type="html">&lt;p&gt;This video is proof that perceived reality is socially constructed. It will delight and inspire all the artists and designers on your&amp;nbsp;team&amp;#8230;&lt;/p&gt;</summary><content type="html">&lt;p&gt;This video is proof that perceived reality is socially constructed. It will delight and inspire all the artists and designers on your&amp;nbsp;team&amp;#8230;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://vimeo.com/94622661"&gt;Unified Particle Physics for Real-Time Applications - &lt;span class="caps"&gt;SIGGRAPH&lt;/span&gt; 2014&lt;/a&gt; from &lt;a href="http://vimeo.com/mmacklin"&gt;Miles Macklin&lt;/a&gt; on &lt;a href="https://vimeo.com/"&gt;Vimeo&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&amp;#8230; and make the engineers very, very&amp;nbsp;nervous&amp;#8230;&lt;/p&gt;</content><category term="games"></category><category term="graphics"></category></entry><entry><title>Rob G’s book is up for preorder on amazon</title><link href="https://theodox.github.io/2014/rob_g_preorder" rel="alternate"></link><published>2014-05-15T10:30:00-07:00</published><updated>2014-05-15T10:30:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-05-15:/2014/rob_g_preorder</id><summary type="html">&lt;p&gt;Rob Galanakis&amp;#8217; Maya Programming book is up for&amp;nbsp;preorder&lt;/p&gt;</summary><content type="html">&lt;p&gt;I just noticed that &lt;a href="http://www.amazon.com/gp/product/1849694729/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1849694729&amp;amp;linkCode=as2&amp;amp;tag=tecsurgui-20&amp;amp;linkId=Z2TRIATKVMUZBACZ"&gt;Rob G&amp;#8217;s upcoming book about Maya Python programming&lt;/a&gt;&lt;img alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=tecsurgui-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=1849694729"&gt;is up for pre-order on Amazon! Looking forward to seeing it in&amp;nbsp;&amp;#8220;print&amp;#8221;! &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;.&lt;/strong&gt; &lt;a href="http://www.amazon.com/gp/product/0415812291/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0415812291&amp;amp;linkCode=as2&amp;amp;tag=tecsurgui-20&amp;amp;linkId=U4W56JG5ISVGDJIB"&gt;Mine&lt;/a&gt;&lt;img alt="" src="http://ir-na.amazon-adsystem.com/e/ir?t=tecsurgui-20&amp;amp;l=as2&amp;amp;o=1&amp;amp;a=0415812291"&gt; is still up there&amp;nbsp;too!&lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="industry"></category></entry><entry><title>No soup for you, userSetup.py</title><link href="https://theodox.github.io/2014/no_soup_for_you" rel="alternate"></link><published>2014-05-13T12:30:00-07:00</published><updated>2014-05-13T12:30:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-05-13:/2014/no_soup_for_you</id><summary type="html">&lt;p&gt;How to bypass &lt;code&gt;userSetup.py&lt;/code&gt; (or &lt;code&gt;userSetup.mel&lt;/code&gt;, if you&amp;#8217;re really old&amp;nbsp;school)&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I start working on &lt;a href="multiple_mayapy_management_mania"&gt;isolating maya environments,&lt;/a&gt; I came across a nice bit of trivia I didn&amp;#8217;t know&amp;nbsp;about.  &lt;/p&gt;
&lt;p&gt;If you ever want to run a Maya without its &lt;em&gt;userSetup.py&lt;/em&gt; and without having to move or rename files, it turns out you can suppress userSetups by setting an environment variable called &lt;code&gt;MAYA_SKIP_USERSETUP_PY&lt;/code&gt; to any value that evaluates as &lt;code&gt;True&lt;/code&gt;.  This is handy for testing and isolating path management problems - if you&amp;#8217;ve got a rogue path and you&amp;#8217;re not sure where it&amp;#8217;s coming from, this is an easy way to make sure it&amp;#8217;s not being added in by the&amp;nbsp;userSetup.  &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;: If you&amp;#8217;re using a &lt;a href="multiple_mayapy_management_mania"&gt;MayaPyManager&lt;/a&gt; to run mayapy instances, you can set this variable like&amp;nbsp;so:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mayaPyManager&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MayaPyManager&lt;/span&gt;  
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MAYA_SKIP_USERSETUP_PY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;  
&lt;span class="n"&gt;mgr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MayaPyManager&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path/to/mayapy.exe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;path/to/maya/scripts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# this manager will use only the user provided path  &lt;/span&gt;
&lt;span class="c1"&gt;# and won&amp;#39;t run the userSetup.py on startup&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/_U3jHsmZuyeg/TLr6UM2AS-I/AAAAAAAADg0/1BFasu5yW70/s1600/obama_poster_soup_nazi.gif"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/_U3jHsmZuyeg/TLr6UM2AS-I/AAAAAAAADg0/1BFasu5yW70/s1600/obama_poster_soup_nazi.gif"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="tools"></category></entry><entry><title>Multiple MayaPy Management Mania</title><link href="https://theodox.github.io/2014/multiple_mayapy_management_mania" rel="alternate"></link><published>2014-05-11T14:03:00-07:00</published><updated>2014-05-11T14:03:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-05-11:/2014/multiple_mayapy_management_mania</id><summary type="html">&lt;p&gt;Introducing the &lt;a href="https://gist.github.com/theodox/2c712a91155c7e1c4c15"&gt;&amp;#8216;MayaPyManager&amp;#8217;&lt;/a&gt; class, for spinning up isolated MayaPy instances with their own environments and Maya&amp;nbsp;versions&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lately I&amp;#8217;ve been re-factoring the build system I use to distribute my python tools to users.  The things which has been driving me crazy is the need to start supporting multiple versions of Maya at the same&amp;nbsp;time.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.opensrs.com/images/wordpress/uploads/2007/04/email-service-1/it-worked-on-my-machine.jpg"&gt;&lt;img alt="" src="http://www.opensrs.com/images/wordpress/uploads/2007/04/email-service-1/it-worked-on-my-machine.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Besides the general hassle involved, supporting multiple Maya versions and multiple projects at the same time is a nightmare for doing good testing and &lt;span class="caps"&gt;QA&lt;/span&gt;.  With so many different configurations it becomes increasingly easy for something to slip through the cracks.  You might have a bit of Python 2.7 syntax which you wrote in Maya 2014 sneaking into a tool used in Maya 2011. You might have tools that rely on an external dll that is correctly set up in your Maya 2011 tools but not in the outsourcer version of your 2012 setup&amp;#8230;. The possibilities for shooting yourself in the foot are&amp;nbsp;endless.  &lt;/p&gt;
&lt;p&gt;So, in an effort to clean this up, I&amp;#8217;ve cooked up a simple module designed to create and run instances of MayaPy.exe with precise control over the paths and environment variables.  You can use it to run tests or automatic processes in isolation, knowing that only the paths and settings you&amp;#8217;re using will be&amp;nbsp;live.  &lt;/p&gt;
&lt;p&gt;The actual code is not super complex -&lt;a href="https://gist.github.com/theodox/2c712a91155c7e1c4c15"&gt;it&amp;#8217;s up on gitHub&lt;/a&gt;, as usual free-to-use under the &lt;span class="caps"&gt;MIT&lt;/span&gt; license.  Comments / questions / feedback and especially bug fixes all&amp;nbsp;welcome! &lt;/p&gt;</content><category term="maya"></category><category term="tools"></category><category term="Python"></category></entry><entry><title>The only meme I will ever post</title><link href="https://theodox.github.io/2014/the_only_meme_i_will_ever_post" rel="alternate"></link><published>2014-05-02T22:55:00-07:00</published><updated>2014-05-02T22:55:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-05-02:/2014/the_only_meme_i_will_ever_post</id><summary type="html">&lt;p&gt;I hate meme gifs.  But this one sort of sums it&amp;nbsp;up&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://lh5.googleusercontent.com/-3VltAqg2vaU/U2CQM7nRnsI/AAAAAAABIC4/JbGXg7-oy6U/s640/blogger-image--1968691607.jpg"&gt;&lt;img alt="" src="https://lh5.googleusercontent.com/-3VltAqg2vaU/U2CQM7nRnsI/AAAAAAABIC4/JbGXg7-oy6U/s640/blogger-image--1968691607.jpg"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="industry"></category></entry><entry><title>The Main Event - event oriented programming in Maya</title><link href="https://theodox.github.io/2014/main_event" rel="alternate"></link><published>2014-04-29T00:14:00-07:00</published><updated>2014-04-29T00:14:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-04-29:/2014/main_event</id><summary type="html">&lt;p&gt;Event oriented programming for python in general and for Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; in&amp;nbsp;particular&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="maya_callbacks_cheat_sheet.html"&gt;Maya Callbacks Cheat Sheet&lt;/a&gt; post started out as an effort to explain the design the &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/events.py"&gt;event system&lt;/a&gt; in &lt;a href="https://github.com/theodox/mGui"&gt;mGui &lt;/a&gt;- but it quickly turned into it&amp;#8217;s own thing as I realized that the vanilla Maya system remains confusing to lots of people.  With that background out of the way, I want to return to events proper, both to explain why they work the way the do in mGui and also how they can be useful for other projects as well (I use them all over the place in non-&lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;contexts).  &lt;/p&gt;
&lt;p&gt;&amp;#8230;and, because it&amp;#8217;s got the word &amp;#8216;event&amp;#8217; in it, I&amp;#8217;m going to throw in a lot of irrelevant references as I can manage to &lt;strong&gt;&lt;em&gt;The&amp;nbsp;Crushah!&lt;/em&gt;&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://hot-breakfast.com/wp-content/uploads/2014/01/GHG-WB-Crusher.jpg"&gt;&lt;img alt="" src="http://hot-breakfast.com/wp-content/uploads/2014/01/GHG-WB-Crusher.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Reining&amp;nbsp;&amp;#8220;Champeen&amp;#8221;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://i3.ytimg.com/vi/n0lzjNzql5Y/mqdefault.jpg"&gt;&lt;img alt="" src="http://i3.ytimg.com/vi/n0lzjNzql5Y/mqdefault.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&amp;#8217;s a heavyweight programming&amp;nbsp;paradigm!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The cheat sheet post showed that Maya callbacks are reasonably functional once you understand the underlying code scope rules. However they also shows some of the limitations of the default&amp;nbsp;system:  &lt;/p&gt;
&lt;h4&gt;Awkward argument&amp;nbsp;handling&lt;/h4&gt;
&lt;p&gt;In cases where you want to call a command with arguments or parameters, plain-old-Maya callbacks require you do fancy footwork with lambdas or partials to pass your arguments in correctly. It&amp;#8217;s not rocket science, but it is a pointless tax on what should be a trivial&amp;nbsp;problem.  &lt;/p&gt;
&lt;h4&gt;Design&amp;nbsp;time&lt;/h4&gt;
&lt;p&gt;&lt;span class="caps"&gt;GUI&lt;/span&gt; code is usually kind of fiddly to begin with, since you&amp;#8217;re often busy tweaking sizes, layouts and other graphical whatnots as you lay out the &lt;span class="caps"&gt;GUI&lt;/span&gt; (one of the big advantages of things like &lt;span class="caps"&gt;QT&lt;/span&gt; Designer is that they split this work out from the underlying code very neatly by turning all of that layout and presentation stuff into data).  You can see this particularly when you&amp;#8217;re trying to shoehorm all of the arguments and parameters for a command into the same line that also declares and styles a control: you get a long messy piece of junk with lots of nested parens that&amp;#8217;s hard to parse at a&amp;nbsp;glance.   &lt;/p&gt;
&lt;p&gt;On a more strategic level, creating commands at the same time you create the visual layout for your controls tends to lock you into a monolithic style of coding. If you want to add new behaviors to a control contextually, you need to manage all of the state inside some other bit of code which not only knows how to do the new job,  it also needs to know enough about the original &lt;span class="caps"&gt;GUI&lt;/span&gt; layout that it can replace existing callback commands with new ones.   This means trivial tasks like highlighting a button when something is selected from a list get intertwined with complex code that does real work &amp;#8212; and, alas, that the two different sets of concerns get to share&amp;nbsp;bugs.  &lt;/p&gt;
&lt;h4&gt;One&amp;nbsp;shot&lt;/h4&gt;
&lt;p&gt;The last big drawback of the default Maya callback system is that each callback fires only one command.  This is not a big deal for things like buttons, but when you extend it to things like scriptJobs it can get messy very fast. Either you end up creating dozens of similar scriptJobs attached to the same trigger - in which case you  have to waste a lot of energy on managing them all &amp;#8212; or you have to create a complex uber-handler that jams a ton of (possibly unrelated) behaviors into a giant&amp;nbsp;bucket-o-code.&lt;/p&gt;
&lt;h2&gt;And In Dis&amp;nbsp;Corner..!&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://img.rp.vhd.me/3147118_l2.jpg"&gt;&lt;img alt="" src="http://img.rp.vhd.me/3147118_l2.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;our plucky&amp;nbsp;challenger  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The mGui event system is intended to fight these problems and to promote cleaner, less coupled and more general&amp;nbsp;code.  &lt;/p&gt;
&lt;p&gt;The main ideas is to create objects &amp;#8212;&lt;a href="https://github.com/theodox/mGui/blob/master/mGui/events.py"&gt; the Event class&lt;/a&gt;&amp;#8212; which store a list of functions (usually known as &amp;#8216;handlers&amp;#8217;) which they call when they are activated. Each Event can host any number of handlers, and the handlers can be added or removed from an event at any time.  The events can store information you know when they are created or pass information you only know when they fire, so you don&amp;#8217;t have to jump through hoops to provide relevant data to your handlers. Finally, the Events are smart enough not to complain when a handler disappears - if you&amp;#8217;re logging processed items to a window from a long running task and the user closes the window, the underlying code will still run without&amp;nbsp;complaint.&lt;/p&gt;
&lt;p&gt;If you know your &lt;span class="caps"&gt;OOP&lt;/span&gt; history, this is obviously a shameless ripoff of the standard &lt;a href="http://www.philipuren.com/serendipity/index.php?/archives/4-Simple-Observer-Pattern-in-Python.html"&gt;Observer Pattern&lt;/a&gt;, &amp;#8212; although the implementation here owes more to &lt;a href="http://msdn.microsoft.com/en-us/library/aa645739(v=vs.71).aspx"&gt;the way events are handled in C#&lt;/a&gt;.   The main difference from the canonical implementation is that &amp;#8212; this being Python &amp;#8212; the handlers don&amp;#8217;t need to be classes, much less implementations of any particular base class; instead, the Event maintains a list of callables &amp;#8212; which can be functions, lambdas or callable classes &amp;#8212; and tries to fire them when it itself is triggered. Unlike the C# version of the same idea, there&amp;#8217;s no need for an elaborate menagerie of specially-typed handlers and data passing classes; instead, any function that accept &lt;a href="http://freepythontips.wordpress.com/2013/08/04/args-and-kwargs-in-python-explained/"&gt;the plain-python open-ended &lt;em&gt;args, &lt;/em&gt;*kwargs signature&lt;/a&gt; can be a&amp;nbsp;handler.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the important bit of the core code (the full thing, as always, is &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/events.py"&gt;up on github&lt;/a&gt;)&amp;nbsp;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

   &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_Handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Set list of handlers callables. Use a set to avoid multiple calls on one handler&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;event&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_add_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Add a handler callable. Raises a ValueError if the argument is not callable&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; is not callable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_Handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_weak_reference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_remove_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Remove a handler. Ignores handlers that are not present.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;wr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_weak_reference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;delenda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_Handlers&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;wr&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_Handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_Handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delenda&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        returns the me&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;md&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_fire&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Call all handlers.  Any decayed references will be purged.&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

        &lt;span class="n"&gt;delenda&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_Handlers&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;DeadReferenceError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;delenda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_Handlers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_Handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delenda&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_handler_Count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Returns the count of the _Handlers field&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_Handlers&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="c1"&gt;# hook up the instance methods to the base methods&lt;/span&gt;
    &lt;span class="c1"&gt;# doing it this way allows you to override more neatly&lt;/span&gt;
    &lt;span class="c1"&gt;# in derived classes&lt;/span&gt;
    &lt;span class="n"&gt;__call__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_fire&lt;/span&gt;
    &lt;span class="n"&gt;__len__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_handler_Count&lt;/span&gt;
    &lt;span class="n"&gt;__iadd__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_add_handler&lt;/span&gt;
    &lt;span class="n"&gt;__isub__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_remove_handler&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, it&amp;#8217;s really quite simple: The handlers are maintained in set, so they can&amp;#8217;t accidentally be duplicated.  We override the &lt;code&gt;__iadd__&lt;/code&gt; and  &lt;code&gt;__isub__&lt;/code&gt; methods to provide a simple syntax for attaching and detaching handlers (shamelessly stolen from C#).  The core is the &lt;code&gt;__call__&lt;/code&gt; method. which makes the Event object callable as if it were a function.  When the event is called, it fires all of the handlers with whatever arguments and keywords were passed&amp;nbsp;in.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The only &amp;#8216;interesting&amp;#8217; bit of code is the function WeakMethod in line 20 - it&amp;#8217;s not defined in this snippet; basically it&amp;#8217;s job is to make sure the Event object doesn&amp;#8217;t keep objects alive in memory when they should be de-referenced. &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/events.py"&gt;See the github&lt;/a&gt; for details if you&amp;#8217;re&amp;nbsp;interested.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;While the description is a bit long winded, the use case is pretty&amp;nbsp;straightforward:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGui.events&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;
&lt;span class="n"&gt;test_event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test event&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_handler&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;

&lt;span class="n"&gt;test_event&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;test_handler&lt;/span&gt; &lt;span class="c1"&gt;# attach the handler&lt;/span&gt;

&lt;span class="n"&gt;test_event&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;#&amp;gt;&amp;gt; () {&amp;#39;name&amp;#39;: &amp;#39;test event&amp;#39;, &amp;#39;event&amp;#39;: &amp;lt;mGui.events.Event object at 0x000000002C7FEC88&amp;gt;}&lt;/span&gt;
&lt;span class="n"&gt;test_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#&amp;gt;&amp;gt; (1, 2, 3) {&amp;#39;name&amp;#39;: &amp;#39;test event&amp;#39;, &amp;#39;event&amp;#39;: &amp;lt;mGui.events.Event object at 0x000000002C7FEC88&amp;gt;}&lt;/span&gt;
&lt;span class="n"&gt;test_event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#&amp;gt;&amp;gt; () {&amp;#39;msg&amp;#39;: &amp;#39;hello&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;test event&amp;#39;, &amp;#39;event&amp;#39;: &amp;lt;mGui.events.Event object at 0x000000002C7FEC88&amp;gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here &lt;code&gt;test_event&lt;/code&gt;  is an &lt;code&gt;Event&lt;/code&gt; object and &lt;code&gt;test_handler&lt;/code&gt; is a handler function. Handlers are callables of any kind: functions, object methods, lamdas, or callable objects. The only requirement is that they accept the &lt;code&gt;*args, **kwargs&lt;/code&gt; form of open-ended arguments &amp;#8212; you can do whatever you want with the args and kwargs inside a given handler, but they will be passed so you&amp;#8217;ll need to provide the right signature in your handler&amp;nbsp;functions.  &lt;/p&gt;
&lt;p&gt;One of the trickiest bits of doing event-driven programming is providing the right context to your handler functions.  Different kinds of functional code will need different bits of information &amp;#8212; for example, you might fire an event when the user selects something in your scene.  One handler could highlight the selected item in a list, another could enable or disable some buttons, and a third could update present an appropriate dropdown list. Some of these operations will care about the selected objects, and some won&amp;#8217;t; some will care about other kinds of conditions (Is the window expanded? Is the user in &amp;#8216;advanced mode&amp;#8217;?). To keep the code clean and provide handlers with the context they need to do their jobs, the Events need to be able to pass extra information; the &lt;em&gt;args, &lt;/em&gt;*kwargs form makes it easy to provide the data you think&amp;nbsp;appropriate.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://img.youtube.com/vi/msp7rGJ5l7c/0.jpg"&gt;&lt;img alt="" src="http://img.youtube.com/vi/msp7rGJ5l7c/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Extra! Extra! Read All About&amp;nbsp;It!&lt;/h2&gt;
&lt;p&gt;Most of the time, the info you want to pass with your event is dynamic - you don&amp;#8217;t know what it will be until the tool is actually running. In this case, you can just pass arguments or keywords at call time as I did in the previous example. This really helps to make the callback mechanism more flexible, since the same Event can be triggered many tines for different circumstances without new code. For example, say you&amp;#8217;ve got a long running process that&amp;#8217;s looping over a bunch of objects and doing&amp;nbsp;something.  &lt;/p&gt;
&lt;p&gt;Sometimes, though, the data is constant. In that case you can build it into the Event object directly - in that last snippet you can see that &lt;code&gt;test_event&lt;/code&gt; has been set up with a name at creation time and that name is passed along to all invocations of the event. The ability to add unique data to an event ,makes it simple to write general handlers that can deal with several types of  Events at once - for example, you might auto-generate a set of buttons each of which was tied to a particular object in your Maya scene and then pass the object names through button&amp;#8217;s Events. Something like this mGui example (though as I said at the outset, you can just use the events module without mGui if you&amp;nbsp;want):  &lt;/p&gt;
&lt;p&gt;Any keywords you provide when creating an Event object will be stored and then passed as keywords when the event goes off. (You&amp;#8217;ll might have noticed in the previous example that Events automatically includes a reference to themselves in their keyword arguments; this can be handy for things like one-shot handlers that want to remove themselves from an  event after they fire)  A common idiom is to add a reference to the owning &lt;span class="caps"&gt;GUI&lt;/span&gt; object, so that there&amp;#8217;s no extra work needed to figure out, say, which checkbox just toggled it&amp;#8217;s state. In this example I&amp;#8217;ve added added a reference to the buttons as &amp;#8216;sender&amp;#8217; manually, but if I hadn&amp;#8217;t manually created the event and had just attached a handler to the default one that comes with the mGui button I&amp;#8217;d also have gotten that for&amp;nbsp;free.  &lt;/p&gt;
&lt;p&gt;One thing to point out here is that the Events can mix both styles - predefined keywords and keywords or arguments that are defined at runtime. The Events will overwrite any pre-defined keywords that are duplicated, which is a behavior to remember - it can be useful but might also cause some surprises if you&amp;#8217;re not expecting&amp;nbsp;it.,  &lt;/p&gt;
&lt;h2&gt;The Final&amp;nbsp;Round&lt;/h2&gt;
&lt;h2&gt;&lt;a href="http://i.ytimg.com/vi/M50wHftQax8/0.jpg"&gt;&lt;img alt="" src="http://i.ytimg.com/vi/M50wHftQax8/0.jpg"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;that&amp;#8217;s gotta&amp;nbsp;hurt  &lt;/p&gt;
&lt;p&gt;At the risk of repeating myself, I just want to show how the Event pattern makes it easier to achieve good, clean division between &lt;span class="caps"&gt;GUI&lt;/span&gt; code and functional code.  Here&amp;#8217;s the usual way you&amp;#8217;d go about doing something like updating a &lt;span class="caps"&gt;GUI&lt;/span&gt; to reflect a long-running&amp;nbsp;process:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OverCoupled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;some_complex_function&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;...&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_counter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;some_complex_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# update the gui&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;doing something fancy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
           &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="c1"&gt;# redraw the label &lt;/span&gt;
           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_counter&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; 
           &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_counter&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
           &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;force&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# closing message&lt;/span&gt;
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;finished fancy tasks&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;oc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OverCoupled&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;oc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, you could say that doesn&amp;#8217;t look _too _bad - the class is making it easy to find the text you want to update and it&amp;#8217;s only a couple  of lines each time you do the update. But this example is trivial; imagine this was real world code where some_complex_function really was complex and had lots of branches or possible failure points.  What if you needed to hit not two, but five or six different &lt;span class="caps"&gt;GUI&lt;/span&gt; elements?  What if you wanted to add logging or email?  The maintenance would add up&amp;nbsp;fast.  &lt;/p&gt;
&lt;p&gt;Most of all, imagine how irritating it is to write code that simultaneously does some complex task - requiring you to mentally follow along with the ins and outs of the procedure as you write or debug it - and then adding a bunch of fiddly gui code in-line with the tool work. It only gets worse if you want to refactor or re-use parts of some_complex_function, since you&amp;#8217;ll have to work around or excise the parts specific to this &lt;span class="caps"&gt;GUI&lt;/span&gt; It&amp;#8217;s a classic violation of &lt;a href="http://effectivesoftwaredesign.com/2012/02/05/separation-of-concerns/"&gt;Separation of Concerns&lt;/a&gt;.  Here&amp;#8217;s the same code with events instead of inline &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;code:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mGui.gui&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;gui&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.cmds&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cmds&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mGui.events&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;events&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;move_down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# make a window with buttons for each transform. Clicking buttons &lt;/span&gt;
&lt;span class="c1"&gt;# moves them down 10 units&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;VerticalForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;b_&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;move_down&lt;/span&gt;

&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see the event-based version lets you cleanly separate out the functions from the &lt;span class="caps"&gt;UI&lt;/span&gt;. Moreover it would be a snap to make a headless version that ran with no &lt;span class="caps"&gt;GUI&lt;/span&gt; - and you could even add  logging to the console by attaching a simple handler function to the processor&amp;#8217;s &lt;code&gt;ItemProcessed&lt;/code&gt; event. Abstracting  away the actual &lt;span class="caps"&gt;GUI&lt;/span&gt; code makes it easy to keep your code tidy and also lets you evolve your display mechanism without endangering your functional code. If you decide to swap in a messageLine for the the text widget &amp;#8212; or for that matter, if you print a line to the listener - it&amp;#8217;s all the same to the underlying code. This flexibility is exactly what &lt;a href="http://pynash.org/2013/03/07/logging-intro.html"&gt;makes the native Python logging module so powerful&lt;/a&gt;:  logging can write to text files, update databases, send emails or print console messages &amp;#8212; indeed, it can do all of those at once &amp;#8212; and the code that calls logging doesn&amp;#8217;t need to change one&amp;nbsp;iota.&lt;/p&gt;
&lt;h2&gt;&lt;span class="caps"&gt;TKO&lt;/span&gt;!&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/_4QlZmS5gO7s/SmaQEq6ewTI/AAAAAAAAARE/A5DKfeZ5Sz8/s320/BunnyHugged13.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/_4QlZmS5gO7s/SmaQEq6ewTI/AAAAAAAAARE/A5DKfeZ5Sz8/s320/BunnyHugged13.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So, that&amp;#8217;s the basic rationale for the event system in mGui. If you &lt;a href="https://github.com/theodox/mGui/blob/master/mGui/events.py"&gt;check out the file on github&lt;/a&gt; you&amp;#8217;ll see there&amp;#8217;s a bit more going under the hood - that&amp;#8217;s a matter for another time. Till then, keep those dukes&amp;nbsp;up.  &lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="mGui"></category><category term="programming"></category></entry><entry><title>Maya callbacks cheat sheet</title><link href="https://theodox.github.io/2014/maya_callbacks_cheat_sheet" rel="alternate"></link><published>2014-04-23T13:53:00-07:00</published><updated>2014-04-23T13:53:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-04-23:/2014/maya_callbacks_cheat_sheet</id><summary type="html">&lt;p&gt;An overiew of how Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; callbacks work, along with some recommendations for how to set them up&amp;nbsp;neatly.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;Update 5/7/14: Added a note on closures and&amp;nbsp;lambdas_  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In &lt;a href="all_your_base.html"&gt;All Your Base Classes&lt;/a&gt;,  I suggested that we can do better than the standard callback mechanism for doing Maya event handling.  The limitations of the default method are something I&amp;#8217;ve &lt;a href="pity_for_the_outcast.html"&gt;complained about before&lt;/a&gt;, and if you follow these things on &lt;a href="http://tech-artists.org/forum/showthread.php?3292-Maya-python-UI-acessing-controls-from-external-functions"&gt;&lt;span class="caps"&gt;TAO&lt;/span&gt;&lt;/a&gt; or CGTalk or &lt;a href="http://stackoverflow.com/questions/3435128/creating-a-ui-in-Maya-using-python-scripting"&gt;StackOverflow&lt;/a&gt; it seems pretty clear that a lot of other people have problems with the standard Maya code flow&amp;nbsp;too.  &lt;/p&gt;
&lt;p&gt;I was planning on devoting the next big post to the event mechanism in &lt;a href="https://github.com/theodox/mGUI"&gt;mGUI &lt;/a&gt;. However as I did the spadework for this post I decided it was better to split it up into two parts, since a lot of folks seem to be confused about the right way to manage basic Maya callbacks. Before moving fancy stuff, it&amp;#8217;s a good idea to make sure the basics are clear. Most vets will already know most of what I&amp;#8217;m going over here, but I found the  time spent laying it out for myself a useful exercise  so I figured it would be worth sharing even if it&amp;#8217;s not&amp;nbsp;revolutionary.  &lt;/p&gt;
&lt;h2&gt;Unsolved Mysteries of the&amp;nbsp;Maya.&lt;/h2&gt;
&lt;p&gt;So, let&amp;#8217;s start by clearing up something that even a lot of old-school Maya coders find a bit mysterious when building&amp;nbsp;GUIs.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://epGUIdes.com/UnsolvedMysteries/cast.jpg"&gt;&lt;img alt="" src="http://epGUIdes.com/UnsolvedMysteries/cast.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In vanilla Maya, &lt;span class="caps"&gt;GUI&lt;/span&gt; components fire callbacks - that is to say that when Maya recognizes a user action like a button press or a text entry, it calls a function you&amp;#8217;ve provided. There are two ways you can set this up.  The old-school &lt;span class="caps"&gt;MEL&lt;/span&gt; way is to use a&amp;nbsp;string:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;my_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;print &amp;quot;hello&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the bad old days of &lt;span class="caps"&gt;MEL&lt;/span&gt;, this was usually fine since most procedures were declared as globals and so they were available&amp;nbsp;everywhere.  &lt;/p&gt;
&lt;p&gt;Unfortunately, Python&amp;#8217;s stricter rules about scoping mean that you constantly run into problems with this strategy if you&amp;#8217;re not careful. For example, this straight python conversion of the Mel paradigm works&amp;nbsp;fine:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_hello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;my_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;my_col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;my_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;print_hello()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But try&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_test_window&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_hello_again&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;my_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;my_col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;my_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;print_hello_again()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;show_test_window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you hit the button you&amp;#8217;ll be&amp;nbsp;told  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Error: NameError: name &amp;#39;print_hello_again&amp;#39; is not defined #&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s because &lt;code&gt;print_hello_again&lt;/code&gt; is defined in the scope of the &lt;em&gt;function&lt;/em&gt;, not the scope of the Maya interpreter &amp;#8212; when the callback actually fires, the name is buried away inside of _show_test_window _and can&amp;#8217;t be found by Maya, at least not using the simple string&amp;nbsp;name.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;That &amp;#8220;_&amp;#8221; in the functions, by the way, is the standard python symbol for &amp;#8220;I have to have a variable here but I intend to ignore it&amp;#8221; - it shows up in a lot of these &lt;span class="caps"&gt;GUI&lt;/span&gt; examples because many, though not all, Maya callbacks fire off an argument when they&amp;nbsp;activate.   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This happens all the time to people trying to port old &lt;span class="caps"&gt;MEL&lt;/span&gt; code to Python - snippets that work in the interpreter don&amp;#8217;t work when converted to functions or split between modules because the string callbacks only execute in the global scope. Luckily, once you realize that the &amp;#8220;where is my function&amp;#8221; problem is just basic scoping, it&amp;#8217;s easy to fix. You can forcibly capture the functions you want by just passing them directly to your &lt;span class="caps"&gt;GUI&lt;/span&gt; callbacks instead of using strings, thanks to the magic of python&amp;#8217;s &lt;a href="http://python-history.blogspot.com/2009/02/first-class-everything.html"&gt;first class functions&lt;/a&gt;.  You just need to pass the function itself - not a quoted string that looks like the function - to the callback, Thus the previous example&amp;nbsp;becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_test_window&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_hello_again&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;my_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;my_col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;my_button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print_hello_again&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="c1"&gt;# note: no quotes and no parens. &lt;/span&gt;
    &lt;span class="c1"&gt;# You&amp;#39;re passing the function as an object!  &lt;/span&gt;
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;show_test_window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since you&amp;#8217;ve got the callback in scope when you create the &lt;span class="caps"&gt;GUI&lt;/span&gt;, you&amp;#8217;re certain to have it when you need it (if by some accident it was out of scope at creation time you&amp;#8217;d get an obvious error that you&amp;#8217;d have to fix before moving&amp;nbsp;on).  &lt;/p&gt;
&lt;p&gt;Clear, predictable scoping is why it&amp;#8217;s almost always the right decision to wrap your GUIs in classes. The class defines a predictable scope so you don&amp;#8217;t  have to worry about what&amp;#8217;s loaded or try to cram import statements into your callback functions.   Plus, classes include data storage, so you can keep your data nicely independent of your code. Suppose, for example, you needed to display a different set of greetings beyond the standard &amp;#8220;hello world.&amp;#8221;  With a class you can defer the problem up to the moment of the actual button press with no fancy footwork or complex lambda&amp;nbsp;management:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Greeter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;greet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whatever is stuffed into the Greeter&amp;#8217;s &lt;em&gt;greeting&lt;/em&gt; field will be printed out when the button get&amp;#8217;s&amp;nbsp;pressed.  &lt;/p&gt;
&lt;h2&gt;Lambda Lambda&amp;nbsp;Lambda&lt;/h2&gt;
&lt;p&gt;Of course, sometimes you don&amp;#8217;t need a full blown class for your callback functions; often you just want to do something simple that doesn&amp;#8217;t deserve a full function of it&amp;#8217;s own.  In cases like this, python provides a handy construct called a &lt;em&gt;lambda&lt;/em&gt;, which is basically a one-line function.  A lambda looks like&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;multiply&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which is exactly equivalent&amp;nbsp;to:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;multiply&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this example &amp;#8216;multiply&amp;#8217; is just a plain old variable name. x and y are the input variables, and the expression to the right of the colon is what the lambda returns.  Lambdas can have any number of arguments, but they don&amp;#8217;t use the &lt;em&gt;args / &lt;/em&gt;*kwargs variable argument&amp;nbsp;syntax.   &lt;/p&gt;
&lt;p&gt;The main difference between  lambdas and functions  is that the body of a lambda is a single expression : you can&amp;#8217;t put flow control (such as loops) or statements which are not evaluable (such as &amp;#8216;print&amp;#8217; ) into a lambda.  You can, however, call functions - even functions that return&amp;nbsp;None.  &lt;/p&gt;
&lt;p&gt;Lambdas are a great way to  cook up throwaway functions. For&amp;nbsp;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;new_cube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;creates a window with a button which creates a cube when the button is pressed.  You&amp;#8217;ll probably note that in this case the argument to the lambda is ignored - that&amp;#8217;s because buttons always fire their callbacks with one argument so the lambda needs to accept&amp;nbsp;one.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In other examples, you&amp;#8217;ll recall, I use  a python convention of a single underscore as the &amp;#8216;ignore me&amp;#8217;&amp;nbsp;argument.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The one thing that makes lambdas interesting (sometimes the &amp;#8216;&lt;em&gt;may you live in interesting times&lt;/em&gt;&amp;#8216; sort of interesting) is that they are inside the scope of your functions - which means they can use &lt;a href="http://www.shutupandship.com/2012/01/python-closures-explained.html"&gt;closures&lt;/a&gt; to capture variables &lt;em&gt;before&lt;/em&gt; they fire.  This can be useful if you want to set up a simple relationship without building a full-on class. This example sets the text of a text widget based on a value you pass it at startup, showing the way closures capture&amp;nbsp;names:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;closure_example_window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;press the button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="c1"&gt;# captures the name of the text and the value passed in by the user  &lt;/span&gt;
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, closures are automatically created by Python when a given scope is closed up - in this example, that would be at the end of the function. The values that are &amp;#8216;closed over&amp;#8217; are determined when the function finishes.  Which is usually what you want&amp;#8230; unless you&amp;#8217;re in the habit of re-using variable&amp;nbsp;names:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;closure_example_surprise&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;press the button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gotcha!&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you run this one, the button ignores your value and prints &lt;code&gt;gotcha&lt;/code&gt; instead of whatever value you passed in! That&amp;#8217;s because the closure will get its value when the function finishes in line 7, &lt;span class="caps"&gt;NOT&lt;/span&gt; when you first assign it in line 5. This little gotcha is usually a curiosity, but it makes life difficult if you want to, say, assign commands inside a loop. In a case like that you should use functions or callable objects (see below) in preference to&amp;nbsp;lambdas. &lt;/p&gt;
&lt;h2&gt;Arguments for the&amp;nbsp;prosecution&lt;/h2&gt;
&lt;p&gt;So, the &amp;#8220;where the hell is my function&amp;#8221; problem which tends to plague beginners is easy to solve once you look at it the right&amp;nbsp;way.   &lt;/p&gt;
&lt;p&gt;However, right after you&amp;#8217;re comfortable with passing functions directly, you immediately realize that&amp;#8217;s not enough.  It&amp;#8217;s very common to have multiple &lt;span class="caps"&gt;GUI&lt;/span&gt; controls that do more or less the same thing with different settings such a set of buttons which make different sized&amp;nbsp;objects.    &lt;/p&gt;
&lt;p&gt;Alas, while this is easy to understand, it&amp;#8217;s also kinda ugly to&amp;nbsp;code.  &lt;/p&gt;
&lt;p&gt;For starters, you might try making lots of little&amp;nbsp;functions:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Boxes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_big_box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_med_box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_sm_box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;my_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;small box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_sm_box&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;medium box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_med_box&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;large box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_big_box&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or you could do basically the same thing using lambdas to create temporary functions, which saves on the extra defs but tends to be illegible and tough to debug for complex commands&amp;nbsp;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    def BoxLambdas():  
        my_w = cmds.window()  
        cmds.columnLayout()  
        cmds.button(&amp;quot;small box&amp;quot;, c = lambda _: cmds.polyCube(d =2, w= 2 , h=2) )  
        cmds.button(&amp;quot;medium box&amp;quot;,  c = lambda _: cmds.polyCube(d = 10 , w = 5 , h = 5) )  
        cmds.button(&amp;quot;large box&amp;quot;, c = lambda _: cmds.polyCube(d = 10 , w = 10 , h = 10) )  
        cmds.showWindow(my_w)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;&lt;span class="caps"&gt;BTW&lt;/span&gt; There&amp;#8217;s that underscore again, in the lambdas, doing the same job: ignoring the callback argument from the buttons&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A third method is to use the Python built-in module &lt;code&gt;functools&lt;/code&gt;. Functools offsers the &lt;a href="https://docs.python.org/2/library/functools.html#functools.partial"&gt;&lt;code&gt;partial&lt;/code&gt; object&lt;/a&gt;, which &amp;#8220;freezes&amp;#8221; a command and a set of arguments into a callable&amp;nbsp;package.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FuncBoxes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# note the comma - the command is an argument to partial!   &lt;/span&gt;
    &lt;span class="n"&gt;small_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;med_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;big_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;my_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;small box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;small_box&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;medium box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;med_box&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;large box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;big_box&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Partials are handy for cleaning up the messes you&amp;#8217;d get from trying to format a complex commands in-line in the middle of your &lt;span class="caps"&gt;GUI&lt;/span&gt; code. This example is a sort of worst case scenario, since Maya buttons always fire with a single argument and cmds.polyCube doesn&amp;#8217;t like that.  Here I used lambdas  to swallow the arguments (note the telltale underscores). More often you&amp;#8217;ll be calling your own functions and the syntax is much cleaner and easier to&amp;nbsp;parse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;  
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;FuncBoxesClean&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    
       &lt;span class="c1"&gt;# swallow the argument but keep the keywords...&lt;/span&gt;
       &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;small_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;make_box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;med_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;make_box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;big_box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;make_box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;my_w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;small box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="n"&gt;small_box&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;medium box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;med_box&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;large box&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;big_box&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s far easier on the eyes and less of a nasty tax on future readers, but it requires a knowledge of how partials&amp;nbsp;work.&lt;/p&gt;
&lt;h2&gt;Final&amp;nbsp;Summation&lt;/h2&gt;
&lt;p&gt;So, here&amp;#8217;s a cheatsheet of the rules for hooking Maya event&amp;nbsp;callbacks:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Don&amp;#8217;t use strings for python calls. &lt;ol&gt;
&lt;li&gt;If you&amp;#8217;re calling &lt;span class="caps"&gt;MEL&lt;/span&gt;, &lt;span class="caps"&gt;OK&lt;/span&gt;: but don&amp;#8217;t use &lt;span class="caps"&gt;MEL&lt;/span&gt; anyway&amp;nbsp;:)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Pass functions to your callback directly. No quotes, no parens.&lt;ol&gt;
&lt;li&gt;If you have a scope problem, you&amp;#8217;ll see it when you create the &lt;span class="caps"&gt;GUI&lt;/span&gt;; usually you can solve it with an&amp;nbsp;import&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If you need to pass arguments to your function in the callback, you have options:&lt;ol&gt;
&lt;li&gt;custom mini-functions are clear, but extra&amp;nbsp;work&lt;/li&gt;
&lt;li&gt;lambdas are ugly, but&amp;nbsp;workable&lt;/li&gt;
&lt;li&gt;partials - especially on top of your own functions - are&amp;nbsp;clean &lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, even if you follow these rules,  its easy for your functional code and your &lt;span class="caps"&gt;GUI&lt;/span&gt; to get in each other&amp;#8217;s ways.  Creating a lot of throwaway functions is busywork, but formatting commands in-line inside &lt;span class="caps"&gt;GUI&lt;/span&gt; code is error prone and hard to read. Partials are nice for separating data from layout code, but usually come with annoying extra syntax to hide the callback&amp;nbsp;arguments.  &lt;/p&gt;
&lt;h3&gt;Next&amp;nbsp;Episode&amp;#8230;&lt;/h3&gt;
&lt;p&gt;Of course if you&amp;#8217;ve been following the &lt;a href="https://github.com/theodox/mGUI"&gt;mGUI&lt;/a&gt;series you&amp;#8217;ll know where I&amp;#8217;m going. (If you haven&amp;#8217;t, you might want to check &lt;a href="pity_for_the_outcast.html"&gt;here&lt;/a&gt;, &lt;a href="rescuing_maya_gui_from_itself.html"&gt;here &lt;/a&gt;and &lt;a href="all_your_base.html"&gt;here&lt;/a&gt; before continuing).  Next time out I&amp;#8217;lll take a look at how you could get to a cleaner separation of concerns like&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mGUI.GUI&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;mg&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_box&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sender&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Tag&lt;/span&gt;  
    &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;polyCube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;D&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mGUIBoxes&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;boxes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ColumnLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;col&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sm&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;small boxes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;med&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;medium boxes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;mg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lrg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;large boxes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
        &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;make_box&lt;/span&gt;  
    &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="Maya"></category><category term="GUI"></category><category term="python"></category><category term="programming"></category></entry><entry><title>Roger Roger</title><link href="https://theodox.github.io/2014/roger_roger" rel="alternate"></link><published>2014-04-17T22:17:00-07:00</published><updated>2014-04-17T22:17:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-04-17:/2014/roger_roger</id><summary type="html">&lt;p&gt;Introducing &lt;a href="https://github.com/theodox/standaloneRPC/tree/more-secure"&gt;standaloneRPC&lt;/a&gt;, a simple maya module for remotely controlling a maya standalone using &lt;span class="caps"&gt;JSON&lt;/span&gt; over&amp;nbsp;http.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you&amp;#8217;ve been playing with the &lt;a href="http://techartsurvival.blogspot.com/2014/04/earth-calling-mayastandalone.html"&gt;stansdaloneRPC server&lt;/a&gt;, I&amp;#8217;ve &lt;a href="https://github.com/theodox/standaloneRPC/tree/more-secure"&gt;added a new branch to the github&lt;/a&gt; project that includes a minimal level of password security. It&amp;#8217;s &lt;em&gt;still&lt;/em&gt; not the kind of security you want if this is to be exposed to the wicked world, but it should suffice to keep you free from teammates who want to prank&amp;nbsp;you.  &lt;/p&gt;
&lt;p&gt;Comments / bug reports and pull request welcome!  If you use the github wiki to log an issue or ask a question, it&amp;#8217;s a good idea to put a comment here to make sure I see&amp;nbsp;it.  &lt;/p&gt;</content><category term="maya"></category><category term="python"></category></entry><entry><title>Sweet Sumotori Dreams</title><link href="https://theodox.github.io/2014/sweet_sumotori_dreams" rel="alternate"></link><published>2014-04-14T14:23:00-07:00</published><updated>2014-04-14T14:23:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-04-14:/2014/sweet_sumotori_dreams</id><summary type="html">&lt;p&gt;pending&lt;/p&gt;</summary><content type="html">&lt;p&gt;I had no idea that the genius behind &lt;a href="http://www.gravitysensation.com/sumotori/"&gt;Sumotori Dreams &lt;/a&gt;is still making awesome procedural animation&amp;nbsp;toys.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gravitysensation.com/sumotori/kezd.jpg"&gt;&lt;img alt="" src="http://www.gravitysensation.com/sumotori/kezd.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re not familiar with Sumotori Dreams, it&amp;#8217;s the funniest thing that ever happened to procedual animation.  Proof here (loud cackling and some profanity in the audio track, could not find any that did not have lots of hilarity and&amp;nbsp;shouting):  &lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/hOvq3-oG5BM" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;If you&amp;#8217;re at all interested in &lt;a href="interesting_graphics_and_animation_research.html"&gt;procedural animation&lt;/a&gt; - or have even a tiny sliver of a sense of humor - you should buy the &lt;a href="https://itunes.apple.com/us/app/sumotori-dreams/id838455884?ls=1&amp;amp;mt=8"&gt;iPhone app&lt;/a&gt; the &lt;a href="https://play.google.com/store/apps/details?id=com.gravitysensation.sumotori"&gt;android app&lt;/a&gt;, or the &lt;a href="http://www.gravitysensation.com/sumotori/Sumotori_Full___Setup.exe"&gt;&lt;span class="caps"&gt;PC&lt;/span&gt; version&lt;/a&gt;.  This guys deserves our&amp;nbsp;support!  &lt;/p&gt;
&lt;p&gt;On a related note, if you like this you may find &lt;a href="http://aigamedev.com/open/access/overgrowth/"&gt;this talk from the developer of Overgrowth&lt;/a&gt; interesting as&amp;nbsp;well.  &lt;/p&gt;</content><category term="games"></category><category term="animation"></category></entry><entry><title>Warning: Garish graphics ahead!</title><link href="https://theodox.github.io/2014/garish_graphics_ahead" rel="alternate"></link><published>2014-04-12T17:59:00-07:00</published><updated>2014-04-12T17:59:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-04-12:/2014/garish_graphics_ahead</id><summary type="html">&lt;p&gt;Getting more oomph out of your Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; using the hidden power of &lt;span class="caps"&gt;HTML&lt;/span&gt; markup in Maya&amp;nbsp;widgets!&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you&amp;#8217;re tired of boring old light-grey-on-dark-grey text, you&amp;#8217;l&amp;#8217;l be pleased to know that the Maya text widget actually supports a surprising amount of &lt;span class="caps"&gt;HTML&lt;/span&gt; markup. Which means that instead of&amp;nbsp;this:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-9X5_YoY6aCo/U0nRf9WRIXI/AAAAAAABICg/l_tl1f_kKd4/s1600/boring.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-9X5_YoY6aCo/U0nRf9WRIXI/AAAAAAABICg/l_tl1f_kKd4/s1600/boring.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You set peoples eyeballs on fire like&amp;nbsp;this:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-Eb4ElNfethw/U0nQ3Ses5aI/AAAAAAABICY/THb9sHzqWZ0/s1600/maya+gui+text.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-Eb4ElNfethw/U0nQ3Ses5aI/AAAAAAABICY/THb9sHzqWZ0/s1600/maya+gui+text.png"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a single cmds.text object  with it&amp;#8217;s  label property set to an &lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;string.     &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It turns out that cmds.text is actually a fairly full-featured &lt;span class="caps"&gt;HTML4&lt;/span&gt; renderer! That means that you can create pretty complex layouts using many &amp;#8212; though not all &amp;#8212; of the same tools you&amp;#8217;d use for laying out a web page.  You can style your text with different &lt;a href="http://www.w3schools.com/css/css_font.asp"&gt;fonts&lt;/a&gt;, sizes, colors, alignments and so on - you can even us &lt;span class="caps"&gt;CSS&lt;/span&gt; style sheets for consistency and&amp;nbsp;flexibility.  &lt;/p&gt;
&lt;p&gt;More than that you can also include images, tables and layout divisions, which are great for formatting complex information.  No more printing out reports into dull old&amp;nbsp;textScrollFields!  &lt;/p&gt;
&lt;p&gt;Best of all, it&amp;#8217;s trivial to&amp;nbsp;do.  &lt;/p&gt;
&lt;p&gt;All you need to do is set the &lt;code&gt;label&lt;/code&gt; property of a &lt;code&gt;cmds.text&lt;/code&gt; object to a striing of valid &lt;span class="caps"&gt;HTML&lt;/span&gt;. By default your object inherits the standard maya background and foreground colors but you can override these in your &lt;span class="caps"&gt;HTML&lt;/span&gt;  You can even just compose your text in an &lt;span class="caps"&gt;HTML&lt;/span&gt; editor like DreamWeaver or Expression Blend; that how I did the example in the graphic&amp;nbsp;above.  &lt;/p&gt;
&lt;p&gt;There are some limitations you need to be aware of.  The big ones seem to&amp;nbsp;be:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It looks like &lt;code&gt;text&lt;/code&gt; is the only control that supports this styling right now ( tested in Maya&amp;nbsp;2014).&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;/&lt;span class="caps"&gt;CSS&lt;/span&gt; controls for positioning text or divs don&amp;#8217;t seem to work. _Align _tags inside a span element do work, but &lt;a href="http://www.w3schools.com/cssref/pr_class_float.asp"&gt;float &lt;/a&gt;and &lt;a href="http://www.w3schools.com/css/css_positioning.asp"&gt;positions&lt;/a&gt; apparently do&amp;nbsp;not.&lt;/li&gt;
&lt;li&gt;The renderer won&amp;#8217;t fetch images or other resources from a &lt;span class="caps"&gt;URL&lt;/span&gt; or relative&amp;nbsp;paths.&lt;/li&gt;
&lt;li&gt;No JavaScripts - so no blinking texts or animated gifs.  I&amp;#8217;m not sure that&amp;#8217;s a&amp;nbsp;loss.&lt;/li&gt;
&lt;li&gt;No inputs such as buttons, checkboxes or text&amp;nbsp;fields.&lt;/li&gt;
&lt;li&gt;Fonts seem to render smaller inside the Maya text than they do in a conventional browser. You can&amp;#8217;t specify text size in ems or percentages; pixel sizes seem to work fine,&amp;nbsp;however.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;d assume that these limitation reflect the behavior of underlying QWidgets inside of Maya - if anybody has the real dope to supplement my guesswork, please chime&amp;nbsp;in.   &lt;/p&gt;
&lt;p&gt;In the mean time, here&amp;#8217;s to the inevitable avalanche of eye-ripping garishness that is sure to result from this revelation. As for me, I&amp;#8217;m off to go convert my whole toolset to &lt;a href="http://bancomicsans.com/main/"&gt;Comic&amp;nbsp;Sans!&lt;/a&gt; &lt;/p&gt;</content><category term="maya"></category><category term="GUI"></category></entry><entry><title>Mighty Morphin Module Manager Made Moreso</title><link href="https://theodox.github.io/2014/mighty_morphin_module_manager_made_moreso" rel="alternate"></link><published>2014-04-08T09:11:00-07:00</published><updated>2014-04-08T09:11:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-04-08:/2014/mighty_morphin_module_manager_made_moreso</id><summary type="html">&lt;p&gt;An mGui port of the &lt;a href=""&gt;Maya Module&amp;nbsp;Manager&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve added a &lt;a href="https://github.com/theodox/mhttps://github.com/theodox/mGui/blob/master/mGui/examples/modMgr.pyGui/blob/master/mGui/examples/modMgr.py"&gt;port &lt;/a&gt;of the &lt;a href="mighty_morphin_maya_module_manager"&gt;Maya Module Manager I posted a while&lt;/a&gt; back to the examples included with the &lt;a href="https://github.com/theodox/mGui"&gt;mGui maya &lt;span class="caps"&gt;GUI&lt;/span&gt; library. &lt;/a&gt; This was an exercise to see how much the neater and more concise I could make it using the&amp;nbsp;library.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-40t7CxBPtPo/Uz-BSayB96I/AAAAAAABICI/IW5w86cjuTA/s1600/modmgr.png"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-40t7CxBPtPo/Uz-BSayB96I/AAAAAAABICI/IW5w86cjuTA/s1600/modmgr.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s some interesting&amp;nbsp;stats:  &lt;/p&gt;
&lt;p&gt;The original version was &lt;strong&gt;237&lt;/strong&gt; lines of code, not counting the header comments. The mGui version was &lt;strong&gt;178&lt;/strong&gt; without the header, so about &lt;strong&gt;25%&lt;/strong&gt; shorter overall.  There are about 80 lines of unchanged, purely behind-the-scenes code which didn&amp;#8217;t change between versions, so the real savings is more like &lt;strong&gt;45%.&lt;/strong&gt;  Plus, the original sample included some functions for formLayout wrangling  so real savings might be a little higher for more old-fashioned&amp;nbsp;code.  &lt;/p&gt;
&lt;p&gt;Like I said &lt;a href="all_your_base.html"&gt;last time&lt;/a&gt;, the mGui package is still evolving so it&amp;#8217;s still very much in a &amp;#8220;use at your own risk&amp;#8221; state right now&amp;#8230; That said, I&amp;#8217;d love to get comments, feedback and&amp;nbsp;suggestions.  &lt;/p&gt;</content><category term="maya"></category><category term="modules"></category><category term="mGui"></category></entry><entry><title>Earth calling maya.standalone!</title><link href="https://theodox.github.io/2014/earth_2_standalone" rel="alternate"></link><published>2014-04-05T11:17:00-07:00</published><updated>2014-04-05T11:17:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-04-05:/2014/earth_2_standalone</id><summary type="html">&lt;p&gt;Remote-controlling a maya standalone instance from a web browser with the &lt;a href="https://github.com/theodox/standaloneRPC"&gt;&lt;code&gt;standaloneRPC&lt;/code&gt;&lt;/a&gt;&amp;nbsp;module.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Somebody over on &lt;a href="http://tech-artists.org"&gt;Tech-artists.org&lt;/a&gt; was &lt;a href="http://tech-artists.org/forum/showthread.php?4642-Python-Maya-Open-commandPort-for-Mayapy&amp;amp;p=24225#post24225"&gt;asking about how to control a maya.standalone instance remotely&lt;/a&gt;.  In ordinary Maya you could use the commandPort, but the commandPort doesn&amp;#8217;t exist when running under standalone - apparently it&amp;#8217;s part of the &lt;span class="caps"&gt;GUI&lt;/span&gt; layer which is not present in batch&amp;nbsp;mode.  &lt;/p&gt;
&lt;p&gt;So, I whipped up an uber-simple &lt;span class="caps"&gt;JSON&lt;/span&gt;-&lt;span class="caps"&gt;RPC&lt;/span&gt;-like server to run in a maya standalone and accept remote commands. In response to some queries I&amp;#8217;ve polished it up and &lt;a href="https://github.com/theodox/standaloneRPC"&gt;put it onto GitHub&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;It&amp;#8217;s an ultra-simple setup. Running the module as a script form mayapy.exe starts a&amp;nbsp;server:      &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    mayapy.exe   path/to/standaloneRPC.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To connect to it from another environment, you import the module, format the command you want to send, and shoot it across to the server. Commands return a &lt;span class="caps"&gt;JSON&lt;/span&gt;-encoded dictionary. When you make a successful command, the return object will include a field called &amp;#8216;results&amp;#8217; containg a json-encoded version of the&amp;nbsp;results:       &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmds.ls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="s1"&gt;u&amp;#39;persp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;side&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;u&amp;#39;front&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For failed queries, the result includes the exception and a traceback&amp;nbsp;string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cmds.fred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# nonexistent command  &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;send_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;exception&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
     &lt;span class="s2"&gt;&amp;quot;traceback&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Traceback (most recent call last)... #SNIP#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
     &lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
     &lt;span class="s2"&gt;&amp;quot;args&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;[]&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
     &lt;span class="s2"&gt;&amp;quot;kwargs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
     &lt;span class="s2"&gt;&amp;quot;cmd_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cmds.fred&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;#8217;s a single file for easy drop. Please, &lt;strong&gt;please&lt;/strong&gt; read the notes - the module includes no effort at authentication or security, so it exposes any machine running it to anyone who knows its there. Don&amp;#8217;t let a machine running this be visible to the&amp;nbsp;internet! &lt;/p&gt;</content><category term="maya"></category><category term="techart"></category><category term="standalone"></category></entry><entry><title>Classic (?) CG: Bingo the Clown</title><link href="https://theodox.github.io/2014/bingo_the_clown" rel="alternate"></link><published>2014-04-04T10:00:00-07:00</published><updated>2014-04-04T10:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-04-04:/2014/bingo_the_clown</id><summary type="html">&lt;p&gt;Chris Landreth&amp;#8217;s emininently creepy &lt;span class="caps"&gt;CG&lt;/span&gt; short, &amp;#8220;Bingo the&amp;nbsp;Clown&amp;#8221;&lt;/p&gt;</summary><content type="html">&lt;p&gt;From the Classic &lt;span class="caps"&gt;CG&lt;/span&gt; files comes &lt;em&gt;Bingo the Clown&lt;/em&gt;. This was originally created to showcase the capabilities of Maya 1.0, back in 1998. It creeped me out then and it creeps me out&amp;nbsp;now.  &lt;/p&gt;
&lt;iframe src="https://player.vimeo.com/video/23191218" width="640" height="480" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;a href="https://vimeo.com/23191218"&gt;Bingo&lt;/a&gt; from &lt;a href="https://vimeo.com/user6946871"&gt;Chris Landreth&lt;/a&gt; on &lt;a href="https://vimeo.com"&gt;Vimeo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve been told, I don&amp;#8217;t know how correctly, that &lt;a href="http://chrislandreth.com/"&gt;Chris Landreth&lt;/a&gt; - the animator who did this film - was the driving force between Maya&amp;#8217;s decision to use Euler angles for everything. I hope that&amp;#8217;s not true. Having both this video and those goddamn Euler angles on your conscience is a lot to answer&amp;nbsp;for.&lt;/p&gt;</content><category term="cg"></category></entry><entry><title>New(-ish) Tools Watch: 3D Coat 4.1</title><link href="https://theodox.github.io/2014/3d_coat_4_1" rel="alternate"></link><published>2014-03-28T22:05:00-07:00</published><updated>2014-03-28T22:05:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-28:/2014/3d_coat_4_1</id><summary type="html">&lt;p&gt;3DCoat, an interesting voxel based ZBrush&amp;nbsp;alternative.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Version 4.1 of 3DCoat just came out - details in the video above or at &lt;a href="http://3d-coat.com/"&gt;3D-Coat.com&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;3DCoat is an interesting voxel-based alternative to Zbrush. It deserves a lot of credit for really pushing the retopology business forward, and also for early PTex support. The interface is less idiosyncratic than Zbrush&amp;#8217;s but less by-the-numbers than&amp;nbsp;Mudbox.  &lt;/p&gt;
&lt;p&gt;Plus, it&amp;#8217;s made in Kiev - buy a copy and &lt;a href="http://www.artistssupportukraine.com/"&gt;stand up for Ukrainian independence&lt;/a&gt;!  &lt;/p&gt;
&lt;p&gt;Some cool feature videos if you&amp;#8217;re&amp;nbsp;curious:  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=NjiIL81sjxA"&gt;&lt;span class="caps"&gt;UV&lt;/span&gt; tools&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=x9TE6xg6Ss8&amp;amp;list=PL7D9A514EEC320105"&gt;Curve-constrained sculpts&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=jX0t1b2b3_Y&amp;amp;list=UUkj0Q5hTgsyROJU4dlNu0Mg"&gt;Ptex&amp;nbsp;texturing&lt;/a&gt;  &lt;/p&gt;</content><category term="tools"></category><category term="cg"></category><category term="modeling"></category></entry><entry><title>Maya GUI II: All Your Base Classes Are Belong To Us</title><link href="https://theodox.github.io/2014/all_your_base" rel="alternate"></link><published>2014-03-28T09:30:00-07:00</published><updated>2014-03-28T09:30:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-28:/2014/all_your_base</id><summary type="html">&lt;p&gt;Introducing &lt;code&gt;mGui&lt;/code&gt;, a module for making Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; coding more pythonic and less&amp;nbsp;infuriating.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;I&amp;#8217;ve left this article mostly intact, but some elements of the syntax have changed in mGui 2.0.  The big changes, generally speaking, are under the hood &amp;#8212; but the 2.0 version uses pep-8 style naming so the capital letters for properties have been replaced with lower-case ones. See the &lt;a href="mGui_updates_2"&gt;mGui updates&lt;/a&gt; post for a more up-to-date view of the current mGui syntax. mGui 2 will be the main line in GitHub after&amp;nbsp;10-10-2016.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In &lt;a href="rescuing_maya_gui_from_itself.html"&gt;Rescuing Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; From Itself&lt;/a&gt; I talked in some detail about how to use descriptors and metaclasses to create a wrapper for the Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; toolkit that, er, sucks less than the default implementation. I also strove mightily to include a lot of more or less irrelevant references to &lt;a href="http://www.youtube.com/watch?v=BfIAKj3Gl1E"&gt;Thunderbirds&lt;/a&gt;. This time out I want to detail what a working implementation of the ideas I sketched out there looks like.&lt;br&gt;
&lt;img alt="" src="http://fc06.deviantart.net/fs70/f/2010/282/6/a/all_your_base_by_ultimathegod-d30fu0f.jpg"&gt;  &lt;/p&gt;
&lt;p&gt;I think this time the irrelevant thematic gloss will come from &lt;a href="http://knowyourmeme.com/memes/all-your-base-are-belong-to-us"&gt;All Your Base Are Belong To Us&lt;/a&gt; jokes. Because (a), we’re talking about base classes, (b) what could be more retro and 90’s than Maya’s &lt;span class="caps"&gt;GUI&lt;/span&gt; system, and (c) &lt;strong&gt;For Great Justice, Make All&amp;nbsp;Zig!&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;I’ve put my current stab at a comprehensive implementation up on Github, in the form of the &lt;a href="https://github.com/theodox/mGUI"&gt;mGUI project&lt;/a&gt; , where you can poke at it to your heart’s content. The whole project is there, and it’s all free to use under the &lt;span class="caps"&gt;MIT&lt;/span&gt;, &lt;a href="http://opensource.org/licenses/MIT"&gt;&lt;em&gt;‘do-what-thou-wilt-but-keep-the-copyright-notice’&lt;/em&gt;&lt;/a&gt; license. Enjoy! I should warn you, though, that this is still &lt;span class="caps"&gt;W.I.&lt;/span&gt;P code, and is evolving all the time! Use it at your own risk – things may change a lot before its really&amp;nbsp;‘ready’.   &lt;/p&gt;
&lt;h2&gt;All Your Properties Are Belong To Our Base&amp;nbsp;Class&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://fc00.deviantart.net/fs30/f/2008/064/8/0/All_your_base_are_belong_to_us_by_Sky_roxorz_815.png"&gt; &lt;/p&gt;
&lt;p&gt;What we’re shooting for is a library that provides all of Maya;’s &lt;span class="caps"&gt;GUI&lt;/span&gt; widgets in a clean, pythonic way without making anybody learn too much new stuff. If all goes well, the result is a cleaned up and more efficient version of things most of us already know. You can also treat this an template for how you might want to to wrap other aspects of Maya – say, rendering or rigging – in cleaner&amp;nbsp;code.  &lt;/p&gt;
&lt;p&gt;From last time, we know we can wrap a Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; component in a class which uses &lt;a href="http://nbviewer.ipython.org/urls/gist.github.com/ChrisBeaumont/5758381/raw/descriptor_writeup.ipynb"&gt;descriptors&lt;/a&gt; to make conventional property access work. The main thing we’re going to be delivering in this installment is a slew of classes that have the right property descriptors to replicate the Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; toolkit. We’ll be using the metaclass system we showed earlier to populate the classes (if none of this makes sense, you probably want to &lt;a href="rescuing_maya_gui_from_itself.html"&gt;hop back to the previous blog entry&lt;/a&gt; before following along).&lt;br&gt;
To keep things simple and minimize the boilerplate, we’ll want to derive all of our concrete classes – the widgets and layouts and so on – from a single base. This helps the code simple and ensure that the features we add work the same way for the whole library. We’ll add a second class later to handle some details specific to layouts, but that will derive from the base class.&lt;br&gt;
Before we look at the details of the base class, we should think a little more about the properties. In the last installment, we treated all properties the same way - as generic wrappers around Maya.cmds. In a production setting, though, we want to distinGUIsh between 3 types of&amp;nbsp;properties:  &lt;/p&gt;
&lt;h4&gt;Regular&amp;nbsp;properties&lt;/h4&gt;
&lt;p&gt;These are just wrapped accesses to commands, like we demonstrated last week. They use the same ControlProperty class as we used last time to call commands on our &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;widgets.&lt;/p&gt;
&lt;h4&gt;Read-only&amp;nbsp;properties&lt;/h4&gt;
&lt;p&gt;A small number of Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; commands are read-only. It would be nice and more pythonic to make sure that these behave appropriately. So, ControlProperty has been tweaked with a flag that allows it to operate as a read-only property; otherwise it’s just the same descriptor we talked about last time out.&amp;nbsp;]&lt;/p&gt;
&lt;h4&gt;Callbacks&lt;/h4&gt;
&lt;p&gt;This one is a bit more involved. I’ve already complained about the weaknesses of the event model in Maya &lt;span class="caps"&gt;GUI&lt;/span&gt;. Cleaning it up starts with knowing which properties are callback properties and treating them accordingly. 
To differentiate between these three types of properties, we need to tweak our old metaclass so that it can distinGUIsh between regular properties, read-only properties, and event properties. Luckily the necessary changes are super simple - basically, we’ll take out the hard-coded list of properties we used before and allow every incoming class to declare a list of properties, a list of read-onlies, and a list of callbacks. (if you want to compare, the version from last time is &lt;a href="https://gist.github.com/theodox/9106311"&gt;here&lt;/a&gt;):  &lt;/p&gt;
&lt;h2&gt;Somebody Set Us Up The&amp;nbsp;Bomb!&lt;/h2&gt;
&lt;p&gt;Before getting into the nitty-gritty of our overall widget class, I want to make a side noted about the special properties used for the callbacks. These CallbackProperty descriptors are slightly different from the familiar ControlProperty. Their job is to de-couple the Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; widget from the commands it fires. They create special delegate objects which will intercept callbacks fired by our &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;objects.  &lt;/p&gt;
&lt;p&gt;If you have experimented a little with last time’s code, you may already have seen that it works just as well for callbacks and commands as for other properties. So you may wonder why we should bother to treat callbacks differently. What’s the&amp;nbsp;point?  &lt;/p&gt;
&lt;p&gt;There are two main reasons this is a useful complication.&lt;br&gt;
First, and most usefully, event delegates make it easier to add your callbacks after you lay out your &lt;span class="caps"&gt;GUI&lt;/span&gt;, rather than forcing you to interleave your code logic with the process of building forms and layouts. De-coupling the functional code form the graphic display makes for more readable and more maintainable code. It also makes it possible for you to reuse fairly generic layouts with different back ends. In&amp;nbsp;pseudo-code:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Layout  
   Layout  
     ButtonA  
     ButtonB  
   Layout  
     ButtonC  
     ListA

ButtonA deletes selected item from ListA  
ButtonB renames selected item from ListA  
ButtonC adds new item to ListA
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;as opposed&amp;nbsp;to  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Layout  
   Layout   
     ButtonA.   
        I&amp;#39;m going to delete something from the list when it gets made  
     ButtonB  
        I&amp;#39;m going to rename something in the list when it gets made  
   Layout  
     ButtonC  
        I&amp;#39;m going to add something to the list when it gets made  
     ListA
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Keeping the functional bits separate makes it easy to, say, split the purely visual layout details into a separate file, but more importantly makes it clear whats an administrative detail and what’s actual functionality.&lt;br&gt;
On a second, more tactical level the proxies also allow you to attach more than one function to a callback. It’s pretty common, for example, that you the act of want selecting an item in a list to select object in the Maya scene, but also to enable some relevant controls and maybe check with a database or talk to source control. Using an event proxy lets you handle those different tasks in three separate functions instead of one big monster that mixes up lots of &lt;span class="caps"&gt;UI&lt;/span&gt; feedback and other&amp;nbsp;concerns.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://images-blogger-opensocial.googleusercontent.com/gadgets/proxy?url=http%3A%2F%2F3.bp.blogspot.com%2F-OFyQFgarV3I%2FUmU6BLY68jI%2FAAAAAAAAA6g%2FHSk55Z2R5Io%2Fs1600%2FPantallazo-1.png&amp;amp;container=blogger&amp;amp;gadget=a&amp;amp;rewriteMime=image%2F*"&gt;  &lt;/p&gt;
&lt;p&gt;If you’re familiar with &lt;span class="caps"&gt;QT&lt;/span&gt; you’ll rexognize that event delegates are basically &lt;span class="caps"&gt;QT&lt;/span&gt;&amp;nbsp;“Signals”  &lt;/p&gt;
&lt;p&gt;So that’s why the extra complexity is worth&amp;nbsp;it.  &lt;/p&gt;
&lt;p&gt;The actual workings of the proxy class are documented in the &lt;a href="https://github.com/theodox/mGUI/blob/master/mGUI/events.py"&gt;events.py file in the Github project&lt;/a&gt;; I’ll get back to how those work in a future post. Details aside, they key takeaway for right now is that this setup helps us move towards &lt;span class="caps"&gt;GUI&lt;/span&gt; code that’s more declarative. That’s the other reason why &lt;code&gt;button.label = “Reset”&lt;/code&gt; is better than &lt;code&gt;cmds.Button(self.activeButton, e=True, l="Reset"&lt;/code&gt;– it’s not just less typing. The real value comes from treating the &lt;span class="caps"&gt;GUI&lt;/span&gt; layout as &lt;strong&gt;data&lt;/strong&gt; rather than &lt;strong&gt;code&lt;/strong&gt;. That means you can concentrate on the actual work of your tools rather than the fiddly details of highlighting buttons or whatever.&lt;br&gt;
Last but not least - by standardizing on the event mechanism we have an easy way to standardize the information that comes with the callback events for very little extra works. So, for example, all of the callbacks include a dictionary of keyword arguments when they fire - and the dictionary includes a reference to the widget that fired the event. That way it’s easy to write a generic event handler and not have to manually bind the firing control to a callback&amp;nbsp;function.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While we’re on the topic of de-coupling: Wouldn’t it be nice to separate out the details of the visuals (“what color is that button?”) from the structure of the forms and layouts?. Spoiler alert! This is a topic for a future post – but the curious might want to check out &lt;a href="https://github.com/theodox/mGUI/blob/master/mGUI/styles.py"&gt;styles.py in the&amp;nbsp;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Think&amp;nbsp;ahead&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://www.geekytattoos.com/wp-content/uploads/2009/04/all-your-base-tattoo.jpg"&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How the hell are you going to explain &lt;span class="caps"&gt;THAT&lt;/span&gt; to your grandchildren?&lt;br&gt;
The obvious lession is &lt;span class="caps"&gt;THINK&lt;/span&gt; &lt;span class="caps"&gt;AHEAD&lt;/span&gt;  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;So, we’ve covered our improved property descriptors, and now it’s time to set up our base&amp;nbsp;class.  &lt;/p&gt;
&lt;p&gt;This is a great opportunity to do some plumbing for more efficient coding. However it’s also a temptation – when the desire to sneak everything under the sun into your base classes is a recipe for monster code and untraceable bugs. This design should be as simple as we can make&amp;nbsp;it.  &lt;/p&gt;
&lt;p&gt;Still, there are a couple of things that it would be nice to put into the base class - they are all very general (as befits base-class functions) and they are all common to any &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;tasks.  &lt;/p&gt;
&lt;h3&gt;Tags&lt;/h3&gt;
&lt;p&gt;In most &lt;span class="caps"&gt;GUI&lt;/span&gt; systems, you can attach any arbitrary data you want to a widget. For example, you might want to have an array of buttons that all did the same thing with slightly different values, say moving an object by different amounts.  In vanilla Maya, you have to encapsulate the data into your command call: With a tag attached to the buttons, on the other hand, you can write a script that just says &amp;#8220;move the target by the amount in this button’s tag&amp;#8221;, which is much easier to maintain and more flexible. And as we just pointed out, the event mechanism always sends a reference to the control which owns an event when it fires, so it’s easy to get to the right tag when you want&amp;nbsp;it.  &lt;/p&gt;
&lt;h3&gt;A real&amp;nbsp;name&lt;/h3&gt;
&lt;p&gt;Having explicit names for your pieces is very handy, particularly in large, deeply nested systems like a &lt;span class="caps"&gt;GUI&lt;/span&gt;..  &lt;/p&gt;
&lt;p&gt;In conventional Maya coding the names are critical, since they are your only way of contacting the &lt;span class="caps"&gt;GUI&lt;/span&gt; after it’s built. They are also unpredictable, because of Maya’s habit of renaming items to give them unique path names. Luckily for us we don’t need to rely on the widget names from Maya, since we’re managing the &lt;span class="caps"&gt;GUI&lt;/span&gt; items under the hood inside our wrappers. This gets us off the hook for creating and managing variables to capture the results of every &lt;span class="caps"&gt;GUI&lt;/span&gt; command under the&amp;nbsp;sun.  &lt;/p&gt;
&lt;p&gt;That said, names are still useful in a big complex system. So, to make it really clear how to find one of our wrappers inside a &lt;span class="caps"&gt;GUI&lt;/span&gt; layout it makes sense to ask for an explicit name passed in as the first argument - that way it’s totally clear what the control is intended to&amp;nbsp;be. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: This system changes slightly in mGui 2.0 (spring, 2016).  The newer syntax allows you to auto-assign keys using local variable names, which involves less redundancy than the original way. Explicit keys still work,&amp;nbsp;however.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are, of course, plenty of controls you don’t really care about once they’re made: help text, spaces, separators and so on. To avoid making users have to invent names for those guys, we should let users pass in 0 or False or None as a succinct way of saying “I don’t care about the name of this&amp;nbsp;thing”.  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Minor note: I used &lt;code&gt;Key&lt;/code&gt; as the name of the property so my &lt;span class="caps"&gt;IDE&lt;/span&gt; did not bug me for using in the Python reserved word ‘id’. Little things matter :) However in mGui 2.0, you generally don&amp;#8217;t need to specify&amp;nbsp;kees.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Speaking of little things: there are some great tools in the Python language to make classes more efficient to work with. The so called ‘magic methods’ allow you to customize the behavior of your classes, both to make them feel more Pythonic and to express your intentions more clearly. Here are a couple of the things we can do with the magic methods in our base&amp;nbsp;class:  &lt;/p&gt;
&lt;h3&gt;__nonzero__&lt;/h3&gt;
&lt;p&gt;Speaking of that pass-in-zero-to-skip-names gimmick, one simple but super-useful thing we can do is to implement the &lt;code&gt;__nonzero__&lt;/code&gt; method. That’s what Python calls when you try the&amp;nbsp;familiar  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;test. In our case, we know that all Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; control commands have the &lt;code&gt;exist&lt;/code&gt; flag, and therefore all of our &lt;span class="caps"&gt;GUI&lt;/span&gt; classes will too. So, if our &lt;code&gt;__nonzero__&lt;/code&gt; just returns the &lt;code&gt;exist&lt;/code&gt; property of our class instances, we can elegantly check for things like dead controls with a simple, pythonic if&amp;nbsp;test.  &lt;/p&gt;
&lt;h3&gt;__repr__&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;__repr__&lt;/code&gt; is what Python calls when you need a printable representation of an object. In our case, we can pass back our underlying Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; object, which is just a &lt;span class="caps"&gt;GUI&lt;/span&gt; path string. This way, you can pass one of our wrapper classes to some other python code that works on &lt;span class="caps"&gt;GUI&lt;/span&gt; objects and it will ‘just work’ – This is more or less what PyMel does for nodes, and it’s a great help when integrating a new module into an existing codebase. Like PyMel’s version there will be some odd corner cases that don’t work but it’s a handy convenience most of the&amp;nbsp;time.  &lt;/p&gt;
&lt;p&gt;As a minor tweak, the &lt;code&gt;__repr__&lt;/code&gt; is also tweaked to display differently when the &lt;span class="caps"&gt;GUI&lt;/span&gt; widget inside a wrapper class has been deleted. This won’t prevent errors if you try to use the widget, but it is a big help in parsing error messages or stack&amp;nbsp;traces.  &lt;/p&gt;
&lt;h3&gt;__iter__&lt;/h3&gt;
&lt;p&gt;The next magic method we want to add is &lt;code&gt;__iter__&lt;/code&gt;. It is the what python calls when you try to loop over a list or a&amp;nbsp;tuple.  &lt;/p&gt;
&lt;p&gt;Now, a single &lt;span class="caps"&gt;GUI&lt;/span&gt; object obviously is not iterable. A layout like columnLayout, on the other hand, can be iterated since it has child controls. By implementing &lt;code&gt;__iter__&lt;/code&gt; here and then over-riding it when we tackle layouts, we can iterate over both layouts and their children in a single call. This makes it easy to look for layout children&amp;nbsp;:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mainlayout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cancel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;#.... etc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So with all those methods added the base Control class looks like&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Styled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BindableObject&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Base class for all mGUI controls.  Provides the necessary frameworks for CtlProperty and CallbackProperty access to the underlying widget.&lt;/span&gt;

&lt;span class="sd"&gt;    NOTE this is not exactly identical to the code on github - more advanced stuff is removed to make the progression clearer  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="c1"&gt;# what command do I call?&lt;/span&gt;
    &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;

    &lt;span class="c1"&gt;# these will be re-written by the metaclass as property descriptors &lt;/span&gt;
    &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;annotation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;backgroundColor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defineTemplate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;docTag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;enable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;enableBackground&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fullPathName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;manage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;noBackground&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preventOverride&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;useTemplate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;visible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;_CALLBACKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dragCallback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dropCallback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;_READ_ONLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;isObscured&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Activate the metaclass!&lt;/span&gt;
    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ControlMeta&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_style&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;        Widget is the GUI element in the scene  &lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Callbacks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;  
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;        A dictionary of Event objects  &lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="n"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_current&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callbackName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;        when a callback property is first accessed this creates an Event for the specified callback and hooks it to the GUI widget&amp;#39;s callback function  &lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callbackName&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__nonzero__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;  
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;deleted UI element &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__class__&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__str__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You’ll notice that it is inheriting from two classes we have not touched on, &lt;code&gt;Styled&lt;/code&gt; and &lt;code&gt;BindableObject&lt;/code&gt;. Those don’t interact with what we’re doing here - they’ll come up in a later post. You can pretend it just says ‘object’. If you’re reading the code carefully you’ll probably spot a little bit of code I haven’t described. &lt;code&gt;register_callback&lt;/code&gt; is there to support event proxies – we’ll talk about the details when we get to &lt;a href="http://techartsurvival.blogspot.com/2014/04/the-main-event-event-oriented.html"&gt;event proxies&lt;/a&gt; in the&amp;nbsp;future.  &lt;/p&gt;
&lt;p&gt;Despite my rather verbose way of describing it all, this is not a lot of code. Which is what exactly you want in a base class: simple, common functionality, not rocket science. Hopefully, though, adding those pythonic behaviors will save a lot of waste verbiage in production&amp;nbsp;work.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-9goyxbxMoA8/Uy5eUMQ1DxI/AAAAAAABIBI/McpZ1Vp2SIQ/s1600/yeoldeayb+(2"&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Damn, the internet has a lot of time on its&amp;nbsp;hands   &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;All Your Children Are Belong To Parent&amp;nbsp;Layout&lt;/h2&gt;
&lt;p&gt;There’s one little bit of plumbing in Control that is worth calling&amp;nbsp;out:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_current&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That’s way of making sure that we can store references to our control wrappers in our layout wrappers - that is, when you create a wrapped button inside a wrapped columnLayout, the columnLayout has a handle to the wrapper class for the button. Which brings us around neatly to the wrapper class for layouts - called… wait for it…&amp;nbsp;Layout.  &lt;/p&gt;
&lt;p&gt;To support nesting, we want our Layout wrapper class to be a context manager. The idea is that you when you start a Layout, it declares itself the active layer and all &lt;span class="caps"&gt;GUI&lt;/span&gt; controls that get created add themselves to it; when you’re done with it control is return to whatever Layout was active before. As Doctor Who says of bow ties, “Context Managers are&amp;nbsp;cool.”  &lt;/p&gt;
&lt;p&gt;If you’ve done a lot of Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; you know it’s also nice to have the same functionality for menus as well. So, to avoid repeating ourselves let’s start by creating a generic version of Control that works as a context manager so we can get identical functionality in windows, layouts and menus. Then we can inherit it into a wrapper class for layouts and another for windows and voila, they are all context managers without cutting and pasting. Here’s the abstract base class for all ‘nested’ classes: menus, windows, layouts&amp;nbsp;etc:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Nested&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Base class for all the nested context-manager classes which automatically parent themselves  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;ACTIVE_LAYOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nested&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__cache_layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Nested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACTIVE_LAYOUT&lt;/span&gt;  
        &lt;span class="n"&gt;Nested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACTIVE_LAYOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;typ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;traceback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
        &lt;span class="n"&gt;Nested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACTIVE_LAYOUT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__cache_layout&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__cache_layout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;  
        &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;        this is called at the end of a context, it can be used to (for example) perform attachments  &lt;/span&gt;
&lt;span class="sd"&gt;        in a formLayout.  Override in derived classes for different behaviors.  &lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="n"&gt;path_difference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;):]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;path_difference&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Children of a layout must have unique IDs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Controls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;sub&lt;/span&gt;  
        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_current&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACTIVE_LAYOUT&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;Nested&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ACTIVE_LAYOUT&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All that really does is pop the current &lt;code&gt;Nested&lt;/code&gt; onto a stack and make it possible for other controls to add themselves to the instance on top of the&amp;nbsp;stack.  &lt;/p&gt;
&lt;p&gt;Here’s the concrete implementation for actual Layout&amp;nbsp;classes:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Nested&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;  
    &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;annotation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;backgroundColor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defineTemplate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;docTag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dragCallback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dropCallback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;enable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;enableBackground&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fullPathName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;manage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;noBackground&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preventOverride&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;useTemplate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;visible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;_CALLBACKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dragCallback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dropCallback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;_READ_ONLY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;isObscured&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;childArray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;numberOfChildren&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is just a regular mGUI class (it gets all of the metaclass behavior from &lt;code&gt;Control&lt;/code&gt;, via &lt;code&gt;Nested&lt;/code&gt;) with added properties for common layout properties like &lt;code&gt;numberOfChildren&lt;/code&gt;.  &lt;/p&gt;
&lt;p&gt;While we’re messing with contexts, this is also a great opportunity to do what PyMel already does and make all layouts automatically manage &lt;span class="caps"&gt;UI&lt;/span&gt; parenting. This gets rid of all those irritating calls to setParent(“..”), and lets us write &lt;span class="caps"&gt;GUI&lt;/span&gt; code that looks like real Python and not a plate of spaghetti. Compare this wordy cmds&amp;nbsp;example:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Ugly version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GUI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;frameLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;t_buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;buttons column&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;col&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;sphere_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkSphere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Sphere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_sphere&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cone_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_cone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cube_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_cube&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;setParen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;setParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;frameLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r_buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;buttons row&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;rowLayout&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numberOfColumns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;sphere_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkSphere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Sphere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_sphere&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cone_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_cone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cube_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;utton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_cube&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;setParen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;setParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;frameLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g_buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;buttons grid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;gridLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numberOfColumns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="n"&gt;sphere_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkSphere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Sphere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_sphere&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cone_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_cone&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cube_3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_cube&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;circle_btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCircle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Circle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_circle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;setParen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;setParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;setParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;win&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To this version using context manager&amp;nbsp;layouts:  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Historical note:&lt;/strong&gt; This uses &amp;#8216;mGui 1&amp;#8217; syntax; in mGui 2 the explicit keys would not be&amp;nbsp;needed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;mGUI.GUI&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;  
&lt;span class="c1"&gt;# note the caps: all of these are wrapper objects, not Maya.cmds!&lt;/span&gt;

&lt;span class="n"&gt;window&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;main window&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;How&amp;#39;s this&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ColumnLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GUI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;FrameLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;t_buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;buttons column&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;ColumnLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;col&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkSphere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Sphere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;FrameLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;r_buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;buttons row&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;RowLayout&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numberOfColumns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkSphere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Sphere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;FrameLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;g_buttons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;buttons grid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;GridLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;grid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numberOfColumns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkSphere&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Sphere&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCone&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCube&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Make Cube&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mkCircle&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Make Circle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That example also includes one other neat way to leverage contexts too. If you double check the &lt;code&gt;add&lt;/code&gt; method in &lt;code&gt;Nested&lt;/code&gt; you’ll see that it adds child wrapper objects to it’s own &lt;code&gt;__dict__&lt;/code&gt;. That makes them accessible without having to explicitly store them. In this example, you could get to the last sphere-making button in this example as &lt;code&gt;GUI.g_buttons.grid.mk_sphere&lt;/code&gt; without having to manually capture the name of the underlying widgets they way the first example must. Since Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; is always a single-rooted hierarchy, as long as you know the first parent of a window or panel you can always get to any of its the child layouts or controls. This saves a lot of the boring boilerplate you would otherwise need to do just keeping track of bits and&amp;nbsp;pieces.  &lt;/p&gt;
&lt;p&gt;There’s one little extra bit of magic in there to let the add method discriminate between children you care about and those you don’t. If your child controls have no key set, they won’t be added to the &lt;code&gt;__dict__&lt;/code&gt;. On a related note, you can also be tricksy and add a control which is not a direct child of the layout - for example, if you had a layout with a list of widgets in a scrollLayout, you don’t usually don’t care about the scrollbar - it’s just along for the ride. So you can add the widgets directly to the ‘real’ parent layout and keep the paths nice and trim. The goal, after all, is to make the &lt;span class="caps"&gt;GUI&lt;/span&gt; layout a logical tree you can work with efficiently. There’s a practical example of this trick in the &lt;a href="https://github.com/theodox/mGUI/blob/master/mGUI/lists.py"&gt;lists.py&lt;/a&gt; file on&amp;nbsp;Github.&lt;/p&gt;
&lt;p&gt;Here’s a snippet tacked on to the end of that last sample showing how you can use the iterability of the layouts to set properties in bulk. You can see how the work of turning command-style access into property style access, combined with the extra clarity we get from context managers, really pays&amp;nbsp;off:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# using the iterability of the layout to set widths&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t_buttons&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;r_buttons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;85&lt;/span&gt;  
&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;  &lt;span class="c1"&gt;# the last item is GUI.r_buttons.row itself  &lt;/span&gt;
&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnWidth3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# ditto&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g_buttons&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;  
&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;  &lt;span class="c1"&gt;# now the last item is the grid  &lt;/span&gt;
&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cellWidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;128&lt;/span&gt;

&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-YbhMcGSYTpg/Uy58bLV2nlI/AAAAAAABIBo/4q3TtCRPosI/s1600/example.png"&gt;  &lt;/p&gt;
&lt;p&gt;I don’t even want to think about the equivalent code in &lt;code&gt;cmds&lt;/code&gt;!&lt;br&gt;
One parting note about the naming scheme, It does have one, inevitable drawback: it means that the child wrappers have unique names inside a given context. Not much we can do about that. They can, however, have the same name under different parents - the example above has , &lt;code&gt;GUI.t_buttons.grid&lt;/code&gt;.&lt;code&gt;mk_sphere&lt;/code&gt;, and &lt;code&gt;GUI.g_buttons.grid.mk_sphere&lt;/code&gt; Thats a useful thing to exploit if you want to, say, find all of the ‘Select’ buttons on a form and disable them or something off that&amp;nbsp;sort.  &lt;/p&gt;
&lt;h2&gt;Make All&amp;nbsp;Zig!&lt;/h2&gt;
&lt;p&gt;Hopefully, the combination of some syntax sugar in our wrappers and turning layouts into context managers will make Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; layout less of a pain in the butt. However, we still need to actually crank out all the wrappers for all those scores of classes in the Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; library. Descriptors and metaclasses are powerful tools, but few of us have the intestinal fortitude to plow through the dozens of classes in the Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; library getting every flag and command&amp;nbsp;correct.  &lt;/p&gt;
&lt;p&gt;In an ideal world we’d have a way of reflecting over some kind of assembly information and extracting all of the Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; commands with their flags and options. Of course, in an ideal world we would not have to do this in the first place, since the native &lt;span class="caps"&gt;GUI&lt;/span&gt; system would not be the unfortunate &lt;span class="caps"&gt;SNES&lt;/span&gt;-era mishmash that it&amp;nbsp;is.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.rogerwendell.com/images/allyourbase/allyourbase_clip.gif"&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Mass production is a pain in the&amp;nbsp;ass.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Luckily, the &lt;span class="caps"&gt;TA&lt;/span&gt; spirit cannot be kept down by adversity. In this case we don’t have a nice clean api but we do have &lt;span class="caps"&gt;MEL&lt;/span&gt;&amp;#8230;. poor, neglected, wallflower &lt;span class="caps"&gt;MEL&lt;/span&gt;. Well, here’s a chance for the wallflower to save the party: &lt;span class="caps"&gt;MEL&lt;/span&gt;’s help command can list all of the commands and all of the flags in Maya. So, what we need to do is to run through all of the Mel commands in help, find the ones that look like &lt;span class="caps"&gt;GUI&lt;/span&gt; commands, and capture their command - flag combinations as raw material for our metaclass control&amp;nbsp;factory.  &lt;/p&gt;
&lt;p&gt;See? This was getting all programmery, but now we’re back in familiar &lt;span class="caps"&gt;TA&lt;/span&gt; spit-and-bailing-wire territory.&amp;nbsp;Comfier?  &lt;/p&gt;
&lt;p&gt;The actual code to build the wrappers isn’t particularly interesting (its &lt;a href="https://github.com/theodox/mGUI/blob/master/mGUI/helpers/tools.py"&gt;here&lt;/a&gt; if you want to see it). In two sentences: Use the mel &lt;code&gt;help *&lt;/code&gt; command to find all of the commands in Maya which share flags with cmds.control or cmds.layout. Then collect their flags to make the list of class attributes that the metaclass uses to create property descriptors. The final output will be a big ol’ string of class definitions like&amp;nbsp;this:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FloatSlider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Control&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;sample output from mGUI.helpers.tools.generate_commands()&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floatSlider&lt;/span&gt;  
    &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;horizontal&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;step&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;maxValue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;minValue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
    &lt;span class="n"&gt;_CALLBACKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;changeCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dragCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We generate two files, one for controls and one for layouts (that’s an arbitrary design call on my part, you could of course have one file). Now they’re just sitting on disk as if we’d written them by hand. We can import our newly generated modules and away we go, with nice pythonic properties and our new&amp;nbsp;functions.  &lt;/p&gt;
&lt;p&gt;There is one judgement call here that is worth mentioning in passing.&lt;br&gt;
The logic in the helper modules which generate this is all deterministic, it doesn’t need human intervention so it could actually be run at module load time rather than being run and dumped out to a file. For what I want to do, I felt that physical files were a better choice, because they allow the option of hand tailoring the wrapper classes as the project evolves. Plus, the startup cost of trolling through every &lt;span class="caps"&gt;MEL&lt;/span&gt; command, while it’s not very big, is real and it seems good to avoid it. I’ve have heard enough grumbling over the years about PyMel’s startup speed that I thought it wisest to opt for speed and clarity over fewer files on&amp;nbsp;disk.  &lt;/p&gt;
&lt;p&gt;One nice side effect of generating our wrappers this way: we’ve added some functionality through our base classes but fundamentally we’ve kept the same names and options we already know from plain old Maya.cmds. The only changes are the mandatory names and the fact that I’ve capitalized the class names to make them more&amp;nbsp;pep-8-friendly.  &lt;/p&gt;
&lt;p&gt;Hopefully, keeps the learning curve short for new user. Its hard enough to pick up a new style, making you memorize hundreds of new property names seem like a big tax on&amp;nbsp;users.  &lt;/p&gt;
&lt;p&gt;In the version up on Github (and in this example) I opted to use only the long name for the properties. This is definitely a matter of taste; I’m sure that many TAs out there are sufficiently familiar with the old Maya command flags that a howler like &lt;code&gt;cmds.rowLayout(nc=2, cw2=(50,100), ct2=('both', 5), bgc = (.8,.6,.6), cl2=("left", "right")&lt;/code&gt; makes its meaning clear. for my part, though, the long names clarify the intent of the code enormously if you make a fairly small upfront investment in&amp;nbsp;typing.   &lt;/p&gt;
&lt;p&gt;If you are of the opposite opinion, though, you can call the &lt;code&gt;generate_helpers&lt;/code&gt; and &lt;code&gt;generate_controls&lt;/code&gt; functions in mGUI.helpers.tools with &lt;code&gt;includeShortNames&lt;/code&gt; set to true make your own wrappers with the short flags&amp;nbsp;too.  &lt;/p&gt;
&lt;h2&gt;What You&amp;nbsp;Say!!!&lt;/h2&gt;
&lt;p&gt;Now we’ve got a complete library of all the widgets. You can see the results in &lt;a href="https://github.com/theodox/mGUI/blob/master/mGUI/core/controls.py"&gt;controls.py&lt;/a&gt; and &lt;a href="https://github.com/theodox/mGUI/blob/master/mGUI/core/layouts.py"&gt;layouts.py&lt;/a&gt; on GitHub. (The base classes are also up there for your perusal in &lt;a href="https://github.com/theodox/mGUI/blob/master/mGUI/core/__init__.py"&gt;the root of the core module&lt;/a&gt;). If all you want is to stop writing long commands every time you touch a &lt;span class="caps"&gt;GUI&lt;/span&gt; item, you’re done. You can write crisper layout code, tweak your properties, and so on with what we’ve covered so far. If you’re interested in making practical use of this setup – remember that &lt;span class="caps"&gt;WIP&lt;/span&gt; warning! – you should read the docs in the events.py module to make sure you know how to hook up callback events. I’ll cover that in more detail in the future.&lt;br&gt;
However… Simpler syntax is just scratching the surface of what we can get up to now that we have a proper class library for our widgets. Next time out we’ll look at the event mechanism in more detail and talk about how to cleanly separate your functional code, &lt;span class="caps"&gt;GUI&lt;/span&gt; layouts, and the display styles of your&amp;nbsp;widgets.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=8fvTxv46ano"&gt;Until next&amp;nbsp;time&amp;#8230;.&lt;/a&gt;&lt;/p&gt;</content><category term="Maya"></category><category term="python"></category><category term="GUI"></category><category term="programming"></category><category term="mGui"></category></entry><entry><title>(?:regex){1} (haterz)+</title><link href="https://theodox.github.io/2014/for_regex_haters" rel="alternate"></link><published>2014-03-26T17:10:00-07:00</published><updated>2014-03-26T17:10:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-26:/2014/for_regex_haters</id><summary type="html">&lt;p&gt;A handy cheat-sheet site for python&amp;nbsp;regexes.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you hate regexes as much as I do - which, honestly, seems scarcely possible - you should check out these regex preview sites which make like a little easier when you&amp;#8217;re trying to work out a particularly nasty&amp;nbsp;one:  &lt;/p&gt;
&lt;h3&gt;Python: &lt;a href="https://pythex.org/"&gt;Pythex&lt;/a&gt;&lt;/h3&gt;
&lt;h3&gt;C# / dotnet : &lt;a href="http://regexstorm.net/tester"&gt;Regex&amp;nbsp;Storm&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Both of these offer big productivity boost over the usual tweak-run-check&amp;nbsp;cycle &lt;/p&gt;</content><category term="programming"></category><category term="python"></category><category term="regex"></category></entry><entry><title>New tools watch: MARI</title><link href="https://theodox.github.io/2014/mari" rel="alternate"></link><published>2014-03-25T09:30:00-07:00</published><updated>2014-03-25T09:30:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-25:/2014/mari</id><summary type="html">&lt;p&gt;Mari, a high-end dedicated 3D paint program. It&amp;#8217;s awesome, but&amp;nbsp;pricey.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lately - particularly since the demise of the &lt;a href="sigh.html"&gt;late, lamented &lt;span class="caps"&gt;XSI&lt;/span&gt;&lt;/a&gt;, I&amp;#8217;ve been increasingly worried about getting too locked in to any one vendor for my tools.  I go way back with Photoshop - I once emailed a bug report directly to &lt;a href="http://en.wikipedia.org/wiki/John_Knoll"&gt;John Knoll&lt;/a&gt; on my &lt;a href="http://arstechnica.com/tech-policy/2009/07/goodbye-compuserve-we-thought-you-had-already-died/"&gt;Compuserve &lt;/a&gt;(!!) account.  I was in the audience for the Maya launch at &lt;span class="caps"&gt;SIGGRAPH&lt;/span&gt; in, I think it was&amp;nbsp;1997.   &lt;/p&gt;
&lt;p&gt;Jeez, I&amp;#8217;m really fricking &lt;em&gt;old.&lt;/em&gt; But I&amp;nbsp;digress.  &lt;/p&gt;
&lt;p&gt;The point is, I love those tools. They&amp;#8217;ve been part of my life for a long time. But I don&amp;#8217;t like being too beholden to anybody, especially not an anybody who&amp;#8217;s a big public company that has to answer to shareholders and analysts and is not particularly worried about&amp;nbsp;competition.  &lt;/p&gt;
&lt;p&gt;For that reason I&amp;#8217;m actively looking for alternatives to supplement or even supplant the old standbys.  And this &lt;span class="caps"&gt;GDC&lt;/span&gt; gave me some up-close and personal time with a very promising one: &lt;a href="http://www.thefoundry.co.uk/products/mari/"&gt;Mari&lt;/a&gt;, the 3-d painting app from &lt;a href="http://www.thefoundry.co.uk/"&gt;the Foundry&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.cgsociety.org/stories/2010_05/mari/banner01.jpg"&gt;&lt;img alt="" src="http://www.cgsociety.org/stories/2010_05/mari/banner01.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lots of Mari work on &lt;em&gt;Avatar&lt;/em&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;More after the&amp;nbsp;jump.  &lt;/p&gt;
&lt;p&gt;Caveat: this is &lt;em&gt;not&lt;/em&gt; a real review; it&amp;#8217;s a quick rundown of what I learned from a demo and some conversations with the devs.  If I write a real review, I&amp;#8217;ll mark it as such. This is more of a scouting&amp;nbsp;report.  &lt;/p&gt;
&lt;p&gt;Mari is a 3d paint package.  A very cool&amp;nbsp;one.  &lt;/p&gt;
&lt;p&gt;There have been 3d paint packages for a long time, since the &lt;span class="caps"&gt;SGI&lt;/span&gt; days, but they&amp;#8217;ve never been a highly competitive area outside of the film business. The best software used to be confined to high-end workstations.  The most popular &lt;span class="caps"&gt;PC&lt;/span&gt; 3d painter, &lt;a href="http://www.maxon.net/products/new-in-cinema-4d-r15/overview.html"&gt;Body Paint&lt;/a&gt;, has never become a mainstream tool (at least in the &lt;span class="caps"&gt;US&lt;/span&gt;), perhaps since it&amp;#8217;s most closely aligned with &lt;a href="http://www.maxon.net/products/cinema-4d-prime/who-should-use-it.html"&gt;Cinema4D&lt;/a&gt;, which remains an outsider choice over here.  Although it does a pretty good job, it hasn&amp;#8217;t gotten a huge fan base &amp;#8212; it may be that the overlap with the free, built-in &lt;a href="http://download.autodesk.com/global/docs/maya2014/en_us/index.html?url=files/3D_Paint_Tool_Paint_Textures_on_3D_objects.htm,topicNumber=d30e383981"&gt;PaintFX/Artisan&lt;/a&gt; tools in Maya kept it from gaining a lot of momentum.  PaintFX itself is &amp;#8212; well, it&amp;#8217;s free, it works &lt;span class="caps"&gt;OK&lt;/span&gt; if you have basic needs and good UVs, and I don&amp;#8217;t know a lot of folks who rely on it for much more than basic masks or blocking in broad strokes to be filled out in Photoshop.  The lack of layering, oddball texture handling, and finicky paint projection have all made it a feel like an afterthought: the &lt;span class="caps"&gt;MS&lt;/span&gt; paint of 3d paintng. Sure, it works&amp;#8230; but, you&amp;nbsp;know&amp;#8230;  &lt;/p&gt;
&lt;p&gt;So against this background I was a little skeptical when I went for my demo. I&amp;#8217;ve run trial versions of Mari before, and the older version I have played with suffered from a somewhat idiosyncratic interface.  Mari originated at &lt;span class="caps"&gt;WETA&lt;/span&gt; Digital as an in-house tool and its roots in a very particular pipeline used to be very apparent.  The newest version (I believe I was shown 2.6, the website touts 2.5 as the latest) has a much more comprehensible&amp;nbsp;feel.  &lt;/p&gt;
&lt;p&gt;Like BodyPaint, but unlike PaintFX/Artisan, Mari supports layers. However it takes the concept of layering and runs with it way past where, say, Photoshop has to stop and catch it&amp;#8217;s breath.  Its has more in common with a node-graph based compositing tool (say, &lt;a href="http://www.autodesk.com/products/autodesk-flame-family/features/flame-premium-products/all/gallery-view"&gt;Flame &lt;/a&gt;or &lt;a href="https://www.thefoundry.co.uk/products/nuke-product-family/nuke/features/"&gt;Nuke&lt;/a&gt;)  than a joe-blow paint layer system. You can re-route channels from one map to another non-destructively. For example you could use a crisped up, high-contrast version of your diffuse texture as a spec mask - and be able to flow changes forward from the diffuse texture as you kept woirking while also adding new detail on top of the spec channel : each map gets its own stack of layers. Here&amp;#8217;s a video from the 2.0 version which touches on the&amp;nbsp;concept:  &lt;/p&gt;
&lt;p&gt;You can even put layers &lt;em&gt;on your layer masks&lt;/em&gt;, which is extremely powerful and should be picked up by everybody else in painting soon. Plus you can make procedural layers (which can themselves be layer masks&amp;#8230;). Even without the 3-d ness this would be a pretty compelling painting technology. Combined with the ability to paint specular or ambient occlusion masks directly in real time, its extra cool. Add in a nifty filter that lets you paint onto normal maps (again, real-time) while keeping your normals normalized and it&amp;#8217;s really, really&amp;nbsp;cool.  &lt;/p&gt;
&lt;p&gt;The 3D painting itself looked really smooth, with a good brush engine and pretty impressive performance (the demo was running on a Macbook Retina 15 laptop, so a very good but not firebreathing machine).  The most surprising bit was the resolutions that were possible: painting on multiple 4-k textures at once did not seem to faze the program (caveat: it&amp;#8217;s a demo. I&amp;#8217;d assume they are pretty careful to pick subject matter that makes them look&amp;nbsp;good).   &lt;/p&gt;
&lt;p&gt;The extra high resolution is handy because the program also does a really nice job transferring textures to meshes with different UVs. Evidently they do it using a very dense color point cloud, rather than the more common raycast solutions that you see in, eg, Maya&amp;#8217;s transfer maps toolset.  The results looked pretty good even on pretty crummy auto-generated &lt;span class="caps"&gt;UV&lt;/span&gt; sets; this makes it easy to imagine painting big textures on high res models and transferring them to game-res as a final step, instead of committing to the low-res model and textures early on &amp;#8212; a workflow I&amp;#8217;ve been championing for a long&amp;nbsp;time.  &lt;/p&gt;
&lt;p&gt;The last big plus for me was a built-in Python interpreter (looked like a 2.6 series). This should make it a much better citizen of the pipeline than some other painting programs I could mention, which require you to &lt;a href="http://techartsurvival.blogspot.com/2014/01/talking-to-photoshop-via-tcp.html"&gt;reinvent network communications&lt;/a&gt; if you want to get anything done&amp;nbsp;script-wise.  &lt;/p&gt;
&lt;p&gt;Other good things:&lt;br&gt;
&lt;em&gt; &lt;a href="http://www.digitaltutors.com/tutorial/743-Creating-Ptex-Textures-in-MARI"&gt;Support for PTex, the no-uv texturing system&lt;/a&gt;. I&amp;#8217;m not clear, though, on how to convert a PTex painted object to UVs.&lt;br&gt;
&lt;/em&gt; Linear color workflow&lt;br&gt;
&lt;em&gt; A nice image-based lighting / physically based renderer preview (think &lt;a href="http://www.marmoset.co/"&gt;SkyShop or Toolbag&lt;/a&gt;)&lt;br&gt;
&lt;/em&gt; Programmable shaders for the viewport, so you could paint directly into your game&amp;nbsp;shaders  &lt;/p&gt;
&lt;p&gt;All in all, this was a great first impression. As I said, it was a demo not a hands on, so I&amp;#8217;m reporting what I saw which I expect was chosen well. However I&amp;#8217;ll write more when I&amp;#8217;ve had a chance to grab a demo and actually use it myself.  In the meantime here&amp;#8217;s &lt;a href="http://www.youtube.com/playlist?list=PLi2GhhsPL-RqCYZy6THx-nveDPadoeORB"&gt;a link to the Foundry&amp;#8217;s YouTube Channel &lt;/a&gt;if you want to see&amp;nbsp;more.&lt;/p&gt;</content><category term="tools"></category><category term="industry"></category></entry><entry><title>Back from GDC</title><link href="https://theodox.github.io/2014/gdc_2014" rel="alternate"></link><published>2014-03-22T23:02:00-07:00</published><updated>2014-03-22T23:02:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-22:/2014/gdc_2014</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt; 2014 after-action&amp;nbsp;report&lt;/p&gt;</summary><content type="html">&lt;p&gt;Well, another year, another &lt;a href="http://www.gdconf.com/"&gt;&lt;span class="caps"&gt;GDC&lt;/span&gt;&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;An upbeat show - the combination of the indie/mobile tidal wave and a new console generation has breathed some much needed life into the old beast - the business center was bigger than I&amp;#8217;ve seen it in years, and full of people&amp;nbsp;hustling.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://2.bp.blogspot.com/-FbM1i70bco8/Uy51CRDoDiI/AAAAAAABIBY/8_SGnjlJxeM/s1600/GDC.jpg"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-FbM1i70bco8/Uy51CRDoDiI/AAAAAAABIBY/8_SGnjlJxeM/s1600/GDC.jpg"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The floor was&amp;nbsp;buzzing!  &lt;/p&gt;
&lt;p&gt;The absence of many familiar &lt;span class="caps"&gt;AAA&lt;/span&gt; names was still pretty striking - no lines around the block for the Activision/&lt;span class="caps"&gt;EA&lt;/span&gt; meat markets, no scores of kids waiting to show their portfolios to someone from Blizzard or&amp;nbsp;whatnot.  &lt;/p&gt;
&lt;p&gt;There was, however, a booth from &lt;a href="http://www.spacex.com/"&gt;SpaceX&lt;/a&gt;. Someboedy told me they are &lt;em&gt;hiring tech artists&lt;/em&gt;.  See, we&amp;#8217;re conquering the world&amp;#8230; from&amp;nbsp;above!  &lt;/p&gt;
&lt;p&gt;And, there was an amazing bustle of activity from the indie-casual-mobile side. Tons and tons of booths, more than I remember ever seeing before. Most of them will probably be gone in two years, but it&amp;#8217;s still great to see people hustling around, coming up with plans, and trying to make something big after all the gloom of the last few years.  Here&amp;#8217;s hoping the many friends and former colleagues who&amp;#8217;ve been battered by business can make up some lost ground in this new gold rush.  It&amp;#8217;s probably another bubble - remember when everybody wanted to hire a teal of 800 to talk on &lt;span class="caps"&gt;WOW&lt;/span&gt;? - but it&amp;#8217;s still better than sitting around&amp;nbsp;moping.   &lt;/p&gt;
&lt;p&gt;All the movement has a lot to do with all the changes in the business that have broken the stifling rut of &lt;span class="caps"&gt;AAA&lt;/span&gt; juggernauts, sequel-itis, and me-too design that was hanging over us like a fog a few years back. All sorts of fun and interesting stuff&amp;nbsp;happening.   &lt;/p&gt;
&lt;p&gt;Saw some cool tech too, which I&amp;#8217;ll talk about later in the week. In the meantime: so long &lt;span class="caps"&gt;SF&lt;/span&gt;!  &lt;/p&gt;
&lt;p&gt;Update: I did not see this talk, but &lt;a href="http://www.gamasutra.com/blogs/GregCostikyan/20140324/213784/2014_GDC_Rant_We_Had_a_Good_10_Years_But_the_Walls_are_Closing_In.php"&gt;this rant from Greg Costikyan&lt;/a&gt; does summarize neatly some things I am worrying about over the long&amp;nbsp;haul&amp;#8230;  &lt;/p&gt;</content><category term="gdc"></category><category term="industry"></category><category term="jobs"></category></entry><entry><title>Worst. CG. EVAR.</title><link href="https://theodox.github.io/2014/worst_cg_evar_" rel="alternate"></link><published>2014-03-19T12:15:00-07:00</published><updated>2014-03-19T12:15:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-19:/2014/worst_cg_evar_</id><summary type="html">&lt;p&gt;A compendium of truly mind-blowingly bad &lt;span class="caps"&gt;CG&lt;/span&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Anybody who has ever had to suffer through demo reel reviews will appreciate this:  This guy&amp;#8217;s &lt;a href="https://www.youtube.com/user/Really3D"&gt;Youtube channel&lt;/a&gt; is the Louvre of bad &lt;span class="caps"&gt;CG&lt;/span&gt;. And yes, he is in on the joke. But he is also &lt;a href="http://www.patreon.com/Really3D"&gt;looking for donations&lt;/a&gt; so he can raise enough money for a &lt;span class="caps"&gt;PC&lt;/span&gt; which can render&amp;nbsp;shadows. &lt;/p&gt;</content><category term="cg"></category></entry><entry><title>Unity 5 announced</title><link href="https://theodox.github.io/2014/unity_5_announced" rel="alternate"></link><published>2014-03-18T11:14:00-07:00</published><updated>2014-03-18T11:14:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-18:/2014/unity_5_announced</id><summary type="html">&lt;p&gt;Unity 5 has been&amp;nbsp;announced&lt;/p&gt;</summary><content type="html">&lt;p&gt;So it looks like Unity &lt;a href="http://unity3d.com/5"&gt;is announcing Unity 5 a bit early&lt;/a&gt;.   It&amp;#8217;s a bit premature, since they are not done with the much anticipated 4.6 release (I&amp;#8217;ve been wrestling with the existing, awful Unitry &lt;span class="caps"&gt;GUI&lt;/span&gt; system for months and I &lt;strong&gt;can&amp;#8217;t freaking wait&lt;/strong&gt; to push it over the&amp;nbsp;gunwale!)   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://unity3d.com/profiles/unity3d/themes/unity/images/pages/unity5/slider/doll2.jpg"&gt;&lt;img alt="" src="http://unity3d.com/profiles/unity3d/themes/unity/images/pages/unity5/slider/doll2.jpg"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Key points of&amp;nbsp;interest:&lt;/h2&gt;
&lt;h4&gt;They are integrating the realtime &lt;span class="caps"&gt;GI&lt;/span&gt; middleware &lt;a href="http://www.geomerics.com/"&gt;Enlighten &lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is an interesting choice on a couple of levels; for one thing, I&amp;#8217;m not sure most platforms out there are quite ready for realtime &lt;span class="caps"&gt;GI&lt;/span&gt; yet &amp;#8212; while you can &lt;em&gt;do&lt;/em&gt; it, as Crytek has been doing for a couple of years, it&amp;#8217;s hard to do it in a real production environment with real assets and (more importantly) real performance constraints.  I wonder how many current Unity users really need this?  Given that Unity perf generally lags more traditional engines thanks to the C# layer switch costs and managed memory, I&amp;#8217;m a bit surprised they took on something so high end.   They advertise this as &amp;#8216;mobile ready&amp;#8217; - I&amp;#8217;ll believe it when I see it. &lt;a href="https://www.marmoset.co/skyshop"&gt;SkyShop &lt;/a&gt;makes gorgeous pictures on an iPad  - at around 20 fps for one object on&amp;nbsp;screen. &lt;/p&gt;
&lt;p&gt;That said, it does make really pretty&amp;nbsp;demos.&lt;/p&gt;
&lt;h4&gt;Physically based&amp;nbsp;shaders.&lt;/h4&gt;
&lt;p&gt;This is very interesting, but the devil is in the details;  physically correct rendering is a very appealing idea, and is hard to beat when done right; but the mental and artistic adjustment costs can be pretty significant if you&amp;#8217;ve been doing traditional anything-goes rendering for a decade or more.  Will be very interested to see if they manage to popularize this&amp;nbsp;approach.&lt;/p&gt;
&lt;h4&gt;A 64 bit version of the&amp;nbsp;editor.&lt;/h4&gt;
&lt;p&gt;How will this play out with the notoriously flaky &lt;span class="caps"&gt;GUID&lt;/span&gt; system in unity? And honestly, I&amp;#8217;d take a 32 bit version that &lt;a href="http://tech-artists.org/forum/showthread.php?4584-Studio-Switching-to-Perforce-need-good-introduction-ramp-up"&gt;integrated better with source control&lt;/a&gt; and was better adapted to collaborative work environments.  And &amp;#8216;&lt;a href="http://forum.unity3d.com/threads/48088-Prefab-saving-question"&gt;save my goddam prefab&lt;/a&gt;&amp;#8216; would also be&amp;nbsp;nice.  &lt;/p&gt;
&lt;p&gt;On the other hand it looks like they&amp;#8217;re also making the editor more multi-core friendly, which gives me another reason to buy that &lt;a href="https://www.apple.com/mac-pro/"&gt;Mac Pro&lt;/a&gt; I&amp;#8217;ve been dreaming&amp;nbsp;of. &lt;/p&gt;
&lt;h4&gt;More direct control over blend weights in&amp;nbsp;Mecanim.&lt;/h4&gt;
&lt;p&gt;The recent addition of &lt;code&gt;CrossFade()&lt;/code&gt; and &lt;code&gt;Play()&lt;/code&gt; is already a big step forward, but this seems like even more belated recognition that the original was too doctrinaire. Who, exactly, thought that an animation system that &lt;em&gt;didn&amp;#8217;t let you tell it what animations to play&lt;/em&gt; was a good&amp;nbsp;idea?  &lt;/p&gt;
&lt;p&gt;The most exciting bullet on animation though is a real headsmacking &amp;#8216;Oh of course&amp;#8217; things: the ability to add behavior scripts directly to animation states. This should go a &lt;em&gt;long&lt;/em&gt; way to enabling much more interesting &amp;#8212; and comprehensible &amp;#8212; procedural animation code. I&amp;#8217;m &lt;em&gt;very&amp;nbsp;excited.&lt;/em&gt;&lt;/p&gt;
&lt;h4&gt;Forking the web player between the old plugin and&amp;nbsp;WebGL&lt;/h4&gt;
&lt;p&gt;you&amp;#8217;ll be able to publish to the traditional web player plugin, or to WebGL. Interesting to see how that plays out - I wonder if it will affect security sandbox issues with the web player. I&amp;#8217;m still wishing it was easier to write real 3-d tools that could be published on the web, ala &lt;a href="http://clara.o/"&gt;clara.o&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Of course, once you get into _interesting _stuff, like shader work, &amp;#8220;write once run anywhere&amp;#8221; gets a little more difficult (I&amp;#8217;ve been battling stencil shader difference between &lt;span class="caps"&gt;PC&lt;/span&gt;, &lt;span class="caps"&gt;IOS&lt;/span&gt; and Android for a while now, so I&amp;#8217;m prejudiced).  Will this make it even&amp;nbsp;dicier?  &lt;/p&gt;
&lt;h4&gt;A new audio&amp;nbsp;system.&lt;/h4&gt;
&lt;p&gt;Not my area, but given the complaints I&amp;#8217;ve heard from audio guys any change is probably for the&amp;nbsp;good.  &lt;/p&gt;</content><category term="unity"></category></entry><entry><title>If your Maya Python API is crashing</title><link href="https://theodox.github.io/2014/python_api_crash" rel="alternate"></link><published>2014-03-18T00:38:00-07:00</published><updated>2014-03-18T00:38:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-18:/2014/python_api_crash</id><summary type="html">&lt;p&gt;A useful tidbit from Autodesk on how to avoid a common crash scenario in Maya python api&amp;nbsp;1.0&lt;/p&gt;</summary><content type="html">&lt;p&gt;Check out &lt;a href="http://around-the-corner.typepad.com/adn/2013/03/possible-misuse-of-mscriptutil-in-maya.html#"&gt;this useful post from Cyril Fauvelle&lt;/a&gt; on the ins and outs of the dreaded &lt;a href="http://www.chadvernon.com/blog/resources/maya-api-programming/mscriptutil/"&gt;&lt;strong&gt;MScriptUtil&lt;/strong&gt;&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;This kind of stuff is why I reserve &lt;span class="caps"&gt;API&lt;/span&gt; programming for only the knottiest of tasks.  maya.cmds won&amp;#8217;t clean-exit your Maya session if you reverse two lines by accident.  However, sometimes there&amp;#8217;s no alternative&amp;#8230;  Here&amp;#8217;s hoping &lt;span class="caps"&gt;API&lt;/span&gt; 2.0 matures quickly and we can all forget all of this pointless&amp;nbsp;distraction.  &lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="api"></category></entry><entry><title>Sliders!</title><link href="https://theodox.github.io/2014/sliders" rel="alternate"></link><published>2014-03-16T11:08:00-07:00</published><updated>2014-03-16T11:08:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-16:/2014/sliders</id><summary type="html">&lt;p&gt;pending&lt;/p&gt;</summary><content type="html">&lt;p&gt;Although GDMag is no more, I still occasionally get interesting press releases from &lt;span class="caps"&gt;PR&lt;/span&gt; flacks who haven&amp;#8217;t gotten the bad news. This morning,  one from &lt;a href="http://www.makehuman.org/"&gt;MakeHuman&lt;/a&gt; caught my&amp;nbsp;eye.  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://www.makehuman.org/sites/makehuman.org/files/images/3/img003_001.png"&gt;&lt;img alt="" src="http://www.makehuman.org/sites/makehuman.org/files/images/3/img003_001.png"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now with realistic back&amp;nbsp;flab!  &lt;/p&gt;
&lt;p&gt;MakeHuman is a new open sourced parametric modeling / body morphing program written in Python.  The overall use case is similar to &lt;a href="http://poser.smithmicro.com/gallery.html"&gt;Poser&lt;/a&gt; or &lt;a href="http://www.daz3d.com/"&gt;Daz3d&lt;/a&gt;.  It seems like it also incorporates some of the underlying ideas from the venerable &lt;a href="http://www.facegen.com/"&gt;FaceGen&lt;/a&gt; - particularly having a few high level sliders that correlate changes across many different aspects of a&amp;nbsp;model. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-MDesUhTFBYM/UyXbys3vv1I/AAAAAAABH9o/PEIhdil6obE/s1600/makeh.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-MDesUhTFBYM/UyXbys3vv1I/AAAAAAABH9o/PEIhdil6obE/s1600/makeh.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Prognathism +=&amp;nbsp;.05&lt;/h3&gt;
&lt;p&gt;The slider set that comes with MakeHuman is pretty good. I didn&amp;#8217;t do a count but I&amp;#8217;d guess there are several hundred.  Unlike many similar programs you can get a decent variety of body types outside the Burne Hogarth / superhero range, with decent control over the high level feel of the&amp;nbsp;model. &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-OcSmU55zGkk/UyXt2tCPLvI/AAAAAAABH-Q/OQ70pbYgcwc/s1600/bodytypes.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-OcSmU55zGkk/UyXt2tCPLvI/AAAAAAABH-Q/OQ70pbYgcwc/s1600/bodytypes.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The high frequency details that you really wouild need to sell the model are still up to you, however - fat rolls, wrinkles, scars and so on are going to have to be painted on or hand modelled in a later&amp;nbsp;step.&lt;/p&gt;
&lt;p&gt;Like most slider-modeler programs it&amp;#8217;s easy to create really disturbing imagery, but the underlying slider set is pretty good, with a decent amount of anatomically based sliders for facial and body proportions.  Like all slider-modellers it suffers from the tension between local control and overall believability - it&amp;#8217;s easy to start noodling on a detail only to discover you&amp;#8217;ve undermined the whole&amp;nbsp;product.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-um2YWid2fNk/UyXm310LhaI/AAAAAAABH94/bmzSUhs80SY/s1600/lotsasliders.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-um2YWid2fNk/UyXm310LhaI/AAAAAAABH94/bmzSUhs80SY/s1600/lotsasliders.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As always with these kinds of things , you are teleported right to the bottom of the &lt;a href="http://www.arts.rpi.edu/~ruiz/EGDFall08/postmortemreadings/Theodore%20Uncanny%20Valley.pdf"&gt;Uncanny Valley&lt;/a&gt; when you first start to twiddle things; the vacant stare can really get to you as you creep those sliders along (I will not speculate on which sliders &lt;em&gt;you _spend the most time creeping, but if you&amp;#8217;ve looked at &lt;a href="https://www.google.com/search?q=poser+models&amp;amp;safe=active&amp;amp;espv=210&amp;amp;es_sm=122&amp;amp;source=lnms&amp;amp;tbm=isch&amp;amp;sa=X&amp;amp;ei=Vt8lU7LwGoqDogS7q4CgBA&amp;amp;ved=0CAoQ_AUoAg&amp;amp;biw=1180&amp;amp;bih=974"&gt;Poser (&lt;span class="caps"&gt;NSFW&lt;/span&gt;) &lt;/a&gt;I bet you can guess which one gets the most over-use. Makes you think:: _What a missed microtransaction opportunity!&lt;/em&gt;).   &lt;/p&gt;
&lt;h3&gt;Use&amp;nbsp;Case&lt;/h3&gt;
&lt;p&gt;If you go into any slider-modeller expecting shippable characters with strong personalities to pop out the other end, you&amp;#8217;ll be disappointed.  That&amp;#8217;s not where these tools&amp;nbsp;shine.  &lt;/p&gt;
&lt;p&gt;One-button art is not really the point with these kinds of tools.  They are, however,  a fabulous way to kick off a ZBrush sculpt or play with ideas quickly.  The topology  on the base meshes that come with the package seems pretty good to me, although I&amp;#8217;m sure plenty of artists will have their own preferences. However MakeHuman  allows you to provide alternate base meshes (another trick pioneered by FaceGen back in the day) so you could provide your own body meshes before hitting the sliders if you so&amp;nbsp;desire.   &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://3.bp.blogspot.com/-6Ju73PA4gS8/UyXnRjYcyII/AAAAAAABH-A/maJd8o1mGy0/s1600/hai.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-6Ju73PA4gS8/UyXnRjYcyII/AAAAAAABH-A/maJd8o1mGy0/s1600/hai.png"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The base topo and skinning aren&amp;#8217;t&amp;nbsp;bad  &lt;/p&gt;
&lt;p&gt;The program can also output ready-riigged characters witth a variety of skeletons to &lt;span class="caps"&gt;FBX&lt;/span&gt; and other intermediate formats.  As with the models, go in expecting to have to tweak the results - but again, its a huge accelerator for progress. The selection of hair, clothing and accessories is pretty small compared to what you&amp;#8217;d get with the commercial alternatives, but adding your own is not too tough (an &lt;a href="http://www.aversionofreality.com/blog/2014/1/30/project-maiko-creating-the-base-bodysuit"&gt;example tutorial here&lt;/a&gt;)  &lt;/p&gt;
&lt;p&gt;For &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;#8217;s one of the most interesting aspects of the program is the fact that it&amp;#8217;s mostly written in Python, and that the source code is freely available. If you&amp;#8217;re interested in adding your own sliders, or new deformation algorithms, or more body data the way is open.  One thing that I&amp;#8217;d liove to see more of in the program is a mode based on real world body scan data - one of the ways FaceGen was ahead of its time was its use of statistical models rather than the more obvious &amp;#8216;make bigger butt cheeks&amp;#8217; sliders, which meant that randomly generated characters usually started from a more plausible place than the familiar monstrosities of, say,&amp;nbsp;Oblivion:  &lt;/p&gt;
&lt;h2&gt;&lt;a href="http://cloud-4.steampowered.com/ugc/542932685069387623/92E24D6F77E61891EFC6A2FC9A077BB70E4C31A5/1024x768.resizedimage"&gt;&lt;img alt="" src="http://cloud-4.steampowered.com/ugc/542932685069387623/92E24D6F77E61891EFC6A2FC9A077BB70E4C31A5/1024x768.resizedimage"&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;yes, Oblivion, I&amp;#8217;m talking about you.&lt;br&gt;
All in all, not bad for free-as-in-beer!   &lt;a href="http://www.makehuman.org/content/download.html"&gt;Download it from&amp;nbsp;here&lt;/a&gt;&lt;/p&gt;</content><category term="tools"></category></entry><entry><title>Morph targets revisited</title><link href="https://theodox.github.io/2014/morph_targets_revisited" rel="alternate"></link><published>2014-03-14T22:16:00-07:00</published><updated>2014-03-14T22:16:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-14:/2014/morph_targets_revisited</id><summary type="html">&lt;p&gt;Chronosculpt - a tool for Zbrush-like painting of dense&amp;nbsp;polymodels&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here&amp;#8217;s an interesting demo vid from NewTek, spotlighting a new time-based sculpting workflow: in essence, an animatable Zbrush that let you retouch big simulation cache files.  It&amp;#8217;s easy to see how this could spark a renaissance in vertex&amp;nbsp;animation&amp;#8230;..  &lt;/p&gt;
&lt;p&gt;More details &lt;a href="https://www.lightwave3d.com/chronosculpt/"&gt;on the NewTek&amp;nbsp;website&lt;/a&gt;&lt;/p&gt;</content><category term="tools"></category><category term="cg"></category><category term="techart"></category></entry><entry><title>Descriptors and pythonic Maya properties</title><link href="https://theodox.github.io/2014/descriptors_and_pythonic_maya_properties" rel="alternate"></link><published>2014-03-11T15:15:00-07:00</published><updated>2014-03-11T15:15:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-11:/2014/descriptors_and_pythonic_maya_properties</id><summary type="html">&lt;p&gt;How to use descriptors for dot-style access to maya object properties instead of &lt;code&gt;cmds.getAttr()&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;m still working on the followup to &lt;a href="rescuing_maya_gui_from_itself.html"&gt;Rescuing Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; From Itself&lt;/a&gt;, but while I was at it this &lt;a href="http://stackoverflow.com/questions/22291337/python-re-implementing-setattr-with-super"&gt;StackOverflow question&lt;/a&gt; made me realize that the same trick works for pyMel-style property access to things like position or rotation. If you&amp;#8217;re a member of the anti-pyMel brigade you might find this a useful trick for things like &lt;code&gt;pCube1.translation = (0,10,0)&lt;/code&gt;. Personally I use pyMel most of the time, but this is a good supplement or alternative for haterz or for special circumstance where pymel is too&amp;nbsp;heavy. &lt;/p&gt;
&lt;p&gt;The goal is to be able to write something&amp;nbsp;like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;xform&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Xform&lt;/span&gt;  
&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pCube1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;translation&lt;/span&gt;  
&lt;span class="c1"&gt;# [0,0,0]  &lt;/span&gt;
&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The process is about as simple as it can get thanks to the magic of &lt;a href="rescuing_maya_gui_from_itself.html"&gt;descriptors&lt;/a&gt;. This example spotlights one advantage of descriptors over getter/setter property functions: by inheriting the two classes (&lt;code&gt;BBoxProperty&lt;/code&gt; and &lt;code&gt;WorldXformProperty&lt;/code&gt;) I can get 4 distinct behaviors (world and local, read-write and read-only) with very little code and no&amp;nbsp;if-checks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;xform.py&lt;/span&gt;

&lt;span class="sd"&gt;Exposes the xform class: a simple way to set maya position, rotation and similar properties with point notation.&lt;/span&gt;

&lt;span class="sd"&gt;(c) 2014 Steve Theodore.  Distributed under the MIT License (http://opensource.org/licenses/MIT)  &lt;/span&gt;
&lt;span class="sd"&gt;TLDR: Use, change and share, please retain this copyright notice.  &lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.cmds&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cmds&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xform&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Descriptor that allows for get-set access of transform properties  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_q_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_e_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objtype&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_q_args&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_e_args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_e_args&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WorldXformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Get-set property in world space  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_q_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ws&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_e_args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ws&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BBoxProperty&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Read only property for bounding boxes  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;RuntimeError&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bounding box is a read-only property!&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WorldBBoxProperty&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;WorldXformProperty&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BBoxProperty&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Read only property for bounding boxes  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Xform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Thin wrapper providing point-notation access to transform attributes&lt;/span&gt;

&lt;span class="sd"&gt;       example = Xform(&amp;#39;pCube1&amp;#39;)  &lt;/span&gt;
&lt;span class="sd"&gt;       # |pCube1  &lt;/span&gt;
&lt;span class="sd"&gt;       example.translation   &lt;/span&gt;
&lt;span class="sd"&gt;       # [0,0,0]  &lt;/span&gt;
&lt;span class="sd"&gt;       example.translation = [0,10,0]&lt;/span&gt;

&lt;span class="sd"&gt;    For most purposes Xforms are just Maya unicode object names.  Note this does  &lt;/span&gt;
&lt;span class="sd"&gt;    NOT track name changes automatically. You can, however, use &amp;#39;rename&amp;#39;:  &lt;/span&gt;
&lt;span class="sd"&gt;       example = Xform(&amp;#39;pCube1&amp;#39;)  &lt;/span&gt;
&lt;span class="sd"&gt;       example.rename(&amp;#39;fred&amp;#39;)  &lt;/span&gt;
&lt;span class="sd"&gt;       print example.Object  &lt;/span&gt;
&lt;span class="sd"&gt;       # |fred&lt;/span&gt;

&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__repr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;unicode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# so that the command will work on the string name of the object&lt;/span&gt;

    &lt;span class="c1"&gt;# property descriptors  These are descriptors so they live at the class level,  &lt;/span&gt;
    &lt;span class="c1"&gt;# not inside __init__!&lt;/span&gt;

    &lt;span class="n"&gt;translation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;translation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rotation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;scale&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;scale&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;pivots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pivots&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;world_translation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WorldXformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;translation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;world_rotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WorldXformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rotation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;world_pivots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WorldXformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pivots&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="c1"&gt;# maya does not allow &amp;#39;world scale&amp;#39; - it&amp;#39;s dependent on the parent scale&lt;/span&gt;

    &lt;span class="c1"&gt;# always local  &lt;/span&gt;
    &lt;span class="n"&gt;scaleTranslation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;scaleTranslation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;rotateTranslation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;XformProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rotateTranslation&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;boundingBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BBoxProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;boundingBox&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;world_boundingBox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WorldBBoxProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;boundingBox&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_name&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_name&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;        Returns a list of Xforms, using the same arguments and flags as the default ls command  &lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;map&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;Xform&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You may note the absence of a &lt;code&gt;__metaclass__&lt;/code&gt;. In this case, with only a single class, a meta would be an unnecessary complication. Meanwhile the &lt;a href="https://github.com/theodox/mGui"&gt;code for MayaGUI itself is up on GitHub&lt;/a&gt;. Comments and/or contributions&amp;nbsp;welcome!&lt;/p&gt;</content><category term="maya"></category><category term="python"></category><category term="gui"></category><category term="techart"></category></entry><entry><title>A little bit of innovation</title><link href="https://theodox.github.io/2014/a_little_bit_of_innovation" rel="alternate"></link><published>2014-03-11T07:00:00-07:00</published><updated>2014-03-11T07:00:00-07:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-11:/2014/a_little_bit_of_innovation</id><summary type="html">&lt;p&gt;A cool new modeling feature in&amp;nbsp;Modo&lt;/p&gt;</summary><content type="html">&lt;p&gt;If &lt;a href="sigh"&gt;recent demise of &lt;span class="caps"&gt;XSI&lt;/span&gt;&lt;/a&gt; has you all depressed about the state of 3d software, here&amp;#8217;s &lt;a href="https://www.youtube.com/watch?v=kjzfhbW2hNY"&gt;a little preview of a new Modo feature that will make some modelers very&amp;nbsp;happy&lt;/a&gt; &lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/kjzfhbW2hNY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="tools"></category><category term="modeling"></category><category term="modo"></category></entry><entry><title>*Sigh*</title><link href="https://theodox.github.io/2014/sigh" rel="alternate"></link><published>2014-03-04T21:12:00-08:00</published><updated>2014-03-04T21:12:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-03-04:/2014/sigh</id><summary type="html">&lt;p&gt;The demise of &lt;span class="caps"&gt;XSI&lt;/span&gt; and the future of the art-tools&amp;nbsp;business.&lt;/p&gt;</summary><content type="html">&lt;p&gt;It&amp;#8217;s bad enough we just lost &lt;a href="http://www.nytimes.com/2014/02/25/movies/harold-ramis-who-helped-redefine-what-makes-us-laugh-on-screen-dies-at-69.html?_r=0"&gt;Harold Ramis&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Now we&amp;#8217;ve also lost &lt;a href="http://www.autodesk.com/products/autodesk-softimage/overview"&gt;SoftImage&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;Although I&amp;#8217;ve never used &lt;span class="caps"&gt;XSI&lt;/span&gt; professionally, I was incredibly impressed by the people who made it, and I&amp;#8217;ve always felt that &lt;span class="caps"&gt;XSI&lt;/span&gt; was a superior product to Max or Maya: making better use of modern hardware and showing off really innovative concepts in an industry that&amp;#8217;s gotten pretty damn stale for something that&amp;#8217;s sounds so high tech and is occasionally so&amp;nbsp;magical.  &lt;/p&gt;
&lt;p&gt;In honor of the passing of this great piece of software, I&amp;#8217;m going to reprint an article I wrote for &lt;em&gt;&lt;a href="http://www.gamasutra.com/topic/game-developer"&gt;Game Developer&lt;/a&gt;&lt;/em&gt; back in 2008 when the sale of &lt;span class="caps"&gt;XSI&lt;/span&gt; to Autodesk was first announced.  I&amp;#8217;m afraid I may have been a little too optimistic. However I do think that the basic idea of the piece - that we let ourselves in for this kind of treatment by not being more informed and flexible consumers - is still&amp;nbsp;true.   &lt;/p&gt;
&lt;p&gt;In the mean time, I&amp;#8217;m going to go have an Irish wake for a poor old &lt;span class="caps"&gt;XSI&lt;/span&gt;.  (&lt;span class="caps"&gt;BTW&lt;/span&gt;, if you&amp;#8217;re waiting on the follow-up to &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;Rescuing Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; From Itself, &lt;/a&gt;I&amp;#8217;m cleaning up the code and writing tests before I go&amp;nbsp;blabbing&amp;#8230;)  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Update&lt;/strong&gt;: Came upon &lt;a href="http://gfxspeak.com/2014/02/27/autodesk-revenue-transition/"&gt;this interesting set of charts&lt;/a&gt; (espceially the next to the last one at the bottom) which explains a lot of what&amp;#8217;s going on on here. Doesn&amp;#8217;t make it hurt less,&amp;nbsp;though.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Equally relevant&lt;/strong&gt;: &lt;a href="http://forums.cgsociety.org/showthread.php?f=59&amp;amp;t=1159665"&gt;Autodesk&amp;#8217;s upgrade lockdown&lt;/a&gt;.&lt;/em&gt;  &lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;strong&gt;The&amp;nbsp;M-Word&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://atariage.com/forums/uploads/monthly_01_2014/post-4620-0-46419700-1389142399.jpg"&gt;&lt;img alt="" src="http://atariage.com/forums/uploads/monthly_01_2014/post-4620-0-46419700-1389142399.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you’ve been in a crunch-time media blackout for the past month, or shut down your internet connection to avoid election news,  or are the only games artist on the planet who’s never received a youtube link via email you may have missed an interesting little tidbit of news. On October 23 we learned that Avid is going to sell SoftImage, the Montreal-based developer or SoftImage|&lt;span class="caps"&gt;XSI&lt;/span&gt; to Autodesk.  If and when the deal goes through, all three of the biggest 3d modeling and animation packages will all belong to a single&amp;nbsp;company.  &lt;/p&gt;
&lt;p&gt;Even if you managed to miss the announcement, you can probably predict the immediate reactions anyway.   In the &lt;span class="caps"&gt;XSI&lt;/span&gt; community, the dominant mode was shell-shock.  The “Resistance is Futile” jokes and Borg-themed Photoshop jobs could not disguise the level of emotion in the air &amp;#8212; the poster on the &lt;span class="caps"&gt;XSI&lt;/span&gt; forums who simply said “I think I’ll cry” wasn’t kidding.  There was a smattering of optimists suggesting the deal would give more people access to some of &lt;span class="caps"&gt;XSI&lt;/span&gt;’s best tech.  A few pragmatists found consolation in the idea that the conglomeration would give cross-package data transfer the attention it deserves.  But the most common reactions were shock and&amp;nbsp;anxiety.    &lt;/p&gt;
&lt;p&gt;It’s hardly surprising that the possibility of being forced to abandon the comfort and security of a familiar environment would give &lt;span class="caps"&gt;XSI&lt;/span&gt; users the heebie-jeebies.  The official Pixel Pusher line has always been that any professional game artist should be competent in at least two packages. But even traditional artists are famous for being emotionally attached to their tools (never, ever venture an opinion about Kolinsky sable brushes in mixed company!) For us, who spend so much of our lives poking at one particular set of dialogs or buttons, the thought of being forced to swap them for a different, unfamiliar set of dialogs and buttons is deeply disturbing.  The fact that some &lt;span class="caps"&gt;XSI&lt;/span&gt; fans were so distraught they’d consider switching to Blender out of pique is an index of how emotional this issue can&amp;nbsp;be.  &lt;/p&gt;
&lt;p&gt;What’s surprising, though, is that a similar miasma could be seen in the Max and Maya forums after the buyout announcement. Emotions ran high even for those not affected directly. Hardcore Maya fans suffered flashbacks as they relived the 2006 buyout of Alias.  More commonly, though, users were grimly pondering the future of graphics software in general, rather than the fate of any particular package.  Some naysayers worried that technology would stagnate without the underdogs like &lt;span class="caps"&gt;XSI&lt;/span&gt; striving to gain an advantage through innovation. Others fretted that consolidation in the industry means the exciting, Wild-West days of graphics are really over.  And many users of all three packages speculated that the lack of competition will lead to price&amp;nbsp;gouging.&lt;/p&gt;
&lt;h2&gt;&lt;em&gt;You Are Elected Chairman of the&amp;nbsp;Board&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://adena.com/adena/mo/chpay50.jpg"&gt;&lt;img alt="" src="http://adena.com/adena/mo/chpay50.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before we pronounce the graphics software business dead, we ought to look at this deal in its historical context.  These kinds of corporate dramas are unsettling for artists because they are an unsubtle reminder that we creative types are dependent on huge, impersonal corporations to get anything done. Masters-of-the-Universe style &lt;span class="caps"&gt;MBA&lt;/span&gt; analysis isn’t part of our job descriptions, so it’s hard for use mere users to figure out how to respond. A little bit of history, however, is often a good way to get some perspective; so here’s a very abbreviated walk through the life and times of SoftImage to help you understand today’s&amp;nbsp;news.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;XSI&lt;/span&gt; may be the youngest of the big three graphics packages, but SoftImage the company is one of the oldest firms in 3d graphics software.  The original “SoftImage Creative Environment” debuted in 1988, but in an economic environment very different from todays.  3D graphics was very closely akin to rocket science – for one thing, it was mysterious new high-tech discipline and for another you needed an exotic workstation that cost upwards of $50,000&lt;a href="file:///E:/Users/Stephen%20Theodore/Documents/My%20Dropbox/Dropbox/Columns/2008/1108/1108%20-%20M%20Word.docx#_ftn1"&gt;[1]&lt;/a&gt; to do either one.  It was a very esoteric, very pricey&amp;nbsp;business.  &lt;/p&gt;
&lt;p&gt;SoftImage|3D  was the first commercial application to offer artist-friendly &lt;span class="caps"&gt;IK&lt;/span&gt; (1991) and it quickly became the gold standard for computer animation.  Many seminal &lt;span class="caps"&gt;CGI&lt;/span&gt; films of the early ‘90’s were animated in SoftImage, most famously &lt;strong&gt;Jurassic Park.  &lt;/strong&gt;Those early days of the &lt;span class="caps"&gt;CG&lt;/span&gt; revolution were heady times. Hollywood stood ready to firehose money onto anybody who could render a good looking triangle  &amp;#8212; &lt;span class="caps"&gt;SIGGRAPH&lt;/span&gt; veterans still murmur nostalgically about the heydays of studio parties – and the boom times were good for the company. In 1992, the Montreal firm went public to much acclaim.&amp;nbsp;****&lt;/p&gt;
&lt;p&gt;Success also changed the way the industry worked.   By the mid ‘90s, the explosion of 3d game development shifted the industry dynamic: the ranks of 3d artists and animators expanded enormously, but few games companies could afford to put the equivalent of a luxury sports car under every animator’s desk.  Affordable PCs with primitive graphics cards started stealing business from workstations and &lt;span class="caps"&gt;PC&lt;/span&gt; based packages like Autodesk’s 3d Studio started making inroads against pricey workstation&amp;nbsp;software.  &lt;/p&gt;
&lt;h2&gt;&lt;em&gt;From Sale Of Stock You Get&amp;nbsp;$45&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://adena.com/adena/mo/ccstock.jpg"&gt;&lt;img alt="" src="http://adena.com/adena/mo/ccstock.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Microsoft, naturally, wanted to see the &lt;span class="caps"&gt;PC&lt;/span&gt; forces prevail . In 1994 they bought SoftImage for $130 million – a pretty high price given that the whole 3D software market was only around $60 million a year back then. But box sales weren’t the real goal: Microsoft needed to port a top-end workstation graphics package to Windows and legitimize the market for high end graphics on&amp;nbsp;Windows. &lt;/p&gt;
&lt;p&gt;For many SoftImage vets, the events of last month may have an eerily familiar ring, right down to the “you will be assimilated” jokes (although,  in 1994 the reference was forgivably&amp;nbsp;fresh).  &lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;MS&lt;/span&gt; acquisition was not a very pleasant experience for SoftImage users. Not only were many Unix devotees forcibly converted to a new &lt;span class="caps"&gt;OS&lt;/span&gt;, but the demands of porting and cross-platform development shunted innovation to the sidelines.  It took almost 7 years for SoftImage|3D to get from version 3.0 to version 4.0 , and the package lost a lot of its technological edge to newer platforms like 3dStudio Max and Maya.  It’s not surprising that the survivors of that first buyout react suspiciously to the&amp;nbsp;latest.&lt;/p&gt;
&lt;p&gt;By 1998, Microsoft had achieved its strategic objective: Windows had triumphed and graphics workstations were headed for the history books.  SoftImage became superfluous.  Microsoft sought out a buyer and found Avid, a rising power in the digital video editing business which coveted the company’s &lt;span class="caps"&gt;VFX&lt;/span&gt; and compositing tech.  Even if the core 3d business was losing steam, the deal still ran a cool $285 million – a price that might have been inflated by internet bubble, but it’s still pretty&amp;nbsp;impressive.  &lt;/p&gt;
&lt;p&gt;Avid’s stewardship was a lot healthier for SoftImage as a tech company. SoftImage &lt;span class="caps"&gt;XSI&lt;/span&gt;, the long overdue gut-rehab of the aging SoftImage|3D, was released in 2000.  The product started out a bit slow – version 1.0 had no poly modeling tools! – but gained steam with impressive tech and clean new architecture. Many artists have lusted after &lt;span class="caps"&gt;XSI&lt;/span&gt;’s &lt;span class="caps"&gt;GATOR&lt;/span&gt; system for mapping one mesh onto another (supporting everything from texture transfers to skin weight matching) , its non-linear animation mixer, Face Robot facial animation technology, and most recently the high-perfomance &lt;span class="caps"&gt;ICE&lt;/span&gt; system for node-based custom object&amp;nbsp;creation.    &lt;/p&gt;
&lt;h2&gt;&lt;em&gt;Second Prize in a Beauty Contest, Collect&amp;nbsp;$11&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;Unfortunately, the eningeering success of the product did not translate into success for SoftImage’s owners.  Avid’s core business has been hit hard by the proliferation of lower-cost video editing software like Apple’s Final Cut Pro.  Even though the SoftImage was profitable, it wasn’t profitable enough: to get a sense of the scale, you might note that the $35 million sale price for the company won’t even cover Avid’s losses for the 3rdquarter of this year.  As times got leaner, Avid needed to focus on protecting its core video editing business, so it started hunting for a buyer early this year.  Autodesk, as home to both of &lt;span class="caps"&gt;XSI&lt;/span&gt;’s a main rivals, was not the first buyer who was approached… but it was the final one, which is the one that&amp;nbsp;counts.  &lt;/p&gt;
&lt;p&gt;What lessons can you learn from this little&amp;nbsp;history?   &lt;/p&gt;
&lt;p&gt;First, it doesn’t provide a lot of evidence for conspiracy theories about monopoly power.  The fact is, supplying 3d software is pretty small potatoes in the grand scheme of capitalism.  It’s been said that there are only about half a million seats of full 3d packages in the world – sounds like a lot, but that’s smaller than the number of people in the &lt;em&gt;beta program&lt;/em&gt; alone for Photoshop.  It’s not a market where achieving dominance is a huge financial win.  All three turnovers at SofImage  have been driven by strategic concerns that didn’t have to do with monopoly power or market domination.  Microsoft bought SoftImage to catalyze the switch from workstations to PCs. Avid bought it to solidify its &lt;span class="caps"&gt;FX&lt;/span&gt; and compositing business and saw modeling and animation through that prism.  The most recent sale didn’t originate with a sinister plot from inside of Autodesk, it originated with Avid’s&amp;nbsp;accountants.    &lt;/p&gt;
&lt;p&gt;The more interesting – but also more depressing – aspect of this story, though, isn’t concerned with money. You could read the whole thing as a stirring tale of steadfast devotion. It was user loyalty that sustained SoftImage during the drift of the Microsoft years, when technical sluggishness might have let Max and Maya completely marginalize the original SoftImage.  The emotional reaction to the news is proof of how viscerally loyal users are to their favorite&amp;nbsp;tools.  &lt;/p&gt;
&lt;p&gt;Unfortunately, that loyalty is a two edged sword.  The last few version of &lt;span class="caps"&gt;XSI&lt;/span&gt; were consistently excellent &amp;#8212; but no combination of cool features and good design managed to seduce away enough users from other packages to secure SoftImage’s future.  They competed on tech and features and did a great job – but it wasn’t enough to overcome the entrenched loyalties of Max and Maya fans. Individual artists might admire this feature or that bit of &lt;span class="caps"&gt;UI&lt;/span&gt;, but collectively we’re reactionaries: we stick with what we know. On top of that, most studios have tools and processes are designed around a particular package and aren’t eager to chuck those investments for the sake of sexy icons or a cleaner&amp;nbsp;interface.  &lt;/p&gt;
&lt;p&gt;The fact is, we don’t really reward tools companies for pushing the envelope.  Even when something new does break into the scene, we try to shoehorn it into our existing workflows rather than embracing the new. We’re the last people to start denouncing monopolies and phoning up the Federal Trade Commission. Most of us have already folded our hands by letting ourselves become emotionally attached or technically beholden to particular bits of software.  If you’re in the same camp as the &lt;span class="caps"&gt;XSI&lt;/span&gt; user who posted “they’ll have to pry my license from my cold dead fingers,” you live in a virtual monopoly&amp;nbsp;already.   &lt;/p&gt;
&lt;h2&gt;&lt;em&gt;Get Out Of Jail&amp;nbsp;Free?&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://adena.com/adena/mo/chjail.jpg"&gt;&lt;img alt="" src="http://adena.com/adena/mo/chjail.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That’s not to say that things aren’t going to change. The absence of major-league alternatives will definitely give Autodesk a much freer hand in choosing both its price points and research directions. T fact that their track record to date is pretty benign is comforting, but the knowledge that we’re dependent on their altruism from here on out should give us pause.  Autodesk has put some genuine effort into trying to explain the deal to users (there’s an interesting interview featuring the GMs of Autodesk and SoftImage up on the Autodesk website, with more info promised as the deal solidifies) but apart from reassurances that &lt;span class="caps"&gt;XSI&lt;/span&gt; isn’t going to go away overnight, the magic 8-ball is pretty&amp;nbsp;cloudy.  &lt;/p&gt;
&lt;p&gt;The uncertainty is tough, particularly for anxious &lt;span class="caps"&gt;XSI&lt;/span&gt; users but for all of us. We all know the mantra, “it’s the artist not the tools” – but in practice it’s sometimes hard to say where the artist leaves off and the tool begins. The feeling that such an important part of our lives is out of our control is&amp;nbsp;unnerving. &lt;/p&gt;
&lt;p&gt;What can we do about it? As individuals, that means being open to new software and new ways of working, so that we make an environment where companies have a real incentive to give us new and better tools. As studios we should invest in in-house tools rather than relying too faithfully on any single vendor.  As an industry we should push harder for more consistent, open standards in data formats and for open source tools so we can make our pipelines less dependent on the ups and downs of individual companies.  None of these steps will magically unwind the clock but they will give us a little more input into this critical part of our&amp;nbsp;lives.   &lt;/p&gt;
&lt;p&gt;Or, we could all switch to Blender… But man, I hate the way they do their menus. It’s not like Max. You couldn’t pay me enough to&amp;nbsp;switch.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.thesleuthjournal.com/wp-content/uploads/2013/10/monopoly-go-to-jail-card12.jpg"&gt;&lt;img alt="" src="http://www.thesleuthjournal.com/wp-content/uploads/2013/10/monopoly-go-to-jail-card12.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="file:///E:/Users/Stephen%20Theodore/Documents/My%20Dropbox/Dropbox/Columns/2008/1108/1108%20-%20M%20Word.docx#_ftnref1"&gt;[1]&lt;/a&gt;That’s $65,000 in today’s dollars.  For a machine less powerful than an&amp;nbsp;iPhone.&lt;/p&gt;</content><category term="industry"></category><category term="tools"></category></entry><entry><title>Rescuing Maya GUI from itself</title><link href="https://theodox.github.io/2014/rescuing_maya_gui_from_itself" rel="alternate"></link><published>2014-02-23T10:22:00-08:00</published><updated>2014-02-23T10:22:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-02-23:/2014/rescuing_maya_gui_from_itself</id><summary type="html">&lt;p&gt;Using metaclasses and a little bit of under-the-hood trickery to write Maya GUIs that can be ready by ordinary humans.  The first post in the &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt;&amp;nbsp;series.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="pity_for_the_outcast.html"&gt;Last time out&lt;/a&gt; was devoted to a subject most &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;#8217;s already know: the shortcomings of Maya&amp;#8217;s native &lt;span class="caps"&gt;GUI&lt;/span&gt;. This time we&amp;#8217;re going to start looking at ways to rescue Maya from&amp;nbsp;itself.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.fanderson.org.uk/news/images3/darlingpuppet.jpg"&gt;&lt;/p&gt;
&lt;p&gt;And if you don&amp;#8217;t know what that picture is there, &lt;a href="http://youtu.be/9XNWA_yZvWo&amp;quot;"&gt;go here first&lt;/a&gt; &amp;#8212; this tech-art stuff is not as important as a good understanding of &lt;a href="&amp;quot;http://en.wikipedia.org/wiki/Thunderbirds_(TV_series)"&gt;Thunderbirds!&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;With that out of the&amp;nbsp;way:&lt;/p&gt;
&lt;p&gt;Any good rescue mission starts with objectives. The three main drawbacks to coding in Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; natively are &lt;strong&gt;nasty syntax&lt;/strong&gt;, clunky &lt;strong&gt;event handling&lt;/strong&gt;, and difficult &lt;strong&gt;management&lt;/strong&gt;. In today&amp;#8217;s thrill-packed episode, we&amp;#8217;re going lay some foundations for tackling that old-school syntax and dragging Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; kicking and screaming into the 21st&amp;nbsp;century.&lt;/p&gt;
&lt;h1&gt;Under the&amp;nbsp;surface&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://www.foundation3d.com/forums/attachment.php?attachmentid=74848&amp;amp;d=1410941489"&gt;&lt;/p&gt;
&lt;p&gt;Composing a Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; in code is annoying because the only way to access the properties of a Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; node is via a command - there&amp;#8217;s no way to get at the properties directly without a lot of command&amp;nbsp;mongering.&lt;/p&gt;
&lt;p&gt;Sure, the purist might say that alternatives are just &lt;a href="http://www.javakey.net/1-java/92b15b2251bd8f85.htm"&gt;syntax sugar&lt;/a&gt; &amp;#8212; but Maya &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;#8217;s drawbacks are are (a) an obstacle to readability (and hence maintenance) and (b) such a big turn off that people don&amp;#8217;t bother to learn what native &lt;span class="caps"&gt;GUI&lt;/span&gt; can do. This is particularly true for formLayouts, which are the most useful and powerful - and also the least handy and least user-friendly - way of layout of controls in Maya. All the power is no use if you just stick with columnLayouts and hand-typed pixel offsets because setting things up takes a whole paragraph&amp;#8217;s worth of&amp;nbsp;typing.&lt;/p&gt;
&lt;p&gt;So, the first thing I&amp;#8217;d like to ponder is how to cut out some of the crap. Not only will a decent wrapper be more pleasant to read and write - at some point in the future when we get to talk about styling controls, real property access will be a big help in keeping things tidy. Plus, by putting a wrapper around property access we&amp;#8217;ll have a built in hook for management and cleaning up event handling as well, even though that&amp;#8217;s a topic for a future&amp;nbsp;post.&lt;/p&gt;
&lt;p&gt;The upshot of it all: we&amp;#8217;re stuck with the under-the-hood mechanism, but there&amp;#8217;s no reason we can&amp;#8217;t wrap it in something prettier. Consider this simple&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;maya.cmds&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cmds&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@property&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExampleButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt;  
&lt;span class="c1"&gt;# hello world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is &lt;a href="http://nbviewer.ipython.org/urls/gist.github.com/ChrisBeaumont/5758381/raw/descriptor_writeup.ipynb"&gt;plain-vanilla Python properties&lt;/a&gt; in action. It&amp;#8217;s easy to extend it so you can set &amp;#8216;Label&amp;#8217;&amp;nbsp;also:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nd"&gt;@Label.setter&lt;/span&gt;  
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# add this to the example above:  &lt;/span&gt;
&lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Goodbye cruel world&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-AOcq5Y6WCSA/UwLm4_AUSoI/AAAAAAABH7s/3FL8iI1r9TU/s1600/gbcw.png"&gt;&lt;/p&gt;
&lt;h1&gt;Rescuing the&amp;nbsp;rescuers&lt;/h1&gt;
&lt;p&gt;While this is a nice trick, it doesn&amp;#8217;t take long to figure out that replacing the whole Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; library with this will take a lot of annoying, repetitive, and typo-prone code. &lt;code&gt;cmds.button&lt;/code&gt; alone has 34(!) properties to manage, and real offenders like &lt;code&gt;rowLayout&lt;/code&gt; have a lot more. Writing wrappers for all of these is a huge waste of valuable human&amp;nbsp;brainpower&lt;/p&gt;
&lt;p&gt;Luckily, that&amp;#8217;s not the end. Property objects are really instances of &lt;a href="http://docs.python.org/2/howto/descriptor.html"&gt;Python descriptors&lt;/a&gt;, which means they are classes. And since they are classes, we have some more options for creating&amp;nbsp;them.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.python.org/2/howto/descriptor.html"&gt;The official docs&lt;/a&gt; on descriptors are kind of opaque, but the link I shared above to &lt;a href="http://nbviewer.ipython.org/urls/gist.github.com/ChrisBeaumont/5758381/raw/descriptor_writeup.ipynb"&gt;Chris Beaumont&amp;#8217;s article on properties and descriptors&lt;/a&gt; does a great job of explaining what they do: which is, in a nutshell, to provide property like services in the form of class-level objects. (Update: here&amp;#8217;s &lt;a href="http://nedbatchelder.com/blog/201306/explaining_descriptors.html"&gt;great five minute video&lt;/a&gt; too). Instead of defining methods and decorating them as we did above, you create a class which handles the function-to-property behavior (both getting and setting) and stick it directly into your own class namespace, the same way you would place a def or a constant (as an aside, this placement is why the &lt;span class="caps"&gt;CMD&lt;/span&gt; field in the example is a class field rather than a hard code or an instance property - it makes it easy for the descriptor to call the right cmds function and flags. We could make a separate class for &lt;code&gt;cmds.floatField&lt;/code&gt;, for example, swapping out only the class level &lt;span class="caps"&gt;CMD&lt;/span&gt; parameter, and it would &amp;#8216;just work&amp;#8217; the same&amp;nbsp;way).&lt;/p&gt;
&lt;p&gt;The gotcha to bear in mind with descriptors is that they are separate objects that live in the class, &lt;em&gt;not&lt;/em&gt; instance members You don&amp;#8217;t create them inside your &lt;code&gt;__init__&lt;/code&gt;, you declare them in the class namespace. They don&amp;#8217;t belong to individual instances - that&amp;#8217;s why in the example below you&amp;#8217;ll notice that &lt;em&gt;self&lt;/em&gt; refers to the descriptor itself, and not to the ExampleButton class (this is how each descriptor in the example below remembers how to format it&amp;#8217;s own call to the maya command under the&amp;nbsp;hood). &lt;/p&gt;
&lt;p&gt;The &amp;#8220;bad&amp;#8221; part of that is that you the descriptor is ignorant of the class instance to which it is attached when you call it. Pyhton will pass the instance in to the descriptor, as you&amp;#8217;ll see in the example below. The good part, on the other hand, is that the descriptor itself can (if need be) have a memory of its own - that&amp;#8217;s why the descriptors in the next example can remember which flags to use when they call the underlying Maya &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;nbsp;commands.&lt;/p&gt;
&lt;p&gt;While this sounds scary, it&amp;#8217;s mostly a minor mental adjustment - once you do a couple times it will be routine. And all the oddness is concentrated in the definition of the descriptor objects themselves - once the descriptor is actually declared, you access it just as if it were a conventional instance property and all is plain-jane &lt;code&gt;foo.bar = baz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;#8217;s the button example re-written with a couple of&amp;nbsp;descriptors:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CtlProperty&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Property descriptor.  When applied to a Control-derived class, invokes the correct Maya command under the hood to get or set values  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cmd flag must be a maya command for editing gui objects&amp;quot;&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmd&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objtype&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;        Class instance &amp;lt;obj&amp;gt; and its type &amp;lt;objtype&amp;gt; are passed in automatically.   &lt;/span&gt;
&lt;span class="sd"&gt;        &amp;lt;self&amp;gt; is this descriptor object, NOT an owning class instance!  &lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="n"&gt;ctrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Widget&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;        Again, the owning instance is passed in as &amp;lt;obj&amp;gt; automatically  &lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
        &lt;span class="n"&gt;ctrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hasattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Widget&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ctrl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Flag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;Label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CtlProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;BackgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CtlProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bgc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# same example as before      &lt;/span&gt;
&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;btn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ExampleButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Thunderbirds are GO!&amp;quot;&lt;/span&gt;  
&lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BackgroundColor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-nCT8aEzquIE/UwLr8_Ct6wI/AAAAAAABH78/wVp86oOdf24/s1600/t+are+g.png"&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s more like it - only two lines of data-driven code where we used to have six (well, not counting CtlProperty - but thats a one time cost to be spread out over scads of different &lt;span class="caps"&gt;GUI&lt;/span&gt; classes later). It&amp;#8217;s a lot easier to read and understand as well, and contains far fewer opportunities for&amp;nbsp;typos.&lt;/p&gt;
&lt;p&gt;But… we&amp;#8217;re still talking 34 lines like that for &lt;code&gt;cmds.button&lt;/code&gt;, and God knows how many for &lt;code&gt;cmds.rowColumLayout&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sigh.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Act &lt;span class="caps"&gt;III&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img alt="" src="http://www.clevescene.com/imager/thunderbirds-stiff-acting-all-around/b/original/1504418/2808/1875857.t.jpg"&gt;&lt;/p&gt;
&lt;p&gt;No rescue drama is complete without a false climax, and this is ours. Despite the ominous music just before the commercial,. the situation is not really that bad. The last example shows that the problem is not really one of &lt;em&gt;code&lt;/em&gt; any more, it&amp;#8217;s just &lt;em&gt;data&lt;/em&gt;. Since descriptors are objects, you can crank them out like any other object: provide a list of the appropriate flags for a given class and you can crank out the correct descriptors, as they say, &amp;#8220;&lt;a href="https://www.youtube.com/watch?v=Z3qK8gT5LLg"&gt;automagically&lt;/a&gt;.&amp;#8221;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;As long as you promise not to use that stupid word around&amp;nbsp;me.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fortunately for our rescue team, Python treats classes the same way it treats anything else: as objects that can be created and&amp;nbsp;maniuplated.&lt;/p&gt;
&lt;p&gt;If you use the Python builtin &lt;code&gt;type&lt;/code&gt; on any Python class, you&amp;#8217;ll get back &lt;br&gt;
&lt;code&gt;type 'type'&lt;/code&gt;. In other words, a Python class definition is itself an instance of the class &amp;#8216;type&amp;#8217;. How… &lt;em&gt;meta.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The reason this matters to us is that we can fabricate classes the same way fabricate other kinds of Python things. You would not hesitate to crank out a list of strings assembled in code: there&amp;#8217;s no reason you can&amp;#8217;t do the same thing for descriptors! You could do this by hand, creating type instances and filling them out yourself: types take three arguments: a string name, a list of parent types, and dictionary of named fields and propertis.&amp;nbsp;Thus:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Example&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;__init__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;constructor&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="c1"&gt;# &amp;lt;__main__.Example object at 0x00000000022D6198&amp;gt;  &lt;/span&gt;
&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;  
&lt;span class="c1"&gt;# Hello world&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However this would send you down a possible rabbit hole, since the idea we&amp;#8217;re really chasing is a way to mass produce classes to make &lt;span class="caps"&gt;UI&lt;/span&gt; coding easier and it would not be very easy if all of the classes had to be coded up in this clunky way. Luckily Python has an obscure but extremely powerful mechanism designed for just this sort of problem. Because, you know, it&amp;#8217;s the language of&amp;nbsp;geniuses.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://shapersofthe80s.files.wordpress.com/2011/01/thunderstampbrains.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;&lt;span class="dquo"&gt;&amp;#8220;&lt;/span&gt;Brains, Activate the&amp;nbsp;Metaclass&amp;#8221;&lt;/h1&gt;
&lt;p&gt;The helpful MacGuffin in this case it the &lt;em&gt;&lt;a href="http://docs.python.org/2/reference/datamodel.html#customizing-class-creation"&gt;Metaclass&lt;/a&gt;.&lt;/em&gt; Metaclasses have a reputation - not &lt;em&gt;entirely&lt;/em&gt; undeserved - as deep voodoo. The most commonly circulated quote about them is that &amp;#8220;If you can solve the problem without a metaclass, you&amp;nbsp;should.&amp;#8221;&lt;/p&gt;
&lt;p&gt;However, in our case we really can&amp;#8217;t solve the problem without some form of class factory. In particular, we need a way to bang out classes with the right collection of Descriptors to cover all of the zillions of flags in the Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; system. So just this once we can put on the big blue glasses and lab coats and venture into the super secret lair of the mad metaclass&amp;nbsp;scientists.&lt;/p&gt;
&lt;p&gt;The job of a metaclass is to customize the act of class creation. When a class is first defined, python will pass the type it creates (that same object we played with in the last example) to the metaclass for further manipulation. The &lt;code&gt;__new__&lt;/code&gt; function of the metaclass will be called on the just-defined type, taking it name, parents and internal dictionary as arguments. The &lt;code&gt;__new__&lt;/code&gt; can fiddle with any of these as it sees fit before passing it along for actual&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;As you can imagine, this is a good time for PythonMan&amp;#8217;s Uncle Ben to remind us that &amp;#8216;with great power comes great responsibility&amp;#8217; - it&amp;#8217;s easy to shoot yourself in the foot with a metaclass, since you can make changes to the runtime versions of your classes that will not be represented in your source files. Don&amp;#8217;t just run off and meta all over everything in sight. A minimalist approach is the best way to stay&amp;nbsp;sane.&lt;/p&gt;
&lt;p&gt;But you&amp;#8217;d probably like to see what this really looks like in practice. Here&amp;#8217;s an&amp;nbsp;example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ControlMeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Metaclass which creates CtlProperty  objects for maya gui proxies  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;CONTROL_ATTRIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;annotation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;backgroundColor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defineTemplate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
                &lt;span class="s1"&gt;&amp;#39;docTag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dragCallback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dropCallback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;enable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
                &lt;span class="s1"&gt;&amp;#39;enableBackground&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fullPathName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    
                &lt;span class="s1"&gt;&amp;#39;manage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;noBackground&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
                &lt;span class="s1"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preventOverride&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;useTemplate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;visible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
                &lt;span class="s1"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;        __new__ is called then classes using this meta are defined.  It will add   &lt;/span&gt;
&lt;span class="sd"&gt;        all of the items in CONTROL_ATTRIBS to the new class definition as   &lt;/span&gt;
&lt;span class="sd"&gt;        CtlProperty descriptor objects using the CMD field (a maya.cmds command)   &lt;/span&gt;
&lt;span class="sd"&gt;        provied in the outer class.  &lt;/span&gt;
&lt;span class="sd"&gt;        &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

        &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CMD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CMD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ControlMeta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CONTROL_ATTRIBS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CtlProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ControlMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The actual code is pretty simple. It takes the type object created by the &amp;#8216;real&amp;#8217; class and grabs the contents of the &lt;span class="caps"&gt;CMD&lt;/span&gt; class field (remember that from the earlier examples?). Then it loops through its own list of command names and inserts them all into the new class as descriptors with the correct commands and the maya command that was stored in the command object. So our earlier button example&amp;nbsp;becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MetaButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;  
    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ControlMeta&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columnLayout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
&lt;span class="n"&gt;mb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MetaButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;button1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;showWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;  &lt;span class="c1"&gt;# We never had to add this one!  &lt;/span&gt;
&lt;span class="c1"&gt;# True  &lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visible&lt;/span&gt;  &lt;span class="c1"&gt;# or this ! &lt;/span&gt;
&lt;span class="c1"&gt;# True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is a minor problem with this very truncated example, however: there&amp;#8217;s no label or command in the the metaclass, so the MetaButton has no button specific properties - only the generic ones in our list (which I made by trolling the flags for &lt;code&gt;cmds.control&lt;/code&gt;, the &amp;#8216;base class&amp;#8217; of all Maya control&amp;nbsp;commands).&lt;/p&gt;
&lt;p&gt;This is easily fixed by adding properties that are specific to buttons to a class field, and tweaking the metaclass to read and use them the same way it already uses the &lt;span class="caps"&gt;CMD&lt;/span&gt; class field. Like &lt;span class="caps"&gt;CMD&lt;/span&gt;, these are good class-level attributes since the collection of flags is shared by all buttons, fields or&amp;nbsp;whatever.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ControlMeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;  &lt;/span&gt;
&lt;span class="sd"&gt;    Metaclass which creates CtlProperty  objects for Control classes  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;  
    &lt;span class="n"&gt;CONTROL_ATTRIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;annotation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;backgroundColor&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defineTemplate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;docTag&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
                        &lt;span class="s1"&gt;&amp;#39;dragCallback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dropCallback&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;enable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;enableBackground&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
                        &lt;span class="s1"&gt;&amp;#39;exists&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fullPathName&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;manage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;noBackground&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
                        &lt;span class="s1"&gt;&amp;#39;numberOfPopupMenus&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;parent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;popupMenuArray&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preventOverride&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   
                        &lt;span class="s1"&gt;&amp;#39;useTemplate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;visible&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;visibleChangeCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;width&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CMD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
        &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;_ATTRIBS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,[])&lt;/span&gt;  &lt;span class="c1"&gt;# unique props from outer class&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CMD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
            &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ControlMeta&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CONTROL_ATTRIBS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CtlProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;   &lt;span class="c1"&gt;# now add in the outer class&amp;#39;s unique props too  &lt;/span&gt;
            &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CtlProperty&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CMD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ControlMeta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parents&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MetaButton&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;  
    &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;label&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;command&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# button specific props  &lt;/span&gt;
    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ControlMeta&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MetaFloatField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;floatField&lt;/span&gt;  
    &lt;span class="n"&gt;_ATTRIBS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;editable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;precision&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;maxValue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;step&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
                &lt;span class="s1"&gt;&amp;#39;minValue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;changeCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dragCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;enterCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
                &lt;span class="s1"&gt;&amp;#39;receiveFocusCommand&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="c1"&gt;# this one has a lot of properties&lt;/span&gt;

    &lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ControlMeta&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Widget&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, extending the automatic analysis is easy now that we know the basic trick. Just add a semi-private class field with the class specific attributes, and away we&amp;nbsp;go!&lt;/p&gt;
&lt;h1&gt;In our next exciting&amp;nbsp;episode…&lt;/h1&gt;
&lt;p&gt;I think this pretty much demonstrates that overhauling the Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; toolkit is possible. However, in its current state it&amp;#8217;s just a&amp;nbsp;down-payment. &lt;/p&gt;
&lt;p&gt;The combination of descriptors and metaclasses is an incredibly powerful tool and it&amp;#8217;s not hard to see what comes next (it&amp;#8217;s also easy to imagine similar setups for other problems which suffer from ugly imperative syntax). Now that we have a method for cranking out control widget classes by the bucketload, filling out the class library itself is pretty simple. There are, though, a few tricks we can use to make it better and less manual, as well as making sure it is complete. So, in a future outing, we&amp;#8217;ll tackle a method for replicating the whole Maya command hierarchy in a more or less automatic&amp;nbsp;way. &lt;/p&gt;
&lt;p&gt;If you want to roll your own lightwieght properties library, this should give you enough tools to work with. If you&amp;#8217;re more interested in actually doing &lt;span class="caps"&gt;GUI&lt;/span&gt; work without all the &lt;code&gt;cmds&lt;/code&gt; crap, you should check out &lt;a href="https://github.com/theodox/mGui"&gt;mGui&lt;/a&gt;, which is a library based on exactly this metaclass strategy to make &lt;span class="caps"&gt;GUI&lt;/span&gt; code more declarative and less&amp;nbsp;ugly.&lt;/p&gt;
&lt;p&gt;In the mean time,as we say at International Rescue Headquarters: &lt;a href="http://www.funtrivia.com/askft/Question54024.html"&gt;&lt;span class="caps"&gt;F.A.&lt;/span&gt;B!&lt;/a&gt;&lt;/p&gt;</content><category term="maya"></category><category term="gui"></category><category term="python"></category><category term="mGui"></category></entry><entry><title>Some new research in the academic page</title><link href="https://theodox.github.io/2014/some_new_research_in_the_academic_page" rel="alternate"></link><published>2014-02-20T08:00:00-08:00</published><updated>2014-02-20T08:00:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-02-20:/2014/some_new_research_in_the_academic_page</id><summary type="html">&lt;p&gt;pending&lt;/p&gt;</summary><content type="html">&lt;p&gt;Still cleaning up after the long blog silence (teaching that Unity class was fun &amp;#8212; but six games in five weeks plus a day job is &lt;em&gt;murder!&lt;/em&gt;). So I should point out a couple of additions to the &lt;a href="pages/research"&gt;Interesting Research &lt;/a&gt;page.&lt;/p&gt;</content><category term="blog"></category></entry><entry><title>Pity for the outcast</title><link href="https://theodox.github.io/2014/pity_for_the_outcast" rel="alternate"></link><published>2014-02-16T18:30:00-08:00</published><updated>2014-02-16T18:30:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-02-16:/2014/pity_for_the_outcast</id><summary type="html">&lt;p&gt;A litany of complaints about Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; programming, with a teensy ray of&amp;nbsp;hope&lt;/p&gt;</summary><content type="html">&lt;p&gt;I don&amp;#8217;t think it&amp;#8217;s too far over the top to say that everybody hates Maya&amp;#8217;s internal &lt;span class="caps"&gt;GUI&lt;/span&gt; system. It combines a very 1990&amp;#8217;s selection of widgets with a very 1970&amp;#8217;s coding style: it&amp;#8217;s a  1970&amp;#8217;s/1990&amp;#8217;s Frankenstein monster as horrifying as Ashton Kutcher in &lt;em&gt;That 70&amp;#8217;s&amp;nbsp;Show.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href="http://www.mediabistro.com/prnewser/files/2013/11/cmKUTCHER_ARTICLE_narrowweb__300x3532.jpg"&gt;&lt;img alt="" src="http://www.mediabistro.com/prnewser/files/2013/11/cmKUTCHER_ARTICLE_narrowweb__300x3532.jpg"&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Not surprisingly a lot of &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;#8217;s feel like they have to turn to PyQT if they want to deliver polished tools with a modern &lt;span class="caps"&gt;UI&lt;/span&gt;.  Unfortunately this is also less than ideal - while PyQT is a very powerful framework, it&amp;#8217;s got a very distinctive idiom of its own to learn, and moreover its hard to distribute since it depends on C++ dlls.  If you want to share a tool across studios or with outsourcers on a variety of boxes, &lt;span class="caps"&gt;OS&lt;/span&gt;&amp;#8217;es and Maya versions it can become a Dantesque journey into &lt;span class="caps"&gt;DLL&lt;/span&gt;&amp;nbsp;hell.  &lt;/p&gt;
&lt;p&gt;Because we do a lot of work with outsourcers, I&amp;#8217;ve been looking into ways to render native Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; a little less irritating. A quick review of my own pain-points in Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; development showed me three main problems with the existing&amp;nbsp;system    &lt;/p&gt;
&lt;h2&gt;Icky&amp;nbsp;syntax&lt;/h2&gt;
&lt;p&gt;Default Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; is purely imperative; while Maya creates an in-memory object for every widget you create, you can only interact through it with via commands: In the typical idiom you create a&amp;nbsp;button:    &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;big button&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but your can only interact with it by calling more&amp;nbsp;commands:   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mybutton&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;big button&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mybutton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;128&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mybutton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Red button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  
&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mybutton&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bgc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This gets old pretty fast.  It&amp;#8217;s particularly bad for &lt;span class="caps"&gt;GUI&lt;/span&gt; components like &lt;em&gt;formLayout&lt;/em&gt;, which can easily require whopping big arguments like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cmds&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;formLayout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;edit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attachForm&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;attachControl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;attachPosition&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt; &lt;span class="n"&gt;attachNone&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;top&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which is, frankly,&amp;nbsp;stupid.  &lt;/p&gt;
&lt;h2&gt;Lousy event&amp;nbsp;handling&lt;/h2&gt;
&lt;p&gt;Another big knock on Maya&amp;#8217;s native gui is it&amp;#8217;s lousy callback system. The python version is bolted on to the original, string based &lt;span class="caps"&gt;MEL&lt;/span&gt; version and confuses a lot of people with uncertain scoping and unclear syntax (Check out these threads on &lt;a href="http://tech-artists.org/forum/showthread.php?3205-why-scriptJob-doesnt-work-in-case-of-attrControlGrp&amp;amp;highlight=callback"&gt;Tech Artists.Org &lt;/a&gt;and  &lt;a href="http://stackoverflow.com/questions/21036620/executing-different-functions-based-on-options-selected"&gt;StackOverflow &lt;/a&gt;for some examples of how people get lost)&amp;nbsp;.  &lt;/p&gt;
&lt;p&gt;Even when default Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; callbacks do fire, they don&amp;#8217;t usually indicated who fired them off. This means you need to capture any relevant information ahead of time and encode it into the callback. In lots of &lt;span class="caps"&gt;GUI&lt;/span&gt; systems, you could handle a raft of similar functions like this&amp;nbsp;pseudocode:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;button_codes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;button_codes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apply_color&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;apply_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
   &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In Maya, on the other hand, you need to compose the callbacks with the right context when you create them using a &lt;code&gt;[functools.partial](http://docs.python.org/2/library/functools.html)&lt;/code&gt; or a closure.  This makes coding up anything like dynamic model-view-controller &lt;span class="caps"&gt;UI&lt;/span&gt; into a real chore, and forces you to interleave your layout architecture and your data model in clumsy&amp;nbsp;ways.  &lt;/p&gt;
&lt;p&gt;Moreover, Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; callbacks are single-function calls. Its common in other frameworks &amp;#8212; for example in C#  &amp;#8212; to have &lt;a href="http://msdn.microsoft.com/en-us/library/ms173175.aspx"&gt;multicast delegates&lt;/a&gt; which can trigger multiple actions from a single callback. This makes for cleaner, more general code since you can split &lt;span class="caps"&gt;UI&lt;/span&gt;-only functionality (&amp;#8216;highlight this button&amp;#8217;) from important stuff (&amp;#8216;delete this&amp;nbsp;model&amp;#8217;).  &lt;/p&gt;
&lt;h2&gt;No&amp;nbsp;Hierarchy&lt;/h2&gt;
&lt;p&gt;It might not be strictly fair to say that Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; has &amp;#8216;no hierarchy&amp;#8217;; anybody who has ever mucked around with &lt;code&gt;cmds.setParent&lt;/code&gt; or &lt;code&gt;cmds.lsUI&lt;/code&gt; knows that the actual widgets are composed in a strict hierarchical tree; hence &lt;span class="caps"&gt;UI&lt;/span&gt; objects with names like&lt;br&gt;
&lt;code&gt;window1|formLayout57|formLayout58|frameLayout38|columnLayout5|button5&lt;/code&gt;&lt;br&gt;
The problem is that Maya doesn&amp;#8217;t manage this for you - you are responsible for capturing the pathname of every &lt;span class="caps"&gt;UI&lt;/span&gt; widget you create if you ever want to access it again, which imposes a useless maintenance tax on otherwise simple&amp;nbsp;code. &lt;/p&gt;
&lt;p&gt;Moreover, the names aren&amp;#8217;t determninistic, thanks to Maya&amp;#8217;s rule against identical paths: that means you may want a button called &amp;#8216;Button&amp;#8217;, but it may decide to call itself &amp;#8216;Button1&amp;#8217; or &amp;#8216;Button99&amp;#8217; and there&amp;#8217;s nothing you can do about it. As if that weren&amp;#8217;t bad enough, the strongly imperative style of the Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; code also requires manual management. If you declare a layout and start filling it up with widgets, you&amp;#8217;re also responsible deciding when a particular container is full. A missed &lt;code&gt;cmds.setParent&lt;/code&gt; can easily screw up your visual layout or the ordering of a menus and it&amp;#8217;s possible to shoot yourself in the foot without any corresponding gain in power, productivity or even prettiness. This limitation is why Maya has to offer all those redundant command sets for multiple-column rows and grids. When a monstrosity like &lt;code&gt;cmds.rowLayout(nc=5, cw5=(100,100,50,50,80), ct5 =("left", "left", "both","both","right"))&lt;/code&gt; is a &lt;em&gt;win&lt;/em&gt; for code cleanliness and legibility you know something has gone horribly&amp;nbsp;wrong. &lt;/p&gt;
&lt;h2&gt;So&amp;nbsp;What?&lt;/h2&gt;
&lt;p&gt;All of that amounts to a long-winded way of restating the obvious: nobody likes coding in standard Maya &lt;span class="caps"&gt;GUI&lt;/span&gt;.  The question is, can something be done about&amp;nbsp;it?&lt;/p&gt;
&lt;p&gt;Actually, quite a bit..  &lt;a href="http://techartsurvival.blogspot.com/2014/02/rescuing-maya-gui-from-itself.html"&gt;Next time out&lt;/a&gt; I&amp;#8217;ll talk about some practical ways to make Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; coding&amp;#8230; well, let&amp;#8217;s not say &lt;em&gt;&amp;#8220;fun&amp;#8221;&lt;/em&gt;, lets run with another 90&amp;#8217;s&amp;nbsp;retread:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.kraigbrockschmidt.com/mm/images/Win95_Sucks_Less_T-Shirt.jpg"&gt;&lt;img alt="" src="http://www.kraigbrockschmidt.com/mm/images/Win95_Sucks_Less_T-Shirt.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For &amp;#8216;Windows 95&amp;#8217; substitute &amp;#8216;Maya &lt;span class="caps"&gt;GUI&lt;/span&gt;&amp;#8217; and you&amp;#8217;ve got the idea (For the origins of this authentic 2400-baud era meme, &lt;a href="http://blogs.msdn.com/b/oldnewthing/archive/2010/08/24/10053386.aspx"&gt;click here&lt;/a&gt;.) &lt;/p&gt;</content><category term="maya"></category><category term="gui"></category><category term="python"></category><category term="programming"></category><category term="mGui"></category></entry><entry><title>Shameless plug time</title><link href="https://theodox.github.io/2014/shameless_plug_time" rel="alternate"></link><published>2014-02-16T12:08:00-08:00</published><updated>2014-02-16T12:08:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-02-16:/2014/shameless_plug_time</id><summary type="html">&lt;p&gt;pending&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://amzn.to/25UIFta"&gt;book I worked on &lt;/a&gt;is finally available for ordering on&amp;nbsp;Amazon!  &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.amazon.com/Production-Pipeline-Fundamentals-Film-Games/dp/0415812291/ref=as_li_ss_il?ie=UTF8&amp;ref_=as_sl_pc_as_ss_li_til&amp;linkCode=li3&amp;tag=tecsurgui-20&amp;linkId=bdb3e87f528b3c603a7f3c47a216fb9b" target="_blank"&gt;&lt;img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&amp;ASIN=0415812291&amp;Format=_SL250_&amp;ID=AsinImage&amp;MarketPlace=US&amp;ServiceVersion=20070822&amp;WS=1&amp;tag=tecsurgui-20" &gt;&lt;/a&gt;&lt;img src="//ir-na.amazon-adsystem.com/e/ir?t=tecsurgui-20&amp;l=li3&amp;o=1&amp;a=0415812291" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /&gt;&lt;/p&gt;
&lt;p&gt;I&amp;#8217;m pleased and of course also nervous.  If you like it, please be sure to leave a positive review on Amazon - I&amp;#8217;m told it makes a big difference.  I don&amp;#8217;t actually make any money from this one (such is modern publishing, alas) but I do have another book under way and it&amp;#8217;ll be much easier to get that published if this one does well and is well&amp;nbsp;reviewed.   &lt;/p&gt;</content><category term="books"></category><category term="tools"></category><category term="pipeline"></category></entry><entry><title>Talking to Photoshop via TCP</title><link href="https://theodox.github.io/2014/talking_to_photoshop_via_tcp" rel="alternate"></link><published>2014-01-29T02:04:00-08:00</published><updated>2014-01-29T02:04:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-01-29:/2014/talking_to_photoshop_via_tcp</id><summary type="html">&lt;p&gt;Simple Photoshop scripting via&amp;nbsp;tcp/ip&lt;/p&gt;</summary><content type="html">&lt;p&gt;A recent &lt;a href="http://tech-artists.org/forum/showthread.php?4481-Communicating-between-Photoshop-and-Maya-(Python)"&gt;thread on &lt;span class="caps"&gt;TAO&lt;/span&gt;&lt;/a&gt; got me thinking about communicating with Photoshop from Python. In the past I&amp;#8217;ve done this &lt;a href="http://techarttiki.blogspot.com/2008/08/photoshop-scripting-with-python.html"&gt;Adam Plechter-style&lt;/a&gt; using &lt;span class="caps"&gt;COM&lt;/span&gt; ( from both C# and Python) and it&amp;#8217;s worked for me, but I know some people have problems with &lt;span class="caps"&gt;COM&lt;/span&gt; for a variety of reasons relating to windows versions and &lt;span class="caps"&gt;DLL&lt;/span&gt;&amp;nbsp;hell.  &lt;/p&gt;
&lt;p&gt;And using &lt;span class="caps"&gt;COM&lt;/span&gt; always makes me feel like Mr.&amp;nbsp;Yuk.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.calebsimpson.com/wp-content/uploads/2013/11/YuckFace.gif"&gt;&lt;img alt="" src="http://www.calebsimpson.com/wp-content/uploads/2013/11/YuckFace.gif"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since I had to learn a few JavaScript tricks back when I started &lt;a href="and_i_thought_we_had_it_bad.html"&gt;looking into Python web development&lt;/a&gt;, I thought it might be worth investigating what could be done to cut out &lt;span class="caps"&gt;COM&lt;/span&gt;.  It turns out that ExtendScript - the JavaScript flavor that comes with Adobe products (at least since &lt;span class="caps"&gt;CS&lt;/span&gt; 5, and I think earlier) includes a socket object which allows for &lt;span class="caps"&gt;TCP&lt;/span&gt; communication.  That&amp;#8217;s not kosher in &amp;#8216;real&amp;#8217; browser based &lt;span class="caps"&gt;JS&lt;/span&gt; - but ExtendScript cheats a little (that&amp;#8217;s also why it allows you to do things like hit the local file system, another &lt;span class="caps"&gt;JS&lt;/span&gt;&amp;nbsp;no-no).&lt;/p&gt;
&lt;p&gt;The&lt;a href="https://wwwimages2.adobe.com/content/dam/Adobe/en/products/indesign/pdfs/JavaScriptToolsGuide_CS5.pdf"&gt; Adobe docs&lt;/a&gt; have an example (around page 196) which shows how you can implement a chat server or a web server running inside Photoshop. That might not be practical but it provides a simple framework you can hijack to turn Photoshop into a remote procedure call server.  Here&amp;#8217;s an example of a super-simple server that can be run inside&amp;nbsp;Photoshop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// requires photoshop CS5+&lt;/span&gt;

&lt;span class="c1"&gt;// create a new socket&lt;/span&gt;
&lt;span class="nx"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Socket&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;keep_serving&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;// sample functions. In a real application you&amp;#39;d have handler functions that could accept  more complex inputs&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;alrt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;alert&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                                                                                           &lt;span class="c1"&gt;// pop a dialog&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;newLayer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;activeDocument&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;artLayers&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;      &lt;span class="c1"&gt;// make a layer&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;keep_serving&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;                                           &lt;span class="c1"&gt;// stop the server&lt;/span&gt;

&lt;span class="c1"&gt;// &amp;#39;register&amp;#39; the commands by putting them into a dictionary&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;known_cmds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;alert&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;alrt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;stop&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;newLayer&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;newLayer&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;keep_serving&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8789&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;// ... you&amp;#39;d probably want to make this configurable&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// wait forever for a connection&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;incoming&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nx"&gt;incoming&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;poll&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;incoming&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="c1"&gt;// grab the next non-null communication&lt;/span&gt;
        &lt;span class="nx"&gt;new_cmd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;incoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;read&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// split the incoming message into cmd on spaces (shell style)&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;command_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;new_cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;new_cmd&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;command_text&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;999&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;requested&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;known_cmds&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;command_text&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="nx"&gt;requested&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;requested&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="nx"&gt;incoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;\nOK\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;incoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unknown command\nFAIL\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;incoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;writeln&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;FAIL\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;incoming&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;close&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="k"&gt;delete&lt;/span&gt; &lt;span class="nx"&gt;incoming&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// end if &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c1"&gt;// -- end while&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note: You&amp;#8217;ll need to save the file as a .&lt;span class="caps"&gt;JSX&lt;/span&gt; (not .&lt;span class="caps"&gt;JS&lt;/span&gt;!) for Photoshop to allow the ExtendScript functionality which makes the socket objects&amp;nbsp;work.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;This example is very bare bones, but it is easy to extend - just create function objects and add them to &lt;code&gt;known_commands&lt;/code&gt; dictionary and then send them over the socket. The way it&amp;#8217;s written here the commands and arguments are split on spaces (similar to the way a shell command works) &amp;#8212; if you need to get at them in your &lt;span class="caps"&gt;JS&lt;/span&gt; functions you can &lt;a href="http://stackoverflow.com/a/2141530/1936075"&gt;get at them using the arguments() keyword:&lt;/a&gt;.  For serious work I&amp;#8217;d probably use the ExtendScript &lt;span class="caps"&gt;XML&lt;/span&gt; object and send the commands and responses as xml since that gets you out of having to worry about stuff like &amp;#8216;what if I want to send an argument with a space in it&amp;#8217; &amp;#8212; however this purpose of this excersize is just to demonstrate what&amp;#8217;s&amp;nbsp;possible.  &lt;/p&gt;
&lt;p&gt;I should note that while the server is running, Photoshop is locked into the wait loop so it will not be accessible interactively &amp;#8212; like a Maya running a long script, the main thread is just waiting for the script to continue. For the typical &amp;#8216;remote control&amp;#8217; application that&amp;#8217;s what you&amp;#8217;d expect, but it may not answer for all purposes - so be&amp;nbsp;warned.  &lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re trying to talk to Photoshop from Python, it&amp;#8217;s incredibly&amp;nbsp;simple:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="n"&gt;HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;8789&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_photoshop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;Expects a photoshop instance running a tcp server on HOST:PORT&lt;/span&gt;
&lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;HOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;

&lt;span class="n"&gt;send_photoshop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;alert hello_from_python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;       &lt;span class="c1"&gt;#show a dialog&lt;/span&gt;
&lt;span class="n"&gt;send_photoshop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;newLayer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                      &lt;span class="c1"&gt;#create a layer&lt;/span&gt;
&lt;span class="n"&gt;send_photoshop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;stop&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                          &lt;span class="c1"&gt;#stop the server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s all there is to it - of course, the _real _problem is getting useful work done in the clunky Photoshop &lt;span class="caps"&gt;API&lt;/span&gt; &amp;#8212; but that&amp;#8217;s going to be the same no matter whether you talk to &lt;span class="caps"&gt;PS&lt;/span&gt; via &lt;span class="caps"&gt;COM&lt;/span&gt; or &lt;span class="caps"&gt;TCP&lt;/span&gt;/&lt;span class="caps"&gt;IP&lt;/span&gt;.  Anecdotally, I&amp;#8217;ve heard the &lt;span class="caps"&gt;PS&lt;/span&gt; scripts are faster in JavaScript than when using &lt;span class="caps"&gt;COM&lt;/span&gt; or AppleTalk or &lt;span class="caps"&gt;VB&lt;/span&gt;, so perhaps this method will be competitive on speed as well.  For small tasks it&amp;#8217;s certainly a simpler and less irritating way to send a squirt to and from &lt;span class="caps"&gt;PS&lt;/span&gt; &lt;/p&gt;</content><category term="python"></category><category term="programming"></category><category term="photoshop"></category></entry><entry><title>No Humans Involved (Classic CG)</title><link href="https://theodox.github.io/2014/no_humans_involved_classic_cg" rel="alternate"></link><published>2014-01-17T10:00:00-08:00</published><updated>2014-01-17T10:00:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-01-17:/2014/no_humans_involved_classic_cg</id><summary type="html">&lt;p&gt;A classic of old-school procedural&amp;nbsp;animation&lt;/p&gt;</summary><content type="html">&lt;p&gt;Saw a &lt;a href="http://www.staff.science.uu.nl/~geijt101/papers/SA2013/"&gt;great paper&lt;/a&gt; in &lt;a href="https://plus.google.com/116275833090172173559"&gt;+Robert Butterworth&lt;/a&gt; &amp;#8216;s feed which reminded me of this classic &lt;span class="caps"&gt;SIGGRAPH&lt;/span&gt; presentation from 1994 - one of the all time greats in procedural animation.  None of the motion in this was animated by hand&amp;nbsp;:)   &lt;/p&gt;</content><category term="cg"></category><category term="animation"></category></entry><entry><title>Mighty Morphin Maya Module Manager</title><link href="https://theodox.github.io/2014/mighty_morphin_maya_module_manager" rel="alternate"></link><published>2014-01-16T01:17:00-08:00</published><updated>2014-01-16T01:17:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-01-16:/2014/mighty_morphin_maya_module_manager</id><summary type="html">&lt;p&gt;A &lt;span class="caps"&gt;GUI&lt;/span&gt; for managing Maya&amp;nbsp;modules&lt;/p&gt;</summary><content type="html">&lt;p&gt;For folks who are interested in &lt;a href="magical_modules.html"&gt;fiddling with Maya modules&lt;/a&gt; as per the last post, I&amp;#8217;ve tossed &lt;a href="https://gist.github.com/theodox/8414494"&gt;a quickie class to manage Maya modules &lt;/a&gt;onto &lt;a href="https://gist.github.com/theodox"&gt;my Gist account&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;This is a bare bones bit of code. The main class is the &lt;code&gt;ModuleManager&lt;/code&gt;, which can find any &lt;code&gt;.mod&lt;/code&gt; files on the MAYA_MODULE_PATH of the current Maya environment. It&amp;#8217;s primary use is to find and list all the modules; secondarily it can be used to toggle them on and off (by changing the leading + which Maya uses to id a module to a -, or vice-versa). It&amp;#8217;s pretty dumb (no accounting for file permissions, incorrectly formatted .mod files, etc) but it&amp;#8217;s handy for quickly testing out&amp;nbsp;configs.  &lt;/p&gt;
&lt;p&gt;Also included is a &lt;span class="caps"&gt;GUI&lt;/span&gt; class, &lt;code&gt;ModuleManagerDialog&lt;/code&gt;, which finds provides a simple &lt;span class="caps"&gt;GUI&lt;/span&gt; for listing, enabling, and disabling .mod files. Again, pretty simple stuff, but people may find it&amp;nbsp;useful.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-WyKmQOSze2g/Uted0a8FJFI/AAAAAAAA_xo/4pP_U9LJPJ8/s1600/modmgr.png"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-WyKmQOSze2g/Uted0a8FJFI/AAAAAAAA_xo/4pP_U9LJPJ8/s400/modmgr.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As will all code I put up here, it&amp;#8217;s &lt;span class="caps"&gt;MIT&lt;/span&gt; licensed. Use away with attribution - and if you have any bug fixes, let me know and we&amp;#8217;ll fix the Gist&amp;nbsp;version.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;&lt;/strong&gt;, hat tip to the gang at &lt;a href="http://tech-artists.org/"&gt;&lt;span class="caps"&gt;TAO&lt;/span&gt; &lt;/a&gt; for the idea of using a context manager to get out of all those stupid &lt;em&gt;setParent(&amp;#8220;..&amp;#8221;)&lt;/em&gt; calls in Maya &lt;span class="caps"&gt;GUI&lt;/span&gt; work. I could not find the original post where somebody mentioned it - but whoever you are, sir or madam, thank you ever so&amp;nbsp;much.  &lt;/p&gt;</content><category term="Maya"></category><category term="modules"></category></entry><entry><title>Maya’s (mildy) Magical Modules</title><link href="https://theodox.github.io/2014/magical_modules" rel="alternate"></link><published>2014-01-12T17:45:00-08:00</published><updated>2014-01-12T17:45:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-01-12:/2014/magical_modules</id><summary type="html">&lt;p&gt;An introduction to Maya&amp;#8217;s module system, a handy method for bundling and distributing tools&amp;nbsp;non-invasively&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you&amp;#8217;re doing tools work in Maya, you&amp;#8217;ve probably seen a lot of ways of distributing scripts and tools. The most common, alas, is also the wonkiest - dumping a bunch of scripts into the users&amp;#8217;s script folder or maybe fiddling with Maya.env to point at a shared drive on the local&amp;nbsp;network.     &lt;/p&gt;
&lt;p&gt;Eventually, you&amp;#8217;ll rum into situations where you can&amp;#8217;t just litter files all over your user&amp;#8217;s machine. Maybe you&amp;#8217;re supporting multiple projects in the studio and you need to have users hopping back and forth between toolsets. Maybe you&amp;#8217;re dealing with multiple versions of Maya and your tools have been forked into different environments. Maybe you&amp;#8217;re dealing with outsources who don&amp;#8217;t want to permanently alter their own environment just to get your tools for one project. Whatever the reason, someday you&amp;#8217;ll run into a situation where you want to be able to drop in a whole Maya toolset as a unit and to remove or disable it the same&amp;nbsp;way.   &lt;/p&gt;
&lt;p&gt;Maya has always a had a facility called &lt;strong&gt;modules&lt;/strong&gt;, can be useful for this purpose. It used to be used for things like  cloth sim or hair that were tacked on to the main package (back when hair was a $9,000 add-on!) .  Since then it&amp;#8217;s largely fallen out of favor, but it&amp;#8217;s never gone away &amp;#8212; and it has some useful properties that are great for tools&amp;nbsp;distribution.  &lt;/p&gt;
&lt;p&gt;A module is really a sort of virtual file system.  Maya&amp;#8217;s most important folders are those for scripts, plugins, icons, and presets &amp;#8212; the same ones you typically see in your Maya user directory.  If you place a special text file in your module path, you can add to extra paths for Maya to search for scripts, plugins, icons and&amp;nbsp;presets.   &lt;/p&gt;
&lt;p&gt;The big advantage of modules is the ability to manage complete set of files at once - scripts, plugins and so on can all be included (or excluded) from your Maya in a single place &lt;em&gt;Note to Autodesk - it would be very nice to give users a &lt;span class="caps"&gt;UI&lt;/span&gt; for this.  The &amp;#8216;Modules&amp;#8217; setting in the preferences, confusingly, does not refer to _these _modules!&lt;/em&gt;  Parts of a module can be kept independent of the user&amp;#8217;s private stock of scripts and tools. For outsourcers and contractors, in particular, the ability to completely uninstall a toolset you don&amp;#8217;t need anymore is a&amp;nbsp;godsend.   &lt;/p&gt;
&lt;p&gt;Another handy feature of modules is that they can point Maya at shared network paths as well as paths on disk. This makes it far easier to keep a whole team on a common tool set by pointing a module script directory at a shared drive.  I&amp;#8217;m not personally a big fan of the shared drive as a distribution method (more on that some other time) but it&amp;#8217;s fairly common and this makes it easy to establish and&amp;nbsp;manage.  &lt;/p&gt;
&lt;p&gt;Finally modules do a little bit of automatic versioning. A module can specify different paths for different Maya versions, &lt;span class="caps"&gt;OS&lt;/span&gt;&amp;#8217;es and processors.  This means a tool author can produce a single distribution for all customers and give them identical installation instructions without worrying too much about the details of the individual workstations on the receiving end.  You can pack up all of your distributions into a single zip file, and users merely unzip it into the modules folder of their local settings and the installation is done&amp;nbsp;.  &lt;/p&gt;
&lt;h3&gt;Basic&amp;nbsp;Setup&lt;/h3&gt;
&lt;p&gt;Modules are defined by a simple text file with a &amp;#8220;.mod&amp;#8221; extension.  Maya will look for module files in all the directories in the Maya_MODULE_PATH environment variable if you have it set, or in the modules directory of your Maya user directory (for example, in My Documents\Maya\modules). Here are the default locations where modules can be&amp;nbsp;placed:  &lt;/p&gt;
&lt;h4&gt;Default for&amp;nbsp;Windows&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;user&amp;gt;/My Documents/Maya/modules  
C:/Program Files/Common Files/Autodesk Shared/Modules/Maya/  
C:/Program Files/Common Files/Autodesk Shared/Modules/Maya/modules/
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Default for Mac &lt;span class="caps"&gt;OS&lt;/span&gt; X,&amp;nbsp;Linux&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;Maya_APP_DIR&lt;/span&gt;&lt;span class="x"&gt;/Maya//modules  &lt;/span&gt;
&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;Maya_APP_DIR&lt;/span&gt;&lt;span class="x"&gt;/Maya/modules  &lt;/span&gt;
&lt;span class="x"&gt;/usr/autodesk/modules/Maya/  &lt;/span&gt;
&lt;span class="x"&gt;/usr&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A module file is a plain text file. The official documentation for the format is &lt;a href="http://docs.autodesk.com/MayaUL/2013/ENU/Maya-API-Documentation/index.html?url=files/GUID-9E096E39-AD0D-4E40-9B2A-9127A2CAD54B.htm,topicNumber=d30e30995"&gt;here&lt;/a&gt; &lt;em&gt;(the 2012 version is &lt;a href="http://download.autodesk.com/global/docs/Mayasdk2012/en_us/index.html"&gt;here&lt;/a&gt;.  There are some pretty significant differences between 2012 and 2013+)!&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For the simple case a module file just looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 c:\path\to\moduleName
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The module name is what shows up in the Maya &lt;span class="caps"&gt;UI&lt;/span&gt;, the 1.0 is a version number, and the path points Maya to the location of the module folder.  This example would point to a folder called &amp;#8220;ModuleName&amp;#8221;. If that&amp;#8217;s all that goes in there, then Maya will look for scripts&amp;nbsp;in  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c:\path\to\moduleName\scripts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;icons&amp;nbsp;in  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c:\path\to\moduleName\icons
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and plugins&amp;nbsp;in  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c:\path\to\moduleName\plug-ins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can test this out by making the folder &lt;code&gt;c:\path\to\moduleName\scripts&lt;/code&gt; and popping a &lt;code&gt;userSetup.py&lt;/code&gt; ( or a &lt;code&gt;userSetup.mel&lt;/code&gt;, if you&amp;#8217;re feeling old school) into it containing something like a &lt;code&gt;print("hello world")&lt;/code&gt;. When you restart your Maya, you should see it printout in the Maya output window as Maya loads. It&amp;#8217;s the output window for Python because the script will execute &lt;em&gt;before&lt;/em&gt; the Maya &lt;span class="caps"&gt;UI&lt;/span&gt; has loaded (something to keep in mind in your startup&amp;nbsp;scripts!).  &lt;/p&gt;
&lt;p&gt;You can avoid hard coding the paths by using an alternate syntax in the mode file.  You have a can, for example, include an environment variable using &lt;code&gt;${variable}&lt;/code&gt; in place of an absolute path. For&amp;nbsp;example  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;PROJECT_LOC&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;\Mayatools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will point look for your module folder in the location defined by the environment variable named &lt;strong&gt;project_loc&lt;/strong&gt;.  One side effect of this is that uou can put your modules into the modules folder (alongside your mod files) without having to hard-code&amp;nbsp;paths:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;Maya_MODULE_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;\moduleName
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can even point your modules at a network&amp;nbsp;share:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 \\net\shared\modules\moduleName
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Fancy stuff in&amp;nbsp;2013+&lt;/h3&gt;
&lt;p&gt;Sometimes setup requirements are more complex than dropping in a single folder (not a good idea if you can avoid it - but you know how it is&amp;#8230;).  &lt;strong&gt;In 2013 and later,&lt;/strong&gt;  you can use the module file to override particular paths and do some more flexible&amp;nbsp;setup.  &lt;/p&gt;
&lt;p&gt;For example, in 2013+, you can also define the path relative to the module file&amp;nbsp;location:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 ..\moduleName
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;should point at a folder &lt;em&gt;above&lt;/em&gt; the directory where the module file is located. &lt;strong&gt;But  remember: 2013+ only!&lt;/strong&gt; If you&amp;#8217;ve looked at, for example, &lt;a href="http://around-the-corner.typepad.com/adn/2012/07/distributing-files-on-Maya-Maya-modules.html"&gt;Cyrille Fauvel&amp;#8217;s post on modules&lt;/a&gt; you&amp;#8217;ll see a bunch of advice that only works for 2013+.  Be aware&amp;nbsp;:)  &lt;/p&gt;
&lt;p&gt;The other neat addition in 2013 is the ability to override specific sub-paths of the module.&amp;nbsp;Thus  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;Maya_MODULE_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;\moduleName 
scripts: //network/share/scripts
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;would point the scripts at the shared network scripts  drive, while leaving the plugins and icons folders in the module&amp;nbsp;location.  &lt;/p&gt;
&lt;p&gt;2013+ also offers the ability to set environment variables from inside a&amp;nbsp;module  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;+ moduleName 1.0 &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;Maya_MODULE_PATH&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;\moduleName 
HAS_FANCY_2013_FEATURES=YES
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Will set the environment variable &lt;code&gt;HAS_FANCY_2013_FEATURES&lt;/code&gt; to &amp;#8216;yes&amp;#8217; inside your Maya session. 2013 even has some funky syntax allowing you to append to existing variables and so on . There&amp;#8217;s no point in recapitulating it here, the &lt;a href="http://docs.autodesk.com/MayaUL/2013/ENU/Maya-API-Documentation/index.html?url=files/GUID-9E096E39-AD0D-4E40-9B2A-9127A2CAD54B.htm,topicNumber=d30e30995"&gt;description in the docs&lt;/a&gt; is a concise as I could do. My only commentary would be: &lt;em&gt;seriously, people? It&amp;#8217;s 2014 and still with the funky syntax crap?  I&amp;#8217;m supposed to recognize that  _PATH += and &lt;span class="caps"&gt;PATH&lt;/span&gt; +:= bin _are&amp;nbsp;different?&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;Adding to paths can be extremely handy for some things, but unfortunately this won&amp;#8217;t solve a particularly thorny problem for tools teams, which is making sure that the &lt;span class="caps"&gt;OS&lt;/span&gt; can find binary dlls: if you have &lt;span class="caps"&gt;DLL&lt;/span&gt; dependencies in a binary plugin, its &amp;#8216;too late&amp;#8217; to fix it by appending the &lt;span class="caps"&gt;DLL&lt;/span&gt; locations to the system path once Maya has loaded. Which stinks &amp;#8212; and is another reason to avoid binary plugins like the plague they are if at all&amp;nbsp;possible.&lt;/p&gt;
&lt;h3&gt;One stop tool distribution&amp;#8230; or&amp;nbsp;not&lt;/h3&gt;
&lt;p&gt;For any busy &lt;span class="caps"&gt;TA&lt;/span&gt;, the business of distributing and maintaining toolsets on lots of other people&amp;#8217;s computers is a constant headache.  Modules can offer some significant assistance with this, since they allow you some control over Maya&amp;#8217;s search paths without requiring your to write code. It&amp;#8217;s a simple solution to the chicken-and-egg problem of getting Maya to do what you want before you&amp;#8217;ve got tools loaded up to tell Maya what to&amp;nbsp;do.  &lt;/p&gt;
&lt;p&gt;Modules, on their own, are not a complete solution to that problem.  But they are a&amp;nbsp;help.  &lt;/p&gt;
&lt;p&gt;Modules basically just tell Maya to look in a few extra places for things like scripts or plugins - they don&amp;#8217;t automatically run startup code or do initialization, and they don&amp;#8217;t have much in the way of smarts &amp;#8212; they can&amp;#8217;t for example, allow you to quickly switch between two project-specific versions of your Maya tool set. You can install modules for toolsetA and toolsetB, but something smarter than a module file has to decide which one to pick on a given occasion (I&amp;#8217;m going to talk about that problem in another post, but for now  However they do allow you to mix and match install locations, which is a big start; they also allow you to install outside the user&amp;#8217;s script folders, which is a key element in the good-fences-make-good-neighbors relationship between &lt;span class="caps"&gt;TA&lt;/span&gt; tools and the user&amp;#8217;s private Maya preferences.  Plus, they are explicit: you can look at the file and tell what its trying to do, which beats any number of magic naming and location&amp;nbsp;rules.  &lt;/p&gt;
&lt;p&gt;At some point in the near future I&amp;#8217;ll try to post something on the second half of the distribution puzzle: running startup code cleanly and&amp;nbsp;intelligently.  &lt;/p&gt;</content><category term="Maya"></category><category term="python"></category><category term="modules"></category><category term="programming"></category></entry><entry><title>Schadenfreude alert!</title><link href="https://theodox.github.io/2014/schadenfreude_alert" rel="alternate"></link><published>2014-01-10T16:11:00-08:00</published><updated>2014-01-10T16:11:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-01-10:/2014/schadenfreude_alert</id><summary type="html">&lt;p&gt;pending&lt;/p&gt;</summary><content type="html">&lt;p&gt;What does it say when a book titled &lt;a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742"&gt;Javascript:The Good Parts&lt;/a&gt; has a final chapter, &amp;#8220;Beautiful Features&amp;#8221;, that&amp;#8217;s 3 pages&amp;nbsp;long.  &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://nelsonwells.net/wp-content/uploads/2011/06/javascript_good_and_bad_parts.jpg"&gt;&lt;/p&gt;
&lt;p&gt;And is followed by a 7 page appendix titled &amp;#8220;Awful&amp;nbsp;Parts&amp;#8221;.  &lt;/p&gt;
&lt;p&gt;And another 7 page appendix titled &amp;#8220;Bad&amp;nbsp;Parts&amp;#8221;.  &lt;/p&gt;</content><category term="programming"></category></entry><entry><title>State of Decay moment of zen (and lighting)</title><link href="https://theodox.github.io/2014/state_of_decay_moment_of_zen_and_lighting" rel="alternate"></link><published>2014-01-07T10:00:00-08:00</published><updated>2014-01-07T10:00:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-01-07:/2014/state_of_decay_moment_of_zen_and_lighting</id><summary type="html">&lt;p&gt;A moment of &lt;em&gt;State of Decay&lt;/em&gt;&amp;nbsp;zen&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-Y1CcBO5iyig/UsujMjcxTRI/AAAAAAAAPCc/dIyL6T-pZQY/s1600/home_07.png"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-Y1CcBO5iyig/UsujMjcxTRI/AAAAAAAAPCc/dIyL6T-pZQY/s1600/home_07.png"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Pastor Will found the Super Fudge&amp;nbsp;Chunk.    &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The whole scene (except for that one spot of sunlight and the window) is lit entirely by ambient lighting with some vertex lighting and (small) point lights in the windows. What a nightmare - whatever we do in the next game, it won&amp;#8217;t be&amp;nbsp;this!  &lt;/p&gt;
&lt;p&gt;There&amp;#8217;s no lightmapping, thanks to a 24 hour continuous time of day cycle.  The houses could also be placed at any orientation, so the vertex lighting has to be pretty gentle - we shot basically ran a very smoothed out hemsipherical dome light outside the house, once with Final Gather and once with a dome of stochastically placed Maya point lights to create the illusion of darker interiors and lighter areas near windows). The final gather provided some bounce light look and the point lights provided a smooth gradient; blending the two helped eliminate hard artifacts and cut down on the frequency since we didn&amp;#8217;t want real shadows which would be wrong as the sun moved.   We also ran a similar omnidirectional vert light pass on all the props to add depth to things like cabinets and shelving. I also did a little tool to try to do some vertex decimation on the lit meshes &amp;#8212; we tended to subdivide the big planar areas heavily before lighting and then trim down verts which didn&amp;#8217;t hold much light or shading information (again, the smoother interior gradients helped a lot on memory&amp;nbsp;here).   &lt;/p&gt;
&lt;p&gt;A handy trick - thanks to a suggestion from &lt;a href="https://plus.google.com/113049613359148049737"&gt;+Wolfgang Engel&lt;/a&gt;  - was small point lights in the windows and doors to add a boost to exterior areas and to make it look as if the characters move from light to shadow, which isn&amp;#8217;t really true.  These had to be very small - much smaller than I wanted - to keep the overdraw costs low in the Crytek deferred renderer. Every house had a handful of somewhat larger lights right near the floor. They watched the sun direction and lit up when the room was facing the sun to provide the illusion of bounce lighting (this wasn&amp;#8217;t really checking the sun, it was checking the orientation of the light (and the house) against a precalculated table of sun positions and elevations so you could figure out how bright a given vector should be at a given time. Would have been much nicer to really sample the sun , but the perf environment was&amp;nbsp;brutal  &lt;/p&gt;
&lt;p&gt;The ambient lighting comes from an &lt;span class="caps"&gt;HDR&lt;/span&gt; cube map -  only one per building, alas, and they didn&amp;#8217;t orient with the placement.  In the end I hand painted abstract ones.  The &amp;#8216;faces&amp;#8217; of the cube are color biased to help pick out the planes of the architecture so it doesn&amp;#8217;t all collapse into mono-color&amp;nbsp;mush.   &lt;/p&gt;
&lt;p&gt;Thank God for screen space ambient occlusion, which adds a lot of edge&amp;nbsp;definition.   &lt;/p&gt;
&lt;p&gt;And for Super Fudge&amp;nbsp;Chunk.  &lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;PS&lt;/span&gt;: Who has seen the bug where Pastor Will flips out on somebody back at base and threatens to &amp;#8220;Cut you like a prison bitch&amp;#8221;?  We heard about it from a tester and unanimously voted it &amp;#8220;Won&amp;#8217;t&amp;nbsp;Fix&amp;#8221;.  &lt;/p&gt;</content><category term="games"></category><category term="SOD"></category></entry><entry><title>“Not Even God Can Change the Past”</title><link href="https://theodox.github.io/2014/kremlinology" rel="alternate"></link><published>2014-01-06T10:02:38-08:00</published><updated>2014-01-06T10:02:38-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-01-06:/2014/kremlinology</id><summary type="html">&lt;p&gt;A little Kremlinology from&amp;nbsp;Pixar&lt;/p&gt;</summary><content type="html">&lt;p&gt;But evidently Jon Lassiter can..  If you remember the very early days of &lt;span class="caps"&gt;CG&lt;/span&gt; this image might seem a little&amp;nbsp;surprising.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://www.pixartalk.com/wp-content/uploads/2009/06/miami.jpg"&gt;&lt;/p&gt;
&lt;p&gt;More about the decision to alter it &lt;a href="http://www.pixartalk.com/shorts/knick-knack"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="cg"></category></entry><entry><title>Future Watch: Graphics &amp; Animation Research</title><link href="https://theodox.github.io/2014/research_page" rel="alternate"></link><published>2014-01-05T10:33:00-08:00</published><updated>2014-01-05T10:33:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-01-05:/2014/research_page</id><summary type="html">&lt;p&gt;Announcing a new permalist page of interesting graphics and animation&amp;nbsp;research&lt;/p&gt;</summary><content type="html">&lt;p&gt;I&amp;#8217;ve added a permanent &lt;a href="pages/research"&gt;page to keep track of interesting academic research&lt;/a&gt;. It&amp;#8217;s over in the sidebar.  If you&amp;#8217;re at all into animation, download the videos or the ppt of the &lt;a href="http://grail.cs.washington.edu/projects/animal-morphology/s2009/"&gt;paper on gait optimization&lt;/a&gt;. It&amp;#8217;s fun &amp;#8212; unless you&amp;#8217;re an animator, in which case it&amp;#8217;s a bit&amp;nbsp;scary.   &lt;/p&gt;
&lt;p&gt;The list is a bit skimpy atm, I&amp;#8217;ll post updates as it&amp;nbsp;expands.  &lt;/p&gt;</content><category term="techart"></category><category term="industry"></category><category term="blog"></category></entry><entry><title>First find of 2014: A Scriptable DCC app in the browser?!?!</title><link href="https://theodox.github.io/2014/clara_io" rel="alternate"></link><published>2014-01-03T22:04:00-08:00</published><updated>2014-01-03T22:04:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-01-03:/2014/clara_io</id><summary type="html">&lt;p&gt;Clara.io &amp;#8212; a full 3d &lt;span class="caps"&gt;DCC&lt;/span&gt; app that runs in your&amp;nbsp;browser!&lt;/p&gt;</summary><content type="html">&lt;p&gt;Just stumbled across this link to &lt;a href="http://clara.io/"&gt;clara.io&lt;/a&gt;, which is an in-browser 3D editor from Ecocortex, one of the vendors behind the &lt;a href="https://code.google.com/p/alembic/"&gt;Alembic file format&lt;/a&gt;. It&amp;#8217;s a 3d modeler that runs in a browser.  And it&amp;#8217;s&amp;nbsp;free.  &lt;/p&gt;
&lt;p&gt;Sheesh.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-YigSyxvbhNw/Usbzp7a29GI/AAAAAAAABYc/M06nOJapj_Q/s1600/claraio.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-YigSyxvbhNw/Usbzp7a29GI/AAAAAAAABYc/M06nOJapj_Q/s1600/claraio.png"&gt;&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;And look at the bottom - a script&amp;nbsp;console!  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;#8217;m not entirely sure what to make of this, beyond &lt;a href="http://www.youtube.com/watch?v=acYDNlMYAaI"&gt;&lt;em&gt;totally wicked&lt;/em&gt;&lt;/a&gt;.  I&amp;#8217;m not going to try to review clara here - I just found it today, after all, but it&amp;#8217;s such an interesting find that I can&amp;#8217;t help but&amp;nbsp;comment.  &lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;UI&lt;/span&gt; is a riff on familiar ideas, so it&amp;#8217;s easy to pick up for any &lt;span class="caps"&gt;TA&lt;/span&gt;, or for that matter anybody with more than a passing familiarity with the usual suspects. It doesn&amp;#8217;t break any new ground in productivity or ease of use - but that doesn&amp;#8217;t bother me in this context. Like the dog that walks on it&amp;#8217;s hind legs, it&amp;#8217;s not done perfectly but one is surprised to see it_ &lt;em&gt;done at all.  This is, after all running _in a browser.&lt;/em&gt;&amp;nbsp;Yikes.  &lt;/p&gt;
&lt;p&gt;The app is still kind of wet behind the ears - it feels a trifle slow (some kinds of &lt;span class="caps"&gt;UI&lt;/span&gt; operations seem to trigger a perceptible refresh in all of the 3d views, for example). There are host of poly modeling tools &amp;#8212; notably booleans &amp;#8212; that Max/Maya users will miss pretty quickly.  All that said - the idea of running a zero-configuration, instantly deployable app from anywhere &amp;#8212; a tool you could be sure was the same for your outsources in Bangkok and on your own desktop &lt;em&gt;right now&lt;/em&gt; &amp;#8212; along with inherent cloud data management?  The ability to run remote commands via web push commands, so you could set up a That is beyond just a curiosity. This app doesn&amp;#8217;t suddenly obsolete Max or Maya or &lt;span class="caps"&gt;XSI&lt;/span&gt;, but it might be the first rumblings of a big change in how things get done.  As a side benefit, it&amp;#8217;s got a several different file &lt;span class="caps"&gt;IO&lt;/span&gt; options and could perhaps make as decent waystation for people crossing product&amp;nbsp;boundaries.  &lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;TA&lt;/span&gt; who immediately asks &amp;#8220;what scripting language&amp;#8221; will be pleased to note that there&amp;#8217;s a script console down at the bottom; unsurprisingly for a web app the scripting language is JavaScript.  &lt;span class="caps"&gt;JS&lt;/span&gt; may not be my favorite language &amp;#8212; not by a long shot! &amp;#8212; but it&amp;#8217;s the natural language of the web. Most importantly, the scripting system makes it fairly easy to extend the application by writing your own plugins: this example on their website shows &lt;a href="http://clara.io/learn/sdk/creating-commands"&gt;how to make an &lt;span class="caps"&gt;OBJ&lt;/span&gt; importer&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;Most important of all, though &amp;#8212; did I mention this? &amp;#8212; it&amp;#8217;s a browser app. Which means you can so things like&amp;nbsp;this:   &lt;/p&gt;
&lt;iframe width="660" height="370" src="https://www.youtube.com/embed/r0hrE8fSU08" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Which, you must admit, scores pretty well on the Gee-Whiz scale for a freakin browser&amp;nbsp;app.&lt;/p&gt;
&lt;p&gt;Overall, this is a really excellent developmnt. The 3d market has been painfully sluggish for a decade now - we&amp;#8217;ve got better bells and whistles but on the whole we still work in 2014 more or less the away we worked in 2004.  We need new companies with fresh ideas to shake up this market.  We also need to &lt;a href="and-i-thought-we-had-it-bad.html"&gt;embrace web development as a part of how we build tools&lt;/a&gt;.  This is a big step in the right direction and we should do what we can to help it&amp;nbsp;along.&lt;/p&gt;</content><category term="tools"></category><category term="techart"></category><category term="web"></category></entry><entry><title>The sounds of (Python) Silence</title><link href="https://theodox.github.io/2014/sounds_of_silence" rel="alternate"></link><published>2014-01-02T10:45:00-08:00</published><updated>2014-01-02T10:45:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-01-02:/2014/sounds_of_silence</id><summary type="html">&lt;p&gt;A class for managing overly chatty Python&amp;nbsp;modules&lt;/p&gt;</summary><content type="html">&lt;p&gt;After a long vacation with my children, I&amp;#8217;ve been meditating on the virtues of&amp;nbsp;silence.  &lt;/p&gt;
&lt;p&gt;Python is a glorious toybox bursting with fun gadgets to delight &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;#8217;s near and far.  You can easily use it to stuff anything from database access to a serial port controller into your copy of Maya, which is a always fun (and occasionally useful).  However the &lt;a href="http://www.youtube.com/watch?v=-mTUmczVdik"&gt;plethora&lt;/a&gt; of Python libraries out there does bring with it a minor annoyance - if you grab something cool off &lt;a href="https://pypi.python.org/pypi"&gt;the cheeseshop&lt;/a&gt; you don&amp;#8217;t know exactly how the author wants to communicate with users.  All too often you incorporate something useful into your Maya and suddenly your users have endless reams of debug printouts in their script listener &amp;#8212; info that might make sense to a coder or a sysadmin but which is just noise (or worse, slightly scary) for your&amp;nbsp;artists.  &lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re suffering from overly verbose external modules, you can get a little peace and quiet with this little snippet. The Silencer class is just a simple &lt;a href="http://docs.python.org/2.7/reference/datamodel.html#context-managers"&gt;context manager&lt;/a&gt; that hijacks &lt;em&gt;sys.stdout&lt;/em&gt; and &lt;em&gt;sys.stderr&lt;/em&gt; into a pair of StringIO&amp;#8217;s that will just silently swallow any printouts that would otherwise go to the&amp;nbsp;listener.   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;StringIO&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SilencedError&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Silencer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="sd"&gt;    suppress stdout and stderr&lt;/span&gt;

&lt;span class="sd"&gt;    stdout and stderr are redirected into StringIOs.  At exit their contents are dumped into the string fields &amp;#39;out&amp;#39; and &amp;#39;error&amp;#39;&lt;/span&gt;

&lt;span class="sd"&gt;    Typically use this via the with statement:&lt;/span&gt;

&lt;span class="sd"&gt;    For example::&lt;/span&gt;

&lt;span class="sd"&gt;        with Silencer() as fred:&lt;/span&gt;
&lt;span class="sd"&gt;            print stuff&lt;/span&gt;
&lt;span class="sd"&gt;        result = fred.out&lt;/span&gt;

&lt;span class="sd"&gt;    note that if you use a silencer to close down output from the logging module, you should call logging.shutdown() in the silencer with block&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oldstdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oldstderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_outhandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_errhandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enabled&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__enter__&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;enabled&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oldstdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oldstderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_outhandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_errhandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_was_entered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_was_entered&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_restore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_was_entered&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_outhandle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_errhandle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oldstdout&lt;/span&gt;
            &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;oldstderr&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_outhandle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_errhandle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_outhandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_errhandle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt; &lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;se&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;se&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SilencedError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tb&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_restore&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;se&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;se&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you actually need to look at the spew you can just look at the contents of the &lt;em&gt;out&lt;/em&gt; and &lt;em&gt;error&lt;/em&gt; fields of the Silencer.   More commonly though you&amp;#8217;ll just want to wrap a particularly verbose bit of code in a &lt;em&gt;with&amp;#8230; as&lt;/em&gt; block to shut it up.  You&amp;#8217;ll also get the standard context manager behavior: an automatic restore in the event of an exception,&amp;nbsp;etc.  &lt;/p&gt;</content><category term="programming"></category><category term="maya"></category><category term="python"></category></entry><entry><title>RFC: how to do a ‘community’ book</title><link href="https://theodox.github.io/2014/rfc_how_to_do_a_'community'_book" rel="alternate"></link><published>2014-01-02T09:41:00-08:00</published><updated>2014-01-02T09:41:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2014-01-02:/2014/rfc_how_to_do_a_'community'_book</id><summary type="html">&lt;p&gt;pending&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I mentioned a while ago, the book I &lt;a href="http://www.amazon.com/gp/product/0415812291/ref=s9_simh_gw_p14_d6_i1?pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=center-2&amp;amp;pf_rd_r=0PR9CNMVMXW53TJDCGKP&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=1688200382&amp;amp;pf_rd_i=507846"&gt;worked on last year is almost out&lt;/a&gt;.  That one was group project - there were about a dozen of contributing sections and data, and then Renee came in and cleaned it up into plain English.  I think that works well for overview books, but I&amp;#8217;d like to do another one with a stronger point of view and narrower focus &amp;#8212; there are things you can say effectively in your own voice that are hard to pull off in the third&amp;nbsp;person.  &lt;/p&gt;
&lt;p&gt;On the other hand, in any technical field like this there&amp;#8217;s also a big range of options - no matter how much you&amp;#8217;ve been around, there are always weird corner cases and oddball gotchas that other people have to live with even though you&amp;#8217;ve never even heard of them.  I&amp;#8217;d love to figure out a way to get the whole &lt;span class="caps"&gt;TA&lt;/span&gt; crowd involved in making the next book better and more&amp;nbsp;comprehensive.   &lt;/p&gt;
&lt;p&gt;Has anybody got a good model for how to involve a big internet community into the evolution of a&amp;nbsp;book?  &lt;/p&gt;</content><category term="books"></category><category term="writing"></category><category term="industry"></category></entry><entry><title>CG Prehistory</title><link href="https://theodox.github.io/2013/robert_abel_assoc" rel="alternate"></link><published>2013-12-29T14:17:00-08:00</published><updated>2013-12-29T14:17:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2013-12-29:/2013/robert_abel_assoc</id><summary type="html">&lt;p&gt;Oldest of old-school &lt;span class="caps"&gt;CG&lt;/span&gt; from Robert Abel and&amp;nbsp;Associates.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Still on holiday blogging wise, as we ponder the year gone by, give a thought to these ancient nuggets from &lt;a href="http://design.osu.edu/carlson/history/tree/abel.html"&gt;Robert Abel&lt;/a&gt;, back from when I was still in high school :)  Back when being a &amp;#8216;technical artist&amp;#8217; probably meant &amp;#8216;being the guy who can hand adjust the laser in the slide-rendering machine that produces our graphics on&amp;nbsp;film&amp;#8217;  &lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/Wx1dTGvfqak" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;</content><category term="cg"></category></entry><entry><title>Production Pipeline Fundamentals for Film and Games</title><link href="https://theodox.github.io/2013/book_is_out" rel="alternate"></link><published>2013-12-22T14:50:00-08:00</published><updated>2013-12-22T14:50:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2013-12-22:/2013/book_is_out</id><summary type="html">&lt;p&gt;The pipeline book is out on&amp;nbsp;Amazon!&lt;/p&gt;</summary><content type="html">&lt;p&gt;The book I worked on last year is up for pre-order on Amazon! It was a long haul - congrats to Renee and all the other authors who helped get this giant zeppelin filled with hot&amp;nbsp;air! &lt;/p&gt;
&lt;iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//ws-na.amazon-adsystem.com/widgets/q?ServiceVersion=20070822&amp;OneJS=1&amp;Operation=GetAdHtml&amp;MarketPlace=US&amp;source=ss&amp;ref=as_ss_li_til&amp;ad_type=product_link&amp;tracking_id=tecsurgui-20&amp;marketplace=amazon&amp;region=US&amp;placement=0415812291&amp;asins=0415812291&amp;linkId=6b3df4689659a59d96ef9bea8a29450c&amp;show_border=true&amp;link_opens_in_new_window=true"&gt;&lt;/iframe&gt;</content><category term="industry"></category><category term="techart"></category><category term="pipeline"></category><category term="books"></category></entry><entry><title>Techartists doin’ it for themselves: A Python REPL in Unity</title><link href="https://theodox.github.io/2013/unityrepl" rel="alternate"></link><published>2013-12-22T10:10:00-08:00</published><updated>2013-12-22T10:10:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2013-12-22:/2013/unityrepl</id><summary type="html">&lt;p&gt;A simple Python &lt;span class="caps"&gt;REPL&lt;/span&gt; inside the Unity&amp;nbsp;Editor&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last time, I sketched out the basics of &lt;a href="python_in_unity.html"&gt;embedding a Python intepreter into Unity.&lt;/a&gt;   That&amp;#8217;s cool enough &amp;#8212; but unless you&amp;#8217;re so desperate for Python that you&amp;#8217;re willing to script your whole application inside of triple quotes it doesn&amp;#8217;t have a ton of immediate&amp;nbsp;applications.  &lt;/p&gt;
&lt;p&gt;So, this time out I&amp;#8217;ll sketch out how to build a simple script editor inside of Unity (at the risk of repeating myself, I&amp;#8217;ll just say again that the extensibility of the Unity editor is an incredible aid to game developers of all stripes, and to tech artists in particular &amp;#8212; it&amp;#8217;s pretty amazing you can hack in something this complex without source code access or esoteric C++&amp;nbsp;chops.  &lt;/p&gt;
&lt;h2&gt;Prologomena&lt;/h2&gt;
&lt;p&gt;The basic strategy for this excersize is simply to create a Unity window with two panes - a &amp;#8216;history&amp;#8217; pane  and a  &amp;#8216;script&amp;#8217; pane &amp;#8212; and before you ask, yes, it&amp;#8217;s just a ripoff of the Maya&amp;nbsp;listener.   &lt;/p&gt;
&lt;p&gt;Before setting up the &lt;span class="caps"&gt;GUI&lt;/span&gt;, we need to cover the framework - the code that will keep the &lt;span class="caps"&gt;GUI&lt;/span&gt; stat and also set up the Python intepreter. In this example, you&amp;#8217;ll see a bunch of properties declared for the use of the &lt;span class="caps"&gt;GUI&lt;/span&gt; - notably &lt;code&gt;historyText&lt;/code&gt; and &lt;code&gt;scriptText&lt;/code&gt;, which hold the actual contents of the listener and the history pane.  The other notable feature is the same duo of &lt;code&gt;ScriptEngine&lt;/code&gt;, and &lt;code&gt;ScriptScope&lt;/code&gt; which we went over in the &lt;a href="python_in_unity.html"&gt;last post&lt;/a&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If those terms don&amp;#8217;t mean anything to you you might want to follow that link before&amp;nbsp;proceeding).  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnityEditor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;IronPython&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;IronPython.Modules&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Scripting.Hosting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="c1"&gt;// derive from EditorWindow for convenience, but this is just a fire-n-forget script    &lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScriptExample&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EditorWindow&lt;/span&gt;    
 &lt;span class="p"&gt;{&lt;/span&gt;    
     &lt;span class="c1"&gt;// class member properties  &lt;/span&gt;
     &lt;span class="n"&gt;Vector2&lt;/span&gt; &lt;span class="n"&gt;historyScroll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
     &lt;span class="n"&gt;Vector2&lt;/span&gt; &lt;span class="n"&gt;scriptScroll&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
     &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;showHistory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
     &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;historyPaneHeight&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;192&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
     &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;historyText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;history&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
     &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;scriptText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
     &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;lastResult&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
     &lt;span class="n"&gt;TextEditor&lt;/span&gt; &lt;span class="n"&gt;TEditor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
     &lt;span class="n"&gt;GUIStyle&lt;/span&gt; &lt;span class="n"&gt;consoleStyle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GUIStyle&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;    
     &lt;span class="n"&gt;GUIStyle&lt;/span&gt; &lt;span class="n"&gt;historyStyle&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;GUIStyle&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;    
     &lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scripting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hosting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScriptEngine&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
     &lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Scripting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hosting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ScriptScope&lt;/span&gt; &lt;span class="n"&gt;ScriptScope&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

     &lt;span class="c1"&gt;// initialization logic (it&amp;#39;s Unity, so we don&amp;#39;t do this in the constructor!  &lt;/span&gt;
     &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnEnable&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;    
     &lt;span class="p"&gt;{&lt;/span&gt;       
         &lt;span class="c1"&gt;// pure gui stuff  &lt;/span&gt;
         &lt;span class="n"&gt;consoleStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textColor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
         &lt;span class="n"&gt;consoleStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;margin&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RectOffset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;historyStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;normal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;textColor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
         &lt;span class="n"&gt;historyStyle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;margin&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RectOffset&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

         &lt;span class="c1"&gt;// load up the hosting environment    &lt;/span&gt;
         &lt;span class="n"&gt;ScriptEngine&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IronPython&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hosting&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateEngine&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;    
         &lt;span class="n"&gt;ScriptScope&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateScope&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;

         &lt;span class="c1"&gt;// load the assemblies for unity, using types    &lt;/span&gt;
         &lt;span class="c1"&gt;// to resolve assemblies so we don&amp;#39;t need to hard code paths    &lt;/span&gt;
         &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadAssembly&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PythonFileIOModule&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadAssembly&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GameObject&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadAssembly&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Editor&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;dllpath&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetDirectoryName&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;    
             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;    
             &lt;span class="s"&gt;&amp;quot;\\&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="c1"&gt;// load needed modules and paths    &lt;/span&gt;
         &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;    
         &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;import sys&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendFormat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sys.path.append(\&amp;quot;{0}\&amp;quot;)\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dllpath&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/Lib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendFormat&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sys.path.append(\&amp;quot;{0}\&amp;quot;)\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dllpath&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;/DLLs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;import UnityEngine as unity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;import UnityEditor as editor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;import StringIO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unity.Debug.Log(\&amp;quot;Python console initialized\&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;printbuffer = sys.stdout = StringIO.StringIO()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ScriptSource&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateScriptSourceFromString&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt; &lt;span class="p"&gt;());&lt;/span&gt;    
         &lt;span class="n"&gt;ScriptSource&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScriptScope&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;public&lt;/span&gt;  &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnGUI&lt;/span&gt; &lt;span class="p"&gt;(){}&lt;/span&gt; &lt;span class="c1"&gt;// see next code snippet  &lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As in the last example you&amp;#8217;ll also not that we&amp;#8217;re manually setting up sys.path to point at the directory where IronPython is installed, with a little extra code to make it portable  (dotNet assemblies can tell you where they live on disk, so it&amp;#8217;s a cheap shortcut to find your install&amp;nbsp;directory).   &lt;/p&gt;
&lt;p&gt;The only thing in here that is really &amp;#8216;architecturally&amp;#8217; important its this&amp;nbsp;line:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;printbuffer = sys.stdout = StringIO.StringIO()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What&amp;#8217;s going on there is that we&amp;#8217;re replacing &lt;code&gt;sys.stdout&lt;/code&gt; - which in ordinary Python points at the user&amp;#8217;s console - with a &lt;a href="http://docs.python.org/2/library/stringio.html"&gt;StringIO &lt;/a&gt;object.  StringIO mimicks a file &amp;#8212; and so does sys.stdout. By stuffing printbuffer in there we are hijacking any calls to print that you might make in a script so we can print them out in our &lt;span class="caps"&gt;UI&lt;/span&gt;.  This is trick should be familiar to tech artists who need &lt;a href="http://www.drakeguan.org/blog/2009/02/How-to-make-Maya-output-all-messages-into-console-terminal/"&gt;to grab the Maya console for nefarious&amp;nbsp;purposes.&lt;/a&gt;  &lt;/p&gt;
&lt;h2&gt;Unity &lt;span class="caps"&gt;GUI&lt;/span&gt; - the good, the bad, and the&amp;nbsp;ugly&lt;/h2&gt;
&lt;p&gt;Unity&amp;#8217;s &lt;span class="caps"&gt;GUI&lt;/span&gt; toolkit is notoriously wonky, and you&amp;#8217;ll see as we go along that much of the energy here is devoted to working around it&amp;#8217;s limitations.  While we can go pretty far just using the basics, the is a certain &lt;a href="http://usersv2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldbergphotogal4155photo1695691461lr.jpg"&gt;Rube Goldberg&lt;/a&gt; quality to what follows. You&amp;#8217;ve been&amp;nbsp;warned.  &lt;/p&gt;
&lt;p&gt;First let&amp;#8217;s just layout out the actual drawing call - the &lt;code&gt;OnGUI&lt;/code&gt; method of our&amp;nbsp;window:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnityEngine&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;UnityEditor&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;IronPython&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;IronPython.Modules&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;System.Collections.Generic&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="nn"&gt;Microsoft.Scripting.Hosting&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
 &lt;span class="c1"&gt;// derive from EditorWindow for convenience, but this is just a fire-n-forget script    &lt;/span&gt;
 &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ScriptExample&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;EditorWindow&lt;/span&gt;    
 &lt;span class="p"&gt;{&lt;/span&gt;    
    &lt;span class="cm"&gt;/* snip... see previous example for the setup code... */&lt;/span&gt;

     &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;OnGUI&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;    
     &lt;span class="p"&gt;{&lt;/span&gt;    
         &lt;span class="n"&gt;HackyTabSubstitute&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;  &lt;span class="c1"&gt;// this is explained below...&lt;/span&gt;

         &lt;span class="c1"&gt;// top pane with history    &lt;/span&gt;
         &lt;span class="n"&gt;showHistory&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Foldout&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;showHistory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;History&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;showHistory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
             &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginVertical&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpandWidth&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;     
             &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;historyPaneHeight&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;    
             &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Clear history&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
                 &lt;span class="n"&gt;historyText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
             &lt;span class="p"&gt;}&lt;/span&gt;    
             &lt;span class="n"&gt;historyScroll&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginScrollView&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;historyScroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
             &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextArea&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;historyText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     
                 &lt;span class="n"&gt;historyStyle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     
                 &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpandWidth&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;     
                 &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpandHeight&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;            
             &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndScrollView&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;    
             &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndVertical&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;    
         &lt;span class="p"&gt;}&lt;/span&gt;    
         &lt;span class="c1"&gt;// draggable splitter    &lt;/span&gt;
         &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Box&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Height&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpandWidth&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;    
         &lt;span class="c1"&gt;//Lower pane for script editing    &lt;/span&gt;
         &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginVertical&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpandWidth&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;     
             &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpandHeight&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;    
         &lt;span class="n"&gt;scriptScroll&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginScrollView&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scriptScroll&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SetNextControlName&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scriptpane&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="c1"&gt;// note use of GUILayout NOT EditorGUILayout.    &lt;/span&gt;
         &lt;span class="c1"&gt;// TextEditor is not accessible for EditorGUILayout!    &lt;/span&gt;
         &lt;span class="n"&gt;scriptText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TextArea&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scriptText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     
             &lt;span class="n"&gt;consoleStyle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    
             &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpandWidth&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;     
             &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpandHeight&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;            
         &lt;span class="n"&gt;TEditor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextEditor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;GUIUtility&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetStateObject&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextEditor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;GUIUtility&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyboardControl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndScrollView&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;    
         &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BeginHorizontal&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;    
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Clear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpandWidth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;    
         &lt;span class="p"&gt;{&lt;/span&gt;    
             &lt;span class="n"&gt;scriptText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
             &lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FocusControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scriptpane&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="p"&gt;}&lt;/span&gt;    
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Execute and clear&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpandWidth&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
             &lt;span class="n"&gt;Intepret&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scriptText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
             &lt;span class="n"&gt;scriptText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
             &lt;span class="n"&gt;GUI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FocusControl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scriptpane&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="p"&gt;}&lt;/span&gt;    
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Button&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Execute&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ExpandWidth&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
             &lt;span class="n"&gt;Intepret&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scriptText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="p"&gt;}&lt;/span&gt;    
         &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndHorizontal&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;    
         &lt;span class="n"&gt;EditorGUILayout&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EndVertical&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;        
         &lt;span class="c1"&gt;// mimic maya Ctrl+enter = execute    &lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isKey&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;    
             &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyCode&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;KeyCode&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;    
             &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;EventType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;KeyUp&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt;    
             &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;control&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
             &lt;span class="n"&gt;Intepret&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scriptText&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="p"&gt;}&lt;/span&gt;    
         &lt;span class="c1"&gt;// drag the splitter    &lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isMouse&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="p"&gt;==&lt;/span&gt; &lt;span class="n"&gt;EventType&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mouseDrag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    
         &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;historyPaneHeight&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mousePosition&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;28&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
             &lt;span class="n"&gt;Repaint&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    
         &lt;span class="p"&gt;}&lt;/span&gt;    
     &lt;span class="p"&gt;}&lt;/span&gt;

 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you&amp;#8217;re familiar with the dark arts of Unity &lt;span class="caps"&gt;GUI&lt;/span&gt; programming this should be pretty straight forward. If you&amp;#8217;re not, the key to understanding it is to remember that Unity uses what old-schooler&amp;#8217;s call &lt;a href="http://lambda-the-ultimate.org/node/4561"&gt;Immediate mode &lt;span class="caps"&gt;GUI&lt;/span&gt;&lt;/a&gt; , in which each control gets evaluated as it is declared .  There&amp;#8217;s a &lt;a href="http://mollyrocket.com/forums/viewtopic.php?t=134"&gt;case to be made &lt;/a&gt;that immediate mode is better for performance sensitive applications, but if you&amp;#8217;re used to the more typical (aka &amp;#8216;retained&amp;#8217;) mode GUIs in, for example, &lt;span class="caps"&gt;QT&lt;/span&gt; it&amp;#8217;s kind of an oddball way to&amp;nbsp;write.   &lt;/p&gt;
&lt;p&gt;As each &lt;span class="caps"&gt;GUI&lt;/span&gt; element is drawn it reflects and then possibly updates the data that it relies on &amp;#8212; so, for example, we pass the string scriptText  to the &lt;span class="caps"&gt;GUI&lt;/span&gt;.TextArea that draws the script listener pane - and the results of any changes are immediately passed back into scriptText without the courtesy of a callback. This makes it tricky to manage complex state - as you run down the &lt;span class="caps"&gt;GUI&lt;/span&gt; draw, it&amp;#8217;s possible to hit a condition which changes a state and sends you back to the start! This makes it important to keep your state management code very clean and&amp;nbsp;simple.  &lt;/p&gt;
&lt;p&gt;The one bit that may surprise people who do have some Unity experience its the&amp;nbsp;line  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;TEditor&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextEditor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;GUIUtility&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetStateObject&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TextEditor&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;   
                                                  &lt;span class="n"&gt;GUIUtility&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keyboardControl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The TextEditor class is an undocumented bit of Unity arcana - it is a wrapper on the code that actually handles things like typing, selecting or cutting and pasting into a Unity text field.  It has methods for things like setting the cursor location and executing copy-paste operations. Unfortunately, being undocumented, it&amp;#8217;s tricky to figure out what to do with it &amp;#8212; in this example I&amp;#8217;m only using it to preserve the selection position when I do something crazy - as you&amp;#8217;ll see in a&amp;nbsp;moment.  &lt;/p&gt;
&lt;h2&gt;Hacktastic&lt;/h2&gt;
&lt;p&gt;You probably noticed the enigmatic&amp;nbsp;line  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;HackyTabSubstitute&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which leads up to the tricky bit of this example  &amp;#8212; and the reason for my earlier hack&amp;nbsp;disclaimer.  &lt;/p&gt;
&lt;p&gt;Tabs of course are the &lt;a href="http://www.wisegeek.com/what-is-sine-qua-non.htm#didyouknowout"&gt;sine qua non&lt;/a&gt; for Pythonistas.  Unfortunately Unity catches the tab key before you can grab it, so it&amp;#8217;s impossible to &amp;#8216;type&amp;#8217; a tab into a Unity text field.  After banging my head against this for a while, I settled on a pathetic workaround: just cheat and use the tilde key, which is above the tab key on most keyboards and doesn&amp;#8217;t have semantic importance in Python. Our new friend &lt;code&gt;HackyTabSubsitute()&lt;/code&gt; makes sure that each time the &lt;span class="caps"&gt;GUI&lt;/span&gt; is drawn we replace and  backtick characters with indents and any tildes (shift-backtick) with dedents.  You can see how we also preserve the cursor position  by use of the&amp;nbsp;TextEditor.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// use ` and ~ as substitutes for tab and un-tab  &lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;HackyTabSubstitute&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scriptText&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scriptText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;++)&lt;/span&gt; 
    &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;IndexOf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;`&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;gt&lt;/span&gt;&lt;span class="p"&gt;;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="n"&gt;TEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectPos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
        &lt;span class="p"&gt;}&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;IndexOf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="p"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;IndexOf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;StartsWith&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Substring&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;TEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;selectPos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TEditor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; 
        &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;~&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
        &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;Replace&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;`&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="p"&gt;}&lt;/span&gt; 
    &lt;span class="n"&gt;scriptText&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Join&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scriptText&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Repaint&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Assuming you can discipline yourself to use tilde instead of tab, this works like you&amp;#8217;d expect, and it supports indents and dedents in any part of the line, which is handy for python&amp;nbsp;edits.  &lt;/p&gt;
&lt;h2&gt;Running the&amp;nbsp;script&lt;/h2&gt;
&lt;p&gt;As so often happens, it&amp;#8217;s the damn &lt;span class="caps"&gt;GUI&lt;/span&gt; which takes all the work. The actual point of this whole excersize is to let you type in some python and execute it. If you trigger an evaluation - with the buttons or with command + enter, you&amp;#8217;ll fire the Interpret&amp;nbsp;function:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Pass the script text to the interpreter and display results    &lt;/span&gt;
 &lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Intepret&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;texttointerpret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kt"&gt;object&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
     &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
         &lt;span class="n"&gt;Undo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RegisterSceneUndo&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;script&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;scriptSrc&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateScriptSourceFromString&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;texttointerpret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;historyText&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
         &lt;span class="n"&gt;historyText&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;texttointerpret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
         &lt;span class="n"&gt;historyText&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
         &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scriptSrc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScriptScope&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="p"&gt;}&lt;/span&gt;     
     &lt;span class="c1"&gt;// Log exceptions to the console too    &lt;/span&gt;
     &lt;span class="k"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
         &lt;span class="n"&gt;Debug&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LogException&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;historyText&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
         &lt;span class="n"&gt;historyText&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#  &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
     &lt;span class="p"&gt;}&lt;/span&gt;     
     &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
         &lt;span class="c1"&gt;// grab the printbuffer stringIO and get its contents    &lt;/span&gt;
         &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;printbuffer&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptScope&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetVariable&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;printbuffer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;gv&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetMember&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;printbuffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;getvalue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Operations&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Invoke&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gv&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="kt"&gt;var&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateScriptSourceFromString&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;printbuffer = sys.stdout = StringIO.StringIO()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScriptScope&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt; &lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
             &lt;span class="n"&gt;historyText&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
             &lt;span class="k"&gt;foreach&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;    
             &lt;span class="p"&gt;{&lt;/span&gt;    
                 &lt;span class="n"&gt;historyText&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;  &amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
             &lt;span class="p"&gt;}&lt;/span&gt;    
             &lt;span class="n"&gt;historyText&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
         &lt;span class="p"&gt;}&lt;/span&gt;    
         &lt;span class="c1"&gt;// and print the last value for single-statement evals    &lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;!=&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;    
             &lt;span class="n"&gt;historyText&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;#  **&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;**\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
         &lt;span class="p"&gt;}&lt;/span&gt;    
         &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;historyText&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    
         &lt;span class="n"&gt;historyScroll&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="p"&gt;*&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                    
         &lt;span class="n"&gt;Repaint&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;    
     &lt;span class="p"&gt;}&lt;/span&gt;    
     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The heart of the whole business is&amp;nbsp;just  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scriptSrc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScriptScope&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which actually executes the contents of your script window.  As in Maya, we&amp;#8217;ll copy the evaluated text up to the history pane  (historyText += ,etc).  If the event of an exception, we print out the exception into the history window as well, and also push a Unity debug message in case you aren&amp;#8217;t looking at your console window when the problem arises.  Finally, we check to see if the printbuffer StringIO object has been written to duing the script execution  and copy it&amp;#8217;s contents to the history window&amp;nbsp;too.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-DRvP1YjaeZg/UrcrG6xumEI/AAAAAAAABP0/XwuthQ55-iA/s1600/example.png"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-DRvP1YjaeZg/UrcrG6xumEI/AAAAAAAABP0/XwuthQ55-iA/s1600/example.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;V.&amp;nbsp;0.1&lt;/h2&gt;
&lt;p&gt;Before starting the first of this pair of posts I was mostly just musing on how &lt;span class="caps"&gt;TA&lt;/span&gt;-friendly Unity is.   Building out a complete script editor is a perfect example of &lt;span class="caps"&gt;TA&lt;/span&gt; feature creep in&amp;nbsp;action.  &lt;/p&gt;
&lt;p&gt;If you implement a script editor using the hints here you&amp;#8217;ll quickly see what&amp;#8217;s not there things like cut and paste, syntax highlighting, execution of selected text only and support for external files, just to name a few things that would be worth having.  And I should mention that this is demo code, it&amp;#8217;s not the sort of thing I&amp;#8217;d want to turn into a critical path tool without further&amp;nbsp;work.   &lt;/p&gt;
&lt;p&gt;Even so, it&amp;#8217;s been a useful little project.  In this holiday season it&amp;#8217;s taught me to appreciate my blessings - like how many nice little touches you get with a modern text editor. I&amp;#8217;m even feeling more charitable towards the Max and Maya script listeners, since I&amp;#8217;ve walked a mile in their sad patheric old worn out&amp;nbsp;shoes.   &lt;/p&gt;
&lt;p&gt;All that said though, it really is pretty fricking neat that you can add a completely new scripting language to the Unity editor in a couple of hours &amp;#8212; and save your self tons of future time by adding cheapo scripts to automate tedious tasks that aren&amp;#8217;t worth 200 lines of C# curly&amp;nbsp;brackets.  &lt;/p&gt;
&lt;p&gt;At some point I&amp;#8217;ll address the most obvious failings - lack of cut-n-paste is the clear winner! - but first I want to see about implementing the console in a more flexible &lt;span class="caps"&gt;GUI&lt;/span&gt; - for example, I could pop up a &lt;span class="caps"&gt;WPF&lt;/span&gt; window, or maybe even something truly funky like an &lt;a href="python_in_browsers.html"&gt;in-browser python console.&lt;/a&gt;.  In the mean time, if anybody takes this further I&amp;#8217;d love to hear about&amp;nbsp;it.  &lt;/p&gt;</content><category term="unity"></category><category term="python"></category></entry><entry><title>Python in Unity - minor correction</title><link href="https://theodox.github.io/2013/python_in_unity_correction" rel="alternate"></link><published>2013-12-22T09:53:00-08:00</published><updated>2013-12-22T09:53:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2013-12-22:/2013/python_in_unity_correction</id><summary type="html">&lt;p&gt;A quick update to earlier posts about using IronPython in&amp;nbsp;Unity.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Going over the last post about &lt;a href="python_in_unity.html"&gt;Python + Unity&lt;/a&gt;, I did a clean install to make sure the steps I was describing were working correctly and it reminded me about an inportant bit I&amp;#8217;ve left out: how to get the Python stdlib into your Unity&amp;nbsp;IronPython  &lt;/p&gt;
&lt;p&gt;Because Microsoft was the sponsor of the original IronPython project, versions that Microsoft released (including the 2.6.2 that i linked to in the last post) &lt;strong&gt;don&amp;#8217;t include the stdlib&lt;/strong&gt;, which comes with it&amp;#8217;s own license that clashes in some mysterious way with &lt;span class="caps"&gt;MS&lt;/span&gt;&amp;#8217;s licensing terms (even though both &lt;span class="caps"&gt;MS&lt;/span&gt; and the Python Foundation are giving the stuff away for free&amp;#8230; _&lt;em&gt;_sigh&lt;/em&gt;). So to dance around that, they did not include the stdlib &amp;#8212; the &amp;#8216;batteries included&amp;#8217; &amp;#8212; with base&amp;nbsp;install.  &lt;/p&gt;
&lt;p&gt;The remedy is simple - grab a copy of the regular python stdlib from a python 2.6 series install and copy it into the /Lib folder next to the location of your IronPython &lt;span class="caps"&gt;DLL&lt;/span&gt;.  I found it simplest to grab the Python26.zip folder from my Maya install and to expand that into the folder.  I did leave the 3 or 4 files that IPy had installed there on its own intact, I believe &amp;#8212; on pure intuition &amp;#8212; that they are different from the corresponding files in the standard python&amp;nbsp;lib.  &lt;/p&gt;
&lt;h2&gt;Caveat&amp;nbsp;emptor&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;FWIW&lt;/span&gt;, this is a good place to point out that some small percentage of stdlib modules don&amp;#8217;t work under IronPython (an unfortunate example being the handy &lt;code&gt;csv&lt;/code&gt; module for reading comma-delimited data files).  &lt;span class="caps"&gt;AFAIK&lt;/span&gt; there is no authoritative list of which modules do and don&amp;#8217;t work under Ipy. The good news is that, for this application , there is almost always a dotnet native solution to use as an alternative without having to install anything&amp;nbsp;else.  &lt;/p&gt;</content><category term="python"></category><category term="unity"></category></entry><entry><title>Embedding IronPython in Unity = Tech-art hog heaven</title><link href="https://theodox.github.io/2013/python_in_unity" rel="alternate"></link><published>2013-12-21T11:14:00-08:00</published><updated>2013-12-21T11:14:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2013-12-21:/2013/python_in_unity</id><summary type="html">&lt;p&gt;How to embed an IronPython intepreter into Unity editor&amp;nbsp;tools.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update 6/2/2015&lt;/strong&gt; If you are relatively new to Unity, and you&amp;#8217;re here because you&amp;#8217;re looking for ways to work in Python rather than C#, you may also want to check out &lt;a href="boo-who.html"&gt;this 2015 post&lt;/a&gt; about Boo - the very obscure, but very Python-like language in Mono that lets you write Unity games with fast, compiled code by almost-Python syntax.  It&amp;#8217;s always been a part of Unity but a lot of people never knew it was&amp;nbsp;there.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You don&amp;#8217;t work long in games without griping about your engine, and I&amp;#8217;ve got my share of complaints about Unity. But I have to admit that it&amp;#8217;s the best toy in the world for a classic tech-art geek personality. Unlike bigger, more powerful &lt;span class="caps"&gt;AAA&lt;/span&gt; engines, Unity lets you get in under the hood really quickly. The editor environment is extremely extensible - you can add not just dialogs and buttons but 3d widgets and &lt;a href="http://www.thewanderlust.net/blog/2010/03/29/user-interface-design-in-video-games/"&gt;diegetic &lt;span class="caps"&gt;UI&lt;/span&gt; &lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;When I first got my hands on Unity I was a bit disappointed to note that, unlike Maya, it doesn&amp;#8217;t include a built in interactive console environment. The console is a wonderful thing for a &lt;span class="caps"&gt;TA&lt;/span&gt; - it&amp;#8217;s great for printing out data, lightweight automation of the &amp;#8220;find everything in the scene named &amp;#8216;foo&amp;#8217; and rename it to &amp;#8216;bar&amp;#8217;&amp;#8221; variety. So, I thought, is there some way to get this into Unity?  The fact that one could even ask it is a tribute to how flexible Unity is - and as it turned out it was not only possible, it wasn&amp;#8217;t too&amp;nbsp;hard.  &lt;/p&gt;
&lt;h2&gt;You got Python in my&amp;nbsp;Unity!&lt;/h2&gt;
&lt;p&gt;To start with a console needs some kind of scripting language. Not surprisingly, I wanted to see I could do it in Python. Fortunately, this is ridiculously easy thanks to &lt;a href="http://ironpython.codeplex.com/"&gt;IronPython&lt;/a&gt;, the dotnet flavor of Python.  IronPython  runs on dotnet, and so does Unity - so it&amp;#8217;s not tough to plug IronPython into Unity directly.  Here&amp;#8217;s&amp;nbsp;how:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You need a verstion of IronPython that will run on Unity&amp;#8217;s version of &lt;a href="http://www.mono-project.com/Main_Page"&gt;Mono &lt;/a&gt;, which as of this writing (Unity 4.22 , late 2013) is version 2.6.  By a happy coincidence of naming, that points you at &lt;a href="http://ironpython.codeplex.com/downloads/get/159511"&gt;IronPython 2.6.2&lt;/a&gt;.  (I&amp;#8217;ve tried later versions but without much&amp;nbsp;luck).&lt;/li&gt;
&lt;li&gt;Locate the IronPython dlls and the IronPython stdlib in the zip file. You will need&lt;br&gt;
    _
        - IronPython.dll
        - IronPython.Modules.dll
        - Microsoft.Scripting.Core.dll
        - Microsoft.Scripting.dll
        - Microsoft.Scripting.Debugging.dll
        - Microsoft.Scripting.ExtensionAttribute.dll
        -&amp;nbsp;Microsoft.Dynamic.dll&lt;/li&gt;
&lt;li&gt;If you want access to the Python stdlib, you&amp;#8217;ll also need to grab a copy of the python 2.6 /Lib folder &amp;#8212; this is &lt;a href="http://techartsurvival.blogspot.com/2013/12/python-in-unity-minor-correction.html"&gt;not distributed with IronPython 2.6&lt;/a&gt;.  I unzipped the Python26.zip file from my Maya bin directory into the /Lib folder, taking care to leave the handful of IronPython files already&amp;nbsp;there&lt;/li&gt;
&lt;li&gt;Copy all of the above into an &lt;strong&gt;Editor/Plugins/Resources&lt;/strong&gt; folder in Unity. If you&amp;#8217;re not sure what that means:&lt;ul&gt;
&lt;li&gt;Naming a folder &lt;em&gt;Editor&lt;/em&gt; tells Unity it only runs in the editor, not at runtime (IronPython &lt;em&gt;won&amp;#8217;t&lt;/em&gt; run inside Unity on &lt;span class="caps"&gt;IOS&lt;/span&gt; devices, since those never run editor&amp;nbsp;code). &lt;/li&gt;
&lt;li&gt;Naming it a folder &lt;em&gt;Plugins&lt;/em&gt; tells Unity to load dlls from&amp;nbsp;it&lt;/li&gt;
&lt;li&gt;Naming a folder &lt;em&gt;Resources&lt;/em&gt; makes sure it loads before scripts are compiled
For our application we need all three, hence &amp;#8220;Editor/Plugins/Resources/&amp;#8230;&amp;#8221;  You can stick that whole thing into a top level folder for cleanliness if you want. Note the path names in this example:&lt;br&gt;
&lt;a href="http://3.bp.blogspot.com/-uHVdPvrDduM/Uq_uSf5ZxNI/AAAAAAAABO0/H0PMXUJlFso/s1600/layout.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-uHVdPvrDduM/Uq_uSf5ZxNI/AAAAAAAABO0/H0PMXUJlFso/s640/layout.png"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Restart Unity and open up MonoDevelop. If you check the Assembly-CSharp Editor info in the Solution panel you should see all of your IronPython &lt;span class="caps"&gt;DLL&lt;/span&gt;&amp;#8217;s are referenced therein:&lt;br&gt;
&lt;a href="http://3.bp.blogspot.com/-A_kG1rnuiuY/Uq_vrq1bXhI/AAAAAAAABPA/b9v7p3wxpfw/s1600/assembl.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-A_kG1rnuiuY/Uq_vrq1bXhI/AAAAAAAABPA/b9v7p3wxpfw/s400/assembl.png"&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once you&amp;#8217;ve verified that the &lt;span class="caps"&gt;DLL&lt;/span&gt;&amp;#8217;s are in place, its time to test them.  Hosting an IronPython session in another app is much simpler than it sounds. The best resource for how it works is &lt;a href="http://www.voidspace.org.uk/ironpython/embedding.shtml"&gt;Michael Foord&amp;#8217;s Voidspace site&lt;/a&gt; (his &lt;a href="http://www.manning.com/foord/"&gt;book on IronPython&lt;/a&gt; is a great resource if you plan on going far with this , btw) . However in overview the process is pretty&amp;nbsp;simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a [&lt;code&gt;Microsoft.Hosting.ScriptEngine&lt;/code&gt;]((https://github.com/IronLanguages/main/blob/master/Runtime/Microsoft.Scripting/Hosting/ScriptEngine.cs). This is the actual Python&amp;nbsp;interpreter.&lt;/li&gt;
&lt;li&gt;Create a  &lt;a href="https://github.com/IronLanguages/main/blob/master/Runtime/Microsoft.Scripting/Hosting/ScriptScope.cs"&gt;&lt;code&gt;Microsoft.Hosting.ScriptScope&lt;/code&gt;&lt;/a&gt; This corresponds to the global namespace of your interpreter - much like the interpeter namespace in&amp;nbsp;Maya&lt;/li&gt;
&lt;li&gt;Create  a &lt;a href="https://github.com/IronLanguages/main/blob/master/Runtime/Microsoft.Scripting/Hosting/ScriptSource.cs"&gt;&lt;code&gt;Microsoft.Hosting.ScriptSource&lt;/code&gt;&lt;/a&gt; using some text you&amp;#8217;ve entered or&amp;nbsp;composed.&lt;/li&gt;
&lt;li&gt;Execute the&amp;nbsp;script&lt;/li&gt;
&lt;li&gt;Rinse &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Repeat. You are in&amp;nbsp;business!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Script hosting in&amp;nbsp;practice&lt;/h2&gt;
&lt;p&gt;Here&amp;#8217;s an example .cs script that demostrates the process. Put it in an editor folder so that it can access the Unity Editor assembly (it&amp;#8217;s probably a good idea to keep it in the editor folder where you have your plugins/resources folder for&amp;nbsp;cleanliness).   &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; using UnityEngine;    
 using UnityEditor;    
 using IronPython;    
 using IronPython.Modules;    
 using System.Text;    
 // derive from EditorWindow for convenience, but this is just a fire-n-forget script    
 public class ScriptExample : EditorWindow {    
     [MenuItem(&amp;quot;Python/HelloWorld&amp;quot;)]    
     public static void ScriptTest()    
     {    
         // create the engine    
         var ScriptEngine = IronPython.Hosting.Python.CreateEngine();    
         // and the scope (ie, the python namespace)    
         var ScriptScope = ScriptEngine.CreateScope();    
         // execute a string in the interpreter and grab the variable    
         string example = &amp;quot;output = &amp;#39;hello world&amp;#39;&amp;quot;;    
         var ScriptSource = ScriptEngine.CreateScriptSourceFromString(example);    
         ScriptSource.Execute(ScriptScope);    
         string came_from_script = ScriptScope.GetVariable&amp;lt;string&amp;gt;(&amp;quot;output&amp;quot;);    
         // Should be what we put into &amp;#39;output&amp;#39; in the script.    
         Debug.Log(came_from_script);                
     }    
 }
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When it compiles you&amp;#8217;ll get a menu items that activates the script.  When you hit it you should get a debug printout in your console like&amp;nbsp;so.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://4.bp.blogspot.com/-OHCa77GIxGA/UrEnF442YzI/AAAAAAAABPQ/nYBOKL4W1ZI/s1600/hello+world.jpg"&gt;&lt;img alt="" src="http://4.bp.blogspot.com/-OHCa77GIxGA/UrEnF442YzI/AAAAAAAABPQ/nYBOKL4W1ZI/s1600/hello+world.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Like the Maya python interpreter, you need to import the appropriate names so that you can get to them in scripts (it&amp;#8217;s always rather boggled my mind that Maya&amp;#8217;s own interpreter requires you to import cmds or pymel &lt;em&gt;every single freakin&amp;#8217; time&lt;/em&gt;.  IronPython lets you import dotnet assemblies as if they were python modules, and since Unity and the Unity Editor are dotnet assemblies you can get access to the entire Unity environment just by importing them into your&amp;nbsp;interpreter.   &lt;/p&gt;
&lt;p&gt;First, we need to load the assemblies to make them available to the intpereter itself.  In dotnet land that&amp;#8217;s done by loading an assembly.  Once an assembly is loaded, it can be imported using typical Python&amp;nbsp;syntax  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MenuItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python/HelloWorldRuntime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;    
 &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;UnityScriptTest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    
 &lt;span class="p"&gt;{&lt;/span&gt;    
     &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;    
     &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;IronPython&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Hosting&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateEngine&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    
     &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ScriptScope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateScope&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    
     &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;load&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;assemblies&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;unity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;GameObject&lt;/span&gt;    
     &lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Editor&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;don&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;t have to hardcoded paths    &lt;/span&gt;
     &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadAssembly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GameObject&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LoadAssembly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;typeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Editor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Assembly&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;example&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;    
     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import UnityEngine as unity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;import UnityEditor as editor&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AppendLine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;unity.Debug.Log(&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;hello from inside the editor&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
     &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="n"&gt;ScriptSource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ScriptEngine&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CreateScriptSourceFromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ToString&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;    
     &lt;span class="n"&gt;ScriptSource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScriptScope&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running that one generates another console message - but this time from inside the&amp;nbsp;script!  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://3.bp.blogspot.com/-S6g8MqlQ4gg/UrEub33XuBI/AAAAAAAABPg/kJmAVPdZtAI/s1600/hello+2.png"&gt;&lt;img alt="" src="http://3.bp.blogspot.com/-S6g8MqlQ4gg/UrEub33XuBI/AAAAAAAABPg/kJmAVPdZtAI/s1600/hello+2.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Next time: building a&amp;nbsp;console&lt;/h2&gt;
&lt;p&gt;That may not seem like much, but in reality it&amp;#8217;s a big deal. You&amp;#8217;ve got a working script interpreter running in Unity now, with all the power of Python and access to the innards of the Unity environment.  What remains is to build a decent interactive&amp;nbsp;environment. &lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re content with something barebones, you can whip up a simple &lt;span class="caps"&gt;UI&lt;/span&gt; to allow you to type code into a text field and see the results in another text block.  That may be enough for some purposes (hell, half the 3d packages on the market do little more than that).  However a more featured editor is a little tougher and involves a  little hacking to work around the limitations of Unity&amp;#8217;s &lt;span class="caps"&gt;GUI&lt;/span&gt; text handling, which makes it a bit involved for a single post. I&amp;#8217;ll save that one for next&amp;nbsp;time  &lt;/p&gt;</content><category term="unity"></category><category term="python"></category><category term="programming"></category><category term="techart"></category></entry><entry><title>Enter, the Chimaera</title><link href="https://theodox.github.io/2013/enter_the_chimaera" rel="alternate"></link><published>2013-12-13T21:11:00-08:00</published><updated>2013-12-13T21:11:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2013-12-13:/2013/enter_the_chimaera</id><summary type="html">&lt;p&gt;a meditation on Renaissance woodcuts &amp;#8212; seriously! &amp;#8212; and technical&amp;nbsp;art.&lt;/p&gt;</summary><content type="html">&lt;p&gt;In addition to grinding my way through the innards of Maya, I spent a large part of my (sadly wasted) youth in graduate school studying ancient history with a sideline in the Italian Renaissance.   Even though  I don&amp;#8217;t get to use much of this information on a regular basis, I do occasionally get nostalgic for the random bits of weird and wonderful information you can only find in the dim recesses of a big research university&amp;nbsp;library.  &lt;/p&gt;
&lt;p&gt;One of the greatest treasures in my personal museum of useless information is the genre of &lt;em&gt;Wunderzeichenbücher&lt;/em&gt;. The German means &amp;#8220;wonder sign books,&amp;#8221; and it refers to 16th and 17th century genre of illustrated guide to fantastic creatures and strange occurrences. The Wonder Books are a fascinating mix of early scientific investigations, second hand traveller&amp;#8217;s tales, and just plain wacky stuff that is hard to explain as anything other than as the Renaissance equivalent of a&lt;a href="http://www.somethingawful.com/photoshop-phriday/2013/"&gt; SomethingAwful Photoshop Friday&lt;/a&gt;.   &lt;/p&gt;
&lt;p&gt;&lt;a href="http://1.bp.blogspot.com/-zwUK0t-L-mQ/Tp0qaWbmRYI/AAAAAAAAAHY/lEMSFM2qNmw/s1600/blemmyes.jpg"&gt;&lt;img alt="" src="http://1.bp.blogspot.com/-zwUK0t-L-mQ/Tp0qaWbmRYI/AAAAAAAAAHY/lEMSFM2qNmw/s1600/blemmyes.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My particular favorite is the _&lt;a href="http://bibliodyssey.blogspot.com/2011/07/monstrorum-historia.html"&gt;Monstrorum Historia&lt;/a&gt; _ (1642) of &lt;a href="http://www.strangescience.net/aldrovandi.htm"&gt;Aldovandrus&lt;/a&gt;, which is chock full of amazing woodcut drawings of every kind of crazy hybrid creature the Renaissance could dream up, from chimaeras to &lt;a href="http://4.bp.blogspot.com/_GirmG839K7I/TSxxTE_lu0I/AAAAAAAAAG0/plmT3p6rMkQ/s320/Opinicus.gif"&gt;hippogriffs&lt;/a&gt; to &lt;a href="http://upload.wikimedia.org/wikipedia/commons/c/c8/Nuremberg_chronicles_-_Strange_People_-_Umbrella_Foot_(XIIr).jpg"&gt;monopods&lt;/a&gt; and &lt;a href="https://www.google.com/search?q=blemmyes"&gt;blemmyes&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;Besides the awesome graphics (how&amp;#8217;s &lt;em&gt;that&lt;/em&gt; for retro, pixel kiddies!)  I&amp;#8217;ve always found these images compelling because Tech Art is the domain of crazy hybrids.  We&amp;#8217;re artist/programmers, animator/logicians,  scultpor/scripters and graphics-nerd/visionaries. So adding dogs heads or chicken feet to our other attributes doesn&amp;#8217;t seem like too big a&amp;nbsp;stretch.  &lt;/p&gt;
&lt;p&gt;So, with that an excuse I give you the Chimaera, my personal totem&amp;nbsp;animal  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://farm7.staticflickr.com/6007/5929662311_1a53d72f4b.jpg"&gt;&lt;img alt="" src="http://farm7.staticflickr.com/6007/5929662311_1a53d72f4b.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As an aside I will point out that this one is not exactly pulled out of some Renaissance dude&amp;#8217;s &lt;em&gt;posteriore.&lt;/em&gt; The artist must have seen this amazing Etruscan&amp;nbsp;bronze:  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://media-2.web.britannica.com/eb-media/90/28190-004-6970B6F6.jpg"&gt;&lt;img alt="" src="http://media-2.web.britannica.com/eb-media/90/28190-004-6970B6F6.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can even see how the woodcut artist included the stump of the tail. When the 2000 year original was dug up in 1553 the tail was missing.  It was restored in the 1800s.  Bug&amp;nbsp;fix! &lt;/p&gt;</content><category term="techart"></category></entry><entry><title>Python in browsers</title><link href="https://theodox.github.io/2013/python_in_browsers" rel="alternate"></link><published>2013-12-12T21:05:00-08:00</published><updated>2013-12-12T21:05:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2013-12-12:/2013/python_in_browsers</id><summary type="html">&lt;p&gt;A quick link to python-in-the-browser&amp;nbsp;projects&lt;/p&gt;</summary><content type="html">&lt;p&gt;In case folks are wondering about the tantalizing prospect of running python in browser (as an alternative to or escape from JavaScript) &lt;a href="http://stromberg.dnsalias.org/~strombrg/pybrowser/python-browser.html"&gt;this is a great roundup &lt;/a&gt;of where things sit as of now (late&amp;nbsp;2013).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: as of today (2016)the new hotness on the horizon is &lt;a href="https://hacks.mozilla.org/2015/12/compiling-to-webassembly-its-happening/"&gt;WebAssembly&lt;/a&gt; This is almost sure to make for interestng python-in-the-browser developments in the next year or&amp;nbsp;so&lt;/p&gt;
&lt;/blockquote&gt;</content><category term="web"></category><category term="python"></category></entry><entry><title>…And I thought we had it bad…</title><link href="https://theodox.github.io/2013/and_i_thought_we_had_it_bad" rel="alternate"></link><published>2013-12-12T20:37:00-08:00</published><updated>2013-12-12T20:37:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2013-12-12:/2013/and_i_thought_we_had_it_bad</id><summary type="html">&lt;p&gt;A tech artist looks at web development, recoils in&amp;nbsp;horror&lt;/p&gt;</summary><content type="html">&lt;p&gt;Bitching about all the random stuff you have to wire together is the key rituals of the tech-art faith.  You inherit all sorts of crazy decisions from Max, Maya, plugin authors, game engine teams, and random tools you find lying around and then some how have to lash it all together into a &lt;a href="http://www.rubegoldberg.com/gallery#"&gt;Rube Goldberg contraption&lt;/a&gt; that (hopefully) hides the wackiness from your&amp;nbsp;users  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_2001285523_lr.jpg"&gt;&lt;img alt="" src="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_2001285523_lr.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course, this is a huge pain in the&amp;nbsp;butt  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_1673126806_lr.jpg"&gt;&lt;img alt="" src="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_1673126806_lr.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But I never realized that we have it _easy. _Until I sat down to write a web&amp;nbsp;app.  &lt;/p&gt;
&lt;p&gt;After lots of fruitless searching for commercial asset management system that would help us manage versions, review status and so on for our assets I finally broke down and decided to write my own. While &lt;a href="http://www.shotgunsoftware.com/"&gt;Shotgun&lt;/a&gt; has gotten much slicker over the last year and &lt;a href="http://www.southpawtech.com/"&gt;Tactic&lt;/a&gt; is both open-source and Python-based, neither works well with Perforce (Tactic has been promising P4 integration for over a year, with no public release that I&amp;#8217;ve been able to find) and both are very heavy on the kind of features you need to handle a huge Hollywood-style team with hundreds of Anonymous Drones.  Our tiny team doesn&amp;#8217;t need pretty gantt charts and time-stamped hourly activity&amp;nbsp;reports.  &lt;/p&gt;
&lt;p&gt;&lt;a href="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_2039295957_lr.jpg"&gt;&lt;img alt="" src="http://users_v2.section101.com/memberdata/ru/rubegoldberg/photos/rubegoldberg_photo_gal_4152_photo_2039295957_lr.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Web Dev&amp;nbsp;0.1B&lt;/h2&gt;
&lt;p&gt;The basic plan of attack is quite simple. Luckily the problem that usually damns these kinds of setups &amp;#8212; making sure that the database and the game are actually in sync on things like, say, texture size or polycount &amp;#8212; isn&amp;#8217;t a big problem since all of that is, blessedly, available in Unity with minimal work. The real goal of this system is to make sure people know what&amp;#8217;s placeholder art, what&amp;#8217;s work in progress, what has bugs, and so on..  To that, I&amp;#8217;ve got a MySQL database sitting in our data center and some tools in the Unity editor that can collect and forward info to the database.  In Unity I&amp;#8217;ve also hacked the editor so that the current status of the asset is displayed over the asset thumbnail in the project view so the users can see where they stand without going out to another&amp;nbsp;tool.  &lt;/p&gt;
&lt;p&gt;I love Unity to death, but even I can&amp;#8217;t convince myself to like Unity&amp;#8217;s built in procedural &lt;span class="caps"&gt;GUI&lt;/span&gt; language; it&amp;#8217;s clunky and formulaic &amp;#8212; and because it&amp;#8217;s orientation is so procedural it is extremely slow for anything with lots of controls.  Big Data &amp;#8212; spreadsheets, long lists, or fancy &lt;span class="caps"&gt;MVVM&lt;/span&gt; views are just not happening in the Unity Editor &lt;span class="caps"&gt;UI&lt;/span&gt; layer.  So &amp;#8212; to return at long last to the original seed of this post - I decided to write a web app to provide the producers and artists with the kind of overview data they&amp;#8217;d need to see how things were progressing all across the project, rather than just the status of individual&amp;nbsp;assets.  &lt;/p&gt;
&lt;h2&gt;The Devil You&amp;nbsp;Know&lt;/h2&gt;
&lt;p&gt;I did a bunch of research trying to figure out how to do this without having to start a whole new career as a web developer. In all honesty I was mostly hoping to avoid having to escape from the comfy confines of Python and C# (I can&amp;#8217;t really call &lt;span class="caps"&gt;SQL&lt;/span&gt; &amp;#8216;comfy&amp;#8217; but at least it&amp;#8217;s &lt;em&gt;familiar&lt;/em&gt;).  In particular my limited experiments with JavaScript (the real kind, not the beefed up Unity version) have been so uniformly unpleasant that I was desperate to avoid tangling with it at all costs.  I played with browser Pythons such as &lt;a href="http://www.brython.info/"&gt;Brython&lt;/a&gt; , &lt;a href="http://www.skulpt.org/"&gt;Skulpt&lt;/a&gt;, and the &lt;a href="http://jimmy.schementi.com/2010/03/pycon-2010-python-in-browser.html"&gt;IronPython &lt;span class="caps"&gt;DLR&lt;/span&gt; host&lt;/a&gt;.  There&amp;#8217;s also projects like &lt;a href="http://pyjs.org/"&gt;PyJS &lt;/a&gt;and &lt;a href="https://bitbucket.org/pyjeon/rapydscript"&gt;RapydScript&lt;/a&gt;, which compile Python (or in the case of RapydScript a &amp;#8216;pythonalike&amp;#8217;) to&amp;nbsp;Javascript.   &lt;/p&gt;
&lt;p&gt;All of which are really cool - but none of which are tightly integrated into the bewildering complexity of modern web development. If all I wanted to do was &lt;em&gt;program_in the browser, I could stick with Python, take the speed hit and be done.  After more obsessive reading, however, I sadly concluded that the &lt;span class="caps"&gt;HTML&lt;/span&gt;-verse too crazy a place for any tacked-on, ex-post-facto solution &amp;#8212; even one as fricking cool as a complete Python interpreter written in Javascript.  The real hard part is not the programming, which is mostly &lt;span class="caps"&gt;UI&lt;/span&gt; level stuff &amp;#8212; hide this! highlight that! &amp;#8212; it&amp;#8217;s controlling the infinite number of stylistic choices that are involved in designing a functional and attractive layout in &lt;span class="caps"&gt;HTML&lt;/span&gt;.  The more I looked at it the more I felt like I needed to follow the herd and do what the &amp;#8216;real&amp;#8217; web developers do &amp;#8212; which means not only learning &lt;span class="caps"&gt;HTML&lt;/span&gt; itself, but also &lt;span class="caps"&gt;CSS&lt;/span&gt; &amp;#8212; the language that defines style sheets for different graphic elements &amp;#8212; a language which is not the same as &lt;span class="caps"&gt;HTML&lt;/span&gt; - or the same as Javascript. ( Remember I said tech artists have it pretty good compared to web programmers? Imagine having to learn Mel, Python and Maxscript _all at the same time&lt;/em&gt; just to get started as a &lt;span class="caps"&gt;TA&lt;/span&gt;.  There but for the&amp;nbsp;grace&amp;#8230;)  &lt;/p&gt;
&lt;p&gt;This could be worse. Thank heavens a friend at work pointed me at &lt;a href="http://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt;, which is Twitter&amp;#8217;s clean and relatively simple to learn web gui framework. It lets you create nicely formatted modern looking pages without knowing too much about what really goes on in the tangled jungle of curly braces that define your &lt;span class="caps"&gt;CSS&lt;/span&gt;.  It still takes some doing to handle the &lt;span class="caps"&gt;GUI&lt;/span&gt; glue &amp;#8220;do this when I push the button&amp;#8221; stuff but its less annoying than, say, &lt;span class="caps"&gt;QT&lt;/span&gt; or &lt;span class="caps"&gt;WPF&lt;/span&gt;.  &lt;/p&gt;
&lt;p&gt;It&amp;#8217;s still incredibly annoying to write scads of parentheses and curlies for even the most trivial&amp;nbsp;task  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]&lt;/code&gt;&lt;br&gt;
&lt;code&gt;evens = [x for x in numbers if x % 2 == 0]&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;Is aesthetically and morally superior to&lt;br&gt;
&lt;code&gt;``numbers=[1,2,3,4,5,6,7,8,9,10];  
evens=new Array;  
var _$tmp1_data=_$pyva_iter(numbers);&lt;/code&gt;&lt;br&gt;
&lt;code&gt;var _$tmp2_len=_$tmp1_data.length;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;for(var _$tmp3_index=0;_$tmp3_index&amp;lt;_$tmp2_len;_$tmp3_index++)&lt;/code&gt;&lt;br&gt;
&lt;code&gt;{&lt;/code&gt;&lt;br&gt;
&lt;code&gt;x=_$tmp1_data[_$tmp3_index];  
    if((_.isEqual((x % 2),0)))&lt;/code&gt;&lt;br&gt;
&lt;code&gt;{  
        evens.append(x);&lt;/code&gt;&lt;br&gt;
&lt;code&gt;}  
     }&lt;/code&gt;&lt;br&gt;
&lt;code&gt;&lt;/code&gt;But on the other hand you get lots of nice graphical goodies to soften the pain. I&amp;#8217;m experimenting with &lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt;, which has Pythonic brevity and clarity &amp;#8212; but it&amp;#8217;s not Python and if you go in thinking it is (as I have on a few occasions) you&amp;#8217;ll get your knickers in a&amp;nbsp;twist.   &lt;/p&gt;
&lt;h2&gt;The&amp;nbsp;backside&lt;/h2&gt;
&lt;p&gt;Fortunately, the server side code is actually much less of a hassle than I had feared. Given the nature of the problem &amp;#8212; selecting and filtering data from a database and then spitting it out to users &amp;#8212; the natural choice for me was &lt;a href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;, which has several&amp;nbsp;advantages:  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A great object-relational mapper (ie, you get to program with nice objects instead of gnarly &lt;span class="caps"&gt;SQL&lt;/span&gt; queries, cursors, and&amp;nbsp;rows&lt;/li&gt;
&lt;li&gt;A decent templating language. When I wrote the first Python build server for &lt;a href="http://undeadlabs.com/"&gt;the lab&lt;/a&gt; I did this all by myself with string.Template, and it was a pain in the&amp;nbsp;pants.&lt;/li&gt;
&lt;li&gt;Hardly a curly bracket in&amp;nbsp;sight&lt;/li&gt;
&lt;li&gt;Lots of documentation and tutorials on the web, which is comforting for the terrified novice (=&amp;nbsp;me).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After all of the consternation I went to researching web client stuff, this was a snap choice. And then the fun&amp;nbsp;began.  &lt;/p&gt;
&lt;p&gt;The server is going to be running on a Mac (the tech art mac that we use for builds) so it will be ready to migrate to a Linux host later.  No problem, I use a mac laptop and do a fair amount of python on the mac already.,  So we want to install Django on the&amp;nbsp;mac.  &lt;/p&gt;
&lt;p&gt;We need to install easy-setup (not sure why that doesn&amp;#8217;t come with the default mac python install)&lt;br&gt;
&amp;#8230;.So we can install pip&lt;br&gt;
&amp;#8230;&amp;#8230;.So we can install Django&lt;br&gt;
&amp;#8230;&amp;#8230; which needs MySQLdb&lt;br&gt;
&amp;#8230;&amp;#8230;&amp;#8230;. which needs MySQL&lt;br&gt;
&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;..which &lt;a href="http://stackoverflow.com/questions/1448429/how-to-install-mysqldb-python-data-access-library-to-mysql-on-mac-os-x"&gt;doesn&amp;#8217;t install correctly on &lt;span class="caps"&gt;OSX&lt;/span&gt; the way it is supposed to&lt;/a&gt;&lt;br&gt;
&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;..so we need to install a Ruby package manager that can install MySql and MysqlDb&lt;br&gt;
&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;..so we install &lt;a href="http://brew.sh/"&gt;Homebrew&lt;/a&gt;&lt;br&gt;
&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;.which needs Xcode&lt;br&gt;
&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;.which requires you to accept the Xcode license after updates&lt;br&gt;
&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;and then to install the Xcode commmand line tools&lt;br&gt;
&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;so we can properly rebuild and install MySQL&lt;br&gt;
&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;so we can install MySQLdb&lt;br&gt;
&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;&amp;#8230;so we can point Django at&amp;nbsp;MySQL  &lt;/p&gt;
&lt;p&gt;_Eh voila! _We&amp;#8217;re done!  It&amp;#8217;s a good thing Mac&amp;#8217;s are the elegant operating system for people who don&amp;#8217;t go in for all that techie&amp;nbsp;stuff.  &lt;/p&gt;
&lt;p&gt;Evidently. though,  this sort of thing is just business as usual for the real web developers. I guess I&amp;#8217;ll stop bitching about Autodesk&amp;#8217;s lousy license manager from now on.  The theme of this project is learning to appreciate just how good we&amp;#8217;ve got it&amp;nbsp;:)  &lt;/p&gt;
&lt;p&gt;So, with all that done, I grabbed a trial of &lt;a href="http://www.jetbrains.com/pycharm/"&gt;PyCharm &lt;/a&gt;. As an &lt;span class="caps"&gt;IDE&lt;/span&gt; I find it a bit clunky, but it&amp;#8217;s got good Django integration. Off to the&amp;nbsp;races  &lt;/p&gt;
&lt;h2&gt;SQLitis&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;In this next bit I&amp;#8217;m going to touch lightly on how Django does and doesn&amp;#8217;t make it easy to work with a database using familiar python techniques. The &lt;span class="caps"&gt;TL&lt;/span&gt;;&lt;span class="caps"&gt;DR&lt;/span&gt; is that it works pretty well, with gotchas. If you&amp;#8217;re unfamiliar with &lt;span class="caps"&gt;SQL&lt;/span&gt; terminology, databases, etc, you may want skim (and if you&amp;#8217;re an expert, you&amp;#8217;ll probably roll your eyes).  This isn&amp;#8217;t a how-to or tutorial - there are &lt;a href="http://gettingstartedwithdjango.com/"&gt;great ones&lt;/a&gt; out there.  It&amp;#8217;s just a quick glance at something that many &lt;span class="caps"&gt;TA&lt;/span&gt;&amp;#8217;s may find useful in coming&amp;nbsp;years.&lt;/em&gt;  &lt;/p&gt;
&lt;p&gt;The nice part of the Django workflow is that you can get Django to generate your data models for you by analysing your existing database.&amp;nbsp;Running  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;python django-admin.py inspectdb&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;On your database will spit out the Python class definitions for your data models to stdout, where you can cut and paste them into your code.  I already had a decent database schema (I took most of my n00b lumps with that sort of thing building a bug tracking database for &lt;a href="http://undeadlabs.com/about-state-of-decay/"&gt;&lt;span class="caps"&gt;SOD&lt;/span&gt;&lt;/a&gt;) and getting the object models built took about half an hour from &amp;#8216;starting to look at the docs&amp;#8217; to &amp;#8216;done&amp;#8217;. The little &lt;span class="caps"&gt;GUI&lt;/span&gt; that PyCharm gives you for django-admin is particularly helpful&amp;nbsp;here.  &lt;/p&gt;
&lt;p&gt;There are a couple of&amp;nbsp;hitches.   &lt;/p&gt;
&lt;p&gt;Django could be smarter about tables which don&amp;#8217;t use numerical &lt;span class="caps"&gt;ID&lt;/span&gt; columns as their primary keys &amp;#8212; which bugs my inner &lt;a href="https://www.simple-talk.com/sql/t-sql-programming/a-tale-of-identifiers/"&gt;Joe Celko&lt;/a&gt; &amp;#8212; and I ended up having to add numeric &lt;span class="caps"&gt;ID&lt;/span&gt; columns to some of my tables in order to placate Django. Evidently there are ways to get in under the hood an tweak the actual sql that is emitted from your models to get around this but I&amp;#8217;ve got other things to worry&amp;nbsp;about.   &lt;/p&gt;
&lt;p&gt;It&amp;#8217;s also a bit tricky to get exactly the info you want.  For simple queries of the _get everything in this table named &amp;#8216;foo&amp;#8217; _ variety Django works fine.  You can even do &lt;a href="http://www.w3resource.com/sql/joins/using-a-where-cluase-to-join-two-tables-related-by-a-single-column-primary-key-or-foriegn-key-pair.php"&gt;&lt;span class="caps"&gt;SQL&lt;/span&gt; joins&lt;/a&gt;, where you create a new pseudo table by picking entries from a set of tables with common keys - in Django you can trace back through a chain or table to table relationships just by following a  set of properties on your data objects.  In my case I have a table of assets (which describes the assets&amp;#8217; names, location, and so on) and another table of asset types which is basically an Enum describing all the asset types - models, textures, animations and whatnot.  In &lt;span class="caps"&gt;SQL&lt;/span&gt; you&amp;#8217;d connect them up using a &lt;a href="http://www.w3schools.com/sql/sql_foreignkey.asp"&gt;foreign key &lt;/a&gt;  to make sure that all the links were valid, and then use a &lt;span class="caps"&gt;JOIN&lt;/span&gt; statement to produce a combined result.  For example I have two tables somewhat like&amp;nbsp;this:  &lt;/p&gt;
&lt;h4&gt;Assets&amp;nbsp;table&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Asset&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Thumbnail&lt;/td&gt;
&lt;td&gt;Image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Path&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Type&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Asset type&amp;nbsp;table&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class="caps"&gt;ID&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And if I want to grab a combined view that shows the assets along with their types I might do something&amp;nbsp;like  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT assets.asset, assets.path, asset_types.name  
FROM assets  
INNER JOIN asset_types  
ON asset_types.id = assets.type
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Which seems kind of funky and 1970&amp;#8217;s to read, but it&amp;#8217;s a very powerful technique - this would give back all of the assets and their types without any tedious loop writing on the receiving end.  Django handles this for you nicely in its object model: as long as I made sure to let Django know that the &amp;#8216;type&amp;#8217; I want comes from the asset types table and the &amp;#8216;asset&amp;#8217; comes from the assets table, I can just grab it&amp;nbsp;with  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;asset_list = Assets.objects.all()  # collect all the assets  
for each_asset in asset_list:  
  print asset.type.name
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is fine and dandy for many cases, but it does have some pitfalls. One of the great things about joins is that you can use them to substitute for conventional if-then logic. For example, in my case the I have a table of &amp;#8216;history&amp;#8217; entries, which record changes in status (say from &amp;#8216;ready for review&amp;#8217; to &amp;#8216;approved&amp;#8217;) along with times, dates and comments so we can see when things were &lt;span class="caps"&gt;OK&lt;/span&gt;&amp;#8217;d for use in the game.  To get the current status of the object  I join the history table to&amp;nbsp;itself:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SELECT  
h1.idhistory, h1.asset, h1.changed  
FROM (history h1 left join history h2  
      ON  
     (h1.asset = h2.asset and  h2.changed &amp;gt; h1.changed)  
     )  
      WHERE isnull(h2.asset)  
ORDER BY h1.asset
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;span class="caps"&gt;LEFT&lt;/span&gt; &lt;span class="caps"&gt;JOIN&lt;/span&gt; tries to run all combinations of dates in h2 against matching assets/date combinations in h1.  In all but one cases these will succeed (since the last date will be larger than all but the latest date). By looking for the failed join (with &amp;#8220;isnull (h2.assets)&amp;#8221;) we can grab the latest entry.  This seems like a lot of work but it&amp;#8217;s way faster than a conventional loop-through-them-all-and-pick-the-latest-one approach; plus it is done in the server, in highly optimized C code, instead of on the client in (slow)&amp;nbsp;Python.  &lt;/p&gt;
&lt;p&gt;Unfortunately this is a tricky one to get right with Django - at least, in my current (4 days and counting) aquaintance with Django.  I ended up having to work around it by creating a &lt;span class="caps"&gt;SQL&lt;/span&gt; view - basically a stored query - and grabbing just the id&amp;#8217;s of the history entries I wanted from their, and then doing a separate query to get the &amp;#8216;real&amp;#8217; assets using the object technique I outlined earlier. Works fine but it is two server hits where one would do. C&amp;#8217;est la&amp;nbsp;vie.  &lt;/p&gt;
&lt;h2&gt;Last&amp;nbsp;words&lt;/h2&gt;
&lt;p&gt;So, it&amp;#8217;s been a mixed bag getting this thing off the ground.  Django is pretty cool - one of the nice things about working with web tech is that itt has several orders of magnitude more users than typical &lt;span class="caps"&gt;TA&lt;/span&gt; tech - the  speed with which things evolve in this space is pretty dizzying if you&amp;#8217;re used to the typical lackadaisical pace of tech advances from &lt;span class="caps"&gt;ADSK&lt;/span&gt;.  Web tools are clearly going to be a Big Thing in the coming years - the ease of distribution and graphical panache you can get makes the old school batch-file and script world seem pretty pokey.  On the other hand, web tech  really is a Rube Goldberg machine - it&amp;#8217;s made up of technologies that have vastly outgrown their original purposes, and is plagued by competing vendors and developer faddism.  Javascript is icky, and the idea of having to learn at least 3 different languages ( &lt;span class="caps"&gt;JS&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt;, and &lt;span class="caps"&gt;HTML&lt;/span&gt;) just to get anything done is pretty&amp;nbsp;irritating.  &lt;/p&gt;
&lt;p&gt;Fortunately the core of the &lt;span class="caps"&gt;TA&lt;/span&gt; personality is pure stubbornness.  We have our jobs because we don&amp;#8217;t like to rest until we figure out what the hell is going on. It&amp;#8217;s a very, very valuable trait to have if you&amp;#8217;re getting into web tools&amp;nbsp;:)  &lt;/p&gt;</content><category term="python"></category><category term="programming"></category><category term="web"></category></entry><entry><title>Late for the revolution</title><link href="https://theodox.github.io/2013/late_for_the_revolution" rel="alternate"></link><published>2013-12-11T22:02:00-08:00</published><updated>2013-12-11T22:02:00-08:00</updated><author><name>Steve Theodore</name></author><id>tag:theodox.github.io,2013-12-11:/2013/late_for_the_revolution</id><summary type="html">&lt;p&gt;An introduction to this&amp;nbsp;blog&lt;/p&gt;</summary><content type="html">&lt;p&gt;Since the demise of the late, lamented &lt;a href="http://www.gdcvault.com/gdmag"&gt;Game Developer Magazine&lt;/a&gt;, I&amp;#8217;ve been wondering if it&amp;#8217;s time to find some other writing outlet. Most of my spare writing energy for last year was consumed by shipping &lt;a href="http://undeadlabs.com/about-state-of-decay/"&gt;State Of Decay&lt;/a&gt; and working on a book project for Focal&amp;nbsp;Press.  &lt;/p&gt;
&lt;p&gt;Now that both of those are safely in the past I&amp;#8217;m going to spend a few weeks noodling on this to see if it&amp;#8217;s congenial.  I&amp;#8217;m working on another book outline at the moment, and as topics of interest come up - or as I need to think out loud about them - i&amp;#8217;ll try floating them here to see how they look in print.  I also plan on ruminating on knotty tech-art questions, programming problems, and maybe throwing in the occasional classical allusion to make myself look&amp;nbsp;smart.  &lt;/p&gt;
&lt;p&gt;No cat pictures though.  Not my&amp;nbsp;bag.&lt;/p&gt;</content><category term="blogging"></category><category term="articles"></category></entry></feed>